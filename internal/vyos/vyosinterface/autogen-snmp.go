// Code generated by /workspaces/terraform-provider-vyos/tools/build-vyos-infterface-definition-structs/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/vyos/schema/interfacedefinition"
)

func snmp() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: "interfaceDefinition",
		},
		Node: []*interfacedefinition.Node{{
			XMLName: xml.Name{
				Local: "node",
			},
			NodeNameAttr: "service",
			Children: []*interfacedefinition.Children{{
				XMLName: xml.Name{
					Local: "children",
				},
				Node: []*interfacedefinition.Node{{
					XMLName: xml.Name{
						Local: "node",
					},
					NodeNameAttr: "snmp",
					OwnerAttr:    "${vyos_conf_scripts_dir}/snmp.py",
					Properties: []*interfacedefinition.Properties{{
						XMLName: xml.Name{
							Local: "properties",
						},
						Help:     []string{"Simple Network Management Protocol (SNMP)"},
						Priority: []string{"900"},
					}},
					Children: []*interfacedefinition.Children{{
						XMLName: xml.Name{
							Local: "children",
						},
						Node: []*interfacedefinition.Node{{
							XMLName: xml.Name{
								Local: "node",
							},
							NodeNameAttr: "v3",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Simple Network Management Protocol (SNMP) v3"},
							}},
							Children: []*interfacedefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								TagNode: []*interfacedefinition.TagNode{{
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "group",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Specifies the group with name groupname"},
									}},
									Children: []*interfacedefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*interfacedefinition.LeafNode{{
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "mode",
											DefaultValue: []string{"ro"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Define access permission"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(ro|rw)"},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ro",
													Description: "Read-Only",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "rw",
													Description: "read write",
												}},
												ConstraintErrorMessage: []string{"Authorization type must be either 'rw' or 'ro'"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"ro rw"},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "seclevel",
											DefaultValue: []string{"auth"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Security levels"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(noauth|auth|priv)"},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "noauth",
													Description: "Messages not authenticated and not encrypted (noAuthNoPriv)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "auth",
													Description: "Messages are authenticated but not encrypted (authNoPriv)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "priv",
													Description: "Messages are authenticated and encrypted (authPriv)",
												}},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"noauth auth priv"},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "view",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Defines the name of view"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"service snmp v3 view"},
												}},
											}},
										}},
									}},
								}, {
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "trap-target",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Defines SNMP target for inform or traps for IP"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Validator: []*interfacedefinition.Validator{{
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr: "ipv4-address",
											}, {
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr: "ipv6-address",
											}},
										}},
										ValueHelp: []*interfacedefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ipv4",
											Description: "IP address of trap target",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ipv6",
											Description: "IPv6 address of trap target",
										}},
									}},
									Children: []*interfacedefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*interfacedefinition.Node{{
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "auth",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Defines the privacy"},
											}},
											Children: []*interfacedefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*interfacedefinition.LeafNode{{
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "encrypted-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the encrypted key for authentication"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[0-9a-f]&"},
														}},
														ConstraintErrorMessage: []string{"Encrypted key must only contain hex digits"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the clear text key for authentication"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{8,}"},
														}},
														ConstraintErrorMessage: []string{"Key must contain 8 or more characters"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "type",
													DefaultValue: []string{"md5"},
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Define used protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(md5|sha)"},
														}},
														ValueHelp: []*interfacedefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "md5",
															Description: "Message Digest 5",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "sha",
															Description: "Secure Hash Algorithm",
														}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"md5 sha"},
														}},
													}},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "privacy",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Defines the privacy"},
											}},
											Children: []*interfacedefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*interfacedefinition.LeafNode{{
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "encrypted-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the encrypted key for privacy protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[0-9a-f]&"},
														}},
														ConstraintErrorMessage: []string{"Encrypted key must only contain hex digits"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the clear text key for privacy protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{8,}"},
														}},
														ConstraintErrorMessage: []string{"Key must contain 8 or more characters"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "type",
													DefaultValue: []string{"des"},
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the protocol for privacy"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(des|aes)"},
														}},
														ValueHelp: []*interfacedefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "des",
															Description: "Data Encryption Standard",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "aes",
															Description: "Advanced Encryption Standard",
														}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"des aes"},
														}},
													}},
												}},
											}},
										}},
										LeafNode: []*interfacedefinition.LeafNode{{
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "port",
											DefaultValue: []string{"162"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Port number used by connection"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*interfacedefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-65535",
													}},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-65535",
													Description: "Numeric IP port",
												}},
												ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "protocol",
											DefaultValue: []string{"udp"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Protocol to be used (TCP/UDP)"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(udp|tcp)"},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "udp",
													Description: "Listen protocol UDP",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "tcp",
													Description: "Listen protocol TCP",
												}},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"udp tcp"},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "type",
											DefaultValue: []string{"inform"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specifies the type of notification between inform and trap"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(inform|trap)"},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "inform",
													Description: "Use INFORM",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "trap",
													Description: "Use TRAP",
												}},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"inform trap"},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "user",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Defines username for authentication"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"service snmp v3 user"},
												}},
											}},
										}},
									}},
								}, {
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "user",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Specifies the user with name username"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"[^\\(\\)\\|\\-]+"},
										}},
										ConstraintErrorMessage: []string{"Illegal characters in name"},
									}},
									Children: []*interfacedefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*interfacedefinition.Node{{
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "auth",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specifies the auth"},
											}},
											Children: []*interfacedefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*interfacedefinition.LeafNode{{
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "encrypted-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the encrypted key for authentication"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[0-9a-f]&"},
														}},
														ConstraintErrorMessage: []string{"Encrypted key must only contain hex digits"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the clear text key for authentication"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{8,}"},
														}},
														ConstraintErrorMessage: []string{"Key must contain 8 or more characters"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "type",
													DefaultValue: []string{"md5"},
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Define used protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(md5|sha)"},
														}},
														ValueHelp: []*interfacedefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "md5",
															Description: "Message Digest 5",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "sha",
															Description: "Secure Hash Algorithm",
														}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"md5 sha"},
														}},
													}},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "privacy",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Defines the privacy"},
											}},
											Children: []*interfacedefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*interfacedefinition.LeafNode{{
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "encrypted-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the encrypted key for privacy protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[0-9a-f]&"},
														}},
														ConstraintErrorMessage: []string{"Encrypted key must only contain hex digits"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the clear text key for privacy protocol"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{8,}"},
														}},
														ConstraintErrorMessage: []string{"Key must contain 8 or more characters"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "type",
													DefaultValue: []string{"des"},
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines the protocol for privacy"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(des|aes)"},
														}},
														ValueHelp: []*interfacedefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "des",
															Description: "Data Encryption Standard",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "aes",
															Description: "Advanced Encryption Standard",
														}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"des aes"},
														}},
													}},
												}},
											}},
										}},
										LeafNode: []*interfacedefinition.LeafNode{{
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "group",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specifies group for user name"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"service snmp v3 group"},
												}},
											}},
										}, {
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "mode",
											DefaultValue: []string{"ro"},
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Define access permission"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(ro|rw)"},
												}},
												ValueHelp: []*interfacedefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ro",
													Description: "Read-Only",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "rw",
													Description: "read write",
												}},
												ConstraintErrorMessage: []string{"Authorization type must be either 'rw' or 'ro'"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"ro rw"},
												}},
											}},
										}},
									}},
								}, {
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "view",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Specifies the view with name viewname"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"[^\\(\\)\\|\\-]+"},
										}},
										ConstraintErrorMessage: []string{"Illegal characters in name"},
									}},
									Children: []*interfacedefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										TagNode: []*interfacedefinition.TagNode{{
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "oid",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specifies the oid"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[0-9]+(\\.[0-9]+)&"},
												}},
												ConstraintErrorMessage: []string{"OID must start from a number"},
											}},
											Children: []*interfacedefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*interfacedefinition.LeafNode{{
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "exclude",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Exclude is an optional argument"},
													}},
												}, {
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "mask",
													Properties: []*interfacedefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Defines a bit-mask that is indicating which subidentifiers of the associated subtree OID should be regarded as significant"},
														Constraint: []*interfacedefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[0-9a-f]{2}([\\.:][0-9a-f]{2})&"},
														}},
														ConstraintErrorMessage: []string{"MASK is a list of hex octets, separated by '.' or ':'"},
													}},
												}},
											}},
										}},
									}},
								}},
								LeafNode: []*interfacedefinition.LeafNode{{
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "engineid",
									DefaultValue: []string{""},
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Specifies the EngineID that uniquely identify an agent (e.g. 000000000000000000000002)"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"([0-9a-f][0-9a-f]){1,18}"},
										}},
										ConstraintErrorMessage: []string{"ID must contain an even number (from 2 to 36) of hex digits"},
									}},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "node",
							},
							NodeNameAttr: "script-extensions",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"SNMP script extensions"},
							}},
							Children: []*interfacedefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								TagNode: []*interfacedefinition.TagNode{{
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "extension-name",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Extension name"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"[a-z0-9\\.\\-\\_]+"},
										}},
										ConstraintErrorMessage: []string{"Script extension contains invalid characters"},
									}},
									Children: []*interfacedefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*interfacedefinition.LeafNode{{
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "script",
											Properties: []*interfacedefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Script location and name"},
												Constraint: []*interfacedefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[a-z0-9\\.\\-\\_\\/]+"},
												}},
												ConstraintErrorMessage: []string{"Script extension contains invalid characters"},
												CompletionHelp: []*interfacedefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"ls /config/user-data"},
												}},
											}},
										}},
									}},
								}},
							}},
						}},
						TagNode: []*interfacedefinition.TagNode{{
							XMLName: xml.Name{
								Local: "tagNode",
							},
							NodeNameAttr: "community",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Community name"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{"[[:alnum:]-_!@&#]{1,100}"},
								}},
								ConstraintErrorMessage: []string{"Community string is limited to alphanumerical characters, -, _, !, @, &, and # with a total lenght of 100"},
							}},
							Children: []*interfacedefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								LeafNode: []*interfacedefinition.LeafNode{{
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "authorization",
									DefaultValue: []string{"ro"},
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Authorization type"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"(ro|rw)"},
										}},
										ValueHelp: []*interfacedefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ro",
											Description: "Read-Only",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "rw",
											Description: "Read-Write",
										}},
										ConstraintErrorMessage: []string{"Authorization type must be either 'rw' or 'ro'"},
										CompletionHelp: []*interfacedefinition.CompletionHelp{{
											XMLName: xml.Name{
												Local: "completionHelp",
											},
											List: []string{"ro rw"},
										}},
									}},
								}, {
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "client",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"IP address of SNMP client allowed to contact system"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Validator: []*interfacedefinition.Validator{{
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr: "ipv4-address",
											}, {
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr: "ipv6-address",
											}},
										}},
										Multi: []*interfacedefinition.Multi{{
											XMLName: xml.Name{
												Local: "multi",
											},
										}},
									}},
								}, {
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "network",
									DefaultValue: []string{"0.0.0.0/0 ::/0"},
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Subnet of SNMP client(s) allowed to contact system"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Validator: []*interfacedefinition.Validator{{
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr: "ip-prefix",
											}},
										}},
										ValueHelp: []*interfacedefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ipv4net",
											Description: "IP address and prefix length",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ipv6net",
											Description: "IPv6 address and prefix length",
										}},
										Multi: []*interfacedefinition.Multi{{
											XMLName: xml.Name{
												Local: "multi",
											},
										}},
									}},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "tagNode",
							},
							NodeNameAttr: "listen-address",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"IP address to listen for incoming SNMP requests"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Validator: []*interfacedefinition.Validator{{
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv4-address",
									}, {
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv6-address",
									}},
								}},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv4",
									Description: "IPv4 address to listen for incoming SNMP requests",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv6",
									Description: "IPv6 address to listen for incoming SNMP requests",
								}},
								CompletionHelp: []*interfacedefinition.CompletionHelp{{
									XMLName: xml.Name{
										Local: "completionHelp",
									},
									Script: []string{"${vyos_completion_dir}/list_local_ips.sh --both"},
								}},
							}},
							Children: []*interfacedefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								LeafNode: []*interfacedefinition.LeafNode{{
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "port",
									DefaultValue: []string{"161"},
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Port number used by connection"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Validator: []*interfacedefinition.Validator{{
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr:     "numeric",
												ArgumentAttr: "--range 1-65535",
											}},
										}},
										ValueHelp: []*interfacedefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "u32:1-65535",
											Description: "Numeric IP port",
										}},
										ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
									}},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "tagNode",
							},
							NodeNameAttr: "trap-target",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Address of trap target"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Validator: []*interfacedefinition.Validator{{
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv4-address",
									}, {
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv6-address",
									}},
								}},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv4",
									Description: "IPv4 address",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv6",
									Description: "IPv6 address",
								}},
							}},
							Children: []*interfacedefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								LeafNode: []*interfacedefinition.LeafNode{{
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "community",
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Community used when sending trap information"},
									}},
								}, {
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "port",
									DefaultValue: []string{"162"},
									Properties: []*interfacedefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Port number used by connection"},
										Constraint: []*interfacedefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Validator: []*interfacedefinition.Validator{{
												XMLName: xml.Name{
													Local: "validator",
												},
												NameAttr:     "numeric",
												ArgumentAttr: "--range 1-65535",
											}},
										}},
										ValueHelp: []*interfacedefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "u32:1-65535",
											Description: "Numeric IP port",
										}},
										ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
									}},
								}},
							}},
						}},
						LeafNode: []*interfacedefinition.LeafNode{{
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "contact",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Contact information"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{".{1,255}"},
								}},
								ConstraintErrorMessage: []string{"Contact information is limited to 255 characters or less"},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "description",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Description information"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{".{1,255}"},
								}},
								ConstraintErrorMessage: []string{"Description is limited to 255 characters or less"},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "location",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Location information"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{".{1,255}"},
								}},
								ConstraintErrorMessage: []string{"Location is limited to 255 characters or less"},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "oid-enable",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Enable specific OIDs that by default are disable"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{"(ip-forward|ip-route-table|ip-net-to-media-table|ip-net-to-physical-phys-address)"},
								}},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ip-forward",
									Description: "Enable ipForward: .1.3.6.1.2.1.4.24",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ip-route-table",
									Description: "Enable ipRouteTable: .1.3.6.1.2.1.4.21",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ip-net-to-media-table",
									Description: "Enable ipNetToMediaTable: .1.3.6.1.2.1.4.22",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ip-net-to-physical-phys-address",
									Description: "Enable ipNetToPhysicalPhysAddress: .1.3.6.1.2.1.4.35",
								}},
								ConstraintErrorMessage: []string{"OID must be one of the liste options"},
								CompletionHelp: []*interfacedefinition.CompletionHelp{{
									XMLName: xml.Name{
										Local: "completionHelp",
									},
									List: []string{"ip-forward ip-route-table ip-net-to-media-table ip-net-to-physical-phys-address"},
								}},
								Multi: []*interfacedefinition.Multi{{
									XMLName: xml.Name{
										Local: "multi",
									},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "protocol",
							DefaultValue: []string{"udp"},
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Protocol to be used (TCP/UDP)"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{"(udp|tcp)"},
								}},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "udp",
									Description: "Listen protocol UDP",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "tcp",
									Description: "Listen protocol TCP",
								}},
								CompletionHelp: []*interfacedefinition.CompletionHelp{{
									XMLName: xml.Name{
										Local: "completionHelp",
									},
									List: []string{"udp tcp"},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "smux-peer",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Register a subtree for SMUX-based processing"},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "txt",
									Description: "SNMP Object Identifier",
								}},
								Multi: []*interfacedefinition.Multi{{
									XMLName: xml.Name{
										Local: "multi",
									},
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "trap-source",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"SNMP trap source address"},
								Constraint: []*interfacedefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Validator: []*interfacedefinition.Validator{{
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv4-address",
									}, {
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr: "ipv6-address",
									}},
								}},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv4",
									Description: "IPv4 address",
								}, {
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "ipv6",
									Description: "IPv6 address",
								}},
							}},
						}, {
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "vrf",
							Properties: []*interfacedefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"VRF instance name"},
								ValueHelp: []*interfacedefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "txt",
									Description: "VRF instance name",
								}},
								CompletionHelp: []*interfacedefinition.CompletionHelp{{
									XMLName: xml.Name{
										Local: "completionHelp",
									},
									Path: []string{"vrf name"},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}
}
