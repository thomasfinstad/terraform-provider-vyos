// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &protocols_ospf_interface{}

// var _ resource.ResourceWithImportState = &protocols_ospf_interface{}

// protocols_ospf_interface defines the resource implementation.
type protocols_ospf_interface struct {
	client   *http.Client
	vyosPath []string
}

// protocols_ospf_interfaceModel describes the resource data model.
type protocols_ospf_interfaceModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Area                types.String `tfsdk:"area"`
	Dead_interval       types.String `tfsdk:"dead_interval"`
	Hello_interval      types.String `tfsdk:"hello_interval"`
	Retransmit_interval types.String `tfsdk:"retransmit_interval"`
	Transmit_delay      types.String `tfsdk:"transmit_delay"`
	Cost                types.String `tfsdk:"cost"`
	Mtu_ignore          types.String `tfsdk:"mtu_ignore"`
	Priority            types.String `tfsdk:"priority"`
	Bandwidth           types.String `tfsdk:"bandwidth"`
	Hello_multiplier    types.String `tfsdk:"hello_multiplier"`
	Network             types.String `tfsdk:"network"`

	// TagNodes

	// Nodes
	Authentication types.List `tfsdk:"authentication"`
	Bfd            types.List `tfsdk:"bfd"`
	Passive        types.List `tfsdk:"passive"`
}

// Metadata method to define the resource type name.
func (r *protocols_ospf_interface) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_protocols_ospf_interface"
}

// protocols_ospf_interfaceResource method to return the example resource reference
func protocols_ospf_interfaceResource() resource.Resource {
	return &protocols_ospf_interface{
		vyosPath: []string{
			"protocols",
			"ospf",
			"interface",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *protocols_ospf_interface) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Open Shortest Path First (OSPF)

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Interface configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
			},

			"area": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enable OSPF on this interface

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area ID as decimal notation  |
|  ipv4  |  OSPF area ID in IP address notation  |
`,
			},

			"dead_interval": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |
`,

				Default:  stringdefault.StaticString(`40`),
				Computed: true,
			},

			"hello_interval": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |
`,

				Default:  stringdefault.StaticString(`10`),
				Computed: true,
			},

			"retransmit_interval": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |
`,

				Default:  stringdefault.StaticString(`5`),
				Computed: true,
			},

			"transmit_delay": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |
`,

				Default:  stringdefault.StaticString(`1`),
				Computed: true,
			},

			"cost": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  OSPF interface cost  |
`,
			},

			"mtu_ignore": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
			},

			"priority": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  OSPF router priority cost  |
`,

				Default:  stringdefault.StaticString(`1`),
				Computed: true,
			},

			"bandwidth": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface bandwidth (Mbit/s)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-100000  |  Bandwidth in Megabit/sec (for calculating OSPF cost)  |
`,
			},

			"hello_multiplier": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Hello multiplier factor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of Hellos to send each second  |
`,
			},

			"network": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Network type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Broadcast network type  |
|  non-broadcast  |  Non-broadcast network type  |
|  point-to-multipoint  |  Point-to-multipoint network type  |
|  point-to-point  |  Point-to-point network type  |
`,
			},

			"authentication": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"plaintext_password": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Plain text password

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Plain text password (8 characters or less)  |
`,
					},

					"md5": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"key_id": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"md5_key": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  MD5 Key (16 characters or less)  |
`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `MD5 key id

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  MD5 key id  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `MD5 key id

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Authentication

`,
			},

			"bfd": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"profile": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
			},

			"passive": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"disable": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable instance

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Suppress routing updates on an interface

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *protocols_ospf_interface) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *protocols_ospf_interfaceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *protocols_ospf_interface) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *protocols_ospf_interfaceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *protocols_ospf_interface) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *protocols_ospf_interfaceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *protocols_ospf_interface) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *protocols_ospf_interfaceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
