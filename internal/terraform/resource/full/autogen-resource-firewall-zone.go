// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &firewall_zone{}

// var _ resource.ResourceWithImportState = &firewall_zone{}

// firewall_zone defines the resource implementation.
type firewall_zone struct {
	client   *http.Client
	vyosPath []string
}

// firewall_zoneModel describes the resource data model.
type firewall_zoneModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description        types.String `tfsdk:"description"`
	Enable_default_log types.String `tfsdk:"enable_default_log"`
	Default_action     types.String `tfsdk:"default_action"`
	Iface              types.String `tfsdk:"interface"`
	Local_zone         types.String `tfsdk:"local_zone"`

	// TagNodes
	From types.Map `tfsdk:"from"`

	// Nodes
	Intra_zone_filtering types.List `tfsdk:"intra_zone_filtering"`
}

// Metadata method to define the resource type name.
func (r *firewall_zone) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_firewall_zone"
}

// firewall_zoneResource method to return the example resource reference
func firewall_zoneResource() resource.Resource {
	return &firewall_zone{
		vyosPath: []string{
			"firewall",
			"zone",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *firewall_zone) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Firewall

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Zone-policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Zone name  |
`,
			},

			"from": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"firewall": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"ipv6_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv6 firewall ruleset

`,
								},

								"name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv4 firewall ruleset

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Firewall options

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Zone from which to filter traffic

`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"enable_default_log": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Log packets hitting default-action

`,
			},

			"default_action": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Default-action for traffic coming into this zone

|  Format  |  Description  |
|----------|---------------|
|  drop  |  Drop silently  |
|  reject  |  Drop and notify source  |
`,

				Default:  stringdefault.StaticString(`drop`),
				Computed: true,
			},

			"interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface associated with zone

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface associated with zone  |
`,
			},

			"local_zone": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Zone to be local-zone

`,
			},

			"intra_zone_filtering": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"action": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Action for intra-zone traffic

|  Format  |  Description  |
|----------|---------------|
|  accept  |  Accept traffic  |
|  drop  |  Drop silently  |
`,
					},

					"firewall": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"ipv6_name": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `IPv6 firewall ruleset

`,
							},

							"name": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `IPv4 firewall ruleset

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Use the specified firewall chain

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Intra-zone filtering

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *firewall_zone) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *firewall_zoneModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *firewall_zone) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *firewall_zoneModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *firewall_zone) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *firewall_zoneModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *firewall_zone) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *firewall_zoneModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
