// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &container_name{}

// var _ resource.ResourceWithImportState = &container_name{}

// container_name defines the resource implementation.
type container_name struct {
	client   *http.Client
	vyosPath []string
}

// container_nameModel describes the resource data model.
type container_nameModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Allow_host_networks types.String `tfsdk:"allow_host_networks"`
	Cap_add             types.String `tfsdk:"cap_add"`
	Description         types.String `tfsdk:"description"`
	Disable             types.String `tfsdk:"disable"`
	Entrypoint          types.String `tfsdk:"entrypoint"`
	Host_name           types.String `tfsdk:"host_name"`
	Image               types.String `tfsdk:"image"`
	Command             types.String `tfsdk:"command"`
	Arguments           types.String `tfsdk:"arguments"`
	Memory              types.String `tfsdk:"memory"`
	Shared_memory       types.String `tfsdk:"shared_memory"`
	Restart             types.String `tfsdk:"restart"`

	// TagNodes
	Device      types.Map `tfsdk:"device"`
	Environment types.Map `tfsdk:"environment"`
	Network     types.Map `tfsdk:"network"`
	Port        types.Map `tfsdk:"port"`
	Volume      types.Map `tfsdk:"volume"`

	// Nodes

}

// Metadata method to define the resource type name.
func (r *container_name) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_container_name"
}

// container_nameResource method to return the example resource reference
func container_nameResource() resource.Resource {
	return &container_name{
		vyosPath: []string{
			"container",
			"name",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *container_name) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Container applications

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Container name

`,
			},

			"device": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"source": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Source device (Example: "/dev/x")

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Source device  |
`,
						},

						"destination": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Destination container device (Example: "/dev/x")

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination container device  |
`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Add a host device to the container

`,
			},

			"environment": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"value": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Set environment option value

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Set environment option value  |
`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Add custom environment variables

`,
			},

			"network": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"address": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Assign static IP address to container

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Attach user defined network to container

`,
			},

			"port": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"source": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Source host port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Source host port  |
|  start-end  |  Source host port range (e.g. 10025-10030)  |
`,
						},

						"destination": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Destination container port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Destination container port  |
|  start-end  |  Destination container port range (e.g. 10025-10030)  |
`,
						},

						"protocol": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Transport protocol used for port mapping

|  Format  |  Description  |
|----------|---------------|
|  tcp  |  Use Transmission Control Protocol for given port  |
|  udp  |  Use User Datagram Protocol for given port  |
`,

							Default:  stringdefault.StaticString(`tcp`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Publish port to the container

`,
			},

			"volume": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"source": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Source host directory

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Source host directory  |
`,
						},

						"destination": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Destination container directory

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination container directory  |
`,
						},

						"mode": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Volume access mode ro/rw

|  Format  |  Description  |
|----------|---------------|
|  ro  |  Volume mounted into the container as read-only  |
|  rw  |  Volume mounted into the container as read-write  |
`,

							Default:  stringdefault.StaticString(`rw`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Mount a volume into the container

`,
			},

			"allow_host_networks": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Allow host networks in container

`,
			},

			"cap_add": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Container capabilities/permissions

|  Format  |  Description  |
|----------|---------------|
|  net-admin  |  Network operations (interface, firewall, routing tables)  |
|  net-bind-service  |  Bind a socket to privileged ports (port numbers less than 1024)  |
|  net-raw  |  Permission to create raw network sockets  |
|  setpcap  |  Capability sets (from bounded or inherited set)  |
|  sys-admin  |  Administation operations (quotactl, mount, sethostname, setdomainame)  |
|  sys-time  |  Permission to set system clock  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable instance

`,
			},

			"entrypoint": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Override the default ENTRYPOINT from the image

`,
			},

			"host_name": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Container host name

`,
			},

			"image": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Image name in the hub-registry

`,
			},

			"command": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Override the default CMD from the image

`,
			},

			"arguments": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `The command's arguments for this container

`,
			},

			"memory": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Memory (RAM) available to this container

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Unlimited  |
|  u32:1-16384  |  Container memory in megabytes (MB)  |
`,

				Default:  stringdefault.StaticString(`512`),
				Computed: true,
			},

			"shared_memory": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Shared memory available to this container

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Unlimited  |
|  u32:1-8192  |  Container memory in megabytes (MB)  |
`,

				Default:  stringdefault.StaticString(`64`),
				Computed: true,
			},

			"restart": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Restart options for container

|  Format  |  Description  |
|----------|---------------|
|  no  |  Do not restart containers on exit  |
|  on-failure  |  Restart containers when they exit with a non-zero exit code, retrying indefinitely  |
|  always  |  Restart containers when they exit, regardless of status, retrying indefinitely  |
`,

				Default:  stringdefault.StaticString(`on-failure`),
				Computed: true,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *container_name) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *container_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *container_name) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *container_nameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *container_name) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *container_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *container_name) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *container_nameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
