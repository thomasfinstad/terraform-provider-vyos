// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &service_webproxy_url_filtering_squidguard_rule{}

// var _ resource.ResourceWithImportState = &service_webproxy_url_filtering_squidguard_rule{}

// service_webproxy_url_filtering_squidguard_rule defines the resource implementation.
type service_webproxy_url_filtering_squidguard_rule struct {
	client   *http.Client
	vyosPath []string
}

// service_webproxy_url_filtering_squidguard_ruleModel describes the resource data model.
type service_webproxy_url_filtering_squidguard_ruleModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Allow_category      types.String `tfsdk:"allow_category"`
	Allow_ipaddr_url    types.String `tfsdk:"allow_ipaddr_url"`
	Block_category      types.String `tfsdk:"block_category"`
	Default_action      types.String `tfsdk:"default_action"`
	Enable_safe_search  types.String `tfsdk:"enable_safe_search"`
	Local_block_keyword types.String `tfsdk:"local_block_keyword"`
	Local_block_url     types.String `tfsdk:"local_block_url"`
	Local_block         types.String `tfsdk:"local_block"`
	Local_ok_url        types.String `tfsdk:"local_ok_url"`
	Local_ok            types.String `tfsdk:"local_ok"`
	Log                 types.String `tfsdk:"log"`
	Redirect_url        types.String `tfsdk:"redirect_url"`
	Source_group        types.String `tfsdk:"source_group"`
	Time_period         types.String `tfsdk:"time_period"`

	// TagNodes

	// Nodes

}

// Metadata method to define the resource type name.
func (r *service_webproxy_url_filtering_squidguard_rule) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_webproxy_url_filtering_squidguard_rule"
}

// service_webproxy_url_filtering_squidguard_ruleResource method to return the example resource reference
func service_webproxy_url_filtering_squidguard_ruleResource() resource.Resource {
	return &service_webproxy_url_filtering_squidguard_rule{
		vyosPath: []string{
			"service",
			"webproxy",
			"url-filtering",
			"squidguard",
			"rule",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *service_webproxy_url_filtering_squidguard_rule) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Webproxy service settings

URL filtering settings

URL filtering via squidGuard redirector

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `URL filter rule for a source-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-1024  |  Rule Number  |
`,
			},

			"allow_category": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Category to allow

`,
			},

			"allow_ipaddr_url": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Allow IP address URLs

`,
			},

			"block_category": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Category to block

`,
			},

			"default_action": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Default action (default: allow)

|  Format  |  Description  |
|----------|---------------|
|  allow  |  Default filter action is allow)  |
|  block  |  Default filter action is block  |
`,
			},

			"enable_safe_search": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enable safe-mode search on popular search engines

`,
			},

			"local_block_keyword": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Local keyword to block

|  Format  |  Description  |
|----------|---------------|
|  keyword  |  Keyword (or regex) to block  |
`,
			},

			"local_block_url": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Local URL to block

|  Format  |  Description  |
|----------|---------------|
|  url  |  Local URL to block (without "http://")  |
`,
			},

			"local_block": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Local site to block

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address of site to block  |
`,
			},

			"local_ok_url": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Local URL to allow

|  Format  |  Description  |
|----------|---------------|
|  url  |  Local URL to allow (without "http://")  |
`,
			},

			"local_ok": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Local site to allow

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address of site to allow  |
`,
			},

			"log": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Log block category

`,
			},

			"redirect_url": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect URL for filtered websites

|  Format  |  Description  |
|----------|---------------|
|  url  |  URL for redirect  |
`,
			},

			"source_group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Source-group for this rule

|  Format  |  Description  |
|----------|---------------|
|  group  |  Source group identifier for this rule  |
`,
			},

			"time_period": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Time-period for this rule

|  Format  |  Description  |
|----------|---------------|
|  period  |  Time period for this rule  |
`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *service_webproxy_url_filtering_squidguard_rule) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *service_webproxy_url_filtering_squidguard_ruleModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *service_webproxy_url_filtering_squidguard_rule) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *service_webproxy_url_filtering_squidguard_ruleModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *service_webproxy_url_filtering_squidguard_rule) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *service_webproxy_url_filtering_squidguard_ruleModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *service_webproxy_url_filtering_squidguard_rule) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *service_webproxy_url_filtering_squidguard_ruleModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
