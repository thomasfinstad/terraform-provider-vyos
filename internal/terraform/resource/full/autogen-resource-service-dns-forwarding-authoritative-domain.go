// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &service_dns_forwarding_authoritative_domain{}

// var _ resource.ResourceWithImportState = &service_dns_forwarding_authoritative_domain{}

// service_dns_forwarding_authoritative_domain defines the resource implementation.
type service_dns_forwarding_authoritative_domain struct {
	client   *http.Client
	vyosPath []string
}

// service_dns_forwarding_authoritative_domainModel describes the resource data model.
type service_dns_forwarding_authoritative_domainModel struct {
	ID types.String `tfsdk:"id"`

	Identifier types.String `tfsdk:"identifier"`

	Records types.String `tfsdk:"records"`

	Disable types.String `tfsdk:"disable"`
}

// Metadata method to define the resource type name.
func (r *service_dns_forwarding_authoritative_domain) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_dns_forwarding_authoritative_domain"
}

// service_dns_forwarding_authoritative_domainResource method to return the example resource reference
func service_dns_forwarding_authoritative_domainResource() resource.Resource {
	return &service_dns_forwarding_authoritative_domain{
		vyosPath: []string{
			"service",
			"dns",
			"forwarding",
			"authoritative-domain",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *service_dns_forwarding_authoritative_domain) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Domain Name System related services

DNS forwarding

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Domain to host authoritative records for

|  Format  |  Description  |
|----------|---------------|
|  text  |  An absolute DNS name  |
`,
				// Validators:          []validator.String(nil),
			},

			// TODO handle non-string types
			"disable": schema.StringAttribute{
				// CustomType:          basetypes.StringTypable(nil),
				// Required:            false,
				Optional: true,
				// Sensitive:           false,
				// Description:         "",
				MarkdownDescription: `Disable instance

`,
				// DeprecationMessage:  "",
				// TODO Recreate some of vyos validators for use in leafnodes
				// Validators:          []validator.String(nil),
				// PlanModifiers:       []planmodifier.String(nil),

			},

			"records": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"a": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"address": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `IPv4 address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"A" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"aaaa": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"address": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `IPv6 address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"AAAA" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"cname": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"target": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Target DNS name

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"CNAME" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"mx": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"server": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											// TODO handle non-string types
											"priority": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Server priority

|  Format  |  Description  |
|----------|---------------|
|  u32:1-999  |  Server priority (lower numbers are higher priority)  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

												Default:  stringdefault.StaticString(`10`),
												Computed: true,
											},

											// CustomType:    basetypes.ObjectTypable(nil),
											// Validators:    []validator.Object(nil),
											// PlanModifiers: []planmodifier.Object(nil),
										},
									},
									// CustomType:          basetypes.MapTypable(nil),
									// Required:            false,
									Optional: true,
									// Computed:            false,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Mail server

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |
`,
									// DeprecationMessage:  "",
									// Validators:          []validator.Map(nil),
									// PlanModifiers:       []planmodifier.Map(nil),
									// TODO investigate if tagnode defaults can be handled
									//Default:             defaults.Map(nil),
								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"MX" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"ptr": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"target": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Target DNS name

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"PTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"txt": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"value": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Record contents

|  Format  |  Description  |
|----------|---------------|
|  text  |  Record contents  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"TXT" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"spf": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								// TODO handle non-string types
								"value": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Record contents

|  Format  |  Description  |
|----------|---------------|
|  text  |  Record contents  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"SPF" record (type=SPF)

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"srv": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"entry": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											// TODO handle non-string types
											"hostname": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Server hostname

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"port": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Port number

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  TCP/UDP port number  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"priority": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Entry priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Entry priority (lower numbers are higher priority)  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

												Default:  stringdefault.StaticString(`10`),
												Computed: true,
											},

											// TODO handle non-string types
											"weight": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Entry weight

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Entry weight  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

												Default:  stringdefault.StaticString(`0`),
												Computed: true,
											},

											// CustomType:    basetypes.ObjectTypable(nil),
											// Validators:    []validator.Object(nil),
											// PlanModifiers: []planmodifier.Object(nil),
										},
									},
									// CustomType:          basetypes.MapTypable(nil),
									// Required:            false,
									Optional: true,
									// Computed:            false,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Service entry

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Entry number  |
`,
									// DeprecationMessage:  "",
									// Validators:          []validator.Map(nil),
									// PlanModifiers:       []planmodifier.Map(nil),
									// TODO investigate if tagnode defaults can be handled
									//Default:             defaults.Map(nil),
								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"SRV" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},

					"naptr": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"rule": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											// TODO handle non-string types
											"order": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Rule order

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule order (lower order is evaluated first)  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"preference": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Rule preference

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule preference  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

												Default:  stringdefault.StaticString(`0`),
												Computed: true,
											},

											// TODO handle non-string types
											"lookup_srv": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `"S" flag

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"lookup_a": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `"A" flag

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"resolve_uri": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `"U" flag

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"protocol_specific": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `"P" flag

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"service": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Service type

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"regexp": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Regular expression

`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// TODO handle non-string types
											"replacement": schema.StringAttribute{
												// CustomType:          basetypes.StringTypable(nil),
												// Required:            false,
												Optional: true,
												// Sensitive:           false,
												// Description:         "",
												MarkdownDescription: `Replacement DNS name

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |
`,
												// DeprecationMessage:  "",
												// TODO Recreate some of vyos validators for use in leafnodes
												// Validators:          []validator.String(nil),
												// PlanModifiers:       []planmodifier.String(nil),

											},

											// CustomType:    basetypes.ObjectTypable(nil),
											// Validators:    []validator.Object(nil),
											// PlanModifiers: []planmodifier.Object(nil),
										},
									},
									// CustomType:          basetypes.MapTypable(nil),
									// Required:            false,
									Optional: true,
									// Computed:            false,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `NAPTR rule

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule number  |
`,
									// DeprecationMessage:  "",
									// Validators:          []validator.Map(nil),
									// PlanModifiers:       []planmodifier.Map(nil),
									// TODO investigate if tagnode defaults can be handled
									//Default:             defaults.Map(nil),
								},

								// TODO handle non-string types
								"ttl": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |
`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

									Default:  stringdefault.StaticString(`300`),
									Computed: true,
								},

								// TODO handle non-string types
								"disable": schema.StringAttribute{
									// CustomType:          basetypes.StringTypable(nil),
									// Required:            false,
									Optional: true,
									// Sensitive:           false,
									// Description:         "",
									MarkdownDescription: `Disable instance

`,
									// DeprecationMessage:  "",
									// TODO Recreate some of vyos validators for use in leafnodes
									// Validators:          []validator.String(nil),
									// PlanModifiers:       []planmodifier.String(nil),

								},

								// CustomType:    basetypes.ObjectTypable(nil),
								// Validators:    []validator.Object(nil),
								// PlanModifiers: []planmodifier.Object(nil),
							},
						},
						// CustomType:          basetypes.MapTypable(nil),
						// Required:            false,
						Optional: true,
						// Computed:            false,
						// Sensitive:           false,
						// Description:         "",
						MarkdownDescription: `"NAPTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
`,
						// DeprecationMessage:  "",
						// Validators:          []validator.Map(nil),
						// PlanModifiers:       []planmodifier.Map(nil),
						// TODO investigate if tagnode defaults can be handled
						//Default:             defaults.Map(nil),
					},
				},
				// CustomType:          basetypes.MapTypable(nil),
				// Required:            false,
				Optional: true,
				// Computed:            false,
				// Sensitive:           false,
				// Description:         "",
				MarkdownDescription: `DNS zone records

`,
				// DeprecationMessage:  "",
				// Validators:          []validator.Map(nil),
				// PlanModifiers:       []planmodifier.Map(nil),
				// TODO investigate if node defaults can be handled
				// Default:             defaults.Map(nil),
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *service_dns_forwarding_authoritative_domain) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *service_dns_forwarding_authoritative_domainModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *service_dns_forwarding_authoritative_domain) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *service_dns_forwarding_authoritative_domainModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *service_dns_forwarding_authoritative_domain) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *service_dns_forwarding_authoritative_domainModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *service_dns_forwarding_authoritative_domain) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *service_dns_forwarding_authoritative_domainModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
