// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &service_router_advert_interface{}

// var _ resource.ResourceWithImportState = &service_router_advert_interface{}

// service_router_advert_interface defines the resource implementation.
type service_router_advert_interface struct {
	client   *http.Client
	vyosPath []string
}

// service_router_advert_interfaceModel describes the resource data model.
type service_router_advert_interfaceModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Hop_limit            types.String `tfsdk:"hop_limit"`
	Default_lifetime     types.String `tfsdk:"default_lifetime"`
	Default_preference   types.String `tfsdk:"default_preference"`
	Dnssl                types.String `tfsdk:"dnssl"`
	Link_mtu             types.String `tfsdk:"link_mtu"`
	Managed_flag         types.String `tfsdk:"managed_flag"`
	Name_server          types.String `tfsdk:"name_server"`
	Name_server_lifetime types.String `tfsdk:"name_server_lifetime"`
	Other_config_flag    types.String `tfsdk:"other_config_flag"`
	Source_address       types.String `tfsdk:"source_address"`
	Reachable_time       types.String `tfsdk:"reachable_time"`
	Retrans_timer        types.String `tfsdk:"retrans_timer"`
	No_send_advert       types.String `tfsdk:"no_send_advert"`

	// TagNodes
	Route  types.Map `tfsdk:"route"`
	Prefix types.Map `tfsdk:"prefix"`

	// Nodes
	Interval types.List `tfsdk:"interval"`
}

// Metadata method to define the resource type name.
func (r *service_router_advert_interface) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_router_advert_interface"
}

// service_router_advert_interfaceResource method to return the example resource reference
func service_router_advert_interfaceResource() resource.Resource {
	return &service_router_advert_interface{
		vyosPath: []string{
			"service",
			"router-advert",
			"interface",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *service_router_advert_interface) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `IPv6 Router Advertisements (RAs) service

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Interface to send RA on

`,
			},

			"route": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"valid_lifetime": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Time in seconds that the route will remain valid

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Time in seconds that the route will remain valid  |
|  infinity  |  Route will remain preferred forever  |
`,

							Default:  stringdefault.StaticString(`1800`),
							Computed: true,
						},

						"route_preference": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Preference associated with the route,

|  Format  |  Description  |
|----------|---------------|
|  low  |  Route has low preference  |
|  medium  |  Route has medium preference  |
|  high  |  Route has high preference  |
`,

							Default:  stringdefault.StaticString(`medium`),
							Computed: true,
						},

						"no_remove_route": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Do not announce this route with a zero second lifetime upon shutdown

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 route to be advertised in Router Advertisements (RAs)

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 route to be advertized  |
`,
			},

			"prefix": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"no_autonomous_flag": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Prefix can not be used for stateless address auto-configuration

`,
						},

						"no_on_link_flag": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Prefix can not be used for on-link determination

`,
						},

						"deprecate_prefix": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Upon shutdown, this option will deprecate the prefix by announcing it in the shutdown RA

`,
						},

						"decrement_lifetime": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Lifetime is decremented by the number of seconds since the last RA - use in conjunction with a DHCPv6-PD prefix

`,
						},

						"preferred_lifetime": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Time in seconds that the prefix will remain preferred

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Time in seconds that the prefix will remain preferred  |
|  infinity  |  Prefix will remain preferred forever  |
`,

							Default:  stringdefault.StaticString(`14400`),
							Computed: true,
						},

						"valid_lifetime": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Time in seconds that the prefix will remain valid

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Time in seconds that the prefix will remain valid  |
|  infinity  |  Prefix will remain preferred forever  |
`,

							Default:  stringdefault.StaticString(`2592000`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 prefix to be advertised in Router Advertisements (RAs)

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 prefix to be advertized  |
`,
			},

			"hop_limit": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Set Hop Count field of the IP header for outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Unspecified (by this router)  |
|  u32:1-255  |  Value should represent current diameter of the Internet  |
`,

				Default:  stringdefault.StaticString(`64`),
				Computed: true,
			},

			"default_lifetime": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Lifetime associated with the default router in units of seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:4-9000  |  Router Lifetime in seconds  |
|  0  |  Not a default router  |
`,
			},

			"default_preference": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Preference associated with the default router,

|  Format  |  Description  |
|----------|---------------|
|  low  |  Default router has low preference  |
|  medium  |  Default router has medium preference  |
|  high  |  Default router has high preference  |
`,

				Default:  stringdefault.StaticString(`medium`),
				Computed: true,
			},

			"dnssl": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `DNS search list

`,
			},

			"link_mtu": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Link MTU value placed in RAs, exluded in RAs if unset

|  Format  |  Description  |
|----------|---------------|
|  u32:1280-9000  |  Link MTU value in RAs  |
`,
			},

			"managed_flag": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Hosts use the administered (stateful) protocol for address autoconfiguration in addition to any addresses autoconfigured using SLAAC

`,
			},

			"name_server": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Domain Name Servers (DNS) addresses

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  Domain Name Server (DNS) IPv6 address  |
`,
			},

			"name_server_lifetime": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum duration how long the RDNSS entries are used

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Name-servers should no longer be used  |
|  u32:1-7200  |  Maximum interval in seconds  |
`,
			},

			"other_config_flag": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Hosts use the administered (stateful) protocol for autoconfiguration of other (non-address) information

`,
			},

			"source_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Use IPv6 address as source address. Useful with VRRP.

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address to be advertized (must be configured on interface)  |
`,
			},

			"reachable_time": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Time, in milliseconds, that a node assumes a neighbor is reachable after having received a reachability confirmation

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Reachable Time unspecified by this router  |
|  u32:1-3600000  |  Reachable Time value in RAs (in milliseconds)  |
`,

				Default:  stringdefault.StaticString(`0`),
				Computed: true,
			},

			"retrans_timer": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Time in milliseconds between retransmitted Neighbor Solicitation messages

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Time, in milliseconds, between retransmitted Neighbor Solicitation messages  |
|  u32:1-4294967295  |  Minimum interval in milliseconds  |
`,

				Default:  stringdefault.StaticString(`0`),
				Computed: true,
			},

			"no_send_advert": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Do not send router adverts

`,
			},

			"interval": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"max": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Maximum interval between unsolicited multicast RAs

|  Format  |  Description  |
|----------|---------------|
|  u32:4-1800  |  Maximum interval in seconds  |
`,

						Default:  stringdefault.StaticString(`600`),
						Computed: true,
					},

					"min": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Minimum interval between unsolicited multicast RAs

|  Format  |  Description  |
|----------|---------------|
|  u32:3-1350  |  Minimum interval in seconds  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Set interval between unsolicited multicast RAs

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *service_router_advert_interface) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *service_router_advert_interfaceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *service_router_advert_interface) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *service_router_advert_interfaceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *service_router_advert_interface) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *service_router_advert_interfaceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *service_router_advert_interface) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *service_router_advert_interfaceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
