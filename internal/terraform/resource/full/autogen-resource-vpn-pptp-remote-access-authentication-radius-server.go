// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_pptp_remote_access_authentication_radius_server{}

// var _ resource.ResourceWithImportState = &vpn_pptp_remote_access_authentication_radius_server{}

// vpn_pptp_remote_access_authentication_radius_server defines the resource implementation.
type vpn_pptp_remote_access_authentication_radius_server struct {
	client   *http.Client
	vyosPath []string
}

// vpn_pptp_remote_access_authentication_radius_serverModel describes the resource data model.
type vpn_pptp_remote_access_authentication_radius_serverModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Acct_port          types.String `tfsdk:"acct_port"`
	Disable_accounting types.String `tfsdk:"disable_accounting"`
	Fail_time          types.String `tfsdk:"fail_time"`

	// TagNodes

	// Nodes

}

// Metadata method to define the resource type name.
func (r *vpn_pptp_remote_access_authentication_radius_server) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vpn_pptp_remote_access_authentication_radius_server"
}

// vpn_pptp_remote_access_authentication_radius_serverResource method to return the example resource reference
func vpn_pptp_remote_access_authentication_radius_serverResource() resource.Resource {
	return &vpn_pptp_remote_access_authentication_radius_server{
		vyosPath: []string{
			"vpn",
			"pptp",
			"remote-access",
			"authentication",
			"radius",
			"server",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *vpn_pptp_remote_access_authentication_radius_server) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Point to Point Tunneling Protocol (PPTP) Virtual Private Network (VPN)

Remote access PPTP VPN

Authentication for remote access PPTP VPN

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: ``,
			},

			"acct_port": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Accounting port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,

				Default:  stringdefault.StaticString(`1813`),
				Computed: true,
			},

			"disable_accounting": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable accounting

`,
			},

			"fail_time": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Mark server unavailable for <n> seconds on failure

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600  |  Fail time penalty  |
`,

				Default:  stringdefault.StaticString(`0`),
				Computed: true,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *vpn_pptp_remote_access_authentication_radius_server) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *vpn_pptp_remote_access_authentication_radius_serverModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *vpn_pptp_remote_access_authentication_radius_server) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_pptp_remote_access_authentication_radius_serverModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *vpn_pptp_remote_access_authentication_radius_server) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_pptp_remote_access_authentication_radius_serverModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *vpn_pptp_remote_access_authentication_radius_server) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_pptp_remote_access_authentication_radius_serverModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
