// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &interfaces_tunnel{}

// var _ resource.ResourceWithImportState = &interfaces_tunnel{}

// interfaces_tunnel defines the resource implementation.
type interfaces_tunnel struct {
	ResourceName string
	client       *client.Client
}

func (r *interfaces_tunnel) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// interfaces_tunnelModel describes the resource data model.
type interfaces_tunnelModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description         types.String `tfsdk:"description"`
	Address             types.String `tfsdk:"address"`
	Disable             types.String `tfsdk:"disable"`
	Disable_link_detect types.String `tfsdk:"disable_link_detect"`
	Mtu                 types.String `tfsdk:"mtu"`
	Source_address      types.String `tfsdk:"source_address"`
	Remote              types.String `tfsdk:"remote"`
	Source_interface    types.String `tfsdk:"source_interface"`
	Sixrd_prefix        types.String `tfsdk:"6rd_prefix"`
	Sixrd_relay_prefix  types.String `tfsdk:"6rd_relay_prefix"`
	Encapsulation       types.String `tfsdk:"encapsulation"`
	Enable_multicast    types.String `tfsdk:"enable_multicast"`
	Vrf                 types.String `tfsdk:"vrf"`
	Redirect            types.String `tfsdk:"redirect"`

	// TagNodes

	// Nodes
	Ip         types.List `tfsdk:"ip"`
	Ipvsix     types.List `tfsdk:"ipv6"`
	Mirror     types.List `tfsdk:"mirror"`
	Parameters types.List `tfsdk:"parameters"`
}

func (m interfaces_tunnelModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"interfaces",
		"tunnel",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"description":         m.Description,
		"address":             m.Address,
		"disable":             m.Disable,
		"disable_link_detect": m.Disable_link_detect,
		"mtu":                 m.Mtu,
		"source_address":      m.Source_address,
		"remote":              m.Remote,
		"source_interface":    m.Source_interface,
		"6rd_prefix":          m.Sixrd_prefix,
		"6rd_relay_prefix":    m.Sixrd_relay_prefix,
		"encapsulation":       m.Encapsulation,
		"enable_multicast":    m.Enable_multicast,
		"vrf":                 m.Vrf,
		"redirect":            m.Redirect,

		// TagNodes

		// Nodes
		"ip":         m.Ip,
		"ipv6":       m.Ipvsix,
		"mirror":     m.Mirror,
		"parameters": m.Parameters,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r interfaces_tunnel) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_interfaces_tunnel"
	resp.TypeName = r.ResourceName
}

// interfaces_tunnelResource method to return the example resource reference
func interfaces_tunnelResource() resource.Resource {
	return &interfaces_tunnel{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r interfaces_tunnel) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Tunnel interface

|  Format  |  Description  |
|----------|---------------|
|  tunN  |  Tunnel interface name  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"disable_link_detect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Ignore link state changes

`,
			},

			"mtu": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:64-8024  |  Maximum Transmission Unit in byte  |
`,

				Default:  stringdefault.StaticString(`1476`),
				Computed: true,
			},

			"source_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Source IP address used to initiate connection

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 source address  |
|  ipv6  |  IPv6 source address  |
`,
			},

			"remote": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Tunnel remote address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Tunnel remote IPv4 address  |
|  ipv6  |  Tunnel remote IPv6 address  |
`,
			},

			"source_interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |
`,
			},

			"6rd_prefix": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `6rd network prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |
`,
			},

			"6rd_relay_prefix": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `6rd relay prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 prefix of interface for 6rd  |
`,
			},

			"encapsulation": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Encapsulation of this tunnel interface

|  Format  |  Description  |
|----------|---------------|
|  erspan  |  Encapsulated Remote Switched Port Analyzer  |
|  gre  |  Generic Routing Encapsulation (network layer)  |
|  gretap  |  Generic Routing Encapsulation (datalink layer)  |
|  ip6erspan  |  Encapsulated Remote Switched Port Analyzer over IPv6  |
|  ip6gre  |  GRE over IPv6 (network layer)  |
|  ip6gretap  |  GRE over IPv6 (datalink layer)  |
|  ip6ip6  |  IPv6 in IPv6 encapsulation  |
|  ipip  |  IPv4 in IPv4 encapsulation  |
|  ipip6  |  IPv4 in IP6 encapsulation  |
|  sit  |  Simple Internet Transition (IPv6 in IPv4)  |
`,
			},

			"enable_multicast": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enable multicast operation over tunnel

`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"redirect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"arp_cache_timeout": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"disable_arp_filter": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable ARP filter on this interface

`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"enable_directed_broadcast": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
					},

					"enable_arp_accept": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP accept on this interface

`,
					},

					"enable_arp_announce": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP announce on this interface

`,
					},

					"enable_arp_ignore": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP ignore on this interface

`,
					},

					"enable_proxy_arp": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable proxy-arp on this interface

`,
					},

					"proxy_arp_pvlan": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
					},

					"source_validation": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"dup_addr_detect_transmits": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
					},

					"address": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"autoconf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
							},

							"eui64": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
							},

							"no_default_link_local": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Remove the default link-local address from the interface

`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 address configuration modes

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"mirror": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"ingress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},

					"egress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Mirror ingress/egress packets

`,
			},

			"parameters": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"erspan": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"direction": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Mirrored traffic direction

|  Format  |  Description  |
|----------|---------------|
|  ingress  |  Mirror ingress traffic  |
|  egress  |  Mirror egress traffic  |
`,
							},

							"hw_id": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Unique identifier of an ERSPAN engine within a system

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048575  |  Unique identifier of an ERSPAN engine  |
`,
							},

							"index": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `ERSPAN version 1 index field

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Platform-depedent field for specifying port number and direction  |
`,
							},

							"version": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Protocol version

|  Format  |  Description  |
|----------|---------------|
|  1  |  ERSPAN Type II  |
|  2  |  ERSPAN Type III  |
`,

								Default:  stringdefault.StaticString(`1`),
								Computed: true,
							},
						},
						Optional: true,
						MarkdownDescription: `ERSPAN tunnel parameters

`,
					},

					"ip": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"no_pmtu_discovery": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Disable path MTU discovery

`,
							},

							"ignore_df": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Ignore the DF (don't fragment) bit

`,
							},

							"key": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Tunnel key (only GRE tunnels)

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Tunnel key  |
`,
							},

							"tos": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies TOS value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-99  |  Type of Service (TOS)  |
`,

								Default:  stringdefault.StaticString(`inherit`),
								Computed: true,
							},

							"ttl": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies TTL value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Inherit - copy value from original IP header  |
|  u32:1-255  |  Time to Live  |
`,

								Default:  stringdefault.StaticString(`64`),
								Computed: true,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv4-specific tunnel parameters

`,
					},

					"ipv6": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"encaplimit": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set fixed encapsulation limit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Encapsulation limit  |
|  none  |  Disable encapsulation limit  |
`,

								Default:  stringdefault.StaticString(`4`),
								Computed: true,
							},

							"flowlabel": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies the flow label to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  inherit  |  Copy field from original header  |
|  0x0-0x0fffff  |  Tunnel key, or hex value  |
`,
							},

							"hoplimit": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Hoplimit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Hop limit  |
`,

								Default:  stringdefault.StaticString(`64`),
								Computed: true,
							},

							"tclass": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Traffic class (Tclass)

|  Format  |  Description  |
|----------|---------------|
|  0x0-0x0fffff  |  Traffic class, 'inherit' or hex value  |
`,

								Default:  stringdefault.StaticString(`inherit`),
								Computed: true,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6-specific tunnel parameters

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Tunnel parameters

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r interfaces_tunnel) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r interfaces_tunnel) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *interfaces_tunnelModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r interfaces_tunnel) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *interfaces_tunnelModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r interfaces_tunnel) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *interfaces_tunnelModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
