// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &qos_policy_cake{}

// var _ resource.ResourceWithImportState = &qos_policy_cake{}

// qos_policy_cake defines the resource implementation.
type qos_policy_cake struct {
	client   *http.Client
	vyosPath []string
}

// qos_policy_cakeModel describes the resource data model.
type qos_policy_cakeModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description types.String `tfsdk:"description"`
	Bandwidth   types.String `tfsdk:"bandwidth"`
	Rtt         types.String `tfsdk:"rtt"`

	// TagNodes

	// Nodes
	Flow_isolation types.List `tfsdk:"flow_isolation"`
}

// Metadata method to define the resource type name.
func (r *qos_policy_cake) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_policy_cake"
}

// qos_policy_cakeResource method to return the example resource reference
func qos_policy_cakeResource() resource.Resource {
	return &qos_policy_cake{
		vyosPath: []string{
			"qos",
			"policy",
			"cake",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *qos_policy_cake) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Quality of Service (QoS)

Service Policy definitions

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Common Applications Kept Enhanced (CAKE)

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"bandwidth": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |
`,
			},

			"rtt": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Round-Trip-Time for Active Queue Management (AQM)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-3600000  |  RTT in ms  |
`,

				Default:  stringdefault.StaticString(`100`),
				Computed: true,
			},

			"flow_isolation": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"blind": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disables flow isolation, all traffic passes through a single queue

`,
					},

					"src_host": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined only by source address

`,
					},

					"dst_host": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined only by destination address

`,
					},

					"host": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined by source-destination host pairs

`,
					},

					"flow": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined by the entire 5-tuple

`,
					},

					"dual_src_host": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined by the 5-tuple, and fairness is applied first over source addresses, then over individual flows

`,
					},

					"dual_dst_host": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Flows are defined by the 5-tuple, and fairness is applied first over destination addresses, then over individual flows

`,
					},

					"nat": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Perform NAT lookup before applying flow-isolation rules

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Flow isolation settings

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *qos_policy_cake) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *qos_policy_cakeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *qos_policy_cake) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *qos_policy_cakeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *qos_policy_cake) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *qos_policy_cakeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *qos_policy_cake) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *qos_policy_cakeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
