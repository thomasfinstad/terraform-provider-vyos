// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &protocols_bfd_peer{}

// var _ resource.ResourceWithImportState = &protocols_bfd_peer{}

// protocols_bfd_peer defines the resource implementation.
type protocols_bfd_peer struct {
	client   *http.Client
	vyosPath []string
}

// protocols_bfd_peerModel describes the resource data model.
type protocols_bfd_peerModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Profile   types.String `tfsdk:"profile"`
	Echo_mode types.String `tfsdk:"echo_mode"`
	Passive   types.String `tfsdk:"passive"`
	Shutdown  types.String `tfsdk:"shutdown"`
	Multihop  types.String `tfsdk:"multihop"`
	Vrf       types.String `tfsdk:"vrf"`

	// TagNodes

	// Nodes
	Source   types.List `tfsdk:"source"`
	Interval types.List `tfsdk:"interval"`
}

// Metadata method to define the resource type name.
func (r *protocols_bfd_peer) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_protocols_bfd_peer"
}

// protocols_bfd_peerResource method to return the example resource reference
func protocols_bfd_peerResource() resource.Resource {
	return &protocols_bfd_peer{
		vyosPath: []string{
			"protocols",
			"bfd",
			"peer",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *protocols_bfd_peer) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Bidirectional Forwarding Detection (BFD)

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Configures BFD peer to listen and talk to

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  BFD peer IPv4 address  |
|  ipv6  |  BFD peer IPv6 address  |
`,
			},

			"profile": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
			},

			"echo_mode": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enables the echo transmission mode

`,
			},

			"passive": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Do not attempt to start sessions

`,
			},

			"shutdown": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable this peer

`,
			},

			"multihop": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Allow this BFD peer to not be directly connected

`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"source": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"interface": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
					},

					"address": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Local address to bind our peer listener to

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Local IPv4 address used to connect to the peer  |
|  ipv6  |  Local IPv6 address used to connect to the peer  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Bind listener to specified interface/address, mandatory for IPv6

`,
			},

			"interval": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"receive": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Minimum interval of receiving control packets

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  Interval in milliseconds  |
`,

						Default:  stringdefault.StaticString(`300`),
						Computed: true,
					},

					"transmit": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Minimum interval of transmitting control packets

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  Interval in milliseconds  |
`,

						Default:  stringdefault.StaticString(`300`),
						Computed: true,
					},

					"multiplier": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Multiplier to determine packet loss

|  Format  |  Description  |
|----------|---------------|
|  u32:2-255  |  Remote transmission interval will be multiplied by this value  |
`,

						Default:  stringdefault.StaticString(`3`),
						Computed: true,
					},

					"echo_interval": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Echo receive transmission interval

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  The minimal echo receive transmission interval that this system is capable of handling  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Configure timer intervals

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *protocols_bfd_peer) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *protocols_bfd_peerModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *protocols_bfd_peer) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *protocols_bfd_peerModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *protocols_bfd_peer) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *protocols_bfd_peerModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *protocols_bfd_peer) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *protocols_bfd_peerModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
