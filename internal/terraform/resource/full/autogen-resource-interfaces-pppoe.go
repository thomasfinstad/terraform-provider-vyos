// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &interfaces_pppoe{}

// var _ resource.ResourceWithImportState = &interfaces_pppoe{}

// interfaces_pppoe defines the resource implementation.
type interfaces_pppoe struct {
	client   *http.Client
	vyosPath []string
}

// interfaces_pppoeModel describes the resource data model.
type interfaces_pppoeModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Access_concentrator    types.String `tfsdk:"access_concentrator"`
	Connect_on_demand      types.String `tfsdk:"connect_on_demand"`
	No_default_route       types.String `tfsdk:"no_default_route"`
	Default_route_distance types.String `tfsdk:"default_route_distance"`
	Description            types.String `tfsdk:"description"`
	Disable                types.String `tfsdk:"disable"`
	Idle_timeout           types.String `tfsdk:"idle_timeout"`
	Host_uniq              types.String `tfsdk:"host_uniq"`
	Source_interface       types.String `tfsdk:"source_interface"`
	Local_address          types.String `tfsdk:"local_address"`
	Mtu                    types.String `tfsdk:"mtu"`
	No_peer_dns            types.String `tfsdk:"no_peer_dns"`
	Remote_address         types.String `tfsdk:"remote_address"`
	Service_name           types.String `tfsdk:"service_name"`
	Redirect               types.String `tfsdk:"redirect"`
	Vrf                    types.String `tfsdk:"vrf"`

	// TagNodes

	// Nodes
	Authentication   types.List `tfsdk:"authentication"`
	Dhcpvsix_options types.List `tfsdk:"dhcpv6_options"`
	Ip               types.List `tfsdk:"ip"`
	Ipvsix           types.List `tfsdk:"ipv6"`
	Mirror           types.List `tfsdk:"mirror"`
}

// Metadata method to define the resource type name.
func (r *interfaces_pppoe) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interfaces_pppoe"
}

// interfaces_pppoeResource method to return the example resource reference
func interfaces_pppoeResource() resource.Resource {
	return &interfaces_pppoe{
		vyosPath: []string{
			"interfaces",
			"pppoe",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *interfaces_pppoe) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Point-to-Point Protocol over Ethernet (PPPoE) Interface

|  Format  |  Description  |
|----------|---------------|
|  pppoeN  |  PPPoE dialer interface name  |
`,
			},

			"access_concentrator": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Access concentrator name

`,
			},

			"connect_on_demand": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Establishment connection automatically when traffic is sent

`,
			},

			"no_default_route": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Do not install default route to system

`,
			},

			"default_route_distance": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

				Default:  stringdefault.StaticString(`210`),
				Computed: true,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"idle_timeout": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Delay before disconnecting idle session (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-86400  |  Idle timeout in seconds  |
`,
			},

			"host_uniq": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `PPPoE RFC2516 host-uniq tag

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Host-uniq tag as byte string in HEX  |
`,
			},

			"source_interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |
`,
			},

			"local_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IPv4 address of local end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of local end of the PPPoE link  |
`,
			},

			"mtu": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-1500  |  Maximum Transmission Unit in byte  |
`,

				Default:  stringdefault.StaticString(`1492`),
				Computed: true,
			},

			"no_peer_dns": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Do not use DNS servers provided by the peer

`,
			},

			"remote_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IPv4 address of remote end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of remote end of the PPPoE link  |
`,
			},

			"service_name": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Service name, only connect to access concentrators advertising this

`,
			},

			"redirect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"authentication": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"username": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Username used for authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Username  |
`,
					},

					"password": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Password used for authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Password  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Authentication settings

`,
			},

			"dhcpv6_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"pd": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"interface": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"address": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
											},

											"sla_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
								},

								"length": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

									Default:  stringdefault.StaticString(`64`),
									Computed: true,
								},
							},
						},
						Optional: true,
						MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
					},

					"duid": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
					},

					"parameters_only": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Acquire only config parameters, no address

`,
					},

					"rapid_commit": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
					},

					"temporary": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `IPv6 temporary address

`,
					},
				},
				Optional: true,
				MarkdownDescription: `DHCPv6 client settings/options

`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"source_validation": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"address": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"autoconf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 address configuration modes

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"mirror": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"ingress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},

					"egress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Mirror ingress/egress packets

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *interfaces_pppoe) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *interfaces_pppoeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *interfaces_pppoe) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *interfaces_pppoeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *interfaces_pppoe) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *interfaces_pppoeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *interfaces_pppoe) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *interfaces_pppoeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
