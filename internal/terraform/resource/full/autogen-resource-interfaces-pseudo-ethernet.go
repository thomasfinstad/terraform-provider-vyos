// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &interfaces_pseudo_ethernet{}

// var _ resource.ResourceWithImportState = &interfaces_pseudo_ethernet{}

// interfaces_pseudo_ethernet defines the resource implementation.
type interfaces_pseudo_ethernet struct {
	ResourceName string
	client       *client.Client
}

func (r *interfaces_pseudo_ethernet) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// interfaces_pseudo_ethernetModel describes the resource data model.
type interfaces_pseudo_ethernetModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Address             types.String `tfsdk:"address"`
	Description         types.String `tfsdk:"description"`
	Disable_link_detect types.String `tfsdk:"disable_link_detect"`
	Disable             types.String `tfsdk:"disable"`
	Vrf                 types.String `tfsdk:"vrf"`
	Source_interface    types.String `tfsdk:"source_interface"`
	Mac                 types.String `tfsdk:"mac"`
	Mode                types.String `tfsdk:"mode"`
	Mtu                 types.String `tfsdk:"mtu"`
	Redirect            types.String `tfsdk:"redirect"`

	// TagNodes
	Vif_s types.Map `tfsdk:"vif_s"`
	Vif   types.Map `tfsdk:"vif"`

	// Nodes
	Dhcp_options     types.List `tfsdk:"dhcp_options"`
	Dhcpvsix_options types.List `tfsdk:"dhcpv6_options"`
	Ip               types.List `tfsdk:"ip"`
	Ipvsix           types.List `tfsdk:"ipv6"`
	Mirror           types.List `tfsdk:"mirror"`
}

func (m interfaces_pseudo_ethernetModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"interfaces",
		"pseudo-ethernet",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"address":             m.Address,
		"description":         m.Description,
		"disable_link_detect": m.Disable_link_detect,
		"disable":             m.Disable,
		"vrf":                 m.Vrf,
		"source_interface":    m.Source_interface,
		"mac":                 m.Mac,
		"mode":                m.Mode,
		"mtu":                 m.Mtu,
		"redirect":            m.Redirect,

		// TagNodes
		"vif_s": m.Vif_s,
		"vif":   m.Vif,

		// Nodes
		"dhcp_options":   m.Dhcp_options,
		"dhcpv6_options": m.Dhcpvsix_options,
		"ip":             m.Ip,
		"ipv6":           m.Ipvsix,
		"mirror":         m.Mirror,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r interfaces_pseudo_ethernet) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_interfaces_pseudo_ethernet"
	resp.TypeName = r.ResourceName
}

// interfaces_pseudo_ethernetResource method to return the example resource reference
func interfaces_pseudo_ethernetResource() resource.Resource {
	return &interfaces_pseudo_ethernet{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r interfaces_pseudo_ethernet) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Pseudo Ethernet Interface (Macvlan)

|  Format  |  Description  |
|----------|---------------|
|  pethN  |  Pseudo Ethernet interface name  |
`,
			},

			"vif_s": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"vif_c": schema.MapNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{

									"description": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
									},

									"address": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
									},

									"disable_link_detect": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Ignore link state changes

`,
									},

									"disable": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Administratively disable interface

`,
									},

									"mac": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
									},

									"mtu": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

										Default:  stringdefault.StaticString(`1500`),
										Computed: true,
									},

									"redirect": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
									},

									"vrf": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
									},

									"dhcp_options": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"client_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
											},

											"host_name": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Override system host-name sent to DHCP server

`,
											},

											"mtu": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
											},

											"vendor_class_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
											},

											"no_default_route": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Do not install default route to system

`,
											},

											"default_route_distance": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

												Default:  stringdefault.StaticString(`210`),
												Computed: true,
											},

											"reject": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `DHCP client settings/options

`,
									},

									"dhcpv6_options": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"pd": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"interface": schema.MapNestedAttribute{
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{

																	"address": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
																	},

																	"sla_id": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
																	},
																},
															},
															Optional: true,
															MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
														},

														"length": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

															Default:  stringdefault.StaticString(`64`),
															Computed: true,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
											},

											"duid": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
											},

											"parameters_only": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Acquire only config parameters, no address

`,
											},

											"rapid_commit": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
											},

											"temporary": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `IPv6 temporary address

`,
											},
										},
										Optional: true,
										MarkdownDescription: `DHCPv6 client settings/options

`,
									},

									"ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"adjust_mss": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
											},

											"arp_cache_timeout": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

												Default:  stringdefault.StaticString(`30`),
												Computed: true,
											},

											"disable_arp_filter": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable ARP filter on this interface

`,
											},

											"disable_forwarding": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable IP forwarding on this interface

`,
											},

											"enable_directed_broadcast": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
											},

											"enable_arp_accept": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP accept on this interface

`,
											},

											"enable_arp_announce": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP announce on this interface

`,
											},

											"enable_arp_ignore": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP ignore on this interface

`,
											},

											"enable_proxy_arp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable proxy-arp on this interface

`,
											},

											"proxy_arp_pvlan": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
											},

											"source_validation": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv4 routing parameters

`,
									},

									"ipv6": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"adjust_mss": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
											},

											"disable_forwarding": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable IP forwarding on this interface

`,
											},

											"dup_addr_detect_transmits": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
											},

											"address": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"autoconf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
													},

													"eui64": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
													},

													"no_default_link_local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Remove the default link-local address from the interface

`,
													},
												},
												Optional: true,
												MarkdownDescription: `IPv6 address configuration modes

`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv6 routing parameters

`,
									},

									"mirror": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"ingress": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
											},

											"egress": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Mirror ingress/egress packets

`,
									},
								},
							},
							Optional: true,
							MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"address": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
						},

						"disable_link_detect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Ignore link state changes

`,
						},

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Administratively disable interface

`,
						},

						"protocol": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

|  Format  |  Description  |
|----------|---------------|
|  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
|  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |
`,

							Default:  stringdefault.StaticString(`802.1ad`),
							Computed: true,
						},

						"mac": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
						},

						"mtu": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

							Default:  stringdefault.StaticString(`1500`),
							Computed: true,
						},

						"redirect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
						},

						"vrf": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
						},

						"dhcp_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"client_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
								},

								"host_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Override system host-name sent to DHCP server

`,
								},

								"mtu": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
								},

								"vendor_class_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
								},

								"no_default_route": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Do not install default route to system

`,
								},

								"default_route_distance": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

									Default:  stringdefault.StaticString(`210`),
									Computed: true,
								},

								"reject": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCP client settings/options

`,
						},

						"dhcpv6_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"pd": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"interface": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"address": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
														},

														"sla_id": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
											},

											"length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

												Default:  stringdefault.StaticString(`64`),
												Computed: true,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
								},

								"duid": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
								},

								"parameters_only": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Acquire only config parameters, no address

`,
								},

								"rapid_commit": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
								},

								"temporary": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv6 temporary address

`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCPv6 client settings/options

`,
						},

						"ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"arp_cache_timeout": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

									Default:  stringdefault.StaticString(`30`),
									Computed: true,
								},

								"disable_arp_filter": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable ARP filter on this interface

`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"enable_directed_broadcast": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
								},

								"enable_arp_accept": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP accept on this interface

`,
								},

								"enable_arp_announce": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP announce on this interface

`,
								},

								"enable_arp_ignore": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP ignore on this interface

`,
								},

								"enable_proxy_arp": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable proxy-arp on this interface

`,
								},

								"proxy_arp_pvlan": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
								},

								"source_validation": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv4 routing parameters

`,
						},

						"ipv6": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"dup_addr_detect_transmits": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
								},

								"address": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"autoconf": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
										},

										"eui64": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
										},

										"no_default_link_local": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove the default link-local address from the interface

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IPv6 address configuration modes

`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv6 routing parameters

`,
						},

						"mirror": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"ingress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},

								"egress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Mirror ingress/egress packets

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |
`,
			},

			"vif": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"address": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
						},

						"disable_link_detect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Ignore link state changes

`,
						},

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Administratively disable interface

`,
						},

						"egress_qos": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |
`,
						},

						"ingress_qos": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |
`,
						},

						"mac": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
						},

						"mtu": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

							Default:  stringdefault.StaticString(`1500`),
							Computed: true,
						},

						"redirect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
						},

						"vrf": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
						},

						"dhcp_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"client_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
								},

								"host_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Override system host-name sent to DHCP server

`,
								},

								"mtu": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
								},

								"vendor_class_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
								},

								"no_default_route": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Do not install default route to system

`,
								},

								"default_route_distance": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

									Default:  stringdefault.StaticString(`210`),
									Computed: true,
								},

								"reject": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCP client settings/options

`,
						},

						"dhcpv6_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"pd": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"interface": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"address": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
														},

														"sla_id": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
											},

											"length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

												Default:  stringdefault.StaticString(`64`),
												Computed: true,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
								},

								"duid": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
								},

								"parameters_only": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Acquire only config parameters, no address

`,
								},

								"rapid_commit": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
								},

								"temporary": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv6 temporary address

`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCPv6 client settings/options

`,
						},

						"ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"arp_cache_timeout": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

									Default:  stringdefault.StaticString(`30`),
									Computed: true,
								},

								"disable_arp_filter": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable ARP filter on this interface

`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"enable_directed_broadcast": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
								},

								"enable_arp_accept": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP accept on this interface

`,
								},

								"enable_arp_announce": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP announce on this interface

`,
								},

								"enable_arp_ignore": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP ignore on this interface

`,
								},

								"enable_proxy_arp": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable proxy-arp on this interface

`,
								},

								"proxy_arp_pvlan": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
								},

								"source_validation": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv4 routing parameters

`,
						},

						"ipv6": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"dup_addr_detect_transmits": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
								},

								"address": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"autoconf": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
										},

										"eui64": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
										},

										"no_default_link_local": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove the default link-local address from the interface

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IPv6 address configuration modes

`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv6 routing parameters

`,
						},

						"mirror": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"ingress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},

								"egress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Mirror ingress/egress packets

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |
`,
			},

			"address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable_link_detect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Ignore link state changes

`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"source_interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Physical interface the traffic will go through

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Physical interface used for traffic forwarding  |
`,
			},

			"mac": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
			},

			"mode": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Receive mode (default: private)

|  Format  |  Description  |
|----------|---------------|
|  private  |  No communication with other pseudo-devices  |
|  vepa  |  Virtual Ethernet Port Aggregator reflective relay  |
|  bridge  |  Simple bridge between pseudo-devices  |
|  passthru  |  Promicious mode passthrough of underlying device  |
`,

				Default:  stringdefault.StaticString(`private`),
				Computed: true,
			},

			"mtu": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

				Default:  stringdefault.StaticString(`1500`),
				Computed: true,
			},

			"redirect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
			},

			"dhcp_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"client_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
					},

					"host_name": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Override system host-name sent to DHCP server

`,
					},

					"mtu": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
					},

					"vendor_class_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
					},

					"no_default_route": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Do not install default route to system

`,
					},

					"default_route_distance": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

						Default:  stringdefault.StaticString(`210`),
						Computed: true,
					},

					"reject": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `DHCP client settings/options

`,
			},

			"dhcpv6_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"pd": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"interface": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"address": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
											},

											"sla_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
								},

								"length": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

									Default:  stringdefault.StaticString(`64`),
									Computed: true,
								},
							},
						},
						Optional: true,
						MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
					},

					"duid": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
					},

					"parameters_only": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Acquire only config parameters, no address

`,
					},

					"rapid_commit": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
					},

					"temporary": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `IPv6 temporary address

`,
					},
				},
				Optional: true,
				MarkdownDescription: `DHCPv6 client settings/options

`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"arp_cache_timeout": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"disable_arp_filter": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable ARP filter on this interface

`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"enable_directed_broadcast": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
					},

					"enable_arp_accept": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP accept on this interface

`,
					},

					"enable_arp_announce": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP announce on this interface

`,
					},

					"enable_arp_ignore": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP ignore on this interface

`,
					},

					"enable_proxy_arp": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable proxy-arp on this interface

`,
					},

					"proxy_arp_pvlan": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
					},

					"source_validation": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"dup_addr_detect_transmits": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
					},

					"address": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"autoconf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
							},

							"eui64": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
							},

							"no_default_link_local": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Remove the default link-local address from the interface

`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 address configuration modes

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"mirror": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"ingress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},

					"egress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Mirror ingress/egress packets

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r interfaces_pseudo_ethernet) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r interfaces_pseudo_ethernet) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *interfaces_pseudo_ethernetModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r interfaces_pseudo_ethernet) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *interfaces_pseudo_ethernetModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r interfaces_pseudo_ethernet) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *interfaces_pseudo_ethernetModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
