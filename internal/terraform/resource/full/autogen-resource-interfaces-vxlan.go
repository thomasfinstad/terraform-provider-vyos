// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &interfaces_vxlan{}

// var _ resource.ResourceWithImportState = &interfaces_vxlan{}

// interfaces_vxlan defines the resource implementation.
type interfaces_vxlan struct {
	client   *http.Client
	vyosPath []string
}

// interfaces_vxlanModel describes the resource data model.
type interfaces_vxlanModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Address          types.String `tfsdk:"address"`
	Description      types.String `tfsdk:"description"`
	Disable          types.String `tfsdk:"disable"`
	External         types.String `tfsdk:"external"`
	Gpe              types.String `tfsdk:"gpe"`
	Group            types.String `tfsdk:"group"`
	Mac              types.String `tfsdk:"mac"`
	Mtu              types.String `tfsdk:"mtu"`
	Port             types.String `tfsdk:"port"`
	Source_address   types.String `tfsdk:"source_address"`
	Source_interface types.String `tfsdk:"source_interface"`
	Remote           types.String `tfsdk:"remote"`
	Redirect         types.String `tfsdk:"redirect"`
	Vrf              types.String `tfsdk:"vrf"`
	Vni              types.String `tfsdk:"vni"`

	// TagNodes

	// Nodes
	Ip         types.List `tfsdk:"ip"`
	Ipvsix     types.List `tfsdk:"ipv6"`
	Mirror     types.List `tfsdk:"mirror"`
	Parameters types.List `tfsdk:"parameters"`
}

// Metadata method to define the resource type name.
func (r *interfaces_vxlan) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interfaces_vxlan"
}

// interfaces_vxlanResource method to return the example resource reference
func interfaces_vxlanResource() resource.Resource {
	return &interfaces_vxlan{
		vyosPath: []string{
			"interfaces",
			"vxlan",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *interfaces_vxlan) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Virtual Extensible LAN (VXLAN) Interface

|  Format  |  Description  |
|----------|---------------|
|  vxlanN  |  VXLAN interface name  |
`,
			},

			"address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"external": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Use external control plane

`,
			},

			"gpe": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enable Generic Protocol extension (VXLAN-GPE)

`,
			},

			"group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Multicast group address for VXLAN interface

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Multicast IPv4 group address  |
|  ipv6  |  Multicast IPv6 group address  |
`,
			},

			"mac": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
			},

			"mtu": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:1200-16000  |  Maximum Transmission Unit in byte  |
`,

				Default:  stringdefault.StaticString(`1450`),
				Computed: true,
			},

			"port": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,

				Default:  stringdefault.StaticString(`8472`),
				Computed: true,
			},

			"source_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Source IP address used to initiate connection

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 source address  |
|  ipv6  |  IPv6 source address  |
`,
			},

			"source_interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |
`,
			},

			"remote": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Tunnel remote address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Tunnel remote IPv4 address  |
|  ipv6  |  Tunnel remote IPv6 address  |
`,
			},

			"redirect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"vni": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Virtual Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  VXLAN virtual network identifier  |
`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"arp_cache_timeout": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"disable_arp_filter": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable ARP filter on this interface

`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"enable_directed_broadcast": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
					},

					"enable_arp_accept": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP accept on this interface

`,
					},

					"enable_arp_announce": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP announce on this interface

`,
					},

					"enable_arp_ignore": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP ignore on this interface

`,
					},

					"enable_proxy_arp": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable proxy-arp on this interface

`,
					},

					"proxy_arp_pvlan": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
					},

					"source_validation": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"dup_addr_detect_transmits": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
					},

					"address": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"autoconf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
							},

							"eui64": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
							},

							"no_default_link_local": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Remove the default link-local address from the interface

`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 address configuration modes

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"mirror": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"ingress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},

					"egress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Mirror ingress/egress packets

`,
			},

			"parameters": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"nolearning": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Do not add unknown addresses into forwarding database

`,
					},

					"ip": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"df": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Usage of the DF (don't Fragment) bit in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  set  |  Always set DF (don't fragment) bit  |
|  unset  |  Always unset DF (don't fragment) bit  |
|  inherit  |  Copy from the original IP header  |
`,

								Default:  stringdefault.StaticString(`unset`),
								Computed: true,
							},

							"tos": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies TOS value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-99  |  Type of Service (TOS)  |
`,

								Default:  stringdefault.StaticString(`inherit`),
								Computed: true,
							},

							"ttl": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies TTL value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Inherit - copy value from original IP header  |
|  u32:1-255  |  Time to Live  |
`,

								Default:  stringdefault.StaticString(`16`),
								Computed: true,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv4 specific tunnel parameters

`,
					},

					"ipv6": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"flowlabel": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specifies the flow label to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  inherit  |  Copy field from original header  |
|  0x0-0x0fffff  |  Tunnel key, or hex value  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 specific tunnel parameters

`,
					},
				},
				Optional: true,
				MarkdownDescription: `VXLAN tunnel parameters

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *interfaces_vxlan) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *interfaces_vxlanModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *interfaces_vxlan) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *interfaces_vxlanModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *interfaces_vxlan) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *interfaces_vxlanModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *interfaces_vxlan) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *interfaces_vxlanModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
