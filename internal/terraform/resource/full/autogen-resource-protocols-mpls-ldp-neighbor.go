// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &protocols_mpls_ldp_neighbor{}

// var _ resource.ResourceWithImportState = &protocols_mpls_ldp_neighbor{}

// protocols_mpls_ldp_neighbor defines the resource implementation.
type protocols_mpls_ldp_neighbor struct {
	client   *http.Client
	vyosPath []string
}

// protocols_mpls_ldp_neighborModel describes the resource data model.
type protocols_mpls_ldp_neighborModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Password         types.String `tfsdk:"password"`
	Ttl_security     types.String `tfsdk:"ttl_security"`
	Session_holdtime types.String `tfsdk:"session_holdtime"`

	// TagNodes

	// Nodes

}

// Metadata method to define the resource type name.
func (r *protocols_mpls_ldp_neighbor) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_protocols_mpls_ldp_neighbor"
}

// protocols_mpls_ldp_neighborResource method to return the example resource reference
func protocols_mpls_ldp_neighborResource() resource.Resource {
	return &protocols_mpls_ldp_neighbor{
		vyosPath: []string{
			"protocols",
			"mpls",
			"ldp",
			"neighbor",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *protocols_mpls_ldp_neighbor) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Multiprotocol Label Switching (MPLS)

Label Distribution Protocol (LDP)

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `LDP neighbor parameters

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Neighbor IPv4 address  |
`,
			},

			"password": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Neighbor password

`,
			},

			"ttl_security": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Neighbor TTL security

|  Format  |  Description  |
|----------|---------------|
|  u32:1-254  |  TTL  |
|  disable  |  Disable neighbor TTL security  |
`,
			},

			"session_holdtime": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Session IPv4 hold time

|  Format  |  Description  |
|----------|---------------|
|  u32:15-65535  |  Time in seconds  |
`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *protocols_mpls_ldp_neighbor) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *protocols_mpls_ldp_neighborModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *protocols_mpls_ldp_neighbor) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *protocols_mpls_ldp_neighborModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *protocols_mpls_ldp_neighbor) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *protocols_mpls_ldp_neighborModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *protocols_mpls_ldp_neighbor) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *protocols_mpls_ldp_neighborModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
