// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &high_availability_virtual_server{}

// var _ resource.ResourceWithImportState = &high_availability_virtual_server{}

// high_availability_virtual_server defines the resource implementation.
type high_availability_virtual_server struct {
	ResourceName string
	client       *client.Client
}

func (r *high_availability_virtual_server) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// high_availability_virtual_serverModel describes the resource data model.
type high_availability_virtual_serverModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Algorithm           types.String `tfsdk:"algorithm"`
	Delay_loop          types.String `tfsdk:"delay_loop"`
	Forward_method      types.String `tfsdk:"forward_method"`
	Fwmark              types.String `tfsdk:"fwmark"`
	Port                types.String `tfsdk:"port"`
	Persistence_timeout types.String `tfsdk:"persistence_timeout"`
	Protocol            types.String `tfsdk:"protocol"`

	// TagNodes
	Real_server types.Map `tfsdk:"real_server"`

	// Nodes

}

func (m high_availability_virtual_serverModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"high-availability",
		"virtual-server",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"algorithm":           m.Algorithm,
		"delay_loop":          m.Delay_loop,
		"forward_method":      m.Forward_method,
		"fwmark":              m.Fwmark,
		"port":                m.Port,
		"persistence_timeout": m.Persistence_timeout,
		"protocol":            m.Protocol,

		// TagNodes
		"real_server": m.Real_server,

		// Nodes

	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r high_availability_virtual_server) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_high_availability_virtual_server"
	resp.TypeName = r.ResourceName
}

// high_availability_virtual_serverResource method to return the example resource reference
func high_availability_virtual_serverResource() resource.Resource {
	return &high_availability_virtual_server{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r high_availability_virtual_server) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `High availability settings

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Load-balancing virtual server address

`,
			},

			"real_server": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"port": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Numeric IP port  |
`,
						},

						"connection_timeout": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Server connection timeout

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  Connection timeout to remote server  |
`,
						},

						"health_check": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"script": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Health check script file

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Health check script

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Real server address

`,
			},

			"algorithm": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Schedule algorithm (default - least-connection)

|  Format  |  Description  |
|----------|---------------|
|  round-robin  |  Round robin  |
|  weighted-round-robin  |  Weighted round robin  |
|  least-connection  |  Least connection  |
|  weighted-least-connection  |  Weighted least connection  |
|  source-hashing  |  Source hashing  |
|  destination-hashing  |  Destination hashing  |
|  locality-based-least-connection  |  Locality-Based least connection  |
`,

				Default:  stringdefault.StaticString(`least-connection`),
				Computed: true,
			},

			"delay_loop": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interval between health-checks (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Interval in seconds  |
`,

				Default:  stringdefault.StaticString(`10`),
				Computed: true,
			},

			"forward_method": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Forwarding method

|  Format  |  Description  |
|----------|---------------|
|  direct  |  Direct routing  |
|  nat  |  NAT  |
|  tunnel  |  Tunneling  |
`,

				Default:  stringdefault.StaticString(`nat`),
				Computed: true,
			},

			"fwmark": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Match fwmark value

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2147483647  |  Match firewall mark value  |
`,
			},

			"port": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Numeric IP port  |
`,
			},

			"persistence_timeout": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Timeout for persistent connections

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  Timeout for persistent connections  |
`,

				Default:  stringdefault.StaticString(`300`),
				Computed: true,
			},

			"protocol": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Protocol for port checks

|  Format  |  Description  |
|----------|---------------|
|  tcp  |  TCP  |
|  udp  |  UDP  |
`,

				Default:  stringdefault.StaticString(`tcp`),
				Computed: true,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r high_availability_virtual_server) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r high_availability_virtual_server) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *high_availability_virtual_serverModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r high_availability_virtual_server) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *high_availability_virtual_serverModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r high_availability_virtual_server) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *high_availability_virtual_serverModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
