// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vrf_name{}

// var _ resource.ResourceWithImportState = &vrf_name{}

// vrf_name defines the resource implementation.
type vrf_name struct {
	ResourceName string
	client       *client.Client
}

func (r *vrf_name) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// vrf_nameModel describes the resource data model.
type vrf_nameModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description types.String `tfsdk:"description"`
	Disable     types.String `tfsdk:"disable"`
	Table       types.String `tfsdk:"table"`
	Vni         types.String `tfsdk:"vni"`

	// TagNodes

	// Nodes
	Ip        types.List `tfsdk:"ip"`
	Ipvsix    types.List `tfsdk:"ipv6"`
	Protocols types.List `tfsdk:"protocols"`
}

func (m vrf_nameModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"vrf",
		"name",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"description": m.Description,
		"disable":     m.Disable,
		"table":       m.Table,
		"vni":         m.Vni,

		// TagNodes

		// Nodes
		"ip":        m.Ip,
		"ipv6":      m.Ipvsix,
		"protocols": m.Protocols,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r vrf_name) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_vrf_name"
	resp.TypeName = r.ResourceName
}

// vrf_nameResource method to return the example resource reference
func vrf_nameResource() resource.Resource {
	return &vrf_name{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r vrf_name) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Virtual Routing and Forwarding

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Virtual Routing and Forwarding instance

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"table": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Routing table associated with this instance

|  Format  |  Description  |
|----------|---------------|
|  u32:100-65535  |  Routing table ID  |
`,
			},

			"vni": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Virtual Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  VXLAN virtual network identifier  |
`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"protocols": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"bgp": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"neighbor": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"local_as": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"no_prepend": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"replace_as": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Prepend only local-as from/to updates for eBGP peers

`,
															},
														},
														Optional: true,
														MarkdownDescription: `Disable prepending local-as from/to updates for eBGP peers

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Specify alternate ASN for this BGP process

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number (ASN)  |
`,
										},

										"local_role": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"strict": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Neighbor must send this exact capability, otherwise a role missmatch notification will be sent

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Local role for BGP neighbor (RFC9234)

|  Format  |  Description  |
|----------|---------------|
|  customer  |  Using Transit  |
|  peer  |  Public/Private Peering  |
|  provider  |  Providing Transit  |
|  rs-client  |  RS Client  |
|  rs-server  |  Route Server  |
`,
										},

										"advertisement_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Minimum interval for sending routing updates

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600  |  Advertisement interval in seconds  |
`,
										},

										"description": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
										},

										"disable_capability_negotiation": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable capability negotiation with this neighbor

`,
										},

										"disable_connected_check": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable check to see if eBGP peer address is a connected route

`,
										},

										"ebgp_multihop": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Allow this EBGP neighbor to not be on a directly connected network

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of hops  |
`,
										},

										"graceful_restart": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP graceful restart functionality

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable BGP graceful restart at peer level  |
|  disable  |  Disable BGP graceful restart at peer level  |
|  restart-helper  |  Enable BGP graceful restart helper only functionality  |
`,
										},

										"override_capability": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Ignore capability negotiation with specified neighbor

`,
										},

										"passive": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Do not initiate a session with this neighbor

`,
										},

										"password": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP MD5 password

`,
										},

										"peer_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |
`,
										},

										"port": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Neighbor BGP port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor BGP port number  |
`,
										},

										"remote_as": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |
`,
										},

										"shutdown": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Administratively shutdown this neighbor

`,
										},

										"solo": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Do not send back prefixes learned from the neighbor

`,
										},

										"strict_capability_match": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable strict capability negotiation

`,
										},

										"update_source": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Source IP of routing updates

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of route source  |
|  ipv6  |  IPv6 address of route source  |
|  txt  |  Interface as route source  |
`,
										},

										"address_family": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"ipv4_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv4)

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 BGP neighbor parameters

`,
												},

												"ipv6_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv6)

`,
														},

														"nexthop_local": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"unchanged": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Leave link-local nexthop unchanged for this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Nexthop attributes

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 BGP neighbor parameters

`,
												},

												"ipv4_labeled_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv4)

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 Labeled Unicast BGP neighbor parameters

`,
												},

												"ipv6_labeled_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv6)

`,
														},

														"nexthop_local": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"unchanged": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Leave link-local nexthop unchanged for this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Nexthop attributes

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 Labeled Unicast BGP neighbor parameters

`,
												},

												"ipv4_vpn": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 VPN BGP neighbor parameters

`,
												},

												"ipv6_vpn": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"nexthop_local": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"unchanged": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Leave link-local nexthop unchanged for this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Nexthop attributes

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 VPN BGP neighbor parameters

`,
												},

												"ipv4_flowspec": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 Flow Specification BGP neighbor parameters

`,
												},

												"ipv6_flowspec": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 Flow Specification BGP neighbor parameters

`,
												},

												"ipv4_multicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv4)

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 Multicast BGP neighbor parameters

`,
												},

												"ipv6_multicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"nexthop_local": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"unchanged": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Leave link-local nexthop unchanged for this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Nexthop attributes

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 Multicast BGP neighbor parameters

`,
												},

												"l2vpn_evpn": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `L2VPN EVPN BGP settings

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Address-family parameters

`,
										},

										"bfd": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"profile": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
												},

												"check_control_plane_failure": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD) support

`,
										},

										"capability": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"dynamic": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Advertise dynamic capability to this neighbor

`,
												},

												"extended_nexthop": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Advertise extended-nexthop capability to this neighbor

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Advertise capabilities to this peer-group

`,
										},

										"interface": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"peer_group": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |
`,
												},

												"remote_as": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |
`,
												},

												"source_interface": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |
`,
												},

												"v6only": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"peer_group": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |
`,
														},

														"remote_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |
`,
														},
													},
													Optional: true,
													MarkdownDescription: `Enable BGP with v6 link-local only

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Interface parameters

`,
										},

										"timers": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"connect": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `BGP connect timer for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Connect timer in seconds  |
|  0  |  Disable connect timer  |
`,
												},

												"holdtime": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `BGP hold timer for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hold timer in seconds  |
|  0  |  Hold timer disabled  |
`,
												},

												"keepalive": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `BGP keepalive interval for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Keepalive interval in seconds  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Neighbor timers

`,
										},

										"ttl_security": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"hops": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Number of the maximum number of hops to the BGP peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-254  |  Number of hops  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Ttl security mechanism

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `BGP neighbor

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  BGP neighbor IP address  |
|  ipv6  |  BGP neighbor IPv6 address  |
|  txt  |  Interface name  |
`,
							},

							"peer_group": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"local_as": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"no_prepend": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"replace_as": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Prepend only local-as from/to updates for eBGP peers

`,
															},
														},
														Optional: true,
														MarkdownDescription: `Disable prepending local-as from/to updates for eBGP peers

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Specify alternate ASN for this BGP process

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number (ASN)  |
`,
										},

										"local_role": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"strict": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Neighbor must send this exact capability, otherwise a role missmatch notification will be sent

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Local role for BGP neighbor (RFC9234)

|  Format  |  Description  |
|----------|---------------|
|  customer  |  Using Transit  |
|  peer  |  Public/Private Peering  |
|  provider  |  Providing Transit  |
|  rs-client  |  RS Client  |
|  rs-server  |  Route Server  |
`,
										},

										"description": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
										},

										"disable_capability_negotiation": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable capability negotiation with this neighbor

`,
										},

										"disable_connected_check": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable check to see if eBGP peer address is a connected route

`,
										},

										"ebgp_multihop": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Allow this EBGP neighbor to not be on a directly connected network

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of hops  |
`,
										},

										"graceful_restart": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP graceful restart functionality

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable BGP graceful restart at peer level  |
|  disable  |  Disable BGP graceful restart at peer level  |
|  restart-helper  |  Enable BGP graceful restart helper only functionality  |
`,
										},

										"override_capability": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Ignore capability negotiation with specified neighbor

`,
										},

										"passive": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Do not initiate a session with this neighbor

`,
										},

										"password": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP MD5 password

`,
										},

										"remote_as": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |
`,
										},

										"shutdown": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Administratively shutdown this neighbor

`,
										},

										"update_source": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Source IP of routing updates

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of route source  |
|  ipv6  |  IPv6 address of route source  |
|  txt  |  Interface as route source  |
`,
										},

										"address_family": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"ipv4_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv4)

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `IPv4-Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `IPv4-Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv4 BGP neighbor parameters

`,
												},

												"ipv6_unicast": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"addpath_tx_all": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise all paths to a neighbor

`,
														},

														"addpath_tx_per_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use addpath to advertise the bestpath per each neighboring AS

`,
														},

														"as_override": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Override ASN in outbound updates to configured neighbor local-as

`,
														},

														"maximum_prefix": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to accept from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"maximum_prefix_out": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Maximum number of prefixes to be sent to this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Prefix limit  |
`,
														},

														"remove_private_as": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Remove private AS numbers from AS path in outbound route updates

`,
														},

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"unsuppress_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route-map to selectively unsuppress suppressed routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"weight": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Default weight for routes from this peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Default weight  |
`,
														},

														"capability": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"orf": schema.SingleNestedAttribute{
																	Attributes: map[string]schema.Attribute{

																		"prefix_list": schema.SingleNestedAttribute{
																			Attributes: map[string]schema.Attribute{

																				"receive": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to receive the ORF

`,
																				},

																				"send": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `Capability to send the ORF

`,
																				},
																			},
																			Optional: true,
																			MarkdownDescription: `Advertise prefix-list ORF capability to this peer

`,
																		},
																	},
																	Optional: true,
																	MarkdownDescription: `Advertise ORF capability to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Advertise capabilities to this neighbor (IPv6)

`,
														},

														"nexthop_local": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"unchanged": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Leave link-local nexthop unchanged for this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Nexthop attributes

`,
														},

														"prefix_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter outgoing route updates to this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Prefix-list to filter incoming route updates from this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv6 prefix-list  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Prefix-list to filter route updates to/from this peer

`,
														},

														"conditionally_advertise": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"advertise_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to conditionally advertise routes

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in exist-map are installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"non_exist_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Advertise routes only if prefixes in non-exist-map are not installed in BGP table

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Use route-map to conditionally advertise routes

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"disable_send_community": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"extended": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending extended community attributes to this peer

`,
																},

																"standard": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Disable sending standard community attributes to this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable sending community attributes to this peer

`,
														},

														"distribute_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter outgoing route updates to this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter outgoing route updates to this peer-group  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Access-list to filter incoming route updates from this peer-group

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Access-list to filter incoming route updates from this peer-group  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Access-list to filter route updates to/from this peer-group

`,
														},

														"filter_list": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter outgoing route updates to this peer

`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `As-path-list to filter incoming route updates from this peer

`,
																},
															},
															Optional: true,
															MarkdownDescription: `as-path-list to filter route updates to/from this peer

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},

														"default_originate": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"route_map": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Originate default route to this peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `IPv6 BGP neighbor parameters

`,
												},

												"l2vpn_evpn": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"route_reflector_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route reflector client

`,
														},

														"route_server_client": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Peer is a route server client

`,
														},

														"allowas_in": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"number": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Number of occurrences of AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times AS is allowed in path  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Accept route that contains the local-as in the as-path

`,
														},

														"attribute_unchanged": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"as_path": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send AS path unchanged

`,
																},

																"med": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send multi-exit discriminator unchanged

`,
																},

																"next_hop": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Send nexthop unchanged

`,
																},
															},
															Optional: true,
															MarkdownDescription: `BGP attributes are sent unchanged

`,
														},

														"nexthop_self": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"force": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Set the next hop to self for reflected routes

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Disable the next hop calculation for this peer

`,
														},

														"route_map": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
														},

														"soft_reconfiguration": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"inbound": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Enable inbound soft reconfiguration

`,
																},
															},
															Optional: true,
															MarkdownDescription: `Soft reconfiguration for peer

`,
														},
													},
													Optional: true,
													MarkdownDescription: `L2VPN EVPN BGP settings

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Address-family parameters

`,
										},

										"bfd": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"profile": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
												},

												"check_control_plane_failure": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD) support

`,
										},

										"capability": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"dynamic": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Advertise dynamic capability to this neighbor

`,
												},

												"extended_nexthop": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Advertise extended-nexthop capability to this neighbor

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Advertise capabilities to this peer-group

`,
										},

										"ttl_security": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"hops": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Number of the maximum number of hops to the BGP peer

|  Format  |  Description  |
|----------|---------------|
|  u32:1-254  |  Number of hops  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Ttl security mechanism

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Name of peer-group

`,
							},

							"system_as": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Autonomous System Number (ASN)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number  |
`,
							},

							"route_map": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
							},

							"address_family": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"ipv4_unicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  BGP aggregate network  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"backdoor": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Network as a backdoor route

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  BGP network  |
`,
											},

											"distance": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"prefix": schema.MapNestedAttribute{
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{

																"distance": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Administrative distance for prefix

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
																},
															},
														},
														Optional: true,
														MarkdownDescription: `Administrative distance for a specific BGP prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Administrative distance for a specific BGP prefix  |
`,
													},

													"external": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  eBGP routes administrative distance  |
`,
													},

													"internal": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  iBGP routes administrative distance  |
`,
													},

													"local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Locally originated BGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Locally originated BGP routes administrative distance  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Administrative distances for BGP routes

`,
											},

											"export": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `to/from default instance VPN RIB

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Export routes from this address-family

`,
											},

											"import": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `to/from default instance VPN RIB

`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to import from

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Import routes to this address-family

`,
											},

											"label": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `For routes leaked from current address-family to VPN

|  Format  |  Description  |
|----------|---------------|
|  auto  |  Automatically assign a label  |
|  u32:0-1048575  |  Label Value  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Label value for VRF

`,
											},

											"maximum_paths": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ebgp": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP maximum paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-256  |  Number of paths to consider  |
`,
													},

													"ibgp": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP maximum paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-256  |  Number of paths to consider  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Forward packets over multiple paths

`,
											},

											"rd": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `For routes leaked from current address-family to VPN

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Specify route distinguisher

`,
											},

											"route_map": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},

															"import": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
											},

											"route_target": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"both": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target both import and export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},

															"import": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target import

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Specify route target list

`,
											},

											"redistribute": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"table": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Redistribute non-main Kernel Routing Table

`,
													},

													"connected": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute connected routes into BGP

`,
													},

													"isis": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute IS-IS routes into BGP

`,
													},

													"kernel": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute kernel routes into BGP

`,
													},

													"ospf": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute OSPF routes into BGP

`,
													},

													"rip": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute RIP routes into BGP

`,
													},

													"babel": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute Babel routes into BGP

`,
													},

													"static": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute static routes into BGP

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute routes from other protocols into BGP

`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv4 BGP settings

`,
									},

									"ipv4_multicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  BGP aggregate network/prefix  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"backdoor": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use BGP network/prefix as a backdoor route

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into multicast IPv4 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Multicast IPv4 BGP network/prefix  |
`,
											},

											"distance": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"prefix": schema.MapNestedAttribute{
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{

																"distance": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Administrative distance for prefix

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
																},
															},
														},
														Optional: true,
														MarkdownDescription: `Administrative distance for a specific BGP prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Administrative distance for a specific BGP prefix  |
`,
													},

													"external": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  eBGP routes administrative distance  |
`,
													},

													"internal": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  iBGP routes administrative distance  |
`,
													},

													"local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Locally originated BGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Locally originated BGP routes administrative distance  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Administrative distances for BGP routes

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Multicast IPv4 BGP settings

`,
									},

									"ipv4_labeled_unicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  BGP aggregate network/prefix  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"backdoor": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use BGP network/prefix as a backdoor route

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into labeled unicast IPv4 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Labeled Unicast IPv4 BGP network/prefix  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Labeled Unicast IPv4 BGP settings

`,
									},

									"ipv4_flowspec": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"local_install": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"interface": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Interface

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Apply local policy routing to interface

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Flowspec IPv4 BGP settings

`,
									},

									"ipv4_vpn": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"rd": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
														},

														"label": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `MPLS label value assigned to route

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048575  |  MPLS label value  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into unicast VPN IPv4 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Unicast VPN IPv4 BGP network/prefix  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Unicast VPN IPv4 BGP settings

`,
									},

									"ipv6_unicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Aggregate network  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"path_limit": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `AS-path hopcount limit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  AS path hop count limit  |
`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP network

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Aggregate network  |
`,
											},

											"distance": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"prefix": schema.MapNestedAttribute{
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{

																"distance": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Administrative distance for prefix

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
																},
															},
														},
														Optional: true,
														MarkdownDescription: `Administrative distance for a specific BGP prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Administrative distance for a specific BGP prefix  |
`,
													},

													"external": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  eBGP routes administrative distance  |
`,
													},

													"internal": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  iBGP routes administrative distance  |
`,
													},

													"local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Locally originated BGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Locally originated BGP routes administrative distance  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Administrative distances for BGP routes

`,
											},

											"export": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `to/from default instance VPN RIB

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Export routes from this address-family

`,
											},

											"import": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `to/from default instance VPN RIB

`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to import from

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Import routes to this address-family

`,
											},

											"label": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `For routes leaked from current address-family to VPN

|  Format  |  Description  |
|----------|---------------|
|  auto  |  Automatically assign a label  |
|  u32:0-1048575  |  Label Value  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Label value for VRF

`,
											},

											"maximum_paths": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ebgp": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP maximum paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-256  |  Number of paths to consider  |
`,
													},

													"ibgp": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP maximum paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-256  |  Number of paths to consider  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Forward packets over multiple paths

`,
											},

											"rd": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `For routes leaked from current address-family to VPN

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Specify route distinguisher

`,
											},

											"route_map": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route-map to filter outgoing route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},

															"import": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route-map to filter incoming route updates

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Route-map to filter route updates to/from this peer

`,
											},

											"route_target": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"vpn": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"both": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target both import and export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},

															"import": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target import

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},

															"export": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Route Target export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Between current address-family and VPN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Specify route target list

`,
											},

											"redistribute": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"table": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Redistribute non-main Kernel Routing Table

`,
													},

													"connected": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute connected routes into BGP

`,
													},

													"kernel": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute kernel routes into BGP

`,
													},

													"ospfv3": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute OSPFv3 routes into BGP

`,
													},

													"ripng": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute RIPng routes into BGP

`,
													},

													"babel": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute Babel routes into BGP

`,
													},

													"static": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Metric for redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Metric for redistributed routes  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute static routes into BGP

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute routes from other protocols into BGP

`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv6 BGP settings

`,
									},

									"ipv6_multicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  BGP aggregate network/prefix  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"path_limit": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `AS-path hopcount limit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  AS path hop count limit  |
`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into multicast IPv6 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Multicast IPv6 BGP network/prefix  |
`,
											},

											"distance": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"prefix": schema.MapNestedAttribute{
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{

																"distance": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Administrative distance for prefix

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
																},
															},
														},
														Optional: true,
														MarkdownDescription: `Administrative distance for a specific BGP prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Administrative distance for a specific BGP prefix  |
`,
													},

													"external": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `eBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  eBGP routes administrative distance  |
`,
													},

													"internal": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `iBGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  iBGP routes administrative distance  |
`,
													},

													"local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Locally originated BGP routes administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Locally originated BGP routes administrative distance  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Administrative distances for BGP routes

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Multicast IPv6 BGP settings

`,
									},

									"ipv6_labeled_unicast": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"aggregate_address": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"as_set": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},

														"summary_only": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Announce the aggregate summary network only

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  BGP aggregate network/prefix  |
`,
											},

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"backdoor": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Use BGP network/prefix as a backdoor route

`,
														},

														"route_map": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into labeled unicast IPv6 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Labeled Unicast IPv6 BGP network/prefix  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Labeled Unicast IPv6 BGP settings

`,
									},

									"ipv6_flowspec": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"local_install": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"interface": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Interface

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Apply local policy routing to interface

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Flowspec IPv6 BGP settings

`,
									},

									"ipv6_vpn": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"network": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"rd": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
														},

														"label": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `MPLS label value assigned to route

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048575  |  MPLS label value  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Import BGP network/prefix into unicast VPN IPv6 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Unicast VPN IPv6 BGP network/prefix  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Unicast VPN IPv6 BGP settings

`,
									},

									"l2vpn_evpn": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"vni": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"advertise_default_gw": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Advertise All default g/w mac-ip routes in EVPN

`,
														},

														"advertise_svi_ip": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Advertise svi mac-ip routes in EVPN

`,
														},

														"rd": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
														},

														"route_target": schema.SingleNestedAttribute{
															Attributes: map[string]schema.Attribute{

																"both": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route Target both import and export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
																},

																"import": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route Target import

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
																},

																"export": schema.StringAttribute{

																	Optional: true,
																	MarkdownDescription: `Route Target export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
																},
															},
															Optional: true,
															MarkdownDescription: `Route Target

`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `VXLAN Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16777215  |  VNI number  |
`,
											},

											"advertise_all_vni": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Advertise All local VNIs

`,
											},

											"advertise_default_gw": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Advertise All default g/w mac-ip routes in EVPN

`,
											},

											"advertise_svi_ip": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Advertise svi mac-ip routes in EVPN

`,
											},

											"rd": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
											},

											"advertise_pip": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `EVPN system primary IP

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |
`,
											},

											"rt_auto_derive": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Auto derivation of Route Target (RFC8365)

`,
											},

											"advertise": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ipv4": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"unicast": schema.SingleNestedAttribute{
																Attributes: map[string]schema.Attribute{

																	"route_map": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																	},
																},
																Optional: true,
																MarkdownDescription: `IPv4 address family

`,
															},
														},
														Optional: true,
														MarkdownDescription: `IPv4 address family

`,
													},

													"ipv6": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"unicast": schema.SingleNestedAttribute{
																Attributes: map[string]schema.Attribute{

																	"route_map": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
																	},
																},
																Optional: true,
																MarkdownDescription: `IPv4 address family

`,
															},
														},
														Optional: true,
														MarkdownDescription: `IPv6 address family

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Advertise prefix routes

`,
											},

											"route_target": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"both": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Route Target both import and export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
													},

													"import": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Route Target import

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
													},

													"export": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Route Target export

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Route Target

`,
											},

											"flooding": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"disable": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Do not flood any BUM packets

`,
													},

													"head_end_replication": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Flood BUM packets using head-end replication

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Specify handling for BUM packets

`,
											},
										},
										Optional: true,
										MarkdownDescription: `L2VPN EVPN BGP settings

`,
									},
								},
								Optional: true,
								MarkdownDescription: `BGP address-family parameters

`,
							},

							"listen": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"range": schema.MapNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{

												"peer_group": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |
`,
												},
											},
										},
										Optional: true,
										MarkdownDescription: `BGP dynamic neighbors listen range

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 dynamic neighbors listen range  |
|  ipv6net  |  IPv6 dynamic neighbors listen range  |
`,
									},

									"limit": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum number of dynamic neighbors that can be created

|  Format  |  Description  |
|----------|---------------|
|  u32:1-5000  |  BGP neighbor limit  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Listen for and accept BGP dynamic neighbors from range

`,
							},

							"parameters": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"always_compare_med": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Always compare MEDs from different neighbors

`,
									},

									"cluster_id": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Route-reflector cluster-id

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Route-reflector cluster-id  |
`,
									},

									"deterministic_med": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Compare MEDs between different peers in the same AS

`,
									},

									"ebgp_requires_policy": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Require in and out policy for eBGP peers (RFC8212)

`,
									},

									"fast_convergence": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Teardown sessions immediately whenever peer becomes unreachable

`,
									},

									"graceful_shutdown": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Graceful shutdown

`,
									},

									"log_neighbor_changes": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Log neighbor up/down changes and reset reason

`,
									},

									"minimum_holdtime": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `BGP minimum holdtime

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Minimum holdtime in seconds  |
`,
									},

									"network_import_check": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable IGP route check for network statements

`,
									},

									"route_reflector_allow_outbound_policy": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Route reflector client allow policy outbound

`,
									},

									"no_client_to_client_reflection": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Disable client to client route reflection

`,
									},

									"no_fast_external_failover": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Disable immediate session reset on peer link down event

`,
									},

									"no_suppress_duplicates": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Disable suppress duplicate updates if the route actually not changed

`,
									},

									"reject_as_sets": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Reject routes with AS_SET or AS_CONFED_SET flag

`,
									},

									"shutdown": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Administrative shutdown of the BGP instance

`,
									},

									"suppress_fib_pending": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Advertise only routes that are programmed in kernel to peers

`,
									},

									"router_id": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Override default router identifier

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Router-ID in IP address format  |
`,
									},

									"bestpath": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"bandwidth": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Link Bandwidth attribute

|  Format  |  Description  |
|----------|---------------|
|  default-weight-for-missing  |  Assign low default weight (1) to paths not having link bandwidth  |
|  ignore  |  Ignore link bandwidth (do regular ECMP, not weighted)  |
|  skip-missing  |  Ignore paths without link bandwidth for ECMP (if other paths have it)  |
`,
											},

											"compare_routerid": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Compare the router-id for identical EBGP paths

`,
											},

											"as_path": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"confed": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Compare AS-path lengths including confederation sets and sequences

`,
													},

													"ignore": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Ignore AS-path length in selecting a route

`,
													},

													"multipath_relax": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Allow load sharing across routes that have different AS paths (but same length)

`,
													},
												},
												Optional: true,
												MarkdownDescription: `AS-path attribute comparison parameters

`,
											},

											"med": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"confed": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Compare MEDs among confederation paths

`,
													},

													"missing_as_worst": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Treat missing route as a MED as the least preferred one

`,
													},
												},
												Optional: true,
												MarkdownDescription: `MED attribute comparison parameters

`,
											},

											"peer_type": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"multipath_relax": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Allow load sharing across routes learned from different peer types

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Peer type

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Default bestpath selection mechanism

`,
									},

									"confederation": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"identifier": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Confederation AS identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Confederation AS id  |
`,
											},

											"peers": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Peer ASs in the BGP confederation

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Peer AS number  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `AS confederation parameters

`,
									},

									"conditional_advertisement": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"timer": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Set period to rescan BGP table to check if condition is met

|  Format  |  Description  |
|----------|---------------|
|  u32:5-240  |  Period to rerun the conditional advertisement scanner process  |
`,

												Default:  stringdefault.StaticString(`60`),
												Computed: true,
											},
										},
										Optional: true,
										MarkdownDescription: `Conditional advertisement settings

`,
									},

									"dampening": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"half_life": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Half-life time for dampening

|  Format  |  Description  |
|----------|---------------|
|  u32:1-45  |  Half-life penalty in minutes  |
`,
											},

											"max_suppress_time": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum duration to suppress a stable route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Maximum suppress duration in minutes  |
`,
											},

											"re_use": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Threshold to start reusing a route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-20000  |  Re-use penalty points  |
`,
											},

											"start_suppress_time": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `When to start suppressing a route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-20000  |  Start-suppress penalty points  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Enable route-flap dampening

`,
									},

									"default": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"local_pref": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Default local preference

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Local preference  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `BGP defaults

`,
									},

									"distance": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"prefix": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"distance": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Administrative distance for prefix

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Administrative distance for a specific BGP prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Administrative distance for a specific BGP prefix  |
`,
											},

											"global": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"external": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Administrative distance for external BGP routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for external BGP routes  |
`,
													},

													"internal": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Administrative distance for internal BGP routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for internal BGP routes  |
`,
													},

													"local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Administrative distance for local BGP routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance for internal BGP routes  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Global administratives distances for BGP routes

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Administratives distances for BGP routes

`,
									},

									"graceful_restart": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"stalepath_time": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum time to hold onto restarting neighbors stale paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-3600  |  Hold time in seconds  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Graceful restart capability parameters

`,
									},
								},
								Optional: true,
								MarkdownDescription: `BGP parameters

`,
							},

							"timers": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"holdtime": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `BGP hold timer for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hold timer in seconds  |
|  0  |  Hold timer disabled  |
`,
									},

									"keepalive": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `BGP keepalive interval for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Keepalive interval in seconds  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `BGP protocol timers

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Border Gateway Protocol (BGP)

`,
					},

					"eigrp": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"local_as": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Autonomous System Number (ASN)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Autonomous System Number  |
`,
							},

							"maximum_paths": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Forward packets over multiple paths

|  Format  |  Description  |
|----------|---------------|
|  u32:1-32  |  Number of paths  |
`,
							},

							"network": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable routing on an IP network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  EIGRP network prefix  |
`,
							},

							"passive_interface": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Suppress routing updates on an interface

`,
							},

							"redistribute": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Redistribute information from another routing protocol

|  Format  |  Description  |
|----------|---------------|
|  bgp  |  Border Gateway Protocol (BGP)  |
|  connected  |  Connected routes  |
|  nhrp  |  Next Hop Resolution Protocol (NHRP)  |
|  ospf  |  Open Shortest Path First (OSPFv2)  |
|  rip  |  Routing Information Protocol (RIP)  |
|  babel  |  Babel routing protocol (Babel)  |
|  static  |  Statically configured routes  |
|  vnc  |  Virtual Network Control (VNC)  |
`,
							},

							"route_map": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
							},

							"router_id": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Override default router identifier

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Router-ID in IP address format  |
`,
							},

							"variance": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Control load balancing variance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-128  |  Metric variance multiplier  |
`,
							},

							"metric": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"weights": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Modify metric coefficients

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  K1  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Modify metrics and parameters for advertisement

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Enhanced Interior Gateway Routing Protocol (EIGRP)

`,
					},

					"isis": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"interface": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"circuit_type": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Configure circuit type for interface

|  Format  |  Description  |
|----------|---------------|
|  level-1  |  Level-1 only adjacencies are formed  |
|  level-1-2  |  Level-1-2 adjacencies are formed  |
|  level-2-only  |  Level-2 only adjacencies are formed  |
`,
										},

										"hello_padding": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Add padding to IS-IS hello packets

`,
										},

										"hello_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Set Hello interval  |
`,
										},

										"hello_multiplier": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-100  |  Set multiplier for Hello holding time  |
`,
										},

										"metric": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
										},

										"passive": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Configure passive mode for interface

`,
										},

										"priority": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set priority for Designated Router election

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  Priority value  |
`,
										},

										"psnp_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set PSNP interval

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  PSNP interval in seconds  |
`,
										},

										"no_three_way_handshake": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable three-way handshake

`,
										},

										"bfd": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"profile": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
										},

										"network": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"point_to_point": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `point-to-point network type

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Set network type

`,
										},

										"password": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"plaintext_password": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Plain-text authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Circuit password  |
`,
												},

												"md5": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Level-wide password  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Configure the authentication password for a circuit

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Interface params

`,
							},

							"dynamic_hostname": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Dynamic hostname for IS-IS

`,
							},

							"level": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `IS-IS level number

|  Format  |  Description  |
|----------|---------------|
|  level-1  |  Act as a station router  |
|  level-1-2  |  Act as both a station and an area router  |
|  level-2  |  Act as an area router  |
`,
							},

							"log_adjacency_changes": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Log adjacency state changes

`,
							},

							"lsp_gen_interval": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Minimum interval between regenerating same LSP

|  Format  |  Description  |
|----------|---------------|
|  u32:1-120  |  Minimum interval in seconds  |
`,
							},

							"lsp_mtu": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Configure the maximum size of generated LSPs

|  Format  |  Description  |
|----------|---------------|
|  u32:128-4352  |  Maximum size of generated LSPs  |
`,

								Default:  stringdefault.StaticString(`1497`),
								Computed: true,
							},

							"lsp_refresh_interval": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `LSP refresh interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65235  |  LSP refresh interval in seconds  |
`,
							},

							"max_lsp_lifetime": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Maximum LSP lifetime

|  Format  |  Description  |
|----------|---------------|
|  u32:350-65535  |  LSP lifetime in seconds  |
`,
							},

							"metric_style": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Use old-style (ISO 10589) or new-style packet formats

|  Format  |  Description  |
|----------|---------------|
|  narrow  |  Use old style of TLVs with narrow metric  |
|  transition  |  Send and accept both styles of TLVs during transition  |
|  wide  |  Use new style of TLVs to carry wider metric  |
`,
							},

							"net": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `A Network Entity Title for this process (ISO only)

|  Format  |  Description  |
|----------|---------------|
|  XX.XXXX. ... .XXX.XX  |  Network entity title (NET)  |
`,
							},

							"purge_originator": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Use the RFC 6232 purge-originator

`,
							},

							"set_attached_bit": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set attached bit to identify as L1/L2 router for inter-area traffic

`,
							},

							"set_overload_bit": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set overload bit to avoid any transit traffic

`,
							},

							"spf_interval": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Minimum interval between SPF calculations

|  Format  |  Description  |
|----------|---------------|
|  u32:1-120  |  Interval in seconds  |
`,
							},

							"route_map": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
							},

							"area_password": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"plaintext_password": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Plain-text authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Circuit password  |
`,
									},

									"md5": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Level-wide password  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Configure the authentication password for an area

`,
							},

							"default_information": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"originate": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"ipv4": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"always": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Always advertise default route

`,
															},

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Distribute default route into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"always": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Always advertise default route

`,
															},

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Distribute default route into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Distribute default route for IPv4

`,
											},

											"ipv6": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"always": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Always advertise default route

`,
															},

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Distribute default route into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"always": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Always advertise default route

`,
															},

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Distribute default route into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Distribute default route for IPv6

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Distribute a default route

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Control distribution of default information

`,
							},

							"domain_password": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"plaintext_password": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Plain-text authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Circuit password  |
`,
									},

									"md5": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Level-wide password  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Set the authentication password for a routing domain

`,
							},

							"traffic_engineering": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"enable": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable MPLS traffic engineering extensions

`,
									},

									"address": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `MPLS traffic engineering router ID

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Show IS-IS neighbor adjacencies

`,
							},

							"segment_routing": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"prefix": schema.MapNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{

												"absolute": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"value": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify the absolute value of prefix segment/label ID

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  The absolute segment/label ID value  |
`,
														},

														"explicit_null": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Request upstream neighbor to replace segment/label with explicit null label

`,
														},

														"no_php_flag": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not request penultimate hop popping for segment/label

`,
														},
													},
													Optional: true,
													MarkdownDescription: `Specify the absolute value of prefix segment/label ID

`,
												},

												"index": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"value": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify the index value of prefix segment/label ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  The index segment/label ID value  |
`,
														},

														"explicit_null": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Request upstream neighbor to replace segment/label with explicit null label

`,
														},

														"no_php_flag": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not request penultimate hop popping for segment/label

`,
														},
													},
													Optional: true,
													MarkdownDescription: `Specify the index value of prefix segment/label ID

`,
												},
											},
										},
										Optional: true,
										MarkdownDescription: `Static IPv4/IPv6 prefix segment/label mapping

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 prefix segment  |
|  ipv6net  |  IPv6 prefix segment  |
`,
									},

									"maximum_label_depth": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum MPLS labels allowed for this router

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16  |  MPLS label depth  |
`,
									},

									"global_block": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"low_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label lower bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value (recommended minimum value: 300)  |
`,
											},

											"high_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label upper bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Segment Routing Global Block label range

`,
									},

									"local_block": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"low_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label lower bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value (recommended minimum value: 300)  |
`,
											},

											"high_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label upper bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Segment Routing Local Block label range

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Segment-Routing (SPRING) settings

`,
							},

							"redistribute": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"ipv4": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"bgp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Border Gateway Protocol (BGP)

`,
											},

											"connected": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute connected routes into IS-IS

`,
											},

											"kernel": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute kernel routes into IS-IS

`,
											},

											"ospf": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute OSPF routes into IS-IS

`,
											},

											"rip": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute RIP routes into IS-IS

`,
											},

											"babel": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute Babel routes into IS-IS

`,
											},

											"static": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute static routes into IS-IS

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute IPv4 routes

`,
									},

									"ipv6": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"bgp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute BGP routes into IS-IS

`,
											},

											"connected": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute connected routes into IS-IS

`,
											},

											"kernel": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute kernel routes into IS-IS

`,
											},

											"ospf6": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute OSPFv3 routes into IS-IS

`,
											},

											"ripng": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute RIPng routes into IS-IS

`,
											},

											"babel": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute Babel routes into IS-IS

`,
											},

											"static": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"level_1": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-1

`,
													},

													"level_2": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"metric": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |
`,
															},

															"route_map": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
															},
														},
														Optional: true,
														MarkdownDescription: `Redistribute into level-2

`,
													},
												},
												Optional: true,
												MarkdownDescription: `Redistribute static routes into IS-IS

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute IPv6 routes

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Redistribute information from another routing protocol

`,
							},

							"spf_delay_ietf": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"init_delay": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Delay used while in QUIET state

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in QUIET state (in ms)  |
`,
									},

									"short_delay": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Delay used while in SHORT_WAIT state

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in SHORT_WAIT state (in ms)  |
`,
									},

									"long_delay": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Delay used while in LONG_WAIT

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in LONG_WAIT state in ms  |
`,
									},

									"holddown": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Time with no received IGP events before considering IGP stable

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Time with no received IGP events before considering IGP stable in ms  |
`,
									},

									"time_to_learn": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum duration needed to learn all the events related to a single failure

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Maximum duration needed to learn all the events related to a single failure in ms  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `IETF SPF delay algorithm

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Intermediate System to Intermediate System (IS-IS)

`,
					},

					"ospf": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"access_list": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"export": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Filter for outgoing routing update

|  Format  |  Description  |
|----------|---------------|
|  bgp  |  Filter BGP routes  |
|  connected  |  Filter connected routes  |
|  isis  |  Filter IS-IS routes  |
|  kernel  |  Filter Kernel routes  |
|  rip  |  Filter RIP routes  |
|  static  |  Filter static routes  |
`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Access list to filter networks in routing updates

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Access-list number  |
`,
							},

							"area": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"range": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"cost": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Metric for this range

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Metric for this range  |
`,
													},

													"not_advertise": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Do not advertise this range

`,
													},

													"substitute": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Advertise area range as another prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Advertise area range as another prefix  |
`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Summarize routes matching a prefix (border routers only)

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Area range prefix  |
`,
										},

										"virtual_link": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"dead_interval": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |
`,

														Default:  stringdefault.StaticString(`40`),
														Computed: true,
													},

													"hello_interval": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |
`,

														Default:  stringdefault.StaticString(`10`),
														Computed: true,
													},

													"retransmit_interval": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |
`,

														Default:  stringdefault.StaticString(`5`),
														Computed: true,
													},

													"transmit_delay": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |
`,

														Default:  stringdefault.StaticString(`1`),
														Computed: true,
													},

													"authentication": schema.SingleNestedAttribute{
														Attributes: map[string]schema.Attribute{

															"plaintext_password": schema.StringAttribute{

																Optional: true,
																MarkdownDescription: `Plain text password

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Plain text password (8 characters or less)  |
`,
															},

															"md5": schema.SingleNestedAttribute{
																Attributes: map[string]schema.Attribute{

																	"key_id": schema.MapNestedAttribute{
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{

																				"md5_key": schema.StringAttribute{

																					Optional: true,
																					MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  MD5 Key (16 characters or less)  |
`,
																				},
																			},
																		},
																		Optional: true,
																		MarkdownDescription: `MD5 key id

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  MD5 key id  |
`,
																	},
																},
																Optional: true,
																MarkdownDescription: `MD5 key id

`,
															},
														},
														Optional: true,
														MarkdownDescription: `Authentication

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Virtual link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  OSPF area in dotted decimal notation  |
`,
										},

										"authentication": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `OSPF area authentication type

|  Format  |  Description  |
|----------|---------------|
|  plaintext-password  |  Use plain-text authentication  |
|  md5  |  Use MD5 authentication  |
`,
										},

										"network": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `OSPF network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  OSPF network  |
`,
										},

										"shortcut": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Area shortcut mode

|  Format  |  Description  |
|----------|---------------|
|  default  |  Set default  |
|  disable  |  Disable shortcutting mode  |
|  enable  |  Enable shortcutting mode  |
`,
										},

										"export_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set the filter for networks announced to other areas

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Access-list number  |
`,
										},

										"import_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set the filter for networks from other areas announced

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Access-list number  |
`,
										},

										"area_type": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"normal": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Normal OSPF area

`,
												},

												"nssa": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"default_cost": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Summary-default cost of an NSSA area

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Summary default cost  |
`,
														},

														"no_summary": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not inject inter-area routes into stub

`,
														},

														"translate": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Configure NSSA-ABR

|  Format  |  Description  |
|----------|---------------|
|  always  |  Always translate LSA types  |
|  candidate  |  Translate for election  |
|  never  |  Never translate LSA types  |
`,

															Default:  stringdefault.StaticString(`candidate`),
															Computed: true,
														},
													},
													Optional: true,
													MarkdownDescription: `Not-So-Stubby OSPF area

`,
												},

												"stub": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"default_cost": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Summary-default cost

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Summary default cost  |
`,
														},

														"no_summary": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not inject inter-area routes into the stub

`,
														},
													},
													Optional: true,
													MarkdownDescription: `Stub OSPF area

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Area type

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `OSPF area settings

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area number in decimal notation  |
|  ipv4  |  OSPF area number in dotted decimal notation  |
`,
							},

							"interface": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"area": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable OSPF on this interface

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area ID as decimal notation  |
|  ipv4  |  OSPF area ID in IP address notation  |
`,
										},

										"dead_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`40`),
											Computed: true,
										},

										"hello_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`10`),
											Computed: true,
										},

										"retransmit_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`5`),
											Computed: true,
										},

										"transmit_delay": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |
`,

											Default:  stringdefault.StaticString(`1`),
											Computed: true,
										},

										"cost": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interface cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  OSPF interface cost  |
`,
										},

										"mtu_ignore": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
										},

										"priority": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  OSPF router priority cost  |
`,

											Default:  stringdefault.StaticString(`1`),
											Computed: true,
										},

										"bandwidth": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interface bandwidth (Mbit/s)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-100000  |  Bandwidth in Megabit/sec (for calculating OSPF cost)  |
`,
										},

										"hello_multiplier": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Hello multiplier factor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of Hellos to send each second  |
`,
										},

										"network": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Network type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Broadcast network type  |
|  non-broadcast  |  Non-broadcast network type  |
|  point-to-multipoint  |  Point-to-multipoint network type  |
|  point-to-point  |  Point-to-point network type  |
`,
										},

										"authentication": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"plaintext_password": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Plain text password

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Plain text password (8 characters or less)  |
`,
												},

												"md5": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"key_id": schema.MapNestedAttribute{
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{

																	"md5_key": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `MD5 authentication type

|  Format  |  Description  |
|----------|---------------|
|  txt  |  MD5 Key (16 characters or less)  |
`,
																	},
																},
															},
															Optional: true,
															MarkdownDescription: `MD5 key id

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  MD5 key id  |
`,
														},
													},
													Optional: true,
													MarkdownDescription: `MD5 key id

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Authentication

`,
										},

										"bfd": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"profile": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
										},

										"passive": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"disable": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Disable instance

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Suppress routing updates on an interface

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Interface configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
							},

							"neighbor": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"poll_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Dead neighbor polling interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Seconds between dead neighbor polling interval  |
`,

											Default:  stringdefault.StaticString(`60`),
											Computed: true,
										},

										"priority": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Neighbor priority in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Neighbor priority  |
`,

											Default:  stringdefault.StaticString(`0`),
											Computed: true,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Specify neighbor router

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Neighbor IP address  |
`,
							},

							"default_metric": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Metric of redistributed routes

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Metric of redistributed routes  |
`,
							},

							"maximum_paths": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Maximum multiple paths (ECMP)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-64  |  Maximum multiple paths (ECMP)  |
`,
							},

							"passive_interface": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Suppress routing updates on an interface

|  Format  |  Description  |
|----------|---------------|
|  default  |  Default to suppress routing updates on all interfaces  |
`,
							},

							"route_map": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
							},

							"auto_cost": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"reference_bandwidth": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Reference bandwidth method to assign cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967  |  Reference bandwidth cost in Mbits/sec  |
`,

										Default:  stringdefault.StaticString(`100`),
										Computed: true,
									},
								},
								Optional: true,
								MarkdownDescription: `Calculate interface cost according to bandwidth

`,
							},

							"default_information": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"originate": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"always": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Always advertise a default route

`,
											},

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Distribute a default route

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Default route advertisment settings

`,
							},

							"distance": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"global": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance  |
`,
									},

									"ospf": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"external": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for external routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for external routes  |
`,
											},

											"inter_area": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for inter-area routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for inter-area routes  |
`,
											},

											"intra_area": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for intra-area routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for intra-area routes  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `OSPF administrative distance

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Administrative distance

`,
							},

							"log_adjacency_changes": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"detail": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Log all state changes

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Log adjacency state changes

`,
							},

							"max_metric": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"router_lsa": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"administrative": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Administratively apply, for an indefinite period

`,
											},

											"on_shutdown": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Advertise stub-router prior to full shutdown of OSPF

|  Format  |  Description  |
|----------|---------------|
|  u32:5-100  |  Time (seconds) to advertise self as stub-router  |
`,
											},

											"on_startup": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Automatically advertise stub Router-LSA on startup of OSPF

|  Format  |  Description  |
|----------|---------------|
|  u32:5-86400  |  Time (seconds) to advertise self as stub-router  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Advertise own Router-LSA with infinite distance (stub router)

`,
									},
								},
								Optional: true,
								MarkdownDescription: `OSPF maximum and infinite-distance metric

`,
							},

							"mpls_te": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"enable": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable MPLS-TE functionality

`,
									},

									"router_address": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Stable IP address of the advertising router

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Stable IP address of the advertising router  |
`,

										Default:  stringdefault.StaticString(`0.0.0.0`),
										Computed: true,
									},
								},
								Optional: true,
								MarkdownDescription: `MultiProtocol Label Switching-Traffic Engineering (MPLS-TE) parameters

`,
							},

							"parameters": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"abr_type": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `OSPF ABR type

|  Format  |  Description  |
|----------|---------------|
|  cisco  |  Cisco ABR type  |
|  ibm  |  IBM ABR type  |
|  shortcut  |  Shortcut ABR type  |
|  standard  |  Standard ABR type  |
`,

										Default:  stringdefault.StaticString(`cisco`),
										Computed: true,
									},

									"opaque_lsa": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable the Opaque-LSA capability (rfc2370)

`,
									},

									"rfc1583_compatibility": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable RFC1583 criteria for handling AS external routes

`,
									},

									"router_id": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Override default router identifier

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Router-ID in IP address format  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `OSPF specific parameters

`,
							},

							"segment_routing": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"prefix": schema.MapNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{

												"index": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"value": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Specify the index value of prefix segment/label ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  The index segment/label ID value  |
`,
														},

														"explicit_null": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Request upstream neighbor to replace segment/label with explicit null label

`,
														},

														"no_php_flag": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not request penultimate hop popping for segment/label

`,
														},
													},
													Optional: true,
													MarkdownDescription: `Specify the index value of prefix segment/label ID

`,
												},
											},
										},
										Optional: true,
										MarkdownDescription: `Static IPv4 prefix segment/label mapping

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 prefix segment  |
`,
									},

									"maximum_label_depth": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum MPLS labels allowed for this router

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16  |  MPLS label depth  |
`,
									},

									"global_block": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"low_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label lower bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value (recommended minimum value: 300)  |
`,
											},

											"high_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label upper bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Segment Routing Global Block label range

`,
									},

									"local_block": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"low_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label lower bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value (recommended minimum value: 300)  |
`,
											},

											"high_label_value": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `MPLS label upper bound

|  Format  |  Description  |
|----------|---------------|
|  u32:16-1048575  |  Label value  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Segment Routing Local Block label range

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Segment-Routing (SPRING) settings

`,
							},

							"redistribute": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"table": schema.MapNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{

												"metric": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
												},

												"metric_type": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

													Default:  stringdefault.StaticString(`2`),
													Computed: true,
												},

												"route_map": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
												},
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute non-main Kernel Routing Table

|  Format  |  Description  |
|----------|---------------|
|  u32:1-200  |  Policy route table number  |
`,
									},

									"bgp": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute BGP routes

`,
									},

									"connected": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute connected routes

`,
									},

									"isis": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute IS-IS routes

`,
									},

									"kernel": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute Kernel routes

`,
									},

									"rip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute RIP routes

`,
									},

									"babel": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute Babel routes

`,
									},

									"static": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute statically configured routes

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Redistribute information from another routing protocol

`,
							},

							"refresh": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"timers": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Refresh timer

|  Format  |  Description  |
|----------|---------------|
|  u32:10-1800  |  Timer value in seconds  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `Adjust refresh parameters

`,
							},

							"timers": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"throttle": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"spf": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"delay": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Delay from the first change received to SPF calculation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Delay in milliseconds  |
`,

														Default:  stringdefault.StaticString(`200`),
														Computed: true,
													},

													"initial_holdtime": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Initial hold time between consecutive SPF calculations

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Initial hold time in milliseconds  |
`,

														Default:  stringdefault.StaticString(`1000`),
														Computed: true,
													},

													"max_holdtime": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Maximum hold time

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Max hold time in milliseconds  |
`,

														Default:  stringdefault.StaticString(`10000`),
														Computed: true,
													},
												},
												Optional: true,
												MarkdownDescription: `OSPF SPF timers

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Throttling adaptive timers

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Adjust routing timers

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Open Shortest Path First (OSPF)

`,
					},

					"ospfv3": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"area": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"range": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"advertise": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Advertise this range

`,
													},

													"not_advertise": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Do not advertise this range

`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Specify IPv6 prefix (border routers only)

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Specify IPv6 prefix (border routers only)  |
`,
										},

										"export_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Name of export-list

`,
										},

										"import_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Name of import-list

`,
										},

										"area_type": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"nssa": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"default_information_originate": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Originate Type 7 default into NSSA area

`,
														},

														"no_summary": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not inject inter-area routes into the stub

`,
														},
													},
													Optional: true,
													MarkdownDescription: `NSSA OSPFv3 area

`,
												},

												"stub": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{

														"no_summary": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Do not inject inter-area routes into the stub

`,
														},
													},
													Optional: true,
													MarkdownDescription: `Stub OSPFv3 area

`,
												},
											},
											Optional: true,
											MarkdownDescription: `OSPFv3 Area type

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `OSPFv3 Area

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Area ID as a decimal value  |
|  ipv4  |  Area ID in IP address forma  |
`,
							},

							"interface": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"area": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable OSPF on this interface

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area ID as decimal notation  |
|  ipv4  |  OSPF area ID in IP address notation  |
`,
										},

										"dead_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`40`),
											Computed: true,
										},

										"hello_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`10`),
											Computed: true,
										},

										"retransmit_interval": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |
`,

											Default:  stringdefault.StaticString(`5`),
											Computed: true,
										},

										"transmit_delay": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |
`,

											Default:  stringdefault.StaticString(`1`),
											Computed: true,
										},

										"cost": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interface cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  OSPF interface cost  |
`,
										},

										"mtu_ignore": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
										},

										"priority": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  OSPF router priority cost  |
`,

											Default:  stringdefault.StaticString(`1`),
											Computed: true,
										},

										"ifmtu": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Interface MTU

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Interface MTU  |
`,
										},

										"instance_id": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Instance ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Instance Id  |
`,

											Default:  stringdefault.StaticString(`0`),
											Computed: true,
										},

										"network": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Network type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Broadcast network type  |
|  point-to-point  |  Point-to-point network type  |
`,
										},

										"passive": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Configure passive mode for interface

`,
										},

										"bfd": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"profile": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Enable routing on an IPv6 interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface used for routing information exchange  |
`,
							},

							"route_map": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
							},

							"auto_cost": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"reference_bandwidth": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Reference bandwidth method to assign cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967  |  Reference bandwidth cost in Mbits/sec  |
`,

										Default:  stringdefault.StaticString(`100`),
										Computed: true,
									},
								},
								Optional: true,
								MarkdownDescription: `Calculate interface cost according to bandwidth

`,
							},

							"default_information": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"originate": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"always": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Always advertise a default route

`,
											},

											"metric": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |
`,
											},

											"metric_type": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |
`,

												Default:  stringdefault.StaticString(`2`),
												Computed: true,
											},

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Distribute a default route

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Default route advertisment settings

`,
							},

							"distance": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"global": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Administrative distance  |
`,
									},

									"ospfv3": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"external": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for external routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for external routes  |
`,
											},

											"inter_area": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for inter-area routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for inter-area routes  |
`,
											},

											"intra_area": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for intra-area routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for intra-area routes  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `OSPFv3 administrative distance

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Administrative distance

`,
							},

							"log_adjacency_changes": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"detail": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Log all state changes

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Log adjacency state changes

`,
							},

							"parameters": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"router_id": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Override default router identifier

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Router-ID in IP address format  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `OSPFv3 specific parameters

`,
							},

							"redistribute": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"bgp": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute BGP routes

`,
									},

									"connected": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute connected routes

`,
									},

									"kernel": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute kernel routes

`,
									},

									"ripng": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute RIPNG routes

`,
									},

									"babel": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute Babel routes

`,
									},

									"static": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"route_map": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Redistribute static routes

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Redistribute information from another routing protocol

`,
							},
						},
						Optional: true,
						MarkdownDescription: `Open Shortest Path First (OSPF) for IPv6

`,
					},

					"static": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"route": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"interface": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"disable": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Disable instance

`,
													},

													"distance": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to leak route

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of VRF to leak to  |
`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Next-hop IPv4 router interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |
`,
										},

										"next_hop": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"disable": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Disable instance

`,
													},

													"distance": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
													},

													"interface": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Gateway interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |
`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to leak route

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of VRF to leak to  |
`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `Next-hop IPv4 router address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Next-hop router address  |
`,
										},

										"dhcp_interface": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `DHCP interface supplying next-hop IP address

|  Format  |  Description  |
|----------|---------------|
|  txt  |  DHCP interface name  |
`,
										},

										"description": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
										},

										"blackhole": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"distance": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
												},

												"tag": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Tag value for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Tag value for this route  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Silently discard pkts when matched

`,
										},

										"reject": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"distance": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
												},

												"tag": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Tag value for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Tag value for this route  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Emit an ICMP unreachable when matched

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Static IPv4 route

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 static route  |
`,
							},

							"route6": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"interface": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"disable": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Disable instance

`,
													},

													"distance": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to leak route

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of VRF to leak to  |
`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `IPv6 gateway interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |
`,
										},

										"next_hop": schema.MapNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{

													"disable": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Disable instance

`,
													},

													"distance": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
													},

													"interface": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Gateway interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |
`,
													},

													"vrf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `VRF to leak route

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of VRF to leak to  |
`,
													},
												},
											},
											Optional: true,
											MarkdownDescription: `IPv6 gateway address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  Next-hop IPv6 router  |
`,
										},

										"description": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
										},

										"blackhole": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"distance": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
												},

												"tag": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Tag value for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Tag value for this route  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Silently discard pkts when matched

`,
										},

										"reject": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"distance": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |
`,
												},

												"tag": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Tag value for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Tag value for this route  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Emit an ICMP unreachable when matched

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Static IPv6 route

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 static route  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `Static Routing

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Routing protocol parameters

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r vrf_name) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r vrf_name) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vrf_nameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r vrf_name) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vrf_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r vrf_name) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vrf_nameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
