// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &qos_policy_limiter{}

// var _ resource.ResourceWithImportState = &qos_policy_limiter{}

// qos_policy_limiter defines the resource implementation.
type qos_policy_limiter struct {
	ResourceName string
	client       *client.Client
}

func (r *qos_policy_limiter) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// qos_policy_limiterModel describes the resource data model.
type qos_policy_limiterModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description types.String `tfsdk:"description"`

	// TagNodes
	Class types.Map `tfsdk:"class"`

	// Nodes
	Default types.List `tfsdk:"default"`
}

func (m qos_policy_limiterModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"qos",
		"policy",
		"limiter",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"description": m.Description,

		// TagNodes
		"class": m.Class,

		// Nodes
		"default": m.Default,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r qos_policy_limiter) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_qos_policy_limiter"
	resp.TypeName = r.ResourceName
}

// qos_policy_limiterResource method to return the example resource reference
func qos_policy_limiterResource() resource.Resource {
	return &qos_policy_limiter{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r qos_policy_limiter) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Quality of Service (QoS)

Service Policy definitions

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Traffic input limiting policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |
`,
			},

			"class": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"match": schema.MapNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{

									"description": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
									},

									"interface": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
									},

									"mark": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Match on mark applied by firewall

|  Format  |  Description  |
|----------|---------------|
|  u32  |  FW mark to match  |
`,
									},

									"vif": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Virtual Local Area Network (VLAN) ID for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4095  |  Virtual Local Area Network (VLAN) tag   |
`,
									},

									"ether": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"destination": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet protocol for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Ethernet protocol number  |
|  txt  |  Ethernet protocol name  |
|  all  |  Any protocol  |
|  ip  |  Internet IP (IPv4)  |
|  ipv6  |  Internet IP (IPv6)  |
|  arp  |  Address Resolution Protocol  |
|  atalk  |  Appletalk  |
|  ipx  |  Novell Internet Packet Exchange  |
|  802.1Q  |  802.1Q VLAN tag  |
`,
											},

											"source": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet source address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Ethernet header match

`,
									},

									"ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"dscp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |
`,
											},

											"max_length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |
`,
											},

											"destination": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv4 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
|  ipv4net  |  IPv4 prefix  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on destination port or address

`,
											},

											"source": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv4 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
|  ipv4net  |  IPv4 prefix  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on source port or address

`,
											},

											"tcp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ack": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP ACK

`,
													},

													"syn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP SYN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `TCP Flags matching

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Match IP protocol header

`,
									},

									"ipv6": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"dscp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |
`,
											},

											"max_length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |
`,
											},

											"destination": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv6 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 address and prefix length  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on destination port or address

`,
											},

											"source": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv6 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 address and prefix length  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on source port or address

`,
											},

											"tcp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ack": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP ACK

`,
													},

													"syn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP SYN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `TCP Flags matching

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Match IPv6 protocol header

`,
									},
								},
							},
							Optional: true,
							MarkdownDescription: `Class matching rule name

`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"bandwidth": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |
`,
						},

						"burst": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Burst size for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bytes  |
|  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |
`,

							Default:  stringdefault.StaticString(`15k`),
							Computed: true,
						},

						"exceed": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Default action for packets exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |
`,

							Default:  stringdefault.StaticString(`drop`),
							Computed: true,
						},

						"not_exceed": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Default action for packets not exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |
`,

							Default:  stringdefault.StaticString(`ok`),
							Computed: true,
						},

						"priority": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Priority for rule evaluation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-20  |  Priority for match rule evaluation  |
`,

							Default:  stringdefault.StaticString(`20`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Class ID

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4090  |  Class Identifier  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"default": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"bandwidth": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |
`,
					},

					"burst": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Burst size for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bytes  |
|  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |
`,

						Default:  stringdefault.StaticString(`15k`),
						Computed: true,
					},

					"exceed": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Default action for packets exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |
`,

						Default:  stringdefault.StaticString(`drop`),
						Computed: true,
					},

					"not_exceed": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Default action for packets not exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |
`,

						Default:  stringdefault.StaticString(`ok`),
						Computed: true,
					},
				},
				Optional: true,
				MarkdownDescription: `Default policy

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r qos_policy_limiter) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r qos_policy_limiter) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *qos_policy_limiterModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r qos_policy_limiter) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *qos_policy_limiterModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r qos_policy_limiter) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *qos_policy_limiterModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
