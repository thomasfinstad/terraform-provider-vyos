// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &policy_route_map{}

// var _ resource.ResourceWithImportState = &policy_route_map{}

// policy_route_map defines the resource implementation.
type policy_route_map struct {
	ResourceName string
	client       *client.Client
}

func (r *policy_route_map) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// policy_route_mapModel describes the resource data model.
type policy_route_mapModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description types.String `tfsdk:"description"`

	// TagNodes
	Rule types.Map `tfsdk:"rule"`

	// Nodes

}

func (m policy_route_mapModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"policy",
		"route-map",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"description": m.Description,

		// TagNodes
		"rule": m.Rule,

		// Nodes

	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r policy_route_map) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_policy_route_map"
	resp.TypeName = r.ResourceName
}

// policy_route_mapResource method to return the example resource reference
func policy_route_mapResource() resource.Resource {
	return &policy_route_map{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r policy_route_map) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Routing policy

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `IP route-map

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
			},

			"rule": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"action": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Action to take on entries matching this rule

|  Format  |  Description  |
|----------|---------------|
|  permit  |  Permit matching entries  |
|  deny  |  Deny matching entries  |
`,
						},

						"call": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Call another route-map on match

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |
`,
						},

						"continue": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Jump to a different rule in this route-map on a match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Rule number  |
`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"match": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"as_path": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP as-path-list to match

`,
								},

								"extcommunity": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP extended community to match

`,
								},

								"interface": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
								},

								"local_preference": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Local Preference

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Local Preference  |
`,
								},

								"metric": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Metric of route to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Route metric  |
`,
								},

								"origin": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP origin code to match

|  Format  |  Description  |
|----------|---------------|
|  egp  |  Exterior gateway protocol origin  |
|  igp  |  Interior gateway protocol origin  |
|  incomplete  |  Incomplete origin  |
`,
								},

								"peer": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Peer address to match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Peer IP address  |
|  ipv6  |  Peer IPv6 address  |
`,
								},

								"rpki": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Match RPKI validation result

|  Format  |  Description  |
|----------|---------------|
|  invalid  |  Match invalid entries  |
|  notfound  |  Match notfound entries  |
|  valid  |  Match valid entries  |
`,
								},

								"tag": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Route tag to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Route tag  |
`,
								},

								"community": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"community_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP community-list to match

`,
										},

										"exact_match": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Community-list to exactly match

`,
										},
									},
									Optional: true,
									MarkdownDescription: `BGP community-list to match

`,
								},

								"evpn": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"default_route": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Default EVPN type-5 route

`,
										},

										"rd": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |
`,
										},

										"route_type": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Match route-type

|  Format  |  Description  |
|----------|---------------|
|  macip  |  mac-ip route  |
|  multicast  |  IMET route  |
|  prefix  |  Prefix route  |
`,
										},

										"vni": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Virtual Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  VXLAN virtual network identifier  |
`,
										},
									},
									Optional: true,
									MarkdownDescription: `Ethernet Virtual Private Network

`,
								},

								"ip": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"address": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"access_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP access-list to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-99  |  IP standard access list  |
|  u32:100-199  |  IP extended access list  |
|  u32:1300-1999  |  IP standard access list (expanded range)  |
|  u32:2000-2699  |  IP extended access list (expanded range)  |
`,
												},

												"prefix_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP prefix-list to match

`,
												},

												"prefix_len": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP prefix-length to match (can be used for kernel routes only)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-32  |  Prefix length  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `IP address of route to match

`,
										},

										"nexthop": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"address": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP address to match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Nexthop IP address  |
`,
												},

												"access_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP access-list to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-99  |  IP standard access list  |
|  u32:100-199  |  IP extended access list  |
|  u32:1300-1999  |  IP standard access list (expanded range)  |
|  u32:2000-2699  |  IP extended access list (expanded range)  |
`,
												},

												"prefix_len": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP prefix-length to match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-32  |  Prefix length  |
`,
												},

												"prefix_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP prefix-list to match

`,
												},

												"type": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Match type

|  Format  |  Description  |
|----------|---------------|
|  blackhole  |  Blackhole  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `IP next-hop of route to match

`,
										},

										"route_source": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"access_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP access-list to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-99  |  IP standard access list  |
|  u32:100-199  |  IP extended access list  |
|  u32:1300-1999  |  IP standard access list (expanded range)  |
|  u32:2000-2699  |  IP extended access list (expanded range)  |
`,
												},

												"prefix_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IP prefix-list to match

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Match advertising source address of route

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IP prefix parameters to match

`,
								},

								"ipv6": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"address": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"access_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 access-list to match

|  Format  |  Description  |
|----------|---------------|
|  txt  |  IPV6 access list name  |
`,
												},

												"prefix_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 prefix-list to match

`,
												},

												"prefix_len": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 prefix-length to match (can be used for kernel routes only)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-128  |  Prefix length  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `IPv6 address of route to match

`,
										},

										"nexthop": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"address": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 address of next-hop

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  Nexthop IPv6 address  |
`,
												},

												"access_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 access-list to match

|  Format  |  Description  |
|----------|---------------|
|  txt  |  IPV6 access list name  |
`,
												},

												"prefix_list": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `IPv6 prefix-list to match

`,
												},

												"type": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Match type

|  Format  |  Description  |
|----------|---------------|
|  blackhole  |  Blackhole  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `IPv6 next-hop of route to match

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IPv6 prefix parameters to match

`,
								},

								"large_community": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"large_community_list": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `BGP large-community-list to match

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Match BGP large communities

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Route parameters to match

`,
						},

						"on_match": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"goto": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Rule number to goto on match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Rule number  |
`,
								},

								"next": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Next sequence number to goto on match

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Exit policy on matches

`,
						},

						"set": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"atomic_aggregate": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP atomic aggregate attribute

`,
								},

								"distance": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Locally significant administrative distance

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Distance value  |
`,
								},

								"ip_next_hop": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Nexthop IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |
|  unchanged  |  Set the BGP nexthop address as unchanged  |
|  peer-address  |  Set the BGP nexthop address to the address of the peer  |
`,
								},

								"local_preference": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP local preference attribute

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Local preference value  |
`,
								},

								"metric": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Destination routing protocol metric

|  Format  |  Description  |
|----------|---------------|
|  <+/-metric>  |  Add or subtract metric  |
|  u32:0-4294967295  |  Metric value  |
`,
								},

								"metric_type": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Open Shortest Path First (OSPF) external metric-type

|  Format  |  Description  |
|----------|---------------|
|  type-1  |  OSPF external type 1 metric  |
|  type-2  |  OSPF external type 2 metric  |
`,
								},

								"origin": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Border Gateway Protocl (BGP) origin code

|  Format  |  Description  |
|----------|---------------|
|  igp  |  Interior gateway protocol origin  |
|  egp  |  Exterior gateway protocol origin  |
|  incomplete  |  Incomplete origin  |
`,
								},

								"originator_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP originator ID attribute

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Orignator IP address  |
`,
								},

								"src": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source address for route

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
|  ipv6  |  IPv6 address  |
`,
								},

								"table": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Set prefixes to table

|  Format  |  Description  |
|----------|---------------|
|  u32:1-200  |  Table value  |
`,
								},

								"tag": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Tag value for routing protocol

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Tag value  |
`,
								},

								"weight": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `BGP weight attribute

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  BGP weight  |
`,
								},

								"aggregator": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"as": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `AS number of an aggregation

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Rule number  |
`,
										},

										"ip": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `IP address of an aggregation

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |
`,
										},
									},
									Optional: true,
									MarkdownDescription: `BGP aggregator attribute

`,
								},

								"as_path": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"exclude": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove/exclude from the as-path attribute

|  Format  |  Description  |
|----------|---------------|
|  u32  |  AS number  |
`,
										},

										"prepend": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prepend to the as-path

|  Format  |  Description  |
|----------|---------------|
|  u32  |  AS number  |
`,
										},

										"prepend_last_as": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Use the last AS-number in the as-path

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of times to insert  |
`,
										},
									},
									Optional: true,
									MarkdownDescription: `Transform BGP AS_PATH attribute

`,
								},

								"community": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"add": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Add communities to a prefix

|  Format  |  Description  |
|----------|---------------|
|  <AS:VAL>  |  Community number in <0-65535:0-65535> format  |
|  local-as  |  Well-known communities value NO_EXPORT_SUBCONFED 0xFFFFFF03  |
|  no-advertise  |  Well-known communities value NO_ADVERTISE 0xFFFFFF02  |
|  no-export  |  Well-known communities value NO_EXPORT 0xFFFFFF01  |
|  internet  |  Well-known communities value 0  |
|  graceful-shutdown  |  Well-known communities value GRACEFUL_SHUTDOWN 0xFFFF0000  |
|  accept-own  |  Well-known communities value ACCEPT_OWN 0xFFFF0001  |
|  route-filter-translated-v4  |  Well-known communities value ROUTE_FILTER_TRANSLATED_v4 0xFFFF0002  |
|  route-filter-v4  |  Well-known communities value ROUTE_FILTER_v4 0xFFFF0003  |
|  route-filter-translated-v6  |  Well-known communities value ROUTE_FILTER_TRANSLATED_v6 0xFFFF0004  |
|  route-filter-v6  |  Well-known communities value ROUTE_FILTER_v6 0xFFFF0005  |
|  llgr-stale  |  Well-known communities value LLGR_STALE 0xFFFF0006  |
|  no-llgr  |  Well-known communities value NO_LLGR 0xFFFF0007  |
|  accept-own-nexthop  |  Well-known communities value accept-own-nexthop 0xFFFF0008  |
|  blackhole  |  Well-known communities value BLACKHOLE 0xFFFF029A  |
|  no-peer  |  Well-known communities value NOPEER 0xFFFFFF04  |
`,
										},

										"replace": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set communities for a prefix

|  Format  |  Description  |
|----------|---------------|
|  <AS:VAL>  |  Community number in <0-65535:0-65535> format  |
|  local-as  |  Well-known communities value NO_EXPORT_SUBCONFED 0xFFFFFF03  |
|  no-advertise  |  Well-known communities value NO_ADVERTISE 0xFFFFFF02  |
|  no-export  |  Well-known communities value NO_EXPORT 0xFFFFFF01  |
|  internet  |  Well-known communities value 0  |
|  graceful-shutdown  |  Well-known communities value GRACEFUL_SHUTDOWN 0xFFFF0000  |
|  accept-own  |  Well-known communities value ACCEPT_OWN 0xFFFF0001  |
|  route-filter-translated-v4  |  Well-known communities value ROUTE_FILTER_TRANSLATED_v4 0xFFFF0002  |
|  route-filter-v4  |  Well-known communities value ROUTE_FILTER_v4 0xFFFF0003  |
|  route-filter-translated-v6  |  Well-known communities value ROUTE_FILTER_TRANSLATED_v6 0xFFFF0004  |
|  route-filter-v6  |  Well-known communities value ROUTE_FILTER_v6 0xFFFF0005  |
|  llgr-stale  |  Well-known communities value LLGR_STALE 0xFFFF0006  |
|  no-llgr  |  Well-known communities value NO_LLGR 0xFFFF0007  |
|  accept-own-nexthop  |  Well-known communities value accept-own-nexthop 0xFFFF0008  |
|  blackhole  |  Well-known communities value BLACKHOLE 0xFFFF029A  |
|  no-peer  |  Well-known communities value NOPEER 0xFFFFFF04  |
`,
										},

										"none": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Completely remove communities attribute from a prefix

`,
										},

										"delete": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove communities defined in a list from a prefix

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Community-list  |
`,
										},
									},
									Optional: true,
									MarkdownDescription: `BGP community attribute

`,
								},

								"large_community": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"add": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Add large communities to a prefix ;

|  Format  |  Description  |
|----------|---------------|
|  <GA:LDP1:LDP2>  |  Community in format <0-4294967295:0-4294967295:0-4294967295>  |
`,
										},

										"replace": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set large communities for a prefix

|  Format  |  Description  |
|----------|---------------|
|  <GA:LDP1:LDP2>  |  Community in format <0-4294967295:0-4294967295:0-4294967295>  |
`,
										},

										"none": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Completely remove communities attribute from a prefix

`,
										},

										"delete": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove communities defined in a list from a prefix

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Community-list  |
`,
										},
									},
									Optional: true,
									MarkdownDescription: `BGP large community attribute

`,
								},

								"extcommunity": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"bandwidth": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Bandwidth value in Mbps

|  Format  |  Description  |
|----------|---------------|
|  u32:1-25600  |  Bandwidth value in Mbps  |
|  cumulative  |  Cumulative bandwidth of all multipaths (outbound-only)  |
|  num-multipaths  |  Internally computed bandwidth based on number of multipaths (outbound-only)  |
`,
										},

										"bandwidth_non_transitive": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `The link bandwidth extended community is encoded as non-transitive

`,
										},

										"rt": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set route target value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |
`,
										},

										"soo": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Set Site of Origin value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |
`,
										},

										"none": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Completely remove communities attribute from a prefix

`,
										},
									},
									Optional: true,
									MarkdownDescription: `BGP extended community attribute

`,
								},

								"evpn": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"gateway": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"ipv4": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Set gateway IPv4 address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Gateway IPv4 address  |
`,
												},

												"ipv6": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Set gateway IPv6 address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  Gateway IPv6 address  |
`,
												},
											},
											Optional: true,
											MarkdownDescription: `Set gateway IP for prefix advertisement route

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Ethernet Virtual Private Network

`,
								},

								"ipv6_next_hop": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"global": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Nexthop IPv6 global address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |
`,
										},

										"local": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Nexthop IPv6 local address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |
`,
										},

										"peer_address": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Use peer address (for BGP only)

`,
										},

										"prefer_global": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prefer global address as the nexthop

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Nexthop IPv6 address

`,
								},

								"l3vpn_nexthop": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"encapsulation": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"gre": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Accept L3VPN traffic over GRE encapsulation

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Encapsulation options (for BGP only)

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Next hop Information

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Route parameters

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Rule for this route-map

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Route-map rule number  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r policy_route_map) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r policy_route_map) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *policy_route_mapModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r policy_route_map) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *policy_route_mapModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r policy_route_map) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *policy_route_mapModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
