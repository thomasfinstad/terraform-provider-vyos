// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_openconnect_authentication_local_users_username{}

// var _ resource.ResourceWithImportState = &vpn_openconnect_authentication_local_users_username{}

// vpn_openconnect_authentication_local_users_username defines the resource implementation.
type vpn_openconnect_authentication_local_users_username struct {
	ResourceName string
	client       *client.Client
}

func (r *vpn_openconnect_authentication_local_users_username) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// vpn_openconnect_authentication_local_users_usernameModel describes the resource data model.
type vpn_openconnect_authentication_local_users_usernameModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes

	// Nodes
	Otp types.List `tfsdk:"otp"`
}

func (m vpn_openconnect_authentication_local_users_usernameModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"vpn",
		"openconnect",
		"authentication",
		"local-users",
		"username",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes

		// TagNodes

		// Nodes
		"otp": m.Otp,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r vpn_openconnect_authentication_local_users_username) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_vpn_openconnect_authentication_local_users_username"
	resp.TypeName = r.ResourceName
}

// vpn_openconnect_authentication_local_users_usernameResource method to return the example resource reference
func vpn_openconnect_authentication_local_users_usernameResource() resource.Resource {
	return &vpn_openconnect_authentication_local_users_username{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r vpn_openconnect_authentication_local_users_username) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `SSL VPN OpenConnect, AnyConnect compatible server

Authentication for remote access SSL VPN Server

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: ``,
			},

			"otp": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"key": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Token Key Secret key for the token algorithm (see RFC 4226)

|  Format  |  Description  |
|----------|---------------|
|  txt  |  OTP key in hex-encoded format  |
`,
					},

					"otp_length": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of digits in OTP code

|  Format  |  Description  |
|----------|---------------|
|  u32:6-8  |  Number of digits in OTP code  |
`,

						Default:  stringdefault.StaticString(`6`),
						Computed: true,
					},

					"interval": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Time tokens interval in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:5-86400  |  Time tokens interval in seconds.  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"token_type": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Token type

|  Format  |  Description  |
|----------|---------------|
|  hotp-time  |  Time-based OTP algorithm  |
|  hotp-event  |  Event-based OTP algorithm  |
`,

						Default:  stringdefault.StaticString(`hotp-time`),
						Computed: true,
					},
				},
				Optional: true,
				MarkdownDescription: `2FA OTP authentication parameters

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r vpn_openconnect_authentication_local_users_username) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r vpn_openconnect_authentication_local_users_username) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_openconnect_authentication_local_users_usernameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r vpn_openconnect_authentication_local_users_username) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_openconnect_authentication_local_users_usernameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r vpn_openconnect_authentication_local_users_username) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_openconnect_authentication_local_users_usernameModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
