// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_ipsec_ike_group{}

// var _ resource.ResourceWithImportState = &vpn_ipsec_ike_group{}

// vpn_ipsec_ike_group defines the resource implementation.
type vpn_ipsec_ike_group struct {
	ResourceName string
	client       *client.Client
}

func (r *vpn_ipsec_ike_group) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// vpn_ipsec_ike_groupModel describes the resource data model.
type vpn_ipsec_ike_groupModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Close_action   types.String `tfsdk:"close_action"`
	Ikevtwo_reauth types.String `tfsdk:"ikev2_reauth"`
	Key_exchange   types.String `tfsdk:"key_exchange"`
	Lifetime       types.String `tfsdk:"lifetime"`
	Disable_mobike types.String `tfsdk:"disable_mobike"`
	Mode           types.String `tfsdk:"mode"`

	// TagNodes
	Proposal types.Map `tfsdk:"proposal"`

	// Nodes
	Dead_peer_detection types.List `tfsdk:"dead_peer_detection"`
}

func (m vpn_ipsec_ike_groupModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"vpn",
		"ipsec",
		"ike-group",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"close_action":   m.Close_action,
		"ikev2_reauth":   m.Ikevtwo_reauth,
		"key_exchange":   m.Key_exchange,
		"lifetime":       m.Lifetime,
		"disable_mobike": m.Disable_mobike,
		"mode":           m.Mode,

		// TagNodes
		"proposal": m.Proposal,

		// Nodes
		"dead_peer_detection": m.Dead_peer_detection,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r vpn_ipsec_ike_group) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_vpn_ipsec_ike_group"
	resp.TypeName = r.ResourceName
}

// vpn_ipsec_ike_groupResource method to return the example resource reference
func vpn_ipsec_ike_groupResource() resource.Resource {
	return &vpn_ipsec_ike_group{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r vpn_ipsec_ike_group) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Virtual Private Network (VPN)

VPN IP security (IPsec) parameters

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
			},

			"proposal": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"dh_group": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `dh-grouphelp

|  Format  |  Description  |
|----------|---------------|
|  1  |  Diffie-Hellman group 1 (modp768)  |
|  2  |  Diffie-Hellman group 2 (modp1024)  |
|  5  |  Diffie-Hellman group 5 (modp1536)  |
|  14  |  Diffie-Hellman group 14 (modp2048)  |
|  15  |  Diffie-Hellman group 15 (modp3072)  |
|  16  |  Diffie-Hellman group 16 (modp4096)  |
|  17  |  Diffie-Hellman group 17 (modp6144)  |
|  18  |  Diffie-Hellman group 18 (modp8192)  |
|  19  |  Diffie-Hellman group 19 (ecp256)  |
|  20  |  Diffie-Hellman group 20 (ecp384)  |
|  21  |  Diffie-Hellman group 21 (ecp521)  |
|  22  |  Diffie-Hellman group 22 (modp1024s160)  |
|  23  |  Diffie-Hellman group 23 (modp2048s224)  |
|  24  |  Diffie-Hellman group 24 (modp2048s256)  |
|  25  |  Diffie-Hellman group 25 (ecp192)  |
|  26  |  Diffie-Hellman group 26 (ecp224)  |
|  27  |  Diffie-Hellman group 27 (ecp224bp)  |
|  28  |  Diffie-Hellman group 28 (ecp256bp)  |
|  29  |  Diffie-Hellman group 29 (ecp384bp)  |
|  30  |  Diffie-Hellman group 30 (ecp512bp)  |
|  31  |  Diffie-Hellman group 31 (curve25519)  |
|  32  |  Diffie-Hellman group 32 (curve448)  |
`,

							Default:  stringdefault.StaticString(`2`),
							Computed: true,
						},

						"prf": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Pseudo-Random Functions

|  Format  |  Description  |
|----------|---------------|
|  prfmd5  |  MD5 PRF  |
|  prfsha1  |  SHA1 PRF  |
|  prfaesxcbc  |  AES XCBC PRF  |
|  prfaescmac  |  AES CMAC PRF  |
|  prfsha256  |  SHA2_256 PRF  |
|  prfsha384  |  SHA2_384 PRF  |
|  prfsha512  |  SHA2_512 PRF  |
`,
						},

						"encryption": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Encryption algorithm

|  Format  |  Description  |
|----------|---------------|
|  null  |  Null encryption  |
|  aes128  |  128 bit AES-CBC  |
|  aes192  |  192 bit AES-CBC  |
|  aes256  |  256 bit AES-CBC  |
|  aes128ctr  |  128 bit AES-COUNTER  |
|  aes192ctr  |  192 bit AES-COUNTER  |
|  aes256ctr  |  256 bit AES-COUNTER  |
|  aes128ccm64  |  128 bit AES-CCM with 64 bit ICV  |
|  aes192ccm64  |  192 bit AES-CCM with 64 bit ICV  |
|  aes256ccm64  |  256 bit AES-CCM with 64 bit ICV  |
|  aes128ccm96  |  128 bit AES-CCM with 96 bit ICV  |
|  aes192ccm96  |  192 bit AES-CCM with 96 bit ICV  |
|  aes256ccm96  |  256 bit AES-CCM with 96 bit ICV  |
|  aes128ccm128  |  128 bit AES-CCM with 128 bit ICV  |
|  aes192ccm128  |  192 bit AES-CCM with 128 bit IC  |
|  aes256ccm128  |  256 bit AES-CCM with 128 bit ICV  |
|  aes128gcm64  |  128 bit AES-GCM with 64 bit ICV  |
|  aes192gcm64  |  192 bit AES-GCM with 64 bit ICV  |
|  aes256gcm64  |  256 bit AES-GCM with 64 bit ICV  |
|  aes128gcm96  |  128 bit AES-GCM with 96 bit ICV  |
|  aes192gcm96  |  192 bit AES-GCM with 96 bit ICV  |
|  aes256gcm96  |  256 bit AES-GCM with 96 bit ICV  |
|  aes128gcm128  |  128 bit AES-GCM with 128 bit ICV  |
|  aes192gcm128  |  192 bit AES-GCM with 128 bit ICV  |
|  aes256gcm128  |  256 bit AES-GCM with 128 bit ICV  |
|  aes128gmac  |  Null encryption with 128 bit AES-GMAC  |
|  aes192gmac  |  Null encryption with 192 bit AES-GMAC  |
|  aes256gmac  |  Null encryption with 256 bit AES-GMAC  |
|  3des  |  168 bit 3DES-EDE-CBC  |
|  blowfish128  |  128 bit Blowfish-CBC  |
|  blowfish192  |  192 bit Blowfish-CBC  |
|  blowfish256  |  256 bit Blowfish-CBC  |
|  camellia128  |  128 bit Camellia-CBC  |
|  camellia192  |  192 bit Camellia-CBC  |
|  camellia256  |  256 bit Camellia-CBC  |
|  camellia128ctr  |  128 bit Camellia-COUNTER  |
|  camellia192ctr  |  192 bit Camellia-COUNTER  |
|  camellia256ctr  |  256 bit Camellia-COUNTER  |
|  camellia128ccm64  |  128 bit Camellia-CCM with 64 bit ICV  |
|  camellia192ccm64  |  192 bit Camellia-CCM with 64 bit ICV  |
|  camellia256ccm64  |  256 bit Camellia-CCM with 64 bit ICV  |
|  camellia128ccm96  |  128 bit Camellia-CCM with 96 bit ICV  |
|  camellia192ccm96  |  192 bit Camellia-CCM with 96 bit ICV  |
|  camellia256ccm96  |  256 bit Camellia-CCM with 96 bit ICV  |
|  camellia128ccm128  |  128 bit Camellia-CCM with 128 bit ICV  |
|  camellia192ccm128  |  192 bit Camellia-CCM with 128 bit ICV  |
|  camellia256ccm128  |  256 bit Camellia-CCM with 128 bit ICV  |
|  serpent128  |  128 bit Serpent-CBC  |
|  serpent192  |  192 bit Serpent-CBC  |
|  serpent256  |  256 bit Serpent-CBC  |
|  twofish128  |  128 bit Twofish-CBC  |
|  twofish192  |  192 bit Twofish-CBC  |
|  twofish256  |  256 bit Twofish-CBC  |
|  cast128  |  128 bit CAST-CBC  |
|  chacha20poly1305  |  256 bit ChaCha20/Poly1305 with 128 bit ICV  |
`,

							Default:  stringdefault.StaticString(`aes128`),
							Computed: true,
						},

						"hash": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Hash algorithm

|  Format  |  Description  |
|----------|---------------|
|  md5  |  MD5 HMAC  |
|  md5_128  |  MD5_128 HMAC  |
|  sha1  |  SHA1 HMAC  |
|  sha1_160  |  SHA1_160 HMAC  |
|  sha256  |  SHA2_256_128 HMAC  |
|  sha256_96  |  SHA2_256_96 HMAC  |
|  sha384  |  SHA2_384_192 HMAC  |
|  sha512  |  SHA2_512_256 HMAC  |
|  aesxcbc  |  AES XCBC  |
|  aescmac  |  AES CMAC  |
|  aes128gmac  |  128-bit AES-GMAC  |
|  aes192gmac  |  192-bit AES-GMAC  |
|  aes256gmac  |  256-bit AES-GMAC  |
`,

							Default:  stringdefault.StaticString(`sha1`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `IKE proposal

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  IKE group proposal  |
`,
			},

			"close_action": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Action to take if a child SA is unexpectedly closed

|  Format  |  Description  |
|----------|---------------|
|  none  |  Do nothing  |
|  hold  |  Attempt to re-negotiate when matching traffic is seen  |
|  restart  |  Attempt to re-negotiate the connection immediately  |
`,

				Default:  stringdefault.StaticString(`none`),
				Computed: true,
			},

			"ikev2_reauth": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Re-authentication of the remote peer during an IKE re-key (IKEv2 only)

`,
			},

			"key_exchange": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IKE version

|  Format  |  Description  |
|----------|---------------|
|  ikev1  |  Use IKEv1 for key exchange  |
|  ikev2  |  Use IKEv2 for key exchange  |
`,
			},

			"lifetime": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IKE lifetime

|  Format  |  Description  |
|----------|---------------|
|  u32:30-86400  |  IKE lifetime in seconds  |
`,

				Default:  stringdefault.StaticString(`28800`),
				Computed: true,
			},

			"disable_mobike": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable MOBIKE Support (IKEv2 only)

`,
			},

			"mode": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IKEv1 phase 1 mode

|  Format  |  Description  |
|----------|---------------|
|  main  |  Use the main mode (recommended)  |
|  aggressive  |  Use the aggressive mode (insecure, not recommended)  |
`,

				Default:  stringdefault.StaticString(`main`),
				Computed: true,
			},

			"dead_peer_detection": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"action": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Keep-alive failure action

|  Format  |  Description  |
|----------|---------------|
|  hold  |  Attempt to re-negotiate the connection when matching traffic is seen  |
|  clear  |  Remove the connection immediately  |
|  restart  |  Attempt to re-negotiate the connection immediately  |
`,

						Default:  stringdefault.StaticString(`clear`),
						Computed: true,
					},

					"interval": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Keep-alive interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-86400  |  Keep-alive interval in seconds  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"timeout": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Dead Peer Detection keep-alive timeout (IKEv1 only)

|  Format  |  Description  |
|----------|---------------|
|  u32:2-86400  |  Keep-alive timeout in seconds  |
`,

						Default:  stringdefault.StaticString(`120`),
						Computed: true,
					},
				},
				Optional: true,
				MarkdownDescription: `Dead Peer Detection (DPD)

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r vpn_ipsec_ike_group) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r vpn_ipsec_ike_group) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_ipsec_ike_groupModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r vpn_ipsec_ike_group) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_ipsec_ike_groupModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r vpn_ipsec_ike_group) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_ipsec_ike_groupModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
