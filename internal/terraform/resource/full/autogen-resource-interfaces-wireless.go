// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &interfaces_wireless{}

// var _ resource.ResourceWithImportState = &interfaces_wireless{}

// interfaces_wireless defines the resource implementation.
type interfaces_wireless struct {
	client   *http.Client
	vyosPath []string
}

// interfaces_wirelessModel describes the resource data model.
type interfaces_wirelessModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Address                  types.String `tfsdk:"address"`
	Channel                  types.String `tfsdk:"channel"`
	Country_code             types.String `tfsdk:"country_code"`
	Description              types.String `tfsdk:"description"`
	Disable_broadcast_ssid   types.String `tfsdk:"disable_broadcast_ssid"`
	Disable_link_detect      types.String `tfsdk:"disable_link_detect"`
	Disable                  types.String `tfsdk:"disable"`
	Vrf                      types.String `tfsdk:"vrf"`
	Expunge_failing_stations types.String `tfsdk:"expunge_failing_stations"`
	Hw_id                    types.String `tfsdk:"hw_id"`
	Isolate_stations         types.String `tfsdk:"isolate_stations"`
	Mac                      types.String `tfsdk:"mac"`
	Max_stations             types.String `tfsdk:"max_stations"`
	Mgmt_frame_protection    types.String `tfsdk:"mgmt_frame_protection"`
	Mode                     types.String `tfsdk:"mode"`
	Physical_device          types.String `tfsdk:"physical_device"`
	Reduce_transmit_power    types.String `tfsdk:"reduce_transmit_power"`
	Ssid                     types.String `tfsdk:"ssid"`
	Type                     types.String `tfsdk:"type"`
	Redirect                 types.String `tfsdk:"redirect"`

	// TagNodes
	Vif   types.Map `tfsdk:"vif"`
	Vif_s types.Map `tfsdk:"vif_s"`

	// Nodes
	Capabilities     types.List `tfsdk:"capabilities"`
	Dhcp_options     types.List `tfsdk:"dhcp_options"`
	Dhcpvsix_options types.List `tfsdk:"dhcpv6_options"`
	Ip               types.List `tfsdk:"ip"`
	Ipvsix           types.List `tfsdk:"ipv6"`
	Mirror           types.List `tfsdk:"mirror"`
	Security         types.List `tfsdk:"security"`
}

// Metadata method to define the resource type name.
func (r *interfaces_wireless) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interfaces_wireless"
}

// interfaces_wirelessResource method to return the example resource reference
func interfaces_wirelessResource() resource.Resource {
	return &interfaces_wireless{
		vyosPath: []string{
			"interfaces",
			"wireless",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *interfaces_wireless) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Wireless (WiFi/WLAN) Network Interface

|  Format  |  Description  |
|----------|---------------|
|  wlanN  |  Wireless (WiFi/WLAN) interface name  |
`,
			},

			"vif": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"address": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
						},

						"disable_link_detect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Ignore link state changes

`,
						},

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Administratively disable interface

`,
						},

						"egress_qos": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |
`,
						},

						"ingress_qos": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |
`,
						},

						"mac": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
						},

						"mtu": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

							Default:  stringdefault.StaticString(`1500`),
							Computed: true,
						},

						"redirect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
						},

						"vrf": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
						},

						"dhcp_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"client_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
								},

								"host_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Override system host-name sent to DHCP server

`,
								},

								"mtu": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
								},

								"vendor_class_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
								},

								"no_default_route": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Do not install default route to system

`,
								},

								"default_route_distance": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

									Default:  stringdefault.StaticString(`210`),
									Computed: true,
								},

								"reject": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCP client settings/options

`,
						},

						"dhcpv6_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"pd": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"interface": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"address": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
														},

														"sla_id": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
											},

											"length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

												Default:  stringdefault.StaticString(`64`),
												Computed: true,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
								},

								"duid": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
								},

								"parameters_only": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Acquire only config parameters, no address

`,
								},

								"rapid_commit": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
								},

								"temporary": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv6 temporary address

`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCPv6 client settings/options

`,
						},

						"ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"arp_cache_timeout": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

									Default:  stringdefault.StaticString(`30`),
									Computed: true,
								},

								"disable_arp_filter": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable ARP filter on this interface

`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"enable_directed_broadcast": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
								},

								"enable_arp_accept": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP accept on this interface

`,
								},

								"enable_arp_announce": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP announce on this interface

`,
								},

								"enable_arp_ignore": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP ignore on this interface

`,
								},

								"enable_proxy_arp": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable proxy-arp on this interface

`,
								},

								"proxy_arp_pvlan": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
								},

								"source_validation": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv4 routing parameters

`,
						},

						"ipv6": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"dup_addr_detect_transmits": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
								},

								"address": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"autoconf": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
										},

										"eui64": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
										},

										"no_default_link_local": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove the default link-local address from the interface

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IPv6 address configuration modes

`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv6 routing parameters

`,
						},

						"mirror": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"ingress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},

								"egress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Mirror ingress/egress packets

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |
`,
			},

			"vif_s": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"vif_c": schema.MapNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{

									"description": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
									},

									"address": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
									},

									"disable_link_detect": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Ignore link state changes

`,
									},

									"disable": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Administratively disable interface

`,
									},

									"mac": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
									},

									"mtu": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

										Default:  stringdefault.StaticString(`1500`),
										Computed: true,
									},

									"redirect": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
									},

									"vrf": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
									},

									"dhcp_options": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"client_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
											},

											"host_name": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Override system host-name sent to DHCP server

`,
											},

											"mtu": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
											},

											"vendor_class_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
											},

											"no_default_route": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Do not install default route to system

`,
											},

											"default_route_distance": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

												Default:  stringdefault.StaticString(`210`),
												Computed: true,
											},

											"reject": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `DHCP client settings/options

`,
									},

									"dhcpv6_options": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"pd": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"interface": schema.MapNestedAttribute{
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{

																	"address": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
																	},

																	"sla_id": schema.StringAttribute{

																		Optional: true,
																		MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
																	},
																},
															},
															Optional: true,
															MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
														},

														"length": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

															Default:  stringdefault.StaticString(`64`),
															Computed: true,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
											},

											"duid": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
											},

											"parameters_only": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Acquire only config parameters, no address

`,
											},

											"rapid_commit": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
											},

											"temporary": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `IPv6 temporary address

`,
											},
										},
										Optional: true,
										MarkdownDescription: `DHCPv6 client settings/options

`,
									},

									"ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"adjust_mss": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
											},

											"arp_cache_timeout": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

												Default:  stringdefault.StaticString(`30`),
												Computed: true,
											},

											"disable_arp_filter": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable ARP filter on this interface

`,
											},

											"disable_forwarding": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable IP forwarding on this interface

`,
											},

											"enable_directed_broadcast": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
											},

											"enable_arp_accept": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP accept on this interface

`,
											},

											"enable_arp_announce": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP announce on this interface

`,
											},

											"enable_arp_ignore": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable ARP ignore on this interface

`,
											},

											"enable_proxy_arp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable proxy-arp on this interface

`,
											},

											"proxy_arp_pvlan": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
											},

											"source_validation": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv4 routing parameters

`,
									},

									"ipv6": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"adjust_mss": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
											},

											"disable_forwarding": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Disable IP forwarding on this interface

`,
											},

											"dup_addr_detect_transmits": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
											},

											"address": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"autoconf": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
													},

													"eui64": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
													},

													"no_default_link_local": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Remove the default link-local address from the interface

`,
													},
												},
												Optional: true,
												MarkdownDescription: `IPv6 address configuration modes

`,
											},
										},
										Optional: true,
										MarkdownDescription: `IPv6 routing parameters

`,
									},

									"mirror": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"ingress": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
											},

											"egress": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Mirror ingress/egress packets

`,
									},
								},
							},
							Optional: true,
							MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"address": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
						},

						"disable_link_detect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Ignore link state changes

`,
						},

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Administratively disable interface

`,
						},

						"protocol": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

|  Format  |  Description  |
|----------|---------------|
|  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
|  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |
`,

							Default:  stringdefault.StaticString(`802.1ad`),
							Computed: true,
						},

						"mac": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
						},

						"mtu": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |
`,

							Default:  stringdefault.StaticString(`1500`),
							Computed: true,
						},

						"redirect": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
						},

						"vrf": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
						},

						"dhcp_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"client_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
								},

								"host_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Override system host-name sent to DHCP server

`,
								},

								"mtu": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
								},

								"vendor_class_id": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
								},

								"no_default_route": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Do not install default route to system

`,
								},

								"default_route_distance": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

									Default:  stringdefault.StaticString(`210`),
									Computed: true,
								},

								"reject": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCP client settings/options

`,
						},

						"dhcpv6_options": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"pd": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"interface": schema.MapNestedAttribute{
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{

														"address": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
														},

														"sla_id": schema.StringAttribute{

															Optional: true,
															MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
														},
													},
												},
												Optional: true,
												MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
											},

											"length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

												Default:  stringdefault.StaticString(`64`),
												Computed: true,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
								},

								"duid": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
								},

								"parameters_only": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Acquire only config parameters, no address

`,
								},

								"rapid_commit": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
								},

								"temporary": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IPv6 temporary address

`,
								},
							},
							Optional: true,
							MarkdownDescription: `DHCPv6 client settings/options

`,
						},

						"ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"arp_cache_timeout": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

									Default:  stringdefault.StaticString(`30`),
									Computed: true,
								},

								"disable_arp_filter": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable ARP filter on this interface

`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"enable_directed_broadcast": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
								},

								"enable_arp_accept": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP accept on this interface

`,
								},

								"enable_arp_announce": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP announce on this interface

`,
								},

								"enable_arp_ignore": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable ARP ignore on this interface

`,
								},

								"enable_proxy_arp": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable proxy-arp on this interface

`,
								},

								"proxy_arp_pvlan": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
								},

								"source_validation": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv4 routing parameters

`,
						},

						"ipv6": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"adjust_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
								},

								"disable_forwarding": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Disable IP forwarding on this interface

`,
								},

								"dup_addr_detect_transmits": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
								},

								"address": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"autoconf": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
										},

										"eui64": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
										},

										"no_default_link_local": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Remove the default link-local address from the interface

`,
										},
									},
									Optional: true,
									MarkdownDescription: `IPv6 address configuration modes

`,
								},
							},
							Optional: true,
							MarkdownDescription: `IPv6 routing parameters

`,
						},

						"mirror": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"ingress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},

								"egress": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Mirror ingress/egress packets

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |
`,
			},

			"address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |
`,
			},

			"channel": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Wireless radio channel

|  Format  |  Description  |
|----------|---------------|
|  0  |  Automatic Channel Selection (ACS)  |
|  u32:1-14  |  2.4Ghz (802.11 b/g/n) Channel  |
|  u32:34-173  |  5Ghz (802.11 a/h/j/n/ac) Channel  |
`,

				Default:  stringdefault.StaticString(`0`),
				Computed: true,
			},

			"country_code": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Indicate country in which device is operating

|  Format  |  Description  |
|----------|---------------|
|  txt  |  ISO/IEC 3166-1 Country Code  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable_broadcast_ssid": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable broadcast of SSID from access-point

`,
			},

			"disable_link_detect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Ignore link state changes

`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Administratively disable interface

`,
			},

			"vrf": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |
`,
			},

			"expunge_failing_stations": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disassociate stations based on excessive transmission failures

`,
			},

			"hw_id": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Associate Ethernet Interface with given Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
			},

			"isolate_stations": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Isolate stations on the AP so they cannot see each other

`,
			},

			"mac": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |
`,
			},

			"max_stations": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Maximum number of wireless radio stations. Excess stations will be rejected upon authentication request.

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2007  |  Number of allowed stations  |
`,
			},

			"mgmt_frame_protection": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Management Frame Protection (MFP) according to IEEE 802.11w

|  Format  |  Description  |
|----------|---------------|
|  disabled  |  no MFP  |
|  optional  |  MFP optional  |
|  required  |  MFP enforced  |
`,

				Default:  stringdefault.StaticString(`disabled`),
				Computed: true,
			},

			"mode": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Wireless radio mode

|  Format  |  Description  |
|----------|---------------|
|  a  |  802.11a - 54 Mbits/sec  |
|  b  |  802.11b - 11 Mbits/sec  |
|  g  |  802.11g - 54 Mbits/sec  |
|  n  |  802.11n - 600 Mbits/sec  |
|  ac  |  802.11ac - 1300 Mbits/sec  |
`,

				Default:  stringdefault.StaticString(`g`),
				Computed: true,
			},

			"physical_device": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Wireless physical device

`,

				Default:  stringdefault.StaticString(`phy0`),
				Computed: true,
			},

			"reduce_transmit_power": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Transmission power reduction in dBm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  TX power reduction in dBm  |
`,
			},

			"ssid": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Wireless access-point service set identifier (SSID)

`,
			},

			"type": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Wireless device type for this interface

|  Format  |  Description  |
|----------|---------------|
|  access-point  |  Access-point forwards packets between other nodes  |
|  station  |  Connects to another access point  |
|  monitor  |  Passively monitor all packets on the frequency/channel  |
`,

				Default:  stringdefault.StaticString(`monitor`),
				Computed: true,
			},

			"redirect": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
			},

			"capabilities": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"require_ht": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Require stations to support HT PHY (reject association if they do not)

`,
					},

					"require_vht": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Require stations to support VHT PHY (reject association if they do not)

`,
					},

					"ht": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"40mhz_incapable": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `40MHz intolerance, use 20MHz only!

`,
							},

							"auto_powersave": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable WMM-PS unscheduled automatic power aave delivery [U-APSD]

`,
							},

							"channel_set_width": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Supported channel set width

|  Format  |  Description  |
|----------|---------------|
|  ht20  |  Supported channel set width both 20 MHz only  |
|  ht40+  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel above primary channel  |
|  ht40-  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel below primary channel  |
`,
							},

							"delayed_block_ack": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable HT-delayed block ack

`,
							},

							"dsss_cck_40": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable DSSS_CCK-40

`,
							},

							"greenfield": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable HT-greenfield

`,
							},

							"ldpc": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable LDPC coding capability

`,
							},

							"lsig_protection": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable L-SIG TXOP protection capability

`,
							},

							"max_amsdu": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set maximum A-MSDU length

|  Format  |  Description  |
|----------|---------------|
|  3839  |  Set maximum A-MSDU length to 3839 octets  |
|  7935  |  Set maximum A-MSDU length to 7935 octets  |
`,
							},

							"short_gi": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Short GI capabilities

|  Format  |  Description  |
|----------|---------------|
|  20  |  Short GI for 20 MHz  |
|  40  |  Short GI for 40 MHz  |
`,
							},

							"smps": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Spatial Multiplexing Power Save (SMPS) settings

|  Format  |  Description  |
|----------|---------------|
|  static  |  STATIC Spatial Multiplexing (SM) Power Save  |
|  dynamic  |  DYNAMIC Spatial Multiplexing (SM) Power Save  |
`,
							},

							"stbc": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"rx": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable receiving PPDU using STBC (Space Time Block Coding)

|  Format  |  Description  |
|----------|---------------|
|  [1-3]+  |  Number of spacial streams that can use RX STBC  |
`,
									},

									"tx": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable sending PPDU using STBC (Space Time Block Coding)

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Support for sending and receiving PPDU using STBC (Space Time Block Coding)

`,
							},
						},
						Optional: true,
						MarkdownDescription: `HT (High Throughput) settings

`,
					},

					"vht": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"antenna_count": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Number of antennas on this card

|  Format  |  Description  |
|----------|---------------|
|  u32:1-8  |  Number of antennas for this card  |
`,
							},

							"antenna_pattern_fixed": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set if antenna pattern does not change during the lifetime of an association

`,
							},

							"beamform": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Beamforming capabilities

|  Format  |  Description  |
|----------|---------------|
|  single-user-beamformer  |  Support for operation as single user beamformer  |
|  single-user-beamformee  |  Support for operation as single user beamformee  |
|  multi-user-beamformer  |  Support for operation as multi user beamformer  |
|  multi-user-beamformee  |  Support for operation as multi user beamformee  |
`,
							},

							"channel_set_width": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `VHT operating Channel width

|  Format  |  Description  |
|----------|---------------|
|  0  |  20 or 40 MHz channel width  |
|  1  |  80 MHz channel width  |
|  2  |  160 MHz channel width  |
|  3  |  80+80 MHz channel width  |
`,
							},

							"ldpc": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable LDPC (Low Density Parity Check) coding capability

`,
							},

							"link_adaptation": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `VHT link adaptation capabilities

|  Format  |  Description  |
|----------|---------------|
|  unsolicited  |  Station provides only unsolicited VHT MFB  |
|  both  |  Station can provide VHT MFB in response to VHT MRQ and unsolicited VHT MFB  |
`,
							},

							"max_mpdu_exp": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Set the maximum length of A-MPDU pre-EOF padding that the station can receive

|  Format  |  Description  |
|----------|---------------|
|  u32:0-7  |  Maximum length of A-MPDU pre-EOF padding = 2 pow(13 + x) -1 octets  |
`,
							},

							"max_mpdu": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Increase Maximum MPDU length to 7991 or 11454 octets (otherwise: 3895 octets)

|  Format  |  Description  |
|----------|---------------|
|  7991  |  ncrease Maximum MPDU length to 7991 octets  |
|  11454  |  ncrease Maximum MPDU length to 11454 octets  |
`,
							},

							"short_gi": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Short GI capabilities

|  Format  |  Description  |
|----------|---------------|
|  80  |  Short GI for 80 MHz  |
|  160  |  Short GI for 160 MHz  |
`,
							},

							"tx_powersave": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable VHT TXOP Power Save Mode

`,
							},

							"vht_cf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Station supports receiving VHT variant HT Control field

`,
							},

							"center_channel_freq": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"freq_1": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `VHT operating channel center frequency - center freq 1 (for use with 80, 80+80 and 160 modes)

|  Format  |  Description  |
|----------|---------------|
|  u32:34-173  |  5Ghz (802.11 a/h/j/n/ac) center channel index (use 42 for primary 80MHz channel 36)  |
`,
									},

									"freq_2": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `VHT operating channel center frequency - center freq 2 (for use with the 80+80 mode)

|  Format  |  Description  |
|----------|---------------|
|  u32:34-173  |  5Ghz (802.11 a/h/j/n/ac) center channel index (use 58 for primary 80MHz channel 52)  |
`,
									},
								},
								Optional: true,
								MarkdownDescription: `VHT operating channel center frequency

`,
							},

							"stbc": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"rx": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable receiving PPDU using STBC (Space Time Block Coding)

|  Format  |  Description  |
|----------|---------------|
|  [1-4]+  |  Number of spacial streams that can use RX STBC  |
`,
									},

									"tx": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Enable sending PPDU using STBC (Space Time Block Coding)

`,
									},
								},
								Optional: true,
								MarkdownDescription: `Support for sending and receiving PPDU using STBC (Space Time Block Coding)

`,
							},
						},
						Optional: true,
						MarkdownDescription: `VHT (Very High Throughput) settings

`,
					},
				},
				Optional: true,
				MarkdownDescription: `HT and VHT capabilities for your card

`,
			},

			"dhcp_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"client_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
					},

					"host_name": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Override system host-name sent to DHCP server

`,
					},

					"mtu": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
					},

					"vendor_class_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
					},

					"no_default_route": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Do not install default route to system

`,
					},

					"default_route_distance": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |
`,

						Default:  stringdefault.StaticString(`210`),
						Computed: true,
					},

					"reject": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `DHCP client settings/options

`,
			},

			"dhcpv6_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"pd": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{

								"interface": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{

											"address": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Local interface address assigned to interface (default: EUI-64)

|  Format  |  Description  |
|----------|---------------|
|  >0  |  Used to form IPv6 interface address  |
`,
											},

											"sla_id": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Interface site-Level aggregator (SLA)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Decimal integer which fits in the length of SLA IDs  |
`,
											},
										},
									},
									Optional: true,
									MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
								},

								"length": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |
`,

									Default:  stringdefault.StaticString(`64`),
									Computed: true,
								},
							},
						},
						Optional: true,
						MarkdownDescription: `DHCPv6 prefix delegation interface statement

|  Format  |  Description  |
|----------|---------------|
|  instance number  |  Prefix delegation instance (>= 0)  |
`,
					},

					"duid": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `DHCP unique identifier (DUID) to be sent by dhcpv6 client

|  Format  |  Description  |
|----------|---------------|
|  duid  |  DHCP unique identifier (DUID)  |
`,
					},

					"parameters_only": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Acquire only config parameters, no address

`,
					},

					"rapid_commit": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Wait for immediate reply instead of advertisements

`,
					},

					"temporary": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `IPv6 temporary address

`,
					},
				},
				Optional: true,
				MarkdownDescription: `DHCPv6 client settings/options

`,
			},

			"ip": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"arp_cache_timeout": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `ARP cache entry timeout in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  ARP cache entry timout in seconds  |
`,

						Default:  stringdefault.StaticString(`30`),
						Computed: true,
					},

					"disable_arp_filter": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable ARP filter on this interface

`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"enable_directed_broadcast": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable directed broadcast forwarding on this interface

`,
					},

					"enable_arp_accept": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP accept on this interface

`,
					},

					"enable_arp_announce": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP announce on this interface

`,
					},

					"enable_arp_ignore": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable ARP ignore on this interface

`,
					},

					"enable_proxy_arp": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable proxy-arp on this interface

`,
					},

					"proxy_arp_pvlan": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Enable private VLAN proxy ARP on this interface

`,
					},

					"source_validation": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Source validation by reversed path (RFC3704)

|  Format  |  Description  |
|----------|---------------|
|  strict  |  Enable Strict Reverse Path Forwarding as defined in RFC3704  |
|  loose  |  Enable Loose Reverse Path Forwarding as defined in RFC3704  |
|  disable  |  No source validation  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv4 routing parameters

`,
			},

			"ipv6": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"adjust_mss": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |
`,
					},

					"disable_forwarding": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Disable IP forwarding on this interface

`,
					},

					"dup_addr_detect_transmits": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |
`,
					},

					"address": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"autoconf": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Enable acquisition of IPv6 address using stateless autoconfig (SLAAC)

`,
							},

							"eui64": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Prefix for IPv6 address with MAC-based EUI-64

|  Format  |  Description  |
|----------|---------------|
|  <h:h:h:h:h:h:h:h/64>  |  IPv6 /64 network  |
`,
							},

							"no_default_link_local": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Remove the default link-local address from the interface

`,
							},
						},
						Optional: true,
						MarkdownDescription: `IPv6 address configuration modes

`,
					},
				},
				Optional: true,
				MarkdownDescription: `IPv6 routing parameters

`,
			},

			"mirror": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"ingress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror ingress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},

					"egress": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Mirror egress traffic to destination interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Mirror ingress/egress packets

`,
			},

			"security": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"wep": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"key": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `WEP encryption key

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Wired Equivalent Privacy key  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `Wired Equivalent Privacy (WEP) parameters

`,
					},

					"wpa": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"cipher": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Cipher suite for WPA unicast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |
`,
							},

							"group_cipher": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Cipher suite for WPA multicast and broadcast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |
`,
							},

							"mode": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `WPA mode

|  Format  |  Description  |
|----------|---------------|
|  wpa  |  WPA (IEEE 802.11i/D3.0)  |
|  wpa2  |  WPA2 (full IEEE 802.11i/RSN)  |
|  wpa+wpa2  |  Allow both WPA and WPA2  |
`,

								Default:  stringdefault.StaticString(`wpa+wpa2`),
								Computed: true,
							},

							"passphrase": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `WPA personal shared pass phrase. If you are using special characters in the WPA passphrase then single quotes are required.

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase of at least 8 but not more than 63 printable characters  |
`,
							},

							"radius": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{

									"server": schema.MapNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{

												"accounting": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Enable RADIUS server to receive accounting info

`,
												},
											},
										},
										Optional:            true,
										MarkdownDescription: ``,
									},
								},
								Optional:            true,
								MarkdownDescription: ``,
							},
						},
						Optional: true,
						MarkdownDescription: `Wifi Protected Access (WPA) parameters

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Wireless security settings

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *interfaces_wireless) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *interfaces_wirelessModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *interfaces_wireless) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *interfaces_wirelessModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *interfaces_wireless) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *interfaces_wirelessModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *interfaces_wireless) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *interfaces_wirelessModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
