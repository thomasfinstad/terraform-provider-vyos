// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_ipsec_site_to_site_peer{}

// var _ resource.ResourceWithImportState = &vpn_ipsec_site_to_site_peer{}

// vpn_ipsec_site_to_site_peer defines the resource implementation.
type vpn_ipsec_site_to_site_peer struct {
	ResourceName string
	client       *client.Client
}

func (r *vpn_ipsec_site_to_site_peer) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

// vpn_ipsec_site_to_site_peerModel describes the resource data model.
type vpn_ipsec_site_to_site_peerModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Disable                 types.String `tfsdk:"disable"`
	Connection_type         types.String `tfsdk:"connection_type"`
	Default_esp_group       types.String `tfsdk:"default_esp_group"`
	Description             types.String `tfsdk:"description"`
	Dhcp_interface          types.String `tfsdk:"dhcp_interface"`
	Force_udp_encapsulation types.String `tfsdk:"force_udp_encapsulation"`
	Ike_group               types.String `tfsdk:"ike_group"`
	Ikevtwo_reauth          types.String `tfsdk:"ikev2_reauth"`
	Local_address           types.String `tfsdk:"local_address"`
	Remote_address          types.String `tfsdk:"remote_address"`
	Virtual_address         types.String `tfsdk:"virtual_address"`

	// TagNodes
	Tunnel types.Map `tfsdk:"tunnel"`

	// Nodes
	Authentication types.List `tfsdk:"authentication"`
	Vti            types.List `tfsdk:"vti"`
}

func (m vpn_ipsec_site_to_site_peerModel) GetValues() (vyosPath []string, values map[string]attr.Value) {

	vyosPath = []string{
		"vpn",
		"ipsec",
		"site-to-site",
		"peer",

		m.ID.ValueString(),
	}

	values = map[string]attr.Value{

		// LeafNodes
		"disable":                 m.Disable,
		"connection_type":         m.Connection_type,
		"default_esp_group":       m.Default_esp_group,
		"description":             m.Description,
		"dhcp_interface":          m.Dhcp_interface,
		"force_udp_encapsulation": m.Force_udp_encapsulation,
		"ike_group":               m.Ike_group,
		"ikev2_reauth":            m.Ikevtwo_reauth,
		"local_address":           m.Local_address,
		"remote_address":          m.Remote_address,
		"virtual_address":         m.Virtual_address,

		// TagNodes
		"tunnel": m.Tunnel,

		// Nodes
		"authentication": m.Authentication,
		"vti":            m.Vti,
	}

	return vyosPath, values
}

// Metadata method to define the resource type name.
func (r vpn_ipsec_site_to_site_peer) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ResourceName = req.ProviderTypeName + "_vpn_ipsec_site_to_site_peer"
	resp.TypeName = r.ResourceName
}

// vpn_ipsec_site_to_site_peerResource method to return the example resource reference
func vpn_ipsec_site_to_site_peerResource() resource.Resource {
	return &vpn_ipsec_site_to_site_peer{}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r vpn_ipsec_site_to_site_peer) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Virtual Private Network (VPN)

VPN IP security (IPsec) parameters

Site-to-site VPN

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Connection name of the peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Connection name of the peer  |
`,
			},

			"tunnel": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Disable instance

`,
						},

						"esp_group": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
						},

						"protocol": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |
`,
						},

						"priority": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Priority for IPsec policy (lowest value more preferable)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-100  |  Priority for IPsec policy (lowest value more preferable)  |
`,
						},

						"local": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"port": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
								},

								"prefix": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Local IPv4 or IPv6 prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Local IPv4 prefix  |
|  ipv6net  |  Local IPv6 prefix  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Local parameters for interesting traffic

`,
						},

						"remote": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"port": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
								},

								"prefix": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Remote IPv4 or IPv6 prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Remote IPv4 prefix  |
|  ipv6net  |  Remote IPv6 prefix  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Match remote addresses

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Peer tunnel

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Peer tunnel  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable instance

`,
			},

			"connection_type": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Connection type

|  Format  |  Description  |
|----------|---------------|
|  initiate  |  Bring the connection up immediately  |
|  respond  |  Wait for the peer to initiate the connection  |
|  none  |  Load the connection only  |
`,
			},

			"default_esp_group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Defult ESP group name

`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"dhcp_interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `DHCP interface supplying next-hop IP address

|  Format  |  Description  |
|----------|---------------|
|  txt  |  DHCP interface name  |
`,
			},

			"force_udp_encapsulation": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Force UDP encapsulation

`,
			},

			"ike_group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
			},

			"ikev2_reauth": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Re-authentication of the remote peer during an IKE re-key (IKEv2 only)

|  Format  |  Description  |
|----------|---------------|
|  yes  |  Enable remote host re-autentication during an IKE re-key. Currently broken due to a strong swan bug  |
|  no  |  Disable remote host re-authenticaton during an IKE re-key.  |
|  inherit  |  Inherit the reauth configuration form your IKE-group  |
`,
			},

			"local_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IPv4 or IPv6 address of a local interface to use for VPN

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of a local interface for VPN  |
|  ipv6  |  IPv6 address of a local interface for VPN  |
|  any  |  Allow any IPv4 address present on the system to be used for VPN  |
`,
			},

			"remote_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IPv4 or IPv6 address of the remote peer

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of the remote peer  |
|  ipv6  |  IPv6 address of the remote peer  |
|  hostname  |  Fully qualified domain name of the remote peer  |
|  any  |  Allow any IP address of the remote peer  |
`,
			},

			"virtual_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Initiator request virtual-address from peer

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Request IPv4 address from peer  |
|  ipv6  |  Request IPv6 address from peer  |
`,
			},

			"authentication": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"local_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Local ID for peer authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Local ID used for peer authentication  |
`,
					},

					"mode": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Authentication mode

|  Format  |  Description  |
|----------|---------------|
|  pre-shared-secret  |  Use pre-shared secret key  |
|  rsa  |  Use RSA key  |
|  x509  |  Use x.509 certificate  |
`,
					},

					"remote_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `ID for remote authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  ID used for peer authentication  |
`,

						Default:  stringdefault.StaticString(`%any`),
						Computed: true,
					},

					"use_x509_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Use certificate common name as ID

`,
					},

					"rsa": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"local_key": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Name of PKI key-pair with local private key

`,
							},

							"passphrase": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Local private key passphrase

`,
							},

							"remote_key": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Name of PKI key-pair with remote public key

`,
							},
						},
						Optional: true,
						MarkdownDescription: `RSA keys

`,
					},

					"x509": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"certificate": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Certificate in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of certificate in PKI configuration  |
`,
							},

							"passphrase": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Private key passphrase

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase to decrypt the private key  |
`,
							},

							"ca_certificate": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Certificate Authority in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of CA in PKI configuration  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `X.509 certificate

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Peer authentication

`,
			},

			"vti": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"bind": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `VTI tunnel interface associated with this configuration

`,
					},

					"esp_group": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Virtual tunnel interface

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r vpn_ipsec_site_to_site_peer) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	ctx = context.WithValue(ctx, "crud_func", "Create")

	var data *firewall_nameModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create vyos api ops
	vyosOps := helpers.FromTerraformToVyos(ctx, data)
	for _, ops := range vyosOps {
		tflog.Error(ctx, "Vyos Ops generated", map[string]interface{}{"vyosOps": ops})
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	r.client.StageSet(ctx, vyosOps)
	response, err := r.client.CommitChanges(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create %s, got error: %s", r.ResourceName, err))
		return
	}
	if response != nil {
		tflog.Warn(ctx, "Got non-nil response from API", map[string]interface{}{"response": response})
	}

	// Save ID into the Terraform state.
	data.ID = types.StringValue(data.ID.ValueString())

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r vpn_ipsec_site_to_site_peer) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_ipsec_site_to_site_peerModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r vpn_ipsec_site_to_site_peer) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_ipsec_site_to_site_peerModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r vpn_ipsec_site_to_site_peer) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_ipsec_site_to_site_peerModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
