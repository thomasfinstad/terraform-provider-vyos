// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_ipsec_esp_group{}

// var _ resource.ResourceWithImportState = &vpn_ipsec_esp_group{}

// vpn_ipsec_esp_group defines the resource implementation.
type vpn_ipsec_esp_group struct {
	client   *http.Client
	vyosPath []string
}

// vpn_ipsec_esp_groupModel describes the resource data model.
type vpn_ipsec_esp_groupModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Compression  types.String `tfsdk:"compression"`
	Lifetime     types.String `tfsdk:"lifetime"`
	Life_bytes   types.String `tfsdk:"life_bytes"`
	Life_packets types.String `tfsdk:"life_packets"`
	Mode         types.String `tfsdk:"mode"`
	Pfs          types.String `tfsdk:"pfs"`

	// TagNodes
	Proposal types.Map `tfsdk:"proposal"`

	// Nodes

}

// Metadata method to define the resource type name.
func (r *vpn_ipsec_esp_group) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vpn_ipsec_esp_group"
}

// vpn_ipsec_esp_groupResource method to return the example resource reference
func vpn_ipsec_esp_groupResource() resource.Resource {
	return &vpn_ipsec_esp_group{
		vyosPath: []string{
			"vpn",
			"ipsec",
			"esp-group",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *vpn_ipsec_esp_group) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Virtual Private Network (VPN)

VPN IP security (IPsec) parameters

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Encapsulating Security Payload (ESP) group name

`,
			},

			"proposal": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"encryption": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Encryption algorithm

|  Format  |  Description  |
|----------|---------------|
|  null  |  Null encryption  |
|  aes128  |  128 bit AES-CBC  |
|  aes192  |  192 bit AES-CBC  |
|  aes256  |  256 bit AES-CBC  |
|  aes128ctr  |  128 bit AES-COUNTER  |
|  aes192ctr  |  192 bit AES-COUNTER  |
|  aes256ctr  |  256 bit AES-COUNTER  |
|  aes128ccm64  |  128 bit AES-CCM with 64 bit ICV  |
|  aes192ccm64  |  192 bit AES-CCM with 64 bit ICV  |
|  aes256ccm64  |  256 bit AES-CCM with 64 bit ICV  |
|  aes128ccm96  |  128 bit AES-CCM with 96 bit ICV  |
|  aes192ccm96  |  192 bit AES-CCM with 96 bit ICV  |
|  aes256ccm96  |  256 bit AES-CCM with 96 bit ICV  |
|  aes128ccm128  |  128 bit AES-CCM with 128 bit ICV  |
|  aes192ccm128  |  192 bit AES-CCM with 128 bit IC  |
|  aes256ccm128  |  256 bit AES-CCM with 128 bit ICV  |
|  aes128gcm64  |  128 bit AES-GCM with 64 bit ICV  |
|  aes192gcm64  |  192 bit AES-GCM with 64 bit ICV  |
|  aes256gcm64  |  256 bit AES-GCM with 64 bit ICV  |
|  aes128gcm96  |  128 bit AES-GCM with 96 bit ICV  |
|  aes192gcm96  |  192 bit AES-GCM with 96 bit ICV  |
|  aes256gcm96  |  256 bit AES-GCM with 96 bit ICV  |
|  aes128gcm128  |  128 bit AES-GCM with 128 bit ICV  |
|  aes192gcm128  |  192 bit AES-GCM with 128 bit ICV  |
|  aes256gcm128  |  256 bit AES-GCM with 128 bit ICV  |
|  aes128gmac  |  Null encryption with 128 bit AES-GMAC  |
|  aes192gmac  |  Null encryption with 192 bit AES-GMAC  |
|  aes256gmac  |  Null encryption with 256 bit AES-GMAC  |
|  3des  |  168 bit 3DES-EDE-CBC  |
|  blowfish128  |  128 bit Blowfish-CBC  |
|  blowfish192  |  192 bit Blowfish-CBC  |
|  blowfish256  |  256 bit Blowfish-CBC  |
|  camellia128  |  128 bit Camellia-CBC  |
|  camellia192  |  192 bit Camellia-CBC  |
|  camellia256  |  256 bit Camellia-CBC  |
|  camellia128ctr  |  128 bit Camellia-COUNTER  |
|  camellia192ctr  |  192 bit Camellia-COUNTER  |
|  camellia256ctr  |  256 bit Camellia-COUNTER  |
|  camellia128ccm64  |  128 bit Camellia-CCM with 64 bit ICV  |
|  camellia192ccm64  |  192 bit Camellia-CCM with 64 bit ICV  |
|  camellia256ccm64  |  256 bit Camellia-CCM with 64 bit ICV  |
|  camellia128ccm96  |  128 bit Camellia-CCM with 96 bit ICV  |
|  camellia192ccm96  |  192 bit Camellia-CCM with 96 bit ICV  |
|  camellia256ccm96  |  256 bit Camellia-CCM with 96 bit ICV  |
|  camellia128ccm128  |  128 bit Camellia-CCM with 128 bit ICV  |
|  camellia192ccm128  |  192 bit Camellia-CCM with 128 bit ICV  |
|  camellia256ccm128  |  256 bit Camellia-CCM with 128 bit ICV  |
|  serpent128  |  128 bit Serpent-CBC  |
|  serpent192  |  192 bit Serpent-CBC  |
|  serpent256  |  256 bit Serpent-CBC  |
|  twofish128  |  128 bit Twofish-CBC  |
|  twofish192  |  192 bit Twofish-CBC  |
|  twofish256  |  256 bit Twofish-CBC  |
|  cast128  |  128 bit CAST-CBC  |
|  chacha20poly1305  |  256 bit ChaCha20/Poly1305 with 128 bit ICV  |
`,

							Default:  stringdefault.StaticString(`aes128`),
							Computed: true,
						},

						"hash": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Hash algorithm

|  Format  |  Description  |
|----------|---------------|
|  md5  |  MD5 HMAC  |
|  md5_128  |  MD5_128 HMAC  |
|  sha1  |  SHA1 HMAC  |
|  sha1_160  |  SHA1_160 HMAC  |
|  sha256  |  SHA2_256_128 HMAC  |
|  sha256_96  |  SHA2_256_96 HMAC  |
|  sha384  |  SHA2_384_192 HMAC  |
|  sha512  |  SHA2_512_256 HMAC  |
|  aesxcbc  |  AES XCBC  |
|  aescmac  |  AES CMAC  |
|  aes128gmac  |  128-bit AES-GMAC  |
|  aes192gmac  |  192-bit AES-GMAC  |
|  aes256gmac  |  256-bit AES-GMAC  |
`,

							Default:  stringdefault.StaticString(`sha1`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `ESP group proposal

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  ESP group proposal number  |
`,
			},

			"compression": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Enable ESP compression

`,
			},

			"lifetime": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Security Association time to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:30-86400  |  SA lifetime in seconds  |
`,

				Default:  stringdefault.StaticString(`3600`),
				Computed: true,
			},

			"life_bytes": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Security Association byte count to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:1024-26843545600000  |  SA life in bytes  |
`,
			},

			"life_packets": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Security Association packet count to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:1000-26843545600000  |  SA life in packets  |
`,
			},

			"mode": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `ESP mode

|  Format  |  Description  |
|----------|---------------|
|  tunnel  |  Tunnel mode  |
|  transport  |  Transport mode  |
`,

				Default:  stringdefault.StaticString(`tunnel`),
				Computed: true,
			},

			"pfs": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `ESP Perfect Forward Secrecy

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Inherit Diffie-Hellman group from the IKE group  |
|  dh-group1  |  Use Diffie-Hellman group 1 (modp768)  |
|  dh-group2  |  Use Diffie-Hellman group 2 (modp1024)  |
|  dh-group5  |  Use Diffie-Hellman group 5 (modp1536)  |
|  dh-group14  |  Use Diffie-Hellman group 14 (modp2048)  |
|  dh-group15  |  Use Diffie-Hellman group 15 (modp3072)  |
|  dh-group16  |  Use Diffie-Hellman group 16 (modp4096)  |
|  dh-group17  |  Use Diffie-Hellman group 17 (modp6144)  |
|  dh-group18  |  Use Diffie-Hellman group 18 (modp8192)  |
|  dh-group19  |  Use Diffie-Hellman group 19 (ecp256)  |
|  dh-group20  |  Use Diffie-Hellman group 20 (ecp384)  |
|  dh-group21  |  Use Diffie-Hellman group 21 (ecp521)  |
|  dh-group22  |  Use Diffie-Hellman group 22 (modp1024s160)  |
|  dh-group23  |  Use Diffie-Hellman group 23 (modp2048s224)  |
|  dh-group24  |  Use Diffie-Hellman group 24 (modp2048s256)  |
|  dh-group25  |  Use Diffie-Hellman group 25 (ecp192)  |
|  dh-group26  |  Use Diffie-Hellman group 26 (ecp224)  |
|  dh-group27  |  Use Diffie-Hellman group 27 (ecp224bp)  |
|  dh-group28  |  Use Diffie-Hellman group 28 (ecp256bp)  |
|  dh-group29  |  Use Diffie-Hellman group 29 (ecp384bp)  |
|  dh-group30  |  Use Diffie-Hellman group 30 (ecp512bp)  |
|  dh-group31  |  Use Diffie-Hellman group 31 (curve25519)  |
|  dh-group32  |  Use Diffie-Hellman group 32 (curve448)  |
|  disable  |  Disable PFS  |
`,

				Default:  stringdefault.StaticString(`enable`),
				Computed: true,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *vpn_ipsec_esp_group) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *vpn_ipsec_esp_groupModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *vpn_ipsec_esp_group) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_ipsec_esp_groupModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *vpn_ipsec_esp_group) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_ipsec_esp_groupModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *vpn_ipsec_esp_group) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_ipsec_esp_groupModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
