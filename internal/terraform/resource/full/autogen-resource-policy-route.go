// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &policy_route{}

// var _ resource.ResourceWithImportState = &policy_route{}

// policy_route defines the resource implementation.
type policy_route struct {
	client   *http.Client
	vyosPath []string
}

// policy_routeModel describes the resource data model.
type policy_routeModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description        types.String `tfsdk:"description"`
	Iface              types.String `tfsdk:"interface"`
	Enable_default_log types.String `tfsdk:"enable_default_log"`

	// TagNodes
	Rule types.Map `tfsdk:"rule"`

	// Nodes

}

// Metadata method to define the resource type name.
func (r *policy_route) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_policy_route"
}

// policy_routeResource method to return the example resource reference
func policy_routeResource() resource.Resource {
	return &policy_route{
		vyosPath: []string{
			"policy",
			"route",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *policy_route) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: ``,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Policy route rule set name for IPv4

`,
			},

			"rule": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"action": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Rule action

|  Format  |  Description  |
|----------|---------------|
|  accept  |  Accept matching entries  |
|  reject  |  Reject matching entries  |
|  return  |  Return from the current chain and continue at the next rule of the last chain  |
|  drop  |  Drop matching entries  |
`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"disable": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Option to disable firewall rule

`,
						},

						"log": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Option to log packets matching rule

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable log  |
|  disable  |  Disable log  |
`,
						},

						"protocol": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Protocol to match (protocol name, number, or "all")

|  Format  |  Description  |
|----------|---------------|
|  all  |  All IP protocols  |
|  tcp_udp  |  Both TCP and UDP  |
|  0-255  |  IP protocol number  |
|  !<protocol>  |  IP protocol number  |
`,

							Default:  stringdefault.StaticString(`all`),
							Computed: true,
						},

						"dscp": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `DSCP value

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  DSCP value to match  |
|  <start-end>  |  DSCP range to match  |
`,
						},

						"dscp_exclude": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `DSCP value not to match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  DSCP value not to match  |
|  <start-end>  |  DSCP range not to match  |
`,
						},

						"packet_length": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Payload size in bytes, including header and data to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Packet length to match  |
|  <start-end>  |  Packet length range to match  |
`,
						},

						"packet_length_exclude": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Payload size in bytes, including header and data not to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Packet length not to match  |
|  <start-end>  |  Packet length range not to match  |
`,
						},

						"packet_type": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Packet type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Match broadcast packet type  |
|  host  |  Match host packet type, addressed to local host  |
|  multicast  |  Match multicast packet type  |
|  other  |  Match packet addressed to another host  |
`,
						},

						"connection_mark": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Connection mark

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  Connection-mark to match  |
`,
						},

						"destination": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"address": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP address, subnet, or range

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
|  ipv4range  |  IPv4 address range to match  |
|  !ipv4  |  Match everything except the specified address  |
|  !ipv4net  |  Match everything except the specified prefix  |
|  !ipv4range  |  Match everything except the specified range  |
`,
								},

								"port": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Port

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Named port (any name in /etc/services, e.g., http)  |
|  u32:1-65535  |  Numbered port  |
|  <start-end>  |  Numbered port range (e.g. 1001-1005)  |
|     |  \n\n  Multiple destination ports can be specified as a comma-separated list.\n  For example: 'telnet,http,123,1001-1005'  |
`,
								},

								"group": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"address_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of addresses

`,
										},

										"domain_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of domains

`,
										},

										"mac_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of MAC addresses

`,
										},

										"network_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of networks

`,
										},

										"port_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of ports

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Group

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Destination parameters

`,
						},

						"fragment": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"match_frag": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Second and further fragments of fragmented packets

`,
								},

								"match_non_frag": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Head fragments or unfragmented packets

`,
								},
							},
							Optional: true,
							MarkdownDescription: `IP fragment match

`,
						},

						"ipsec": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"match_ipsec": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Inbound IPsec packets

`,
								},

								"match_none": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Inbound non-IPsec packets

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Inbound IPsec packets

`,
						},

						"limit": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"burst": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Maximum number of packets to allow in excess of rate

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Maximum number of packets to allow in excess of rate  |
`,
								},

								"rate": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Maximum average matching rate

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Maximum average matching rate  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Rate limit using a token bucket filter

`,
						},

						"recent": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"count": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source addresses seen more than N times

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Source addresses seen more than N times  |
`,
								},

								"time": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Source addresses seen in the last N seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Source addresses seen in the last N seconds  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Parameters for matching recently seen sources

`,
						},

						"set": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"connection_mark": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Connection marking

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  Connection marking  |
`,
								},

								"dscp": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Packet Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  DSCP number  |
`,
								},

								"mark": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Packet marking

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2147483647  |  Packet marking  |
`,
								},

								"table": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Routing table to forward packet with

|  Format  |  Description  |
|----------|---------------|
|  u32:1-200  |  Table number  |
|  main  |  Main table  |
`,
								},

								"tcp_mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `TCP Maximum Segment Size

|  Format  |  Description  |
|----------|---------------|
|  u32:500-1460  |  Explicitly set TCP MSS value  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Packet modifications

`,
						},

						"state": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"established": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Established state

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable  |
|  disable  |  Disable  |
`,
								},

								"invalid": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Invalid state

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable  |
|  disable  |  Disable  |
`,
								},

								"new": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `New state

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable  |
|  disable  |  Disable  |
`,
								},

								"related": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Related state

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable  |
|  disable  |  Disable  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Session state

`,
						},

						"tcp": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"mss": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Maximum segment size (MSS)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16384  |  Maximum segment size  |
|  <min>-<max>  |  TCP MSS range (use '-' as delimiter)  |
`,
								},

								"flags": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"syn": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Synchronise flag

`,
										},

										"ack": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Acknowledge flag

`,
										},

										"fin": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Finish flag

`,
										},

										"rst": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Reset flag

`,
										},

										"urg": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Urgent flag

`,
										},

										"psh": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Push flag

`,
										},

										"ecn": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Explicit Congestion Notification flag

`,
										},

										"cwr": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Congestion Window Reduced flag

`,
										},

										"not": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{

												"syn": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Synchronise flag

`,
												},

												"ack": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Acknowledge flag

`,
												},

												"fin": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Finish flag

`,
												},

												"rst": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Reset flag

`,
												},

												"urg": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Urgent flag

`,
												},

												"psh": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Push flag

`,
												},

												"ecn": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Explicit Congestion Notification flag

`,
												},

												"cwr": schema.StringAttribute{

													Optional: true,
													MarkdownDescription: `Congestion Window Reduced flag

`,
												},
											},
											Optional: true,
											MarkdownDescription: `Match flags not set

`,
										},
									},
									Optional: true,
									MarkdownDescription: `TCP flags to match

`,
								},
							},
							Optional: true,
							MarkdownDescription: `TCP flags to match

`,
						},

						"time": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"monthdays": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Monthdays to match rule on

`,
								},

								"startdate": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Date to start matching rule

`,
								},

								"starttime": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Time of day to start matching rule

`,
								},

								"stopdate": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Date to stop matching rule

`,
								},

								"stoptime": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Time of day to stop matching rule

`,
								},

								"utc": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Interpret times for startdate, stopdate, starttime and stoptime to be UTC

`,
								},

								"weekdays": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Weekdays to match rule on

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Time to match rule

`,
						},

						"source": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"address": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `IP address, subnet, or range

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
|  ipv4range  |  IPv4 address range to match  |
|  !ipv4  |  Match everything except the specified address  |
|  !ipv4net  |  Match everything except the specified prefix  |
|  !ipv4range  |  Match everything except the specified range  |
`,
								},

								"mac_address": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `MAC address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |
|  !macaddr  |  Match everything except the specified MAC address  |
`,
								},

								"port": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Port

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Named port (any name in /etc/services, e.g., http)  |
|  u32:1-65535  |  Numbered port  |
|  <start-end>  |  Numbered port range (e.g. 1001-1005)  |
|     |  \n\n  Multiple destination ports can be specified as a comma-separated list.\n  For example: 'telnet,http,123,1001-1005'  |
`,
								},

								"group": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{

										"address_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of addresses

`,
										},

										"domain_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of domains

`,
										},

										"mac_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of MAC addresses

`,
										},

										"network_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of networks

`,
										},

										"port_group": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Group of ports

`,
										},
									},
									Optional: true,
									MarkdownDescription: `Group

`,
								},
							},
							Optional: true,
							MarkdownDescription: `Source parameters

`,
						},

						"icmp": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"code": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ICMP code (0-255)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  ICMP code (0-255)  |
`,
								},

								"type": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ICMP type (0-255)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  ICMP type (0-255)  |
`,
								},

								"type_name": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `ICMP type-name

|  Format  |  Description  |
|----------|---------------|
|  echo-reply  |  ICMP type 0: echo-reply  |
|  destination-unreachable  |  ICMP type 3: destination-unreachable  |
|  source-quench  |  ICMP type 4: source-quench  |
|  redirect  |  ICMP type 5: redirect  |
|  echo-request  |  ICMP type 8: echo-request  |
|  router-advertisement  |  ICMP type 9: router-advertisement  |
|  router-solicitation  |  ICMP type 10: router-solicitation  |
|  time-exceeded  |  ICMP type 11: time-exceeded  |
|  parameter-problem  |  ICMP type 12: parameter-problem  |
|  timestamp-request  |  ICMP type 13: timestamp-request  |
|  timestamp-reply  |  ICMP type 14: timestamp-reply  |
|  info-request  |  ICMP type 15: info-request  |
|  info-reply  |  ICMP type 16: info-reply  |
|  address-mask-request  |  ICMP type 17: address-mask-request  |
|  address-mask-reply  |  ICMP type 18: address-mask-reply  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `ICMP type and code information

`,
						},

						"ttl": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{

								"eq": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Match on equal value

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Equal to value  |
`,
								},

								"gt": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Match on greater then value

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Greater then value  |
`,
								},

								"lt": schema.StringAttribute{

									Optional: true,
									MarkdownDescription: `Match on less then value

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Less then value  |
`,
								},
							},
							Optional: true,
							MarkdownDescription: `Time to live limit

`,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Policy rule number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-999999  |  Number of policy rule  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"interface": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
			},

			"enable_default_log": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Log packets hitting default-action

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *policy_route) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *policy_routeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *policy_route) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *policy_routeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *policy_route) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *policy_routeModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *policy_route) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *policy_routeModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
