// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &qos_policy_round_robin{}

// var _ resource.ResourceWithImportState = &qos_policy_round_robin{}

// qos_policy_round_robin defines the resource implementation.
type qos_policy_round_robin struct {
	client   *http.Client
	vyosPath []string
}

// qos_policy_round_robinModel describes the resource data model.
type qos_policy_round_robinModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description types.String `tfsdk:"description"`

	// TagNodes
	Class types.Map `tfsdk:"class"`

	// Nodes
	Default types.List `tfsdk:"default"`
}

// Metadata method to define the resource type name.
func (r *qos_policy_round_robin) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_policy_round_robin"
}

// qos_policy_round_robinResource method to return the example resource reference
func qos_policy_round_robinResource() resource.Resource {
	return &qos_policy_round_robin{
		vyosPath: []string{
			"qos",
			"policy",
			"round-robin",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *qos_policy_round_robin) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Quality of Service (QoS)

Service Policy definitions

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Deficit Round Robin Scheduler

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |
`,
			},

			"class": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"match": schema.MapNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{

									"description": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
									},

									"interface": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |
`,
									},

									"mark": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Match on mark applied by firewall

|  Format  |  Description  |
|----------|---------------|
|  u32  |  FW mark to match  |
`,
									},

									"vif": schema.StringAttribute{

										Optional: true,
										MarkdownDescription: `Virtual Local Area Network (VLAN) ID for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4095  |  Virtual Local Area Network (VLAN) tag   |
`,
									},

									"ether": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"destination": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet protocol for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Ethernet protocol number  |
|  txt  |  Ethernet protocol name  |
|  all  |  Any protocol  |
|  ip  |  Internet IP (IPv4)  |
|  ipv6  |  Internet IP (IPv6)  |
|  arp  |  Address Resolution Protocol  |
|  atalk  |  Appletalk  |
|  ipx  |  Novell Internet Packet Exchange  |
|  802.1Q  |  802.1Q VLAN tag  |
`,
											},

											"source": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Ethernet source address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |
`,
											},
										},
										Optional: true,
										MarkdownDescription: `Ethernet header match

`,
									},

									"ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"dscp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |
`,
											},

											"max_length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |
`,
											},

											"destination": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv4 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
|  ipv4net  |  IPv4 prefix  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on destination port or address

`,
											},

											"source": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv4 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |
|  ipv4net  |  IPv4 prefix  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on source port or address

`,
											},

											"tcp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ack": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP ACK

`,
													},

													"syn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP SYN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `TCP Flags matching

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Match IP protocol header

`,
									},

									"ipv6": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{

											"dscp": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |
`,
											},

											"max_length": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |
`,
											},

											"protocol": schema.StringAttribute{

												Optional: true,
												MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |
`,
											},

											"destination": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv6 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 address and prefix length  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on destination port or address

`,
											},

											"source": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"address": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `IPv6 destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 address and prefix length  |
`,
													},

													"port": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
													},
												},
												Optional: true,
												MarkdownDescription: `Match on source port or address

`,
											},

											"tcp": schema.SingleNestedAttribute{
												Attributes: map[string]schema.Attribute{

													"ack": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP ACK

`,
													},

													"syn": schema.StringAttribute{

														Optional: true,
														MarkdownDescription: `Match TCP SYN

`,
													},
												},
												Optional: true,
												MarkdownDescription: `TCP Flags matching

`,
											},
										},
										Optional: true,
										MarkdownDescription: `Match IPv6 protocol header

`,
									},
								},
							},
							Optional: true,
							MarkdownDescription: `Class matching rule name

`,
						},

						"description": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
						},

						"codel_quantum": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |
`,

							Default:  stringdefault.StaticString(`1514`),
							Computed: true,
						},

						"flows": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |
`,

							Default:  stringdefault.StaticString(`1024`),
							Computed: true,
						},

						"interval": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |
`,

							Default:  stringdefault.StaticString(`100`),
							Computed: true,
						},

						"quantum": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Packet scheduling quantum

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Packet scheduling quantum (bytes)  |
`,
						},

						"queue_limit": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |
`,
						},

						"queue_type": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |
`,

							Default:  stringdefault.StaticString(`drop-tail`),
							Computed: true,
						},

						"target": schema.StringAttribute{

							Optional: true,
							MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |
`,

							Default:  stringdefault.StaticString(`5`),
							Computed: true,
						},
					},
				},
				Optional: true,
				MarkdownDescription: `Class ID

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4095  |  Class Identifier  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"default": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"codel_quantum": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |
`,

						Default:  stringdefault.StaticString(`1514`),
						Computed: true,
					},

					"flows": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |
`,

						Default:  stringdefault.StaticString(`1024`),
						Computed: true,
					},

					"interval": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |
`,

						Default:  stringdefault.StaticString(`100`),
						Computed: true,
					},

					"queue_limit": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |
`,
					},

					"queue_type": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |
`,

						Default:  stringdefault.StaticString(`fair-queue`),
						Computed: true,
					},

					"target": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |
`,

						Default:  stringdefault.StaticString(`5`),
						Computed: true,
					},
				},
				Optional: true,
				MarkdownDescription: `Default policy

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *qos_policy_round_robin) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *qos_policy_round_robinModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *qos_policy_round_robin) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *qos_policy_round_robinModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *qos_policy_round_robin) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *qos_policy_round_robinModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *qos_policy_round_robin) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *qos_policy_round_robinModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
