// Code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.

package resourcefull

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &vpn_ipsec_remote_access_connection{}

// var _ resource.ResourceWithImportState = &vpn_ipsec_remote_access_connection{}

// vpn_ipsec_remote_access_connection defines the resource implementation.
type vpn_ipsec_remote_access_connection struct {
	client   *http.Client
	vyosPath []string
}

// vpn_ipsec_remote_access_connectionModel describes the resource data model.
type vpn_ipsec_remote_access_connectionModel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	Description   types.String `tfsdk:"description"`
	Disable       types.String `tfsdk:"disable"`
	Esp_group     types.String `tfsdk:"esp_group"`
	Ike_group     types.String `tfsdk:"ike_group"`
	Local_address types.String `tfsdk:"local_address"`
	Timeout       types.String `tfsdk:"timeout"`
	Pool          types.String `tfsdk:"pool"`
	Unique        types.String `tfsdk:"unique"`

	// TagNodes

	// Nodes
	Authentication types.List `tfsdk:"authentication"`
	Local          types.List `tfsdk:"local"`
}

// Metadata method to define the resource type name.
func (r *vpn_ipsec_remote_access_connection) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vpn_ipsec_remote_access_connection"
}

// vpn_ipsec_remote_access_connectionResource method to return the example resource reference
func vpn_ipsec_remote_access_connectionResource() resource.Resource {
	return &vpn_ipsec_remote_access_connection{
		vyosPath: []string{
			"vpn",
			"ipsec",
			"remote-access",
			"connection",
		},
	}
}

// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *vpn_ipsec_remote_access_connection) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `Virtual Private Network (VPN)

VPN IP security (IPsec) parameters

IKEv2 remote access VPN

`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `IKEv2 VPN connection name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Connection name  |
`,
			},

			"description": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
			},

			"disable": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Disable instance

`,
			},

			"esp_group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
			},

			"ike_group": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
			},

			"local_address": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IPv4 or IPv6 address of a local interface to use for VPN

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of a local interface for VPN  |
|  ipv6  |  IPv6 address of a local interface for VPN  |
|  any  |  Allow any IPv4 address present on the system to be used for VPN  |
`,
			},

			"timeout": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Timeout to close connection if no data is transmitted

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable inactivity checks  |
|  u32:1-86400  |  Timeout in seconds  |
`,

				Default:  stringdefault.StaticString(`28800`),
				Computed: true,
			},

			"pool": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `IP address pool

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Predefined IP pool name  |
|  dhcp  |  Forward requests for virtual IP addresses to a DHCP server  |
|  radius  |  Forward requests for virtual IP addresses to a RADIUS server  |
`,
			},

			"unique": schema.StringAttribute{

				Optional: true,
				MarkdownDescription: `Connection uniqueness enforcement policy

|  Format  |  Description  |
|----------|---------------|
|  never  |  Never enforce connection uniqueness  |
|  keep  |  Reject new connection attempts if the same user already has an active connection  |
|  replace  |  Delete any existing connection if a new one for the same user gets established  |
`,
			},

			"authentication": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"local_id": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Local ID for peer authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Local ID used for peer authentication  |
`,
					},

					"client_mode": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Client authentication mode

|  Format  |  Description  |
|----------|---------------|
|  eap-tls  |  Use EAP-TLS authentication  |
|  eap-mschapv2  |  Use EAP-MSCHAPv2 authentication  |
|  eap-radius  |  Use EAP-RADIUS authentication  |
`,

						Default:  stringdefault.StaticString(`eap-mschapv2`),
						Computed: true,
					},

					"server_mode": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Server authentication mode

|  Format  |  Description  |
|----------|---------------|
|  pre-shared-secret  |  Use a pre-shared secret key  |
|  x509  |  Use x.509 certificate  |
`,

						Default:  stringdefault.StaticString(`x509`),
						Computed: true,
					},

					"pre_shared_secret": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Pre-shared secret key

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Pre-shared secret key  |
`,
					},

					"x509": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"certificate": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Certificate in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of certificate in PKI configuration  |
`,
							},

							"passphrase": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Private key passphrase

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase to decrypt the private key  |
`,
							},

							"ca_certificate": schema.StringAttribute{

								Optional: true,
								MarkdownDescription: `Certificate Authority in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of CA in PKI configuration  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `X.509 certificate

`,
					},

					"local_users": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{

							"username": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{

										"disable": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Disable instance

`,
										},

										"password": schema.StringAttribute{

											Optional: true,
											MarkdownDescription: `Password used for authentication

`,
										},
									},
								},
								Optional: true,
								MarkdownDescription: `Username used for authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Username used for authentication  |
`,
							},
						},
						Optional: true,
						MarkdownDescription: `Local user authentication

`,
					},
				},
				Optional: true,
				MarkdownDescription: `Authentication for remote access

`,
			},

			"local": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{

					"port": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |
`,
					},

					"prefix": schema.StringAttribute{

						Optional: true,
						MarkdownDescription: `Local IPv4 or IPv6 prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Local IPv4 prefix  |
|  ipv6net  |  Local IPv6 prefix  |
`,
					},
				},
				Optional: true,
				MarkdownDescription: `Local parameters for interesting traffic

`,
			},
		},
	}
}

// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *vpn_ipsec_remote_access_connection) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *vpn_ipsec_remote_access_connectionModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *vpn_ipsec_remote_access_connection) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vpn_ipsec_remote_access_connectionModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *vpn_ipsec_remote_access_connection) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vpn_ipsec_remote_access_connectionModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *vpn_ipsec_remote_access_connection) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vpn_ipsec_remote_access_connectionModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
