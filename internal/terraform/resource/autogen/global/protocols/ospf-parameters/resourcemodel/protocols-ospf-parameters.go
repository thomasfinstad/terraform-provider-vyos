// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsOspfParameters describes the resource data model.
type ProtocolsOspfParameters struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafProtocolsOspfParametersAbrType                           types.String `tfsdk:"abr_type" vyos:"abr-type,omitempty"`
	LeafProtocolsOspfParametersOpaqueLsa                         types.Bool   `tfsdk:"opaque_lsa" vyos:"opaque-lsa,omitempty"`
	LeafProtocolsOspfParametersRfconefiveeightthreeCompatibility types.Bool   `tfsdk:"rfc1583_compatibility" vyos:"rfc1583-compatibility,omitempty"`
	LeafProtocolsOspfParametersRouterID                          types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ProtocolsOspfParameters) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsOspfParameters) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"protocols",

		"ospf",

		"parameters",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsOspfParameters) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"abr_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF ABR type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  cisco  &emsp; |  Cisco ABR type  |
    |  ibm  &emsp; |  IBM ABR type  |
    |  shortcut  &emsp; |  Shortcut ABR type  |
    |  standard  &emsp; |  Standard ABR type  |

`,

			// Default:          stringdefault.StaticString(`cisco`),
			Computed: true,
		},

		"opaque_lsa": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable the Opaque-LSA capability (rfc2370)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"rfc1583_compatibility": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable RFC1583 criteria for handling AS external routes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Router-ID in IP address format  |

`,
		},
	}
}
