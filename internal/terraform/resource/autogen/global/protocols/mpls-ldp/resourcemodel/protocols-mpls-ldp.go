// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsMplsLdp describes the resource data model.
type ProtocolsMplsLdp struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafProtocolsMplsLdpRouterID  types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`
	LeafProtocolsMplsLdpInterface types.List   `tfsdk:"interface" vyos:"interface,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsMplsLdpNeighbor bool `tfsdk:"-" vyos:"neighbor,ignore,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeProtocolsMplsLdpAllocation       bool `tfsdk:"-" vyos:"allocation,ignore,omitempty"`
	ExistsNodeProtocolsMplsLdpDiscovery        bool `tfsdk:"-" vyos:"discovery,ignore,omitempty"`
	ExistsNodeProtocolsMplsLdpTargetedNeighbor bool `tfsdk:"-" vyos:"targeted-neighbor,ignore,omitempty"`
	ExistsNodeProtocolsMplsLdpParameters       bool `tfsdk:"-" vyos:"parameters,ignore,omitempty"`
	ExistsNodeProtocolsMplsLdpExport           bool `tfsdk:"-" vyos:"export,ignore,omitempty"`
	ExistsNodeProtocolsMplsLdpImport           bool `tfsdk:"-" vyos:"import,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *ProtocolsMplsLdp) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsMplsLdp) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"protocols",

		"mpls",

		"ldp",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsMplsLdp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Router-ID in IP address format  |

`,
		},

		"interface": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Interface to use

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Interface name  |

`,
		},
	}
}
