// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsRIP describes the resource data model.
type ProtocolsRIP struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafProtocolsRIPDefaultDistance  types.Number `tfsdk:"default_distance" vyos:"default-distance,omitempty"`
	LeafProtocolsRIPDefaultMetric    types.Number `tfsdk:"default_metric" vyos:"default-metric,omitempty"`
	LeafProtocolsRIPNeighbor         types.List   `tfsdk:"neighbor" vyos:"neighbor,omitempty"`
	LeafProtocolsRIPNetwork          types.List   `tfsdk:"network" vyos:"network,omitempty"`
	LeafProtocolsRIPPassiveInterface types.List   `tfsdk:"passive_interface" vyos:"passive-interface,omitempty"`
	LeafProtocolsRIPRoute            types.List   `tfsdk:"route" vyos:"route,omitempty"`
	LeafProtocolsRIPRouteMap         types.String `tfsdk:"route_map" vyos:"route-map,omitempty"`
	LeafProtocolsRIPVersion          types.String `tfsdk:"version" vyos:"version,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsRIPInterface       bool `tfsdk:"-" vyos:"interface,ignore,child"`
	ExistsTagProtocolsRIPNetworkDistance bool `tfsdk:"-" vyos:"network-distance,ignore,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeProtocolsRIPDefaultInformation bool `tfsdk:"-" vyos:"default-information,ignore,omitempty"`
	ExistsNodeProtocolsRIPDistributeList     bool `tfsdk:"-" vyos:"distribute-list,ignore,omitempty"`
	ExistsNodeProtocolsRIPRedistribute       bool `tfsdk:"-" vyos:"redistribute,ignore,omitempty"`
	ExistsNodeProtocolsRIPTimers             bool `tfsdk:"-" vyos:"timers,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *ProtocolsRIP) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsRIP) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"protocols",

		"rip",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsRIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"default_distance": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Administrative distance

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-255  &emsp; |  Administrative distance  |

`,
		},

		"default_metric": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Metric of redistributed routes

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-16  &emsp; |  Default metric  |

`,
		},

		"neighbor": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Neighbor router

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Neighbor router  |

`,
		},

		"network": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `RIP network

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  RIP network  |

`,
		},

		"passive_interface": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Suppress routing updates on an interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Interface to be passive (i.e. suppress routing updates)  |
    |  default  &emsp; |  Default to suppress routing updates on all interfaces  |

`,
		},

		"route": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `RIP static route

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  RIP static route  |

`,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Route map name  |

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Limit RIP protocol version

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  1  &emsp; |  Allow RIPv1 only  |
    |  2  &emsp; |  Allow RIPv2 only  |

`,
		},
	}
}
