// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsEigrp describes the resource data model.
type ProtocolsEigrp struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafProtocolsEigrpLocalAs          types.Number `tfsdk:"local_as" vyos:"local-as,omitempty"`
	LeafProtocolsEigrpMaximumPaths     types.Number `tfsdk:"maximum_paths" vyos:"maximum-paths,omitempty"`
	LeafProtocolsEigrpNetwork          types.List   `tfsdk:"network" vyos:"network,omitempty"`
	LeafProtocolsEigrpPassiveInterface types.String `tfsdk:"passive_interface" vyos:"passive-interface,omitempty"`
	LeafProtocolsEigrpRedistribute     types.List   `tfsdk:"redistribute" vyos:"redistribute,omitempty"`
	LeafProtocolsEigrpRouteMap         types.String `tfsdk:"route_map" vyos:"route-map,omitempty"`
	LeafProtocolsEigrpRouterID         types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`
	LeafProtocolsEigrpVariance         types.Number `tfsdk:"variance" vyos:"variance,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeProtocolsEigrpMetric bool `tfsdk:"-" vyos:"metric,child"`
}

// SetID configures the resource ID
func (o *ProtocolsEigrp) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsEigrp) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"protocols",

		"eigrp",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsEigrp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"local_as": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Autonomous System Number (ASN)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Autonomous System Number  |

`,
		},

		"maximum_paths": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Forward packets over multiple paths

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-32  &emsp; |  Number of paths  |

`,
		},

		"network": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Enable routing on an IP network

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  EIGRP network prefix  |

`,
		},

		"passive_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Suppress routing updates on an interface

`,
		},

		"redistribute": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Redistribute information from another routing protocol

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  bgp  &emsp; |  Border Gateway Protocol (BGP)  |
    |  connected  &emsp; |  Connected routes  |
    |  nhrp  &emsp; |  Next Hop Resolution Protocol (NHRP)  |
    |  ospf  &emsp; |  Open Shortest Path First (OSPFv2)  |
    |  rip  &emsp; |  Routing Information Protocol (RIP)  |
    |  babel  &emsp; |  Babel routing protocol (Babel)  |
    |  static  &emsp; |  Statically configured routes  |
    |  vnc  &emsp; |  Virtual Network Control (VNC)  |

`,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Route map name  |

`,
		},

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Router-ID in IP address format  |

`,
		},

		"variance": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Control load balancing variance

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-128  &emsp; |  Metric variance multiplier  |

`,
		},
	}
}
