// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnOpenconnectNetworkSettings describes the resource data model.
type VpnOpenconnectNetworkSettings struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafVpnOpenconnectNetworkSettingsPushRoute    types.List   `tfsdk:"push_route" vyos:"push-route,omitempty"`
	LeafVpnOpenconnectNetworkSettingsNameServer   types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`
	LeafVpnOpenconnectNetworkSettingsSplitDNS     types.List   `tfsdk:"split_dns" vyos:"split-dns,omitempty"`
	LeafVpnOpenconnectNetworkSettingsTunnelAllDNS types.String `tfsdk:"tunnel_all_dns" vyos:"tunnel-all-dns,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeVpnOpenconnectNetworkSettingsClientIPSettings bool `tfsdk:"-" vyos:"client-ip-settings,child"`
	ExistsNodeVpnOpenconnectNetworkSettingsClientIPvsixPool bool `tfsdk:"-" vyos:"client-ipv6-pool,child"`
}

// SetID configures the resource ID
func (o *VpnOpenconnectNetworkSettings) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnOpenconnectNetworkSettings) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"vpn",

		"openconnect",

		"network-settings",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnOpenconnectNetworkSettings) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"push_route": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Route to be pushed to the client

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 network and prefix length  |
    |  ipv6net  &emsp; |  IPv6 network and prefix length  |

`,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Domain Name Server (DNS) IPv4 address  |
    |  ipv6  &emsp; |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		"split_dns": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domains over which the provided DNS should be used

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Client prefix length  |

`,
		},

		"tunnel_all_dns": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `If the tunnel-all-dns option is set to yes, tunnel all DNS queries via the VPN. This is the default when a default route is set.

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  yes  &emsp; |  Enable tunneling of all DNS traffic  |
    |  no  &emsp; |  Disable tunneling of all DNS traffic  |

`,

			// Default:          stringdefault.StaticString(`no`),
			Computed: true,
		},
	}
}
