// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnOpenconnectSsl describes the resource data model.
type VpnOpenconnectSsl struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafVpnOpenconnectSslCaCertificate types.String `tfsdk:"ca_certificate" vyos:"ca-certificate,omitempty"`
	LeafVpnOpenconnectSslCertificate   types.String `tfsdk:"certificate" vyos:"certificate,omitempty"`
	LeafVpnOpenconnectSslPassphrase    types.String `tfsdk:"passphrase" vyos:"passphrase,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *VpnOpenconnectSsl) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnOpenconnectSsl) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"vpn",

		"openconnect",

		"ssl",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnOpenconnectSsl) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"ca_certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate Authority in PKI configuration

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Name of CA in PKI configuration  |

`,
		},

		"certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate in PKI configuration

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Name of certificate in PKI configuration  |

`,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Private key passphrase

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Passphrase to decrypt the private key  |

`,
		},
	}
}
