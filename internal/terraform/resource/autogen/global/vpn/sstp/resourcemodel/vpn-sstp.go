// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnSstp describes the resource data model.
type VpnSstp struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafVpnSstpMtu            types.Number `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafVpnSstpGatewayAddress types.String `tfsdk:"gateway_address" vyos:"gateway-address,omitempty"`
	LeafVpnSstpNameServer     types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`
	LeafVpnSstpPort           types.Number `tfsdk:"port" vyos:"port,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeVpnSstpAuthentication   bool `tfsdk:"-" vyos:"authentication,omitempty"`
	ExistsNodeVpnSstpClientIPPool     bool `tfsdk:"-" vyos:"client-ip-pool,omitempty"`
	ExistsNodeVpnSstpClientIPvsixPool bool `tfsdk:"-" vyos:"client-ipv6-pool,omitempty"`
	ExistsNodeVpnSstpPppOptions       bool `tfsdk:"-" vyos:"ppp-options,omitempty"`
	ExistsNodeVpnSstpSsl              bool `tfsdk:"-" vyos:"ssl,omitempty"`
}

// SetID configures the resource ID
func (o *VpnSstp) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnSstp) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"vpn",

		"sstp",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnSstp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 68-1500  &emsp; |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"gateway_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Gateway IP address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Default Gateway send to the client  |

`,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Domain Name Server (DNS) IPv4 address  |
    |  ipv6  &emsp; |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		"port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,

			// Default:          stringdefault.StaticString(`443`),
			Computed: true,
		},
	}
}
