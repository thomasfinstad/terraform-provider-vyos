// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnOpenconnect describes the resource data model.
type VpnOpenconnect struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafVpnOpenconnectListenAddress types.String `tfsdk:"listen_address" vyos:"listen-address,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeVpnOpenconnectAccounting      bool `tfsdk:"-" vyos:"accounting,ignore,omitempty"`
	ExistsNodeVpnOpenconnectAuthentication  bool `tfsdk:"-" vyos:"authentication,ignore,omitempty"`
	ExistsNodeVpnOpenconnectListenPorts     bool `tfsdk:"-" vyos:"listen-ports,ignore,omitempty"`
	ExistsNodeVpnOpenconnectSsl             bool `tfsdk:"-" vyos:"ssl,ignore,omitempty"`
	ExistsNodeVpnOpenconnectNetworkSettings bool `tfsdk:"-" vyos:"network-settings,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *VpnOpenconnect) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnOpenconnect) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"vpn",

		"openconnect",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnOpenconnect) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"listen_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local IPv4 addresses to listen on

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address to listen for incoming connections  |

`,

			// Default:          stringdefault.StaticString(`0.0.0.0`),
			Computed: true,
		},
	}
}
