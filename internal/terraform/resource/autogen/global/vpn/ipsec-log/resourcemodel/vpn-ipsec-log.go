// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecLog describes the resource data model.
type VpnIPsecLog struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafVpnIPsecLogLevel     types.String `tfsdk:"level" vyos:"level,omitempty"`
	LeafVpnIPsecLogSubsystem types.List   `tfsdk:"subsystem" vyos:"subsystem,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *VpnIPsecLog) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecLog) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"vpn",

		"ipsec",

		"log",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecLog) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"level": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Global IPsec logging Level

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  0  &emsp; |  Very basic auditing logs (e.g., SA up/SA down)  |
    |  1  &emsp; |  Generic control flow with errors, a good default to see whats going on  |
    |  2  &emsp; |  More detailed debugging control flow  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"subsystem": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Subsystem logging levels

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  dmn  &emsp; |  Main daemon setup/cleanup/signal handling  |
    |  mgr  &emsp; |  IKE_SA manager, handling synchronization for IKE_SA access  |
    |  ike  &emsp; |  IKE_SA/ISAKMP SA  |
    |  chd  &emsp; |  CHILD_SA/IPsec SA  |
    |  job  &emsp; |  Jobs queuing/processing and thread pool management  |
    |  cfg  &emsp; |  Configuration management and plugins  |
    |  knl  &emsp; |  IPsec/Networking kernel interface  |
    |  net  &emsp; |  IKE network communication  |
    |  asn  &emsp; |  Low-level encoding/decoding (ASN.1, X.509 etc.)  |
    |  enc  &emsp; |  Packet encoding/decoding encryption/decryption operations  |
    |  lib  &emsp; |  libstrongswan library messages  |
    |  esp  &emsp; |  libipsec library messages  |
    |  tls  &emsp; |   libtls library messages  |
    |  tnc  &emsp; |  Trusted Network Connect  |
    |  imc  &emsp; |  Integrity Measurement Collector  |
    |  imv  &emsp; |  Integrity Measurement Verifier  |
    |  pts  &emsp; |   Platform Trust Service  |
    |  any  &emsp; |  Any subsystem  |

`,
		},
	}
}
