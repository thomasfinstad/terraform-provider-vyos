// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// SystemFlowAccounting describes the resource data model.
type SystemFlowAccounting struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafSystemFlowAccountingBufferSize     types.Number `tfsdk:"buffer_size" vyos:"buffer-size,omitempty"`
	LeafSystemFlowAccountingPacketLength   types.Number `tfsdk:"packet_length" vyos:"packet-length,omitempty"`
	LeafSystemFlowAccountingEnableEgress   types.Bool   `tfsdk:"enable_egress" vyos:"enable-egress,omitempty"`
	LeafSystemFlowAccountingDisableImt     types.Bool   `tfsdk:"disable_imt" vyos:"disable-imt,omitempty"`
	LeafSystemFlowAccountingSyslogFacility types.String `tfsdk:"syslog_facility" vyos:"syslog-facility,omitempty"`
	LeafSystemFlowAccountingInterface      types.List   `tfsdk:"interface" vyos:"interface,omitempty"`
	LeafSystemFlowAccountingVrf            types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeSystemFlowAccountingNetflow bool `tfsdk:"-" vyos:"netflow,ignore,omitempty"`
	ExistsNodeSystemFlowAccountingSflow   bool `tfsdk:"-" vyos:"sflow,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *SystemFlowAccounting) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemFlowAccounting) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"system",

		"flow-accounting",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemFlowAccounting) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"buffer_size": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Buffer size

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  u32  &emsp; |  Buffer size in MiB  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"packet_length": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Specifies the maximum number of bytes to capture for each packet

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 128-750  &emsp; |  Packet length in bytes  |

`,

			// Default:          stringdefault.StaticString(`128`),
			Computed: true,
		},

		"enable_egress": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable egress flow accounting

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable_imt": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable in memory table plugin

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"syslog_facility": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Syslog facility for flow-accounting

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  auth  &emsp; |  Authentication and authorization  |
    |  authpriv  &emsp; |  Non-system authorization  |
    |  cron  &emsp; |  Cron daemon  |
    |  daemon  &emsp; |  System daemons  |
    |  kern  &emsp; |  Kernel  |
    |  lpr  &emsp; |  Line printer spooler  |
    |  mail  &emsp; |  Mail subsystem  |
    |  mark  &emsp; |  Timestamp  |
    |  news  &emsp; |  USENET subsystem  |
    |  protocols  &emsp; |  Routing protocols (local7)  |
    |  security  &emsp; |  Authentication and authorization  |
    |  syslog  &emsp; |  Authentication and authorization  |
    |  user  &emsp; |  Application processes  |
    |  uucp  &emsp; |  UUCP subsystem  |
    |  local0  &emsp; |  Local facility 0  |
    |  local1  &emsp; |  Local facility 1  |
    |  local2  &emsp; |  Local facility 2  |
    |  local3  &emsp; |  Local facility 3  |
    |  local4  &emsp; |  Local facility 4  |
    |  local5  &emsp; |  Local facility 5  |
    |  local6  &emsp; |  Local facility 6  |
    |  local7  &emsp; |  Local facility 7  |
    |  all  &emsp; |  Authentication and authorization  |

`,
		},

		"interface": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Interface to use

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},
	}
}
