// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// SystemFlowAccountingNetflow describes the resource data model.
type SystemFlowAccountingNetflow struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafSystemFlowAccountingNetflowEngineID      types.String `tfsdk:"engine_id" vyos:"engine-id,omitempty"`
	LeafSystemFlowAccountingNetflowMaxFlows      types.Number `tfsdk:"max_flows" vyos:"max-flows,omitempty"`
	LeafSystemFlowAccountingNetflowSamplingRate  types.Number `tfsdk:"sampling_rate" vyos:"sampling-rate,omitempty"`
	LeafSystemFlowAccountingNetflowSourceAddress types.String `tfsdk:"source_address" vyos:"source-address,omitempty"`
	LeafSystemFlowAccountingNetflowVersion       types.String `tfsdk:"version" vyos:"version,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagSystemFlowAccountingNetflowServer bool `tfsdk:"-" vyos:"server,ignore,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeSystemFlowAccountingNetflowTimeout bool `tfsdk:"-" vyos:"timeout,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *SystemFlowAccountingNetflow) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemFlowAccountingNetflow) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"system",

		"flow-accounting",

		"netflow",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemFlowAccountingNetflow) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"engine_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `NetFlow engine-id

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  0-255 or 0-255:0-255  &emsp; |  NetFlow engine-id for v5  |
    |  u32  &emsp; |  NetFlow engine-id for v9 / IPFIX  |

`,
		},

		"max_flows": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `NetFlow maximum flows

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  u32  &emsp; |  NetFlow maximum flows  |

`,
		},

		"sampling_rate": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `NetFlow sampling-rate

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  u32  &emsp; |  Sampling rate (1 in N packets)  |

`,
		},

		"source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP address used to initiate connection

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 source address  |
    |  ipv6  &emsp; |  IPv6 source address  |

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `NetFlow version to export

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  5  &emsp; |  NetFlow version 5  |
    |  9  &emsp; |  NetFlow version 9  |
    |  10  &emsp; |  Internet Protocol Flow Information Export (IPFIX)  |

`,

			// Default:          stringdefault.StaticString(`9`),
			Computed: true,
		},
	}
}
