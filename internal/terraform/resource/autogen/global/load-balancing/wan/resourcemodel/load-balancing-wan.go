// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// LoadBalancingWan describes the resource data model.
type LoadBalancingWan struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafLoadBalancingWanDisableSourceNat   types.Bool   `tfsdk:"disable_source_nat" vyos:"disable-source-nat,omitempty"`
	LeafLoadBalancingWanEnableLocalTraffic types.Bool   `tfsdk:"enable_local_traffic" vyos:"enable-local-traffic,omitempty"`
	LeafLoadBalancingWanFlushConnections   types.Bool   `tfsdk:"flush_connections" vyos:"flush-connections,omitempty"`
	LeafLoadBalancingWanHook               types.String `tfsdk:"hook" vyos:"hook,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagLoadBalancingWanInterfaceHealth bool `tfsdk:"-" vyos:"interface-health,child"`
	ExistsTagLoadBalancingWanRule            bool `tfsdk:"-" vyos:"rule,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeLoadBalancingWanStickyConnections bool `tfsdk:"-" vyos:"sticky-connections,child"`
}

// SetID configures the resource ID
func (o *LoadBalancingWan) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *LoadBalancingWan) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"load-balancing",

		"wan",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWan) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"disable_source_nat": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable source NAT rules from being configured for WAN load balancing

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"enable_local_traffic": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable WAN load balancing for locally sourced traffic

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"flush_connections": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Flush connection tracking tables on connection state change

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"hook": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Script to be executed on interface status change

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Script in /config/scripts  |

`,
		},
	}
}
