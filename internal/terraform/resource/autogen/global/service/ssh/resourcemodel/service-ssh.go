// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceTCP describes the resource data model.
type ServiceTCP struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServiceTCPCIPhers                       types.List   `tfsdk:"ciphers" vyos:"ciphers,omitempty"`
	LeafServiceTCPDisableHostValIDation         types.Bool   `tfsdk:"disable_host_validation" vyos:"disable-host-validation,omitempty"`
	LeafServiceTCPDisablePasswordAuthentication types.Bool   `tfsdk:"disable_password_authentication" vyos:"disable-password-authentication,omitempty"`
	LeafServiceTCPHostkeyAlgorithm              types.List   `tfsdk:"hostkey_algorithm" vyos:"hostkey-algorithm,omitempty"`
	LeafServiceTCPKeyExchange                   types.List   `tfsdk:"key_exchange" vyos:"key-exchange,omitempty"`
	LeafServiceTCPListenAddress                 types.List   `tfsdk:"listen_address" vyos:"listen-address,omitempty"`
	LeafServiceTCPLoglevel                      types.String `tfsdk:"loglevel" vyos:"loglevel,omitempty"`
	LeafServiceTCPMac                           types.List   `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafServiceTCPPort                          types.List   `tfsdk:"port" vyos:"port,omitempty"`
	LeafServiceTCPClientKeepaliveInterval       types.Number `tfsdk:"client_keepalive_interval" vyos:"client-keepalive-interval,omitempty"`
	LeafServiceTCPVrf                           types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeServiceTCPAccessControl     bool `tfsdk:"-" vyos:"access-control,omitempty"`
	ExistsNodeServiceTCPDynamicProtection bool `tfsdk:"-" vyos:"dynamic-protection,omitempty"`
	ExistsNodeServiceTCPRekey             bool `tfsdk:"-" vyos:"rekey,omitempty"`
}

// SetID configures the resource ID
func (o *ServiceTCP) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceTCP) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"ssh",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceTCP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"ciphers": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Allowed ciphers

`,
		},

		"disable_host_validation": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable IP Address to Hostname lookup

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable_password_authentication": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable password-based authentication

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"hostkey_algorithm": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Allowed host key signature algorithms

`,
		},

		"key_exchange": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Allowed key exchange (KEX) algorithms

`,
		},

		"listen_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Local IP addresses to listen on

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address to listen for incoming connections  |
    |  ipv6  &emsp; |  IPv6 address to listen for incoming connections  |

`,
		},

		"loglevel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Log level

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  quiet  &emsp; |  stay silent  |
    |  fatal  &emsp; |  log fatals only  |
    |  error  &emsp; |  log errors and fatals only  |
    |  info  &emsp; |  default log level  |
    |  verbose  &emsp; |  enable logging of failed login attempts  |

`,

			// Default:          stringdefault.StaticString(`info`),
			Computed: true,
		},

		"mac": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Allowed message authentication code (MAC) algorithms

`,
		},

		"port": schema.ListAttribute{
			ElementType: types.NumberType,
			Optional:    true,
			MarkdownDescription: `Port for SSH service

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,

			// Default:          stringdefault.StaticString(`22`),
			Computed: true,
		},

		"client_keepalive_interval": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Enable transmission of keepalives from server to client

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Time interval in seconds for keepalive message  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},
	}
}
