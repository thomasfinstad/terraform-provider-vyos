// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceWebproxyAuthenticationLdap describes the resource data model.
type ServiceWebproxyAuthenticationLdap struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServiceWebproxyAuthenticationLdapBaseDn               types.String `tfsdk:"base_dn" vyos:"base-dn,omitempty"`
	LeafServiceWebproxyAuthenticationLdapBindDn               types.String `tfsdk:"bind_dn" vyos:"bind-dn,omitempty"`
	LeafServiceWebproxyAuthenticationLdapFilterExpression     types.String `tfsdk:"filter_expression" vyos:"filter-expression,omitempty"`
	LeafServiceWebproxyAuthenticationLdapPassword             types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafServiceWebproxyAuthenticationLdapPersistentConnection types.Bool   `tfsdk:"persistent_connection" vyos:"persistent-connection,omitempty"`
	LeafServiceWebproxyAuthenticationLdapPort                 types.Number `tfsdk:"port" vyos:"port,omitempty"`
	LeafServiceWebproxyAuthenticationLdapServer               types.String `tfsdk:"server" vyos:"server,omitempty"`
	LeafServiceWebproxyAuthenticationLdapUseSsl               types.Bool   `tfsdk:"use_ssl" vyos:"use-ssl,omitempty"`
	LeafServiceWebproxyAuthenticationLdapUsernameAttribute    types.String `tfsdk:"username_attribute" vyos:"username-attribute,omitempty"`
	LeafServiceWebproxyAuthenticationLdapVersion              types.String `tfsdk:"version" vyos:"version,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServiceWebproxyAuthenticationLdap) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyAuthenticationLdap) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"webproxy",

		"authentication",

		"ldap",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyAuthenticationLdap) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"base_dn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP Base DN to search

`,
		},

		"bind_dn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP DN used to bind to server

`,
		},

		"filter_expression": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Filter expression to perform LDAP search with

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP password to bind with

`,
		},

		"persistent_connection": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Use persistent LDAP connection

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,

			// Default:          stringdefault.StaticString(`389`),
			Computed: true,
		},

		"server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP server to use

`,
		},

		"use_ssl": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Use SSL/TLS for LDAP connection

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"username_attribute": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP username attribute

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP protocol version

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  2  &emsp; |  LDAP protocol version 2  |
    |  3  &emsp; |  LDAP protocol version 2  |

`,

			// Default:          stringdefault.StaticString(`3`),
			Computed: true,
		},
	}
}
