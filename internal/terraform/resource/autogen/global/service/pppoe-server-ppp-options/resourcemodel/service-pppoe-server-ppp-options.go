// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServicePppoeServerPppOptions describes the resource data model.
type ServicePppoeServerPppOptions struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServicePppoeServerPppOptionsMinMtu                 types.String `tfsdk:"min_mtu" vyos:"min-mtu,omitempty"`
	LeafServicePppoeServerPppOptionsMru                    types.String `tfsdk:"mru" vyos:"mru,omitempty"`
	LeafServicePppoeServerPppOptionsCcp                    types.Bool   `tfsdk:"ccp" vyos:"ccp,omitempty"`
	LeafServicePppoeServerPppOptionsMppe                   types.String `tfsdk:"mppe" vyos:"mppe,omitempty"`
	LeafServicePppoeServerPppOptionsLcpEchoInterval        types.String `tfsdk:"lcp_echo_interval" vyos:"lcp-echo-interval,omitempty"`
	LeafServicePppoeServerPppOptionsLcpEchoFailure         types.String `tfsdk:"lcp_echo_failure" vyos:"lcp-echo-failure,omitempty"`
	LeafServicePppoeServerPppOptionsLcpEchoTimeout         types.String `tfsdk:"lcp_echo_timeout" vyos:"lcp-echo-timeout,omitempty"`
	LeafServicePppoeServerPppOptionsInterfaceCache         types.Number `tfsdk:"interface_cache" vyos:"interface-cache,omitempty"`
	LeafServicePppoeServerPppOptionsIPvfour                types.String `tfsdk:"ipv4" vyos:"ipv4,omitempty"`
	LeafServicePppoeServerPppOptionsIPvsix                 types.String `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	LeafServicePppoeServerPppOptionsIPvsixIntfID           types.String `tfsdk:"ipv6_intf_id" vyos:"ipv6-intf-id,omitempty"`
	LeafServicePppoeServerPppOptionsIPvsixPeerIntfID       types.String `tfsdk:"ipv6_peer_intf_id" vyos:"ipv6-peer-intf-id,omitempty"`
	LeafServicePppoeServerPppOptionsIPvsixAcceptPeerIntfID types.Bool   `tfsdk:"ipv6_accept_peer_intf_id" vyos:"ipv6-accept-peer-intf-id,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServicePppoeServerPppOptions) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServicePppoeServerPppOptions) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"pppoe-server",

		"ppp-options",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServicePppoeServerPppOptions) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"min_mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum acceptable MTU (68-65535)

`,

			// Default:          stringdefault.StaticString(`1280`),
			Computed: true,
		},

		"mru": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Preferred MRU (68-65535)

`,
		},

		"ccp": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `CCP negotiation (default disabled)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"mppe": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies mppe negotiation preferences

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  require  &emsp; |  send mppe request, if client rejects, drop the connection  |
    |  prefer  &emsp; |  send mppe request, if client rejects continue  |
    |  deny  &emsp; |  drop all mppe  |

`,

			// Default:          stringdefault.StaticString(`prefer`),
			Computed: true,
		},

		"lcp_echo_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LCP echo-requests/sec

`,

			// Default:          stringdefault.StaticString(`30`),
			Computed: true,
		},

		"lcp_echo_failure": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum number of Echo-Requests may be sent without valid reply

`,

			// Default:          stringdefault.StaticString(`3`),
			Computed: true,
		},

		"lcp_echo_timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Timeout in seconds to wait for any peer activity. If this option specified it turns on adaptive lcp echo functionality and "lcp-echo-failure" is not used.

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"interface_cache": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `PPP interface cache

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-256000  &emsp; |  Count of interfaces to keep in cache  |

`,
		},

		"ipv4": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 (IPCP) negotiation algorithm

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  deny  &emsp; |  Do not negotiate IPv4  |
    |  allow  &emsp; |  Negotiate IPv4 only if client requests  |
    |  prefer  &emsp; |  Ask client for IPv4 negotiation, do not fail if it rejects  |
    |  require  &emsp; |  Require IPv4 negotiation  |

`,
		},

		"ipv6": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv6 (IPCP6) negotiation algorithm

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  deny  &emsp; |  Do not negotiate IPv6  |
    |  allow  &emsp; |  Negotiate IPv6 only if client requests  |
    |  prefer  &emsp; |  Ask client for IPv6 negotiation, do not fail if it rejects  |
    |  require  &emsp; |  Require IPv6 negotiation  |

`,

			// Default:          stringdefault.StaticString(`deny`),
			Computed: true,
		},

		"ipv6_intf_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Fixed or random interface identifier for IPv6

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  random  &emsp; |  Random interface identifier for IPv6  |
    |  x:x:x:x  &emsp; |  specify interface identifier for IPv6  |

`,
		},

		"ipv6_peer_intf_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Peer interface identifier for IPv6

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  x:x:x:x  &emsp; |  Interface identifier for IPv6  |
    |  random  &emsp; |  Use a random interface identifier for IPv6  |
    |  ipv4  &emsp; |  Calculate interface identifier from IPv4 address, for example 192:168:0:1  |
    |  calling-sid  &emsp; |  Calculate interface identifier from calling-station-id  |

`,
		},

		"ipv6_accept_peer_intf_id": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Accept peer interface identifier

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},
	}
}
