// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDhcpServer describes the resource data model.
type ServiceDhcpServer struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServiceDhcpServerDisable          types.Bool `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafServiceDhcpServerDynamicDNSUpdate types.Bool `tfsdk:"dynamic_dns_update" vyos:"dynamic-dns-update,omitempty"`
	LeafServiceDhcpServerGlobalParameters types.List `tfsdk:"global_parameters" vyos:"global-parameters,omitempty"`
	LeafServiceDhcpServerHostfileUpdate   types.Bool `tfsdk:"hostfile_update" vyos:"hostfile-update,omitempty"`
	LeafServiceDhcpServerHostDeclName     types.Bool `tfsdk:"host_decl_name" vyos:"host-decl-name,omitempty"`
	LeafServiceDhcpServerListenAddress    types.List `tfsdk:"listen_address" vyos:"listen-address,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceDhcpServerSharedNetworkName bool `tfsdk:"-" vyos:"shared-network-name,ignore,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeServiceDhcpServerFailover bool `tfsdk:"-" vyos:"failover,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *ServiceDhcpServer) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServer) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"dhcp-server",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dynamic_dns_update": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Dynamically update Domain Name System (RFC4702)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"global_parameters": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Additional global parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		"hostfile_update": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Updating /etc/hosts file (per client lease)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"host_decl_name": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Use host declaration name for forward DNS name

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"listen_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Local IPv4 addresses to listen on

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address to listen for incoming connections  |

`,
		},
	}
}
