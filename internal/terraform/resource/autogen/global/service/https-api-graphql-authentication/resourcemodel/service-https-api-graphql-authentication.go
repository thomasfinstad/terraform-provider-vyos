// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceHTTPSAPIGraphqlAuthentication describes the resource data model.
type ServiceHTTPSAPIGraphqlAuthentication struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	// LeafNodes
	LeafServiceHTTPSAPIGraphqlAuthenticationType         types.String `tfsdk:"type" vyos:"type,omitempty"`
	LeafServiceHTTPSAPIGraphqlAuthenticationExpiration   types.Number `tfsdk:"expiration" vyos:"expiration,omitempty"`
	LeafServiceHTTPSAPIGraphqlAuthenticationSecretLength types.Number `tfsdk:"secret_length" vyos:"secret-length,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServiceHTTPSAPIGraphqlAuthentication) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceHTTPSAPIGraphqlAuthentication) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"https",

		"api",

		"graphql",

		"authentication",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceHTTPSAPIGraphqlAuthentication) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  key  &emsp; |  Use API keys  |
    |  token  &emsp; |  Use JWT token  |

`,

			// Default:          stringdefault.StaticString(`key`),
			Computed: true,
		},

		"expiration": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Token time to expire in seconds

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 60-31536000  &emsp; |  Token lifetime in seconds  |

`,

			// Default:          stringdefault.StaticString(`3600`),
			Computed: true,
		},

		"secret_length": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Length of shared secret in bytes

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 16-65535  &emsp; |  Byte length of generated shared secret  |

`,

			// Default:          stringdefault.StaticString(`32`),
			Computed: true,
		},
	}
}
