// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDhcpServerFailover describes the resource data model.
type ServiceDhcpServerFailover struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServiceDhcpServerFailoverSourceAddress types.String `tfsdk:"source_address" vyos:"source-address,omitempty"`
	LeafServiceDhcpServerFailoverRemote        types.String `tfsdk:"remote" vyos:"remote,omitempty"`
	LeafServiceDhcpServerFailoverName          types.String `tfsdk:"name" vyos:"name,omitempty"`
	LeafServiceDhcpServerFailoverStatus        types.String `tfsdk:"status" vyos:"status,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServiceDhcpServerFailover) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerFailover) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"dhcp-server",

		"failover",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerFailover) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 source address used to initiate connection

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 source address  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 remote address used for connectio

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address of failover peer  |

`,
		},

		"name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Peer name used to identify connection

`,
		},

		"status": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Failover hierarchy

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  primary  &emsp; |  Configure this server to be the primary node  |
    |  secondary  &emsp; |  Configure this server to be the secondary node  |

`,
		},
	}
}
