// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceConntrackSync describes the resource data model.
type ServiceConntrackSync struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	// LeafNodes
	LeafServiceConntrackSyncAcceptProtocol       types.List   `tfsdk:"accept_protocol" vyos:"accept-protocol,omitempty"`
	LeafServiceConntrackSyncDisableExternalCache types.Bool   `tfsdk:"disable_external_cache" vyos:"disable-external-cache,omitempty"`
	LeafServiceConntrackSyncEventListenQueueSize types.Number `tfsdk:"event_listen_queue_size" vyos:"event-listen-queue-size,omitempty"`
	LeafServiceConntrackSyncExpectSync           types.List   `tfsdk:"expect_sync" vyos:"expect-sync,omitempty"`
	LeafServiceConntrackSyncIgnoreAddress        types.List   `tfsdk:"ignore_address" vyos:"ignore-address,omitempty"`
	LeafServiceConntrackSyncListenAddress        types.List   `tfsdk:"listen_address" vyos:"listen-address,omitempty"`
	LeafServiceConntrackSyncMcastGroup           types.String `tfsdk:"mcast_group" vyos:"mcast-group,omitempty"`
	LeafServiceConntrackSyncSyncQueueSize        types.Number `tfsdk:"sync_queue_size" vyos:"sync-queue-size,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceConntrackSyncInterface bool `tfsdk:"-" vyos:"interface,ignore,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeServiceConntrackSyncFailoverMechanism bool `tfsdk:"-" vyos:"failover-mechanism,ignore,omitempty"`
}

// SetID configures the resource ID
func (o *ServiceConntrackSync) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceConntrackSync) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"conntrack-sync",
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceConntrackSync) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},

		// LeafNodes

		"accept_protocol": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Protocols for which local conntrack entries will be synced

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  tcp  &emsp; |  Sync Transmission Control Protocol entries  |
    |  udp  &emsp; |  Sync User Datagram Protocol entries  |
    |  icmp  &emsp; |  Sync Internet Control Message Protocol entries  |
    |  icmp6  &emsp; |  Sync IPv6 Internet Control Message Protocol entries  |
    |  sctp  &emsp; |  Sync Stream Control Transmission Protocol entries  |
    |  dccp  &emsp; |  Sync Datagram Congestion Control Protocol entries  |

`,
		},

		"disable_external_cache": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Directly injects the flow-states into the in-kernel Connection Tracking System of the backup firewall.

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"event_listen_queue_size": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Queue size for local conntrack events

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  u32  &emsp; |  Queue size in MB  |

`,

			// Default:          stringdefault.StaticString(`8`),
			Computed: true,
		},

		"expect_sync": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Protocol for which expect entries need to be synchronized

`,
		},

		"ignore_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP addresses for which local conntrack entries will not be synced

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address to ignore  |
    |  ipv4net  &emsp; |  IPv4 prefix to ignore  |
    |  ipv6  &emsp; |  IPv6 address to ignore  |
    |  ipv6net  &emsp; |  IPv6 prefix to ignore  |

`,
		},

		"listen_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Local IPv4 addresses to listen on

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address to listen for incoming connections  |

`,
		},

		"mcast_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Multicast group to use for syncing conntrack entries

`,

			// Default:          stringdefault.StaticString(`225.0.0.50`),
			Computed: true,
		},

		"sync_queue_size": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Queue size for syncing conntrack entries

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  u32  &emsp; |  Queue size in MB  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},
	}
}
