// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecIkeGroupDeadPeerDetection describes the resource data model.
type VpnIPsecIkeGroupDeadPeerDetection struct {
	// LeafNodes
	LeafVpnIPsecIkeGroupDeadPeerDetectionAction   types.String `tfsdk:"action"`
	LeafVpnIPsecIkeGroupDeadPeerDetectionInterval types.String `tfsdk:"interval"`
	LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout  types.String `tfsdk:"timeout"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecIkeGroupDeadPeerDetection) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "ike-group", "dead-peer-detection"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnIPsecIkeGroupDeadPeerDetectionAction.IsNull() || o.LeafVpnIPsecIkeGroupDeadPeerDetectionAction.IsUnknown()) {
		vyosData["action"] = o.LeafVpnIPsecIkeGroupDeadPeerDetectionAction.ValueString()
	}
	if !(o.LeafVpnIPsecIkeGroupDeadPeerDetectionInterval.IsNull() || o.LeafVpnIPsecIkeGroupDeadPeerDetectionInterval.IsUnknown()) {
		vyosData["interval"] = o.LeafVpnIPsecIkeGroupDeadPeerDetectionInterval.ValueString()
	}
	if !(o.LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout.IsNull() || o.LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout.IsUnknown()) {
		vyosData["timeout"] = o.LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecIkeGroupDeadPeerDetection) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "ike-group", "dead-peer-detection"}})

	// Leafs
	if value, ok := vyosData["action"]; ok {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionAction = basetypes.NewStringNull()
	}
	if value, ok := vyosData["interval"]; ok {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["timeout"]; ok {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupDeadPeerDetectionTimeout = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "ike-group", "dead-peer-detection"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecIkeGroupDeadPeerDetection) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"action":   types.StringType,
		"interval": types.StringType,
		"timeout":  types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecIkeGroupDeadPeerDetection) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Keep-alive failure action

|  Format  |  Description  |
|----------|---------------|
|  hold  |  Attempt to re-negotiate the connection when matching traffic is seen  |
|  clear  |  Remove the connection immediately  |
|  restart  |  Attempt to re-negotiate the connection immediately  |

`,

			// Default:          stringdefault.StaticString(`clear`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Keep-alive interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-86400  |  Keep-alive interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`30`),
			Computed: true,
		},

		"timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Dead Peer Detection keep-alive timeout (IKEv1 only)

|  Format  |  Description  |
|----------|---------------|
|  u32:2-86400  |  Keep-alive timeout in seconds  |

`,

			// Default:          stringdefault.StaticString(`120`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
