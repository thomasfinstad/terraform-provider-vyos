// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceIPoeServerClientIPvsixPoolPrefix describes the resource data model.
type ServiceIPoeServerClientIPvsixPoolPrefix struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceIPoeServerClientIPvsixPoolPrefixMask types.String `tfsdk:"mask"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceIPoeServerClientIPvsixPoolPrefix) GetVyosPath() []string {
	return []string{
		"service",
		"ipoe-server",
		"client-ipv6-pool",
		"prefix",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceIPoeServerClientIPvsixPoolPrefix) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "ipoe-server", "client-ipv6-pool", "prefix"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceIPoeServerClientIPvsixPoolPrefixMask.IsNull() || o.LeafServiceIPoeServerClientIPvsixPoolPrefixMask.IsUnknown()) {
		vyosData["mask"] = o.LeafServiceIPoeServerClientIPvsixPoolPrefixMask.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceIPoeServerClientIPvsixPoolPrefix) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "ipoe-server", "client-ipv6-pool", "prefix"}})

	// Leafs
	if value, ok := vyosData["mask"]; ok {
		o.LeafServiceIPoeServerClientIPvsixPoolPrefixMask = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceIPoeServerClientIPvsixPoolPrefixMask = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "ipoe-server", "client-ipv6-pool", "prefix"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceIPoeServerClientIPvsixPoolPrefix) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"mask": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceIPoeServerClientIPvsixPoolPrefix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Pool of addresses used to assign to clients

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		// LeafNodes

		"mask": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefix length used for individual client

|  Format  |  Description  |
|----------|---------------|
|  u32:48-128  |  Client prefix length  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
