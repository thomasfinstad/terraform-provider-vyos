// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRoutesixRule describes the resource data model.
type PolicyRoutesixRule struct {
	// LeafNodes
	LeafPolicyRoutesixRuleAction              types.String `tfsdk:"action" json:"action,omitempty"`
	LeafPolicyRoutesixRuleDescrIPtion         types.String `tfsdk:"description" json:"description,omitempty"`
	LeafPolicyRoutesixRuleDisable             types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafPolicyRoutesixRuleLog                 types.String `tfsdk:"log" json:"log,omitempty"`
	LeafPolicyRoutesixRuleProtocol            types.String `tfsdk:"protocol" json:"protocol,omitempty"`
	LeafPolicyRoutesixRuleDscp                types.String `tfsdk:"dscp" json:"dscp,omitempty"`
	LeafPolicyRoutesixRuleDscpExclude         types.String `tfsdk:"dscp_exclude" json:"dscp-exclude,omitempty"`
	LeafPolicyRoutesixRulePacketLength        types.String `tfsdk:"packet_length" json:"packet-length,omitempty"`
	LeafPolicyRoutesixRulePacketLengthExclude types.String `tfsdk:"packet_length_exclude" json:"packet-length-exclude,omitempty"`
	LeafPolicyRoutesixRulePacketType          types.String `tfsdk:"packet_type" json:"packet-type,omitempty"`
	LeafPolicyRoutesixRuleConnectionMark      types.String `tfsdk:"connection_mark" json:"connection-mark,omitempty"`

	// TagNodes

	// Nodes
	NodePolicyRoutesixRuleDestination *PolicyRoutesixRuleDestination `tfsdk:"destination" json:"destination,omitempty"`
	NodePolicyRoutesixRuleSource      *PolicyRoutesixRuleSource      `tfsdk:"source" json:"source,omitempty"`
	NodePolicyRoutesixRuleFragment    *PolicyRoutesixRuleFragment    `tfsdk:"fragment" json:"fragment,omitempty"`
	NodePolicyRoutesixRuleIPsec       *PolicyRoutesixRuleIPsec       `tfsdk:"ipsec" json:"ipsec,omitempty"`
	NodePolicyRoutesixRuleLimit       *PolicyRoutesixRuleLimit       `tfsdk:"limit" json:"limit,omitempty"`
	NodePolicyRoutesixRuleRecent      *PolicyRoutesixRuleRecent      `tfsdk:"recent" json:"recent,omitempty"`
	NodePolicyRoutesixRuleSet         *PolicyRoutesixRuleSet         `tfsdk:"set" json:"set,omitempty"`
	NodePolicyRoutesixRuleState       *PolicyRoutesixRuleState       `tfsdk:"state" json:"state,omitempty"`
	NodePolicyRoutesixRuleTCP         *PolicyRoutesixRuleTCP         `tfsdk:"tcp" json:"tcp,omitempty"`
	NodePolicyRoutesixRuleTime        *PolicyRoutesixRuleTime        `tfsdk:"time" json:"time,omitempty"`
	NodePolicyRoutesixRuleIcmpvsix    *PolicyRoutesixRuleIcmpvsix    `tfsdk:"icmpv6" json:"icmpv6,omitempty"`
	NodePolicyRoutesixRuleHopLimit    *PolicyRoutesixRuleHopLimit    `tfsdk:"hop_limit" json:"hop-limit,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRoutesixRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rule action

|  Format  |  Description  |
|----------|---------------|
|  accept  |  Accept matching entries  |
|  reject  |  Reject matching entries  |
|  return  |  Return from the current chain and continue at the next rule of the last chain  |
|  drop  |  Drop matching entries  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to disable firewall rule

`,
		},

		"log": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to log packets matching rule

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable log  |
|  disable  |  Disable log  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol to match (protocol name, number, or "all")

|  Format  |  Description  |
|----------|---------------|
|  all  |  All IP protocols  |
|  tcp_udp  |  Both TCP and UDP  |
|  0-255  |  IP protocol number  |
|  !<protocol>  |  IP protocol number  |

`,

			// Default:          stringdefault.StaticString(`all`),
			Computed: true,
		},

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DSCP value

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  DSCP value to match  |
|  <start-end>  |  DSCP range to match  |

`,
		},

		"dscp_exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DSCP value not to match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  DSCP value not to match  |
|  <start-end>  |  DSCP range not to match  |

`,
		},

		"packet_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Payload size in bytes, including header and data to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Packet length to match  |
|  <start-end>  |  Packet length range to match  |

`,
		},

		"packet_length_exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Payload size in bytes, including header and data not to match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Packet length not to match  |
|  <start-end>  |  Packet length range not to match  |

`,
		},

		"packet_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Match broadcast packet type  |
|  host  |  Match host packet type, addressed to local host  |
|  multicast  |  Match multicast packet type  |
|  other  |  Match packet addressed to another host  |

`,
		},

		"connection_mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection mark

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  Connection-mark to match  |

`,
		},

		// TagNodes

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Destination parameters

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Source parameters

`,
		},

		"fragment": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleFragment{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IP fragment match

`,
		},

		"ipsec": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleIPsec{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Inbound IPsec packets

`,
		},

		"limit": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Rate limit using a token bucket filter

`,
		},

		"recent": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleRecent{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Parameters for matching recently seen sources

`,
		},

		"set": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleSet{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Packet modifications

`,
		},

		"state": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleState{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Session state

`,
		},

		"tcp": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP flags to match

`,
		},

		"time": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleTime{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Time to match rule

`,
		},

		"icmpv6": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleIcmpvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `ICMPv6 type and code information

`,
		},

		"hop_limit": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleHopLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Hop limit

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRoutesixRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRoutesixRuleAction.IsNull() && !o.LeafPolicyRoutesixRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafPolicyRoutesixRuleAction.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleDescrIPtion.IsNull() && !o.LeafPolicyRoutesixRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyRoutesixRuleDescrIPtion.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleDisable.IsNull() && !o.LeafPolicyRoutesixRuleDisable.IsUnknown() {
		jsonData["disable"] = o.LeafPolicyRoutesixRuleDisable.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleLog.IsNull() && !o.LeafPolicyRoutesixRuleLog.IsUnknown() {
		jsonData["log"] = o.LeafPolicyRoutesixRuleLog.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleProtocol.IsNull() && !o.LeafPolicyRoutesixRuleProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafPolicyRoutesixRuleProtocol.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleDscp.IsNull() && !o.LeafPolicyRoutesixRuleDscp.IsUnknown() {
		jsonData["dscp"] = o.LeafPolicyRoutesixRuleDscp.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleDscpExclude.IsNull() && !o.LeafPolicyRoutesixRuleDscpExclude.IsUnknown() {
		jsonData["dscp-exclude"] = o.LeafPolicyRoutesixRuleDscpExclude.ValueString()
	}

	if !o.LeafPolicyRoutesixRulePacketLength.IsNull() && !o.LeafPolicyRoutesixRulePacketLength.IsUnknown() {
		jsonData["packet-length"] = o.LeafPolicyRoutesixRulePacketLength.ValueString()
	}

	if !o.LeafPolicyRoutesixRulePacketLengthExclude.IsNull() && !o.LeafPolicyRoutesixRulePacketLengthExclude.IsUnknown() {
		jsonData["packet-length-exclude"] = o.LeafPolicyRoutesixRulePacketLengthExclude.ValueString()
	}

	if !o.LeafPolicyRoutesixRulePacketType.IsNull() && !o.LeafPolicyRoutesixRulePacketType.IsUnknown() {
		jsonData["packet-type"] = o.LeafPolicyRoutesixRulePacketType.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleConnectionMark.IsNull() && !o.LeafPolicyRoutesixRuleConnectionMark.IsUnknown() {
		jsonData["connection-mark"] = o.LeafPolicyRoutesixRuleConnectionMark.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleDestination).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleDestination)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["destination"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleFragment).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleFragment)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["fragment"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleIPsec).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleIPsec)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipsec"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["limit"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleRecent).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleRecent)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["recent"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleSet).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleSet)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["set"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleState).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleState)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["state"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleTCP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleTCP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["tcp"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleTime).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleTime)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["time"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleIcmpvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleIcmpvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["icmpv6"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleHopLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleHopLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["hop-limit"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRoutesixRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafPolicyRoutesixRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyRoutesixRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafPolicyRoutesixRuleDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["log"]; ok {
		o.LeafPolicyRoutesixRuleLog = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleLog = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafPolicyRoutesixRuleProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dscp"]; ok {
		o.LeafPolicyRoutesixRuleDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleDscp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dscp-exclude"]; ok {
		o.LeafPolicyRoutesixRuleDscpExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleDscpExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-length"]; ok {
		o.LeafPolicyRoutesixRulePacketLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRulePacketLength = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-length-exclude"]; ok {
		o.LeafPolicyRoutesixRulePacketLengthExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRulePacketLengthExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-type"]; ok {
		o.LeafPolicyRoutesixRulePacketType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRulePacketType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["connection-mark"]; ok {
		o.LeafPolicyRoutesixRuleConnectionMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleConnectionMark = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["destination"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleDestination = &PolicyRoutesixRuleDestination{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleDestination)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleSource = &PolicyRoutesixRuleSource{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleSource)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["fragment"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleFragment = &PolicyRoutesixRuleFragment{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleFragment)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipsec"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleIPsec = &PolicyRoutesixRuleIPsec{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleIPsec)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleLimit = &PolicyRoutesixRuleLimit{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleLimit)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["recent"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleRecent = &PolicyRoutesixRuleRecent{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleRecent)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["set"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleSet = &PolicyRoutesixRuleSet{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleSet)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["state"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleState = &PolicyRoutesixRuleState{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleState)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["tcp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleTCP = &PolicyRoutesixRuleTCP{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleTCP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["time"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleTime = &PolicyRoutesixRuleTime{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleTime)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["icmpv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleIcmpvsix = &PolicyRoutesixRuleIcmpvsix{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleIcmpvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["hop-limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleHopLimit = &PolicyRoutesixRuleHopLimit{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleHopLimit)
		if err != nil {
			return err
		}
	}

	return nil
}
