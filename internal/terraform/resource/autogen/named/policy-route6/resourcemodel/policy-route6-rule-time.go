// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// PolicyRoutesixRuleTime describes the resource data model.
type PolicyRoutesixRuleTime struct {
	// LeafNodes
	LeafPolicyRoutesixRuleTimeMonthdays types.String `tfsdk:"monthdays"`
	LeafPolicyRoutesixRuleTimeStartdate types.String `tfsdk:"startdate"`
	LeafPolicyRoutesixRuleTimeStarttime types.String `tfsdk:"starttime"`
	LeafPolicyRoutesixRuleTimeStopdate  types.String `tfsdk:"stopdate"`
	LeafPolicyRoutesixRuleTimeStoptime  types.String `tfsdk:"stoptime"`
	LeafPolicyRoutesixRuleTimeUtc       types.String `tfsdk:"utc"`
	LeafPolicyRoutesixRuleTimeWeekdays  types.String `tfsdk:"weekdays"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *PolicyRoutesixRuleTime) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"policy", "route6", "rule", "time"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafPolicyRoutesixRuleTimeMonthdays.IsNull() || o.LeafPolicyRoutesixRuleTimeMonthdays.IsUnknown()) {
		vyosData["monthdays"] = o.LeafPolicyRoutesixRuleTimeMonthdays.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeStartdate.IsNull() || o.LeafPolicyRoutesixRuleTimeStartdate.IsUnknown()) {
		vyosData["startdate"] = o.LeafPolicyRoutesixRuleTimeStartdate.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeStarttime.IsNull() || o.LeafPolicyRoutesixRuleTimeStarttime.IsUnknown()) {
		vyosData["starttime"] = o.LeafPolicyRoutesixRuleTimeStarttime.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeStopdate.IsNull() || o.LeafPolicyRoutesixRuleTimeStopdate.IsUnknown()) {
		vyosData["stopdate"] = o.LeafPolicyRoutesixRuleTimeStopdate.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeStoptime.IsNull() || o.LeafPolicyRoutesixRuleTimeStoptime.IsUnknown()) {
		vyosData["stoptime"] = o.LeafPolicyRoutesixRuleTimeStoptime.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeUtc.IsNull() || o.LeafPolicyRoutesixRuleTimeUtc.IsUnknown()) {
		vyosData["utc"] = o.LeafPolicyRoutesixRuleTimeUtc.ValueString()
	}
	if !(o.LeafPolicyRoutesixRuleTimeWeekdays.IsNull() || o.LeafPolicyRoutesixRuleTimeWeekdays.IsUnknown()) {
		vyosData["weekdays"] = o.LeafPolicyRoutesixRuleTimeWeekdays.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *PolicyRoutesixRuleTime) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"policy", "route6", "rule", "time"}})

	// Leafs
	if value, ok := vyosData["monthdays"]; ok {
		o.LeafPolicyRoutesixRuleTimeMonthdays = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeMonthdays = basetypes.NewStringNull()
	}
	if value, ok := vyosData["startdate"]; ok {
		o.LeafPolicyRoutesixRuleTimeStartdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeStartdate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["starttime"]; ok {
		o.LeafPolicyRoutesixRuleTimeStarttime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeStarttime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["stopdate"]; ok {
		o.LeafPolicyRoutesixRuleTimeStopdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeStopdate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["stoptime"]; ok {
		o.LeafPolicyRoutesixRuleTimeStoptime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeStoptime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["utc"]; ok {
		o.LeafPolicyRoutesixRuleTimeUtc = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeUtc = basetypes.NewStringNull()
	}
	if value, ok := vyosData["weekdays"]; ok {
		o.LeafPolicyRoutesixRuleTimeWeekdays = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTimeWeekdays = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"policy", "route6", "rule", "time"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o PolicyRoutesixRuleTime) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"monthdays": types.StringType,
		"startdate": types.StringType,
		"starttime": types.StringType,
		"stopdate":  types.StringType,
		"stoptime":  types.StringType,
		"utc":       types.StringType,
		"weekdays":  types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRoutesixRuleTime) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"monthdays": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Monthdays to match rule on

`,
		},

		"startdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to start matching rule

`,
		},

		"starttime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to start matching rule

`,
		},

		"stopdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to stop matching rule

`,
		},

		"stoptime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to stop matching rule

`,
		},

		"utc": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interpret times for startdate, stopdate, starttime and stoptime to be UTC

`,
		},

		"weekdays": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Weekdays to match rule on

`,
		},

		// TagNodes

		// Nodes

	}
}
