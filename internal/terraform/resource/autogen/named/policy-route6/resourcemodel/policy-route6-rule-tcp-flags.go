// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRoutesixRuleTCPFlags describes the resource data model.
type PolicyRoutesixRuleTCPFlags struct {
	// LeafNodes
	LeafPolicyRoutesixRuleTCPFlagsSyn types.String `tfsdk:"syn" json:"syn,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsAck types.String `tfsdk:"ack" json:"ack,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsFin types.String `tfsdk:"fin" json:"fin,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsRst types.String `tfsdk:"rst" json:"rst,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsUrg types.String `tfsdk:"urg" json:"urg,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsPsh types.String `tfsdk:"psh" json:"psh,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsEcn types.String `tfsdk:"ecn" json:"ecn,omitempty"`
	LeafPolicyRoutesixRuleTCPFlagsCwr types.String `tfsdk:"cwr" json:"cwr,omitempty"`

	// TagNodes

	// Nodes
	NodePolicyRoutesixRuleTCPFlagsNot *PolicyRoutesixRuleTCPFlagsNot `tfsdk:"not" json:"not,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRoutesixRuleTCPFlags) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"syn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Synchronise flag

`,
		},

		"ack": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acknowledge flag

`,
		},

		"fin": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Finish flag

`,
		},

		"rst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Reset flag

`,
		},

		"urg": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Urgent flag

`,
		},

		"psh": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Push flag

`,
		},

		"ecn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Explicit Congestion Notification flag

`,
		},

		"cwr": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Congestion Window Reduced flag

`,
		},

		// TagNodes

		// Nodes

		"not": schema.SingleNestedAttribute{
			Attributes: PolicyRoutesixRuleTCPFlagsNot{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match flags not set

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRoutesixRuleTCPFlags) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRoutesixRuleTCPFlagsSyn.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsSyn.IsUnknown() {
		jsonData["syn"] = o.LeafPolicyRoutesixRuleTCPFlagsSyn.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsAck.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsAck.IsUnknown() {
		jsonData["ack"] = o.LeafPolicyRoutesixRuleTCPFlagsAck.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsFin.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsFin.IsUnknown() {
		jsonData["fin"] = o.LeafPolicyRoutesixRuleTCPFlagsFin.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsRst.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsRst.IsUnknown() {
		jsonData["rst"] = o.LeafPolicyRoutesixRuleTCPFlagsRst.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsUrg.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsUrg.IsUnknown() {
		jsonData["urg"] = o.LeafPolicyRoutesixRuleTCPFlagsUrg.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsPsh.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsPsh.IsUnknown() {
		jsonData["psh"] = o.LeafPolicyRoutesixRuleTCPFlagsPsh.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsEcn.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsEcn.IsUnknown() {
		jsonData["ecn"] = o.LeafPolicyRoutesixRuleTCPFlagsEcn.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleTCPFlagsCwr.IsNull() && !o.LeafPolicyRoutesixRuleTCPFlagsCwr.IsUnknown() {
		jsonData["cwr"] = o.LeafPolicyRoutesixRuleTCPFlagsCwr.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodePolicyRoutesixRuleTCPFlagsNot).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRoutesixRuleTCPFlagsNot)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["not"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRoutesixRuleTCPFlags) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["syn"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsSyn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsSyn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ack"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsAck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsAck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["fin"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsFin = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsFin = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rst"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsRst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsRst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["urg"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsUrg = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsUrg = basetypes.NewStringNull()
	}

	if value, ok := jsonData["psh"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsPsh = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsPsh = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ecn"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsEcn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsEcn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cwr"]; ok {
		o.LeafPolicyRoutesixRuleTCPFlagsCwr = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleTCPFlagsCwr = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["not"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRoutesixRuleTCPFlagsNot = &PolicyRoutesixRuleTCPFlagsNot{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRoutesixRuleTCPFlagsNot)
		if err != nil {
			return err
		}
	}

	return nil
}
