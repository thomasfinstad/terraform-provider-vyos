// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceSnmpCommunity describes the resource data model.
type ServiceSnmpCommunity struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceSnmpCommunityAuthorization types.String `tfsdk:"authorization" json:"authorization,omitempty"`
	LeafServiceSnmpCommunityClient        types.String `tfsdk:"client" json:"client,omitempty"`
	LeafServiceSnmpCommunityNetwork       types.String `tfsdk:"network" json:"network,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpCommunity) GetVyosPath() []string {
	return []string{
		"service",
		"snmp",
		"community",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpCommunity) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Community name

`,
		},

		// LeafNodes

		"authorization": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authorization type

|  Format  |  Description  |
|----------|---------------|
|  ro  |  Read-Only  |
|  rw  |  Read-Write  |

`,

			// Default:          stringdefault.StaticString(`ro`),
			Computed: true,
		},

		"client": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of SNMP client allowed to contact system

`,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Subnet of SNMP client(s) allowed to contact system

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IP address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,

			// Default:          stringdefault.StaticString(`0.0.0.0/0 ::/0`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceSnmpCommunity) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceSnmpCommunityAuthorization.IsNull() && !o.LeafServiceSnmpCommunityAuthorization.IsUnknown() {
		jsonData["authorization"] = o.LeafServiceSnmpCommunityAuthorization.ValueString()
	}

	if !o.LeafServiceSnmpCommunityClient.IsNull() && !o.LeafServiceSnmpCommunityClient.IsUnknown() {
		jsonData["client"] = o.LeafServiceSnmpCommunityClient.ValueString()
	}

	if !o.LeafServiceSnmpCommunityNetwork.IsNull() && !o.LeafServiceSnmpCommunityNetwork.IsUnknown() {
		jsonData["network"] = o.LeafServiceSnmpCommunityNetwork.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceSnmpCommunity) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["authorization"]; ok {
		o.LeafServiceSnmpCommunityAuthorization = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpCommunityAuthorization = basetypes.NewStringNull()
	}

	if value, ok := jsonData["client"]; ok {
		o.LeafServiceSnmpCommunityClient = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpCommunityClient = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafServiceSnmpCommunityNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpCommunityNetwork = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
