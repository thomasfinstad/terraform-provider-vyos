// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesTunnel describes the resource data model.
type InterfacesTunnel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesTunnelDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesTunnelAddress           types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesTunnelDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesTunnelDisableLinkDetect types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesTunnelMtu               types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesTunnelSourceAddress     types.String `tfsdk:"source_address" json:"source-address,omitempty"`
	LeafInterfacesTunnelRemote            types.String `tfsdk:"remote" json:"remote,omitempty"`
	LeafInterfacesTunnelSourceInterface   types.String `tfsdk:"source_interface" json:"source-interface,omitempty"`
	LeafInterfacesTunnelSixrdPrefix       types.String `tfsdk:"6rd_prefix" json:"6rd-prefix,omitempty"`
	LeafInterfacesTunnelSixrdRelayPrefix  types.String `tfsdk:"6rd_relay_prefix" json:"6rd-relay-prefix,omitempty"`
	LeafInterfacesTunnelEncapsulation     types.String `tfsdk:"encapsulation" json:"encapsulation,omitempty"`
	LeafInterfacesTunnelEnableMulticast   types.String `tfsdk:"enable_multicast" json:"enable-multicast,omitempty"`
	LeafInterfacesTunnelVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`
	LeafInterfacesTunnelRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesTunnelIP         *InterfacesTunnelIP         `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesTunnelIPvsix     *InterfacesTunnelIPvsix     `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesTunnelMirror     *InterfacesTunnelMirror     `tfsdk:"mirror" json:"mirror,omitempty"`
	NodeInterfacesTunnelParameters *InterfacesTunnelParameters `tfsdk:"parameters" json:"parameters,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesTunnel) GetVyosPath() []string {
	return []string{
		"interfaces",
		"tunnel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Tunnel interface

|  Format  |  Description  |
|----------|---------------|
|  tunN  |  Tunnel interface name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:64-8024  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1476`),
			Computed: true,
		},

		"source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP address used to initiate connection

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 source address  |
|  ipv6  |  IPv6 source address  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel remote address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Tunnel remote IPv4 address  |
|  ipv6  |  Tunnel remote IPv6 address  |

`,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |

`,
		},

		"6rd_prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `6rd network prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |

`,
		},

		"6rd_relay_prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `6rd relay prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 prefix of interface for 6rd  |

`,
		},

		"encapsulation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulation of this tunnel interface

|  Format  |  Description  |
|----------|---------------|
|  erspan  |  Encapsulated Remote Switched Port Analyzer  |
|  gre  |  Generic Routing Encapsulation (network layer)  |
|  gretap  |  Generic Routing Encapsulation (datalink layer)  |
|  ip6erspan  |  Encapsulated Remote Switched Port Analyzer over IPv6  |
|  ip6gre  |  GRE over IPv6 (network layer)  |
|  ip6gretap  |  GRE over IPv6 (datalink layer)  |
|  ip6ip6  |  IPv6 in IPv6 encapsulation  |
|  ipip  |  IPv4 in IPv4 encapsulation  |
|  ipip6  |  IPv4 in IP6 encapsulation  |
|  sit  |  Simple Internet Transition (IPv6 in IPv4)  |

`,
		},

		"enable_multicast": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable multicast operation over tunnel

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Tunnel parameters

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnel) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesTunnelDescrIPtion.IsNull() && !o.LeafInterfacesTunnelDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesTunnelDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesTunnelAddress.IsNull() && !o.LeafInterfacesTunnelAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesTunnelAddress.ValueString()
	}

	if !o.LeafInterfacesTunnelDisable.IsNull() && !o.LeafInterfacesTunnelDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesTunnelDisable.ValueString()
	}

	if !o.LeafInterfacesTunnelDisableLinkDetect.IsNull() && !o.LeafInterfacesTunnelDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesTunnelDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesTunnelMtu.IsNull() && !o.LeafInterfacesTunnelMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesTunnelMtu.ValueString()
	}

	if !o.LeafInterfacesTunnelSourceAddress.IsNull() && !o.LeafInterfacesTunnelSourceAddress.IsUnknown() {
		jsonData["source-address"] = o.LeafInterfacesTunnelSourceAddress.ValueString()
	}

	if !o.LeafInterfacesTunnelRemote.IsNull() && !o.LeafInterfacesTunnelRemote.IsUnknown() {
		jsonData["remote"] = o.LeafInterfacesTunnelRemote.ValueString()
	}

	if !o.LeafInterfacesTunnelSourceInterface.IsNull() && !o.LeafInterfacesTunnelSourceInterface.IsUnknown() {
		jsonData["source-interface"] = o.LeafInterfacesTunnelSourceInterface.ValueString()
	}

	if !o.LeafInterfacesTunnelSixrdPrefix.IsNull() && !o.LeafInterfacesTunnelSixrdPrefix.IsUnknown() {
		jsonData["6rd-prefix"] = o.LeafInterfacesTunnelSixrdPrefix.ValueString()
	}

	if !o.LeafInterfacesTunnelSixrdRelayPrefix.IsNull() && !o.LeafInterfacesTunnelSixrdRelayPrefix.IsUnknown() {
		jsonData["6rd-relay-prefix"] = o.LeafInterfacesTunnelSixrdRelayPrefix.ValueString()
	}

	if !o.LeafInterfacesTunnelEncapsulation.IsNull() && !o.LeafInterfacesTunnelEncapsulation.IsUnknown() {
		jsonData["encapsulation"] = o.LeafInterfacesTunnelEncapsulation.ValueString()
	}

	if !o.LeafInterfacesTunnelEnableMulticast.IsNull() && !o.LeafInterfacesTunnelEnableMulticast.IsUnknown() {
		jsonData["enable-multicast"] = o.LeafInterfacesTunnelEnableMulticast.ValueString()
	}

	if !o.LeafInterfacesTunnelVrf.IsNull() && !o.LeafInterfacesTunnelVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesTunnelVrf.ValueString()
	}

	if !o.LeafInterfacesTunnelRedirect.IsNull() && !o.LeafInterfacesTunnelRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesTunnelRedirect.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesTunnelIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesTunnelIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesTunnelIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesTunnelIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesTunnelMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesTunnelMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesTunnelParameters).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesTunnelParameters)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["parameters"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnel) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesTunnelDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesTunnelAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesTunnelDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesTunnelDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesTunnelMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source-address"]; ok {
		o.LeafInterfacesTunnelSourceAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelSourceAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote"]; ok {
		o.LeafInterfacesTunnelRemote = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelRemote = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source-interface"]; ok {
		o.LeafInterfacesTunnelSourceInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelSourceInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["6rd-prefix"]; ok {
		o.LeafInterfacesTunnelSixrdPrefix = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelSixrdPrefix = basetypes.NewStringNull()
	}

	if value, ok := jsonData["6rd-relay-prefix"]; ok {
		o.LeafInterfacesTunnelSixrdRelayPrefix = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelSixrdRelayPrefix = basetypes.NewStringNull()
	}

	if value, ok := jsonData["encapsulation"]; ok {
		o.LeafInterfacesTunnelEncapsulation = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelEncapsulation = basetypes.NewStringNull()
	}

	if value, ok := jsonData["enable-multicast"]; ok {
		o.LeafInterfacesTunnelEnableMulticast = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelEnableMulticast = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesTunnelVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelVrf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesTunnelRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelRedirect = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesTunnelIP = &InterfacesTunnelIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesTunnelIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesTunnelIPvsix = &InterfacesTunnelIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesTunnelIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesTunnelMirror = &InterfacesTunnelMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesTunnelMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["parameters"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesTunnelParameters = &InterfacesTunnelParameters{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesTunnelParameters)
		if err != nil {
			return err
		}
	}

	return nil
}
