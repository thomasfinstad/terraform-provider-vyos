// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesTunnelParametersErspan describes the resource data model.
type InterfacesTunnelParametersErspan struct {
	// LeafNodes
	LeafInterfacesTunnelParametersErspanDirection types.String `tfsdk:"direction" json:"direction,omitempty"`
	LeafInterfacesTunnelParametersErspanHwID      types.String `tfsdk:"hw_id" json:"hw-id,omitempty"`
	LeafInterfacesTunnelParametersErspanIndex     types.String `tfsdk:"index" json:"index,omitempty"`
	LeafInterfacesTunnelParametersErspanVersion   types.String `tfsdk:"version" json:"version,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnelParametersErspan) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"direction": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Mirrored traffic direction

|  Format  |  Description  |
|----------|---------------|
|  ingress  |  Mirror ingress traffic  |
|  egress  |  Mirror egress traffic  |

`,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Unique identifier of an ERSPAN engine within a system

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048575  |  Unique identifier of an ERSPAN engine  |

`,
		},

		"index": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ERSPAN version 1 index field

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Platform-depedent field for specifying port number and direction  |

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol version

|  Format  |  Description  |
|----------|---------------|
|  1  |  ERSPAN Type II  |
|  2  |  ERSPAN Type III  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnelParametersErspan) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesTunnelParametersErspanDirection.IsNull() && !o.LeafInterfacesTunnelParametersErspanDirection.IsUnknown() {
		jsonData["direction"] = o.LeafInterfacesTunnelParametersErspanDirection.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersErspanHwID.IsNull() && !o.LeafInterfacesTunnelParametersErspanHwID.IsUnknown() {
		jsonData["hw-id"] = o.LeafInterfacesTunnelParametersErspanHwID.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersErspanIndex.IsNull() && !o.LeafInterfacesTunnelParametersErspanIndex.IsUnknown() {
		jsonData["index"] = o.LeafInterfacesTunnelParametersErspanIndex.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersErspanVersion.IsNull() && !o.LeafInterfacesTunnelParametersErspanVersion.IsUnknown() {
		jsonData["version"] = o.LeafInterfacesTunnelParametersErspanVersion.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnelParametersErspan) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["direction"]; ok {
		o.LeafInterfacesTunnelParametersErspanDirection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanDirection = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hw-id"]; ok {
		o.LeafInterfacesTunnelParametersErspanHwID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanHwID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["index"]; ok {
		o.LeafInterfacesTunnelParametersErspanIndex = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanIndex = basetypes.NewStringNull()
	}

	if value, ok := jsonData["version"]; ok {
		o.LeafInterfacesTunnelParametersErspanVersion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanVersion = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
