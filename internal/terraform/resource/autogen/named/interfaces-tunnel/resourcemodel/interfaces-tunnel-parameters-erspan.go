// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesTunnelParametersErspan describes the resource data model.
type InterfacesTunnelParametersErspan struct {
	// LeafNodes
	LeafInterfacesTunnelParametersErspanDirection types.String `tfsdk:"direction"`
	LeafInterfacesTunnelParametersErspanHwID      types.String `tfsdk:"hw_id"`
	LeafInterfacesTunnelParametersErspanIndex     types.String `tfsdk:"index"`
	LeafInterfacesTunnelParametersErspanVersion   types.String `tfsdk:"version"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesTunnelParametersErspan) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "tunnel", "parameters", "erspan"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesTunnelParametersErspanDirection.IsNull() || o.LeafInterfacesTunnelParametersErspanDirection.IsUnknown()) {
		vyosData["direction"] = o.LeafInterfacesTunnelParametersErspanDirection.ValueString()
	}
	if !(o.LeafInterfacesTunnelParametersErspanHwID.IsNull() || o.LeafInterfacesTunnelParametersErspanHwID.IsUnknown()) {
		vyosData["hw-id"] = o.LeafInterfacesTunnelParametersErspanHwID.ValueString()
	}
	if !(o.LeafInterfacesTunnelParametersErspanIndex.IsNull() || o.LeafInterfacesTunnelParametersErspanIndex.IsUnknown()) {
		vyosData["index"] = o.LeafInterfacesTunnelParametersErspanIndex.ValueString()
	}
	if !(o.LeafInterfacesTunnelParametersErspanVersion.IsNull() || o.LeafInterfacesTunnelParametersErspanVersion.IsUnknown()) {
		vyosData["version"] = o.LeafInterfacesTunnelParametersErspanVersion.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesTunnelParametersErspan) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "tunnel", "parameters", "erspan"}})

	// Leafs
	if value, ok := vyosData["direction"]; ok {
		o.LeafInterfacesTunnelParametersErspanDirection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanDirection = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hw-id"]; ok {
		o.LeafInterfacesTunnelParametersErspanHwID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanHwID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["index"]; ok {
		o.LeafInterfacesTunnelParametersErspanIndex = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanIndex = basetypes.NewStringNull()
	}
	if value, ok := vyosData["version"]; ok {
		o.LeafInterfacesTunnelParametersErspanVersion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersErspanVersion = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "tunnel", "parameters", "erspan"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesTunnelParametersErspan) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"direction": types.StringType,
		"hw_id":     types.StringType,
		"index":     types.StringType,
		"version":   types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnelParametersErspan) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"direction": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Mirrored traffic direction

|  Format  |  Description  |
|----------|---------------|
|  ingress  |  Mirror ingress traffic  |
|  egress  |  Mirror egress traffic  |

`,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Unique identifier of an ERSPAN engine within a system

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048575  |  Unique identifier of an ERSPAN engine  |

`,
		},

		"index": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ERSPAN version 1 index field

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Platform-depedent field for specifying port number and direction  |

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol version

|  Format  |  Description  |
|----------|---------------|
|  1  |  ERSPAN Type II  |
|  2  |  ERSPAN Type III  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
