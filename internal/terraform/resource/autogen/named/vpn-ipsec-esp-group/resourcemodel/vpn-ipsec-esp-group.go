// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecEspGroup describes the resource data model.
type VpnIPsecEspGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafVpnIPsecEspGroupCompression types.String `tfsdk:"compression"`
	LeafVpnIPsecEspGroupLifetime    types.String `tfsdk:"lifetime"`
	LeafVpnIPsecEspGroupLifeBytes   types.String `tfsdk:"life_bytes"`
	LeafVpnIPsecEspGroupLifePackets types.String `tfsdk:"life_packets"`
	LeafVpnIPsecEspGroupMode        types.String `tfsdk:"mode"`
	LeafVpnIPsecEspGroupPfs         types.String `tfsdk:"pfs"`

	// TagNodes
	TagVpnIPsecEspGroupProposal types.Map `tfsdk:"proposal"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecEspGroup) GetVyosPath() []string {
	return []string{
		"vpn",
		"ipsec",
		"esp-group",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecEspGroup) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "esp-group"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnIPsecEspGroupCompression.IsNull() || o.LeafVpnIPsecEspGroupCompression.IsUnknown()) {
		vyosData["compression"] = o.LeafVpnIPsecEspGroupCompression.ValueString()
	}
	if !(o.LeafVpnIPsecEspGroupLifetime.IsNull() || o.LeafVpnIPsecEspGroupLifetime.IsUnknown()) {
		vyosData["lifetime"] = o.LeafVpnIPsecEspGroupLifetime.ValueString()
	}
	if !(o.LeafVpnIPsecEspGroupLifeBytes.IsNull() || o.LeafVpnIPsecEspGroupLifeBytes.IsUnknown()) {
		vyosData["life-bytes"] = o.LeafVpnIPsecEspGroupLifeBytes.ValueString()
	}
	if !(o.LeafVpnIPsecEspGroupLifePackets.IsNull() || o.LeafVpnIPsecEspGroupLifePackets.IsUnknown()) {
		vyosData["life-packets"] = o.LeafVpnIPsecEspGroupLifePackets.ValueString()
	}
	if !(o.LeafVpnIPsecEspGroupMode.IsNull() || o.LeafVpnIPsecEspGroupMode.IsUnknown()) {
		vyosData["mode"] = o.LeafVpnIPsecEspGroupMode.ValueString()
	}
	if !(o.LeafVpnIPsecEspGroupPfs.IsNull() || o.LeafVpnIPsecEspGroupPfs.IsUnknown()) {
		vyosData["pfs"] = o.LeafVpnIPsecEspGroupPfs.ValueString()
	}

	// Tags
	if !(o.TagVpnIPsecEspGroupProposal.IsNull() || o.TagVpnIPsecEspGroupProposal.IsUnknown()) {
		subModel := make(map[string]VpnIPsecEspGroupProposal)
		diags.Append(o.TagVpnIPsecEspGroupProposal.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["proposal"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecEspGroup) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "esp-group"}})

	// Leafs
	if value, ok := vyosData["compression"]; ok {
		o.LeafVpnIPsecEspGroupCompression = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupCompression = basetypes.NewStringNull()
	}
	if value, ok := vyosData["lifetime"]; ok {
		o.LeafVpnIPsecEspGroupLifetime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupLifetime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["life-bytes"]; ok {
		o.LeafVpnIPsecEspGroupLifeBytes = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupLifeBytes = basetypes.NewStringNull()
	}
	if value, ok := vyosData["life-packets"]; ok {
		o.LeafVpnIPsecEspGroupLifePackets = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupLifePackets = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafVpnIPsecEspGroupMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupMode = basetypes.NewStringNull()
	}
	if value, ok := vyosData["pfs"]; ok {
		o.LeafVpnIPsecEspGroupPfs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecEspGroupPfs = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["proposal"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: VpnIPsecEspGroupProposal{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagVpnIPsecEspGroupProposal = data
	} else {
		o.TagVpnIPsecEspGroupProposal = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "esp-group"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecEspGroup) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"compression":  types.StringType,
		"lifetime":     types.StringType,
		"life_bytes":   types.StringType,
		"life_packets": types.StringType,
		"mode":         types.StringType,
		"pfs":          types.StringType,

		// Tags
		"proposal": types.MapType{ElemType: types.ObjectType{AttrTypes: VpnIPsecEspGroupProposal{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecEspGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Encapsulating Security Payload (ESP) group name

`,
		},

		// LeafNodes

		"compression": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable ESP compression

`,
		},

		"lifetime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Security Association time to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:30-86400  |  SA lifetime in seconds  |

`,

			// Default:          stringdefault.StaticString(`3600`),
			Computed: true,
		},

		"life_bytes": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Security Association byte count to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:1024-26843545600000  |  SA life in bytes  |

`,
		},

		"life_packets": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Security Association packet count to expire

|  Format  |  Description  |
|----------|---------------|
|  u32:1000-26843545600000  |  SA life in packets  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ESP mode

|  Format  |  Description  |
|----------|---------------|
|  tunnel  |  Tunnel mode  |
|  transport  |  Transport mode  |

`,

			// Default:          stringdefault.StaticString(`tunnel`),
			Computed: true,
		},

		"pfs": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ESP Perfect Forward Secrecy

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Inherit Diffie-Hellman group from the IKE group  |
|  dh-group1  |  Use Diffie-Hellman group 1 (modp768)  |
|  dh-group2  |  Use Diffie-Hellman group 2 (modp1024)  |
|  dh-group5  |  Use Diffie-Hellman group 5 (modp1536)  |
|  dh-group14  |  Use Diffie-Hellman group 14 (modp2048)  |
|  dh-group15  |  Use Diffie-Hellman group 15 (modp3072)  |
|  dh-group16  |  Use Diffie-Hellman group 16 (modp4096)  |
|  dh-group17  |  Use Diffie-Hellman group 17 (modp6144)  |
|  dh-group18  |  Use Diffie-Hellman group 18 (modp8192)  |
|  dh-group19  |  Use Diffie-Hellman group 19 (ecp256)  |
|  dh-group20  |  Use Diffie-Hellman group 20 (ecp384)  |
|  dh-group21  |  Use Diffie-Hellman group 21 (ecp521)  |
|  dh-group22  |  Use Diffie-Hellman group 22 (modp1024s160)  |
|  dh-group23  |  Use Diffie-Hellman group 23 (modp2048s224)  |
|  dh-group24  |  Use Diffie-Hellman group 24 (modp2048s256)  |
|  dh-group25  |  Use Diffie-Hellman group 25 (ecp192)  |
|  dh-group26  |  Use Diffie-Hellman group 26 (ecp224)  |
|  dh-group27  |  Use Diffie-Hellman group 27 (ecp224bp)  |
|  dh-group28  |  Use Diffie-Hellman group 28 (ecp256bp)  |
|  dh-group29  |  Use Diffie-Hellman group 29 (ecp384bp)  |
|  dh-group30  |  Use Diffie-Hellman group 30 (ecp512bp)  |
|  dh-group31  |  Use Diffie-Hellman group 31 (curve25519)  |
|  dh-group32  |  Use Diffie-Hellman group 32 (curve448)  |
|  disable  |  Disable PFS  |

`,

			// Default:          stringdefault.StaticString(`enable`),
			Computed: true,
		},

		// TagNodes

		"proposal": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VpnIPsecEspGroupProposal{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `ESP group proposal

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  ESP group proposal number  |

`,
		},

		// Nodes

	}
}
