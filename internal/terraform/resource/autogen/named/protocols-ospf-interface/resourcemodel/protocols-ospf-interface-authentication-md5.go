// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsOspfInterfaceAuthenticationMdfive describes the resource data model.
type ProtocolsOspfInterfaceAuthenticationMdfive struct {
	// LeafNodes

	// TagNodes
	TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID types.Map `tfsdk:"key_id"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsOspfInterfaceAuthenticationMdfive) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "ospf", "interface", "authentication", "md5"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags
	if !(o.TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID.IsNull() || o.TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID.IsUnknown()) {
		subModel := make(map[string]ProtocolsOspfInterfaceAuthenticationMdfiveKeyID)
		diags.Append(o.TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["key-id"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsOspfInterfaceAuthenticationMdfive) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "ospf", "interface", "authentication", "md5"}})

	// Leafs

	// Tags
	if value, ok := vyosData["key-id"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ProtocolsOspfInterfaceAuthenticationMdfiveKeyID{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID = data
	} else {
		o.TagProtocolsOspfInterfaceAuthenticationMdfiveKeyID = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "ospf", "interface", "authentication", "md5"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsOspfInterfaceAuthenticationMdfive) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags
		"key_id": types.MapType{ElemType: types.ObjectType{AttrTypes: ProtocolsOspfInterfaceAuthenticationMdfiveKeyID{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsOspfInterfaceAuthenticationMdfive) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"key_id": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsOspfInterfaceAuthenticationMdfiveKeyID{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `MD5 key id

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  MD5 key id  |

`,
		},

		// Nodes

	}
}
