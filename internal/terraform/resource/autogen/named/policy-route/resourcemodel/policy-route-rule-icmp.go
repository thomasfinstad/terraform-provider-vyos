// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteRuleIcmp describes the resource data model.
type PolicyRouteRuleIcmp struct {
	// LeafNodes
	LeafPolicyRouteRuleIcmpCode     types.String `tfsdk:"code" json:"code,omitempty"`
	LeafPolicyRouteRuleIcmpType     types.String `tfsdk:"type" json:"type,omitempty"`
	LeafPolicyRouteRuleIcmpTypeName types.String `tfsdk:"type_name" json:"type-name,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteRuleIcmp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"code": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ICMP code (0-255)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  ICMP code (0-255)  |

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ICMP type (0-255)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  ICMP type (0-255)  |

`,
		},

		"type_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ICMP type-name

|  Format  |  Description  |
|----------|---------------|
|  echo-reply  |  ICMP type 0: echo-reply  |
|  destination-unreachable  |  ICMP type 3: destination-unreachable  |
|  source-quench  |  ICMP type 4: source-quench  |
|  redirect  |  ICMP type 5: redirect  |
|  echo-request  |  ICMP type 8: echo-request  |
|  router-advertisement  |  ICMP type 9: router-advertisement  |
|  router-solicitation  |  ICMP type 10: router-solicitation  |
|  time-exceeded  |  ICMP type 11: time-exceeded  |
|  parameter-problem  |  ICMP type 12: parameter-problem  |
|  timestamp-request  |  ICMP type 13: timestamp-request  |
|  timestamp-reply  |  ICMP type 14: timestamp-reply  |
|  info-request  |  ICMP type 15: info-request  |
|  info-reply  |  ICMP type 16: info-reply  |
|  address-mask-request  |  ICMP type 17: address-mask-request  |
|  address-mask-reply  |  ICMP type 18: address-mask-reply  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteRuleIcmp) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteRuleIcmpCode.IsNull() && !o.LeafPolicyRouteRuleIcmpCode.IsUnknown() {
		jsonData["code"] = o.LeafPolicyRouteRuleIcmpCode.ValueString()
	}

	if !o.LeafPolicyRouteRuleIcmpType.IsNull() && !o.LeafPolicyRouteRuleIcmpType.IsUnknown() {
		jsonData["type"] = o.LeafPolicyRouteRuleIcmpType.ValueString()
	}

	if !o.LeafPolicyRouteRuleIcmpTypeName.IsNull() && !o.LeafPolicyRouteRuleIcmpTypeName.IsUnknown() {
		jsonData["type-name"] = o.LeafPolicyRouteRuleIcmpTypeName.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteRuleIcmp) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["code"]; ok {
		o.LeafPolicyRouteRuleIcmpCode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteRuleIcmpCode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafPolicyRouteRuleIcmpType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteRuleIcmpType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type-name"]; ok {
		o.LeafPolicyRouteRuleIcmpTypeName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteRuleIcmpTypeName = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
