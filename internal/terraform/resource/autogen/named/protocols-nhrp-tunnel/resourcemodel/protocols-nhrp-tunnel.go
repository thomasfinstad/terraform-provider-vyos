// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsNhrpTunnel describes the resource data model.
type ProtocolsNhrpTunnel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsNhrpTunnelCiscoAuthentication types.String `tfsdk:"cisco_authentication" json:"cisco-authentication,omitempty"`
	LeafProtocolsNhrpTunnelHoldingTime         types.String `tfsdk:"holding_time" json:"holding-time,omitempty"`
	LeafProtocolsNhrpTunnelMulticast           types.String `tfsdk:"multicast" json:"multicast,omitempty"`
	LeafProtocolsNhrpTunnelNonCaching          types.String `tfsdk:"non_caching" json:"non-caching,omitempty"`
	LeafProtocolsNhrpTunnelRedirect            types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafProtocolsNhrpTunnelShortcutDestination types.String `tfsdk:"shortcut_destination" json:"shortcut-destination,omitempty"`
	LeafProtocolsNhrpTunnelShortcut            types.String `tfsdk:"shortcut" json:"shortcut,omitempty"`

	// TagNodes
	TagProtocolsNhrpTunnelDynamicMap     *map[string]ProtocolsNhrpTunnelDynamicMap     `tfsdk:"dynamic_map" json:"dynamic-map,omitempty"`
	TagProtocolsNhrpTunnelMap            *map[string]ProtocolsNhrpTunnelMap            `tfsdk:"map" json:"map,omitempty"`
	TagProtocolsNhrpTunnelShortcutTarget *map[string]ProtocolsNhrpTunnelShortcutTarget `tfsdk:"shortcut_target" json:"shortcut-target,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsNhrpTunnel) GetVyosPath() []string {
	return []string{
		"protocols",
		"nhrp",
		"tunnel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsNhrpTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Tunnel for NHRP

|  Format  |  Description  |
|----------|---------------|
|  tunN  |  NHRP tunnel name  |

`,
		},

		// LeafNodes

		"cisco_authentication": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Pass phrase for cisco authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Pass phrase for cisco authentication  |

`,
		},

		"holding_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Holding time in seconds

`,
		},

		"multicast": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set multicast for NHRP

`,
		},

		"non_caching": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `This can be used to reduce memory consumption on big NBMA subnets

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable sending of Cisco style NHRP Traffic Indication packets

`,
		},

		"shortcut_destination": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `This instructs opennhrp to reply with authorative answers on NHRP Resolution Requests destined to addresses in this interface

`,
		},

		"shortcut": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable creation of shortcut routes. A received NHRP Traffic Indication will trigger the resolution and establishment of a shortcut route

`,
		},

		// TagNodes

		"dynamic_map": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsNhrpTunnelDynamicMap{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Set an HUB tunnel address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Set the IP address and prefix length  |

`,
		},

		"map": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsNhrpTunnelMap{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Set an HUB tunnel address

`,
		},

		"shortcut_target": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsNhrpTunnelShortcutTarget{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Defines an off-NBMA network prefix for which the GRE interface will act as a gateway

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsNhrpTunnel) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsNhrpTunnelCiscoAuthentication.IsNull() && !o.LeafProtocolsNhrpTunnelCiscoAuthentication.IsUnknown() {
		jsonData["cisco-authentication"] = o.LeafProtocolsNhrpTunnelCiscoAuthentication.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelHoldingTime.IsNull() && !o.LeafProtocolsNhrpTunnelHoldingTime.IsUnknown() {
		jsonData["holding-time"] = o.LeafProtocolsNhrpTunnelHoldingTime.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelMulticast.IsNull() && !o.LeafProtocolsNhrpTunnelMulticast.IsUnknown() {
		jsonData["multicast"] = o.LeafProtocolsNhrpTunnelMulticast.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelNonCaching.IsNull() && !o.LeafProtocolsNhrpTunnelNonCaching.IsUnknown() {
		jsonData["non-caching"] = o.LeafProtocolsNhrpTunnelNonCaching.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelRedirect.IsNull() && !o.LeafProtocolsNhrpTunnelRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafProtocolsNhrpTunnelRedirect.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelShortcutDestination.IsNull() && !o.LeafProtocolsNhrpTunnelShortcutDestination.IsUnknown() {
		jsonData["shortcut-destination"] = o.LeafProtocolsNhrpTunnelShortcutDestination.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelShortcut.IsNull() && !o.LeafProtocolsNhrpTunnelShortcut.IsUnknown() {
		jsonData["shortcut"] = o.LeafProtocolsNhrpTunnelShortcut.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagProtocolsNhrpTunnelDynamicMap).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsNhrpTunnelDynamicMap)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dynamic-map"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsNhrpTunnelMap).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsNhrpTunnelMap)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["map"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsNhrpTunnelShortcutTarget).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsNhrpTunnelShortcutTarget)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["shortcut-target"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsNhrpTunnel) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["cisco-authentication"]; ok {
		o.LeafProtocolsNhrpTunnelCiscoAuthentication = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelCiscoAuthentication = basetypes.NewStringNull()
	}

	if value, ok := jsonData["holding-time"]; ok {
		o.LeafProtocolsNhrpTunnelHoldingTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelHoldingTime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["multicast"]; ok {
		o.LeafProtocolsNhrpTunnelMulticast = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelMulticast = basetypes.NewStringNull()
	}

	if value, ok := jsonData["non-caching"]; ok {
		o.LeafProtocolsNhrpTunnelNonCaching = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelNonCaching = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafProtocolsNhrpTunnelRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shortcut-destination"]; ok {
		o.LeafProtocolsNhrpTunnelShortcutDestination = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelShortcutDestination = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shortcut"]; ok {
		o.LeafProtocolsNhrpTunnelShortcut = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelShortcut = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["dynamic-map"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsNhrpTunnelDynamicMap = &map[string]ProtocolsNhrpTunnelDynamicMap{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsNhrpTunnelDynamicMap)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["map"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsNhrpTunnelMap = &map[string]ProtocolsNhrpTunnelMap{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsNhrpTunnelMap)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["shortcut-target"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsNhrpTunnelShortcutTarget = &map[string]ProtocolsNhrpTunnelShortcutTarget{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsNhrpTunnelShortcutTarget)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
