// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesBrIDge describes the resource data model.
type InterfacesBrIDge struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesBrIDgeAddress           types.String `tfsdk:"address"`
	LeafInterfacesBrIDgeAging             types.String `tfsdk:"aging"`
	LeafInterfacesBrIDgeDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesBrIDgeDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesBrIDgeDisable           types.String `tfsdk:"disable"`
	LeafInterfacesBrIDgeVrf               types.String `tfsdk:"vrf"`
	LeafInterfacesBrIDgeMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesBrIDgeForwardingDelay   types.String `tfsdk:"forwarding_delay"`
	LeafInterfacesBrIDgeHelloTime         types.String `tfsdk:"hello_time"`
	LeafInterfacesBrIDgeMac               types.String `tfsdk:"mac"`
	LeafInterfacesBrIDgeEnableVlan        types.String `tfsdk:"enable_vlan"`
	LeafInterfacesBrIDgeMaxAge            types.String `tfsdk:"max_age"`
	LeafInterfacesBrIDgePriority          types.String `tfsdk:"priority"`
	LeafInterfacesBrIDgeStp               types.String `tfsdk:"stp"`
	LeafInterfacesBrIDgeRedirect          types.String `tfsdk:"redirect"`

	// TagNodes
	TagInterfacesBrIDgeVif types.Map `tfsdk:"vif"`

	// Nodes
	NodeInterfacesBrIDgeDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesBrIDgeDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesBrIDgeIgmp            types.Object `tfsdk:"igmp"`
	NodeInterfacesBrIDgeIP              types.Object `tfsdk:"ip"`
	NodeInterfacesBrIDgeIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesBrIDgeMirror          types.Object `tfsdk:"mirror"`
	NodeInterfacesBrIDgeMember          types.Object `tfsdk:"member"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesBrIDge) GetVyosPath() []string {
	return []string{
		"interfaces",
		"bridge",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesBrIDge) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "bridge"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesBrIDgeAddress.IsNull() || o.LeafInterfacesBrIDgeAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesBrIDgeAddress.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeAging.IsNull() || o.LeafInterfacesBrIDgeAging.IsUnknown()) {
		vyosData["aging"] = o.LeafInterfacesBrIDgeAging.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeDescrIPtion.IsNull() || o.LeafInterfacesBrIDgeDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesBrIDgeDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeDisableLinkDetect.IsNull() || o.LeafInterfacesBrIDgeDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesBrIDgeDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeDisable.IsNull() || o.LeafInterfacesBrIDgeDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesBrIDgeDisable.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeVrf.IsNull() || o.LeafInterfacesBrIDgeVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesBrIDgeVrf.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeMtu.IsNull() || o.LeafInterfacesBrIDgeMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesBrIDgeMtu.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeForwardingDelay.IsNull() || o.LeafInterfacesBrIDgeForwardingDelay.IsUnknown()) {
		vyosData["forwarding-delay"] = o.LeafInterfacesBrIDgeForwardingDelay.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeHelloTime.IsNull() || o.LeafInterfacesBrIDgeHelloTime.IsUnknown()) {
		vyosData["hello-time"] = o.LeafInterfacesBrIDgeHelloTime.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeMac.IsNull() || o.LeafInterfacesBrIDgeMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesBrIDgeMac.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeEnableVlan.IsNull() || o.LeafInterfacesBrIDgeEnableVlan.IsUnknown()) {
		vyosData["enable-vlan"] = o.LeafInterfacesBrIDgeEnableVlan.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeMaxAge.IsNull() || o.LeafInterfacesBrIDgeMaxAge.IsUnknown()) {
		vyosData["max-age"] = o.LeafInterfacesBrIDgeMaxAge.ValueString()
	}
	if !(o.LeafInterfacesBrIDgePriority.IsNull() || o.LeafInterfacesBrIDgePriority.IsUnknown()) {
		vyosData["priority"] = o.LeafInterfacesBrIDgePriority.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeStp.IsNull() || o.LeafInterfacesBrIDgeStp.IsUnknown()) {
		vyosData["stp"] = o.LeafInterfacesBrIDgeStp.ValueString()
	}
	if !(o.LeafInterfacesBrIDgeRedirect.IsNull() || o.LeafInterfacesBrIDgeRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesBrIDgeRedirect.ValueString()
	}

	// Tags
	if !(o.TagInterfacesBrIDgeVif.IsNull() || o.TagInterfacesBrIDgeVif.IsUnknown()) {
		subModel := make(map[string]InterfacesBrIDgeVif)
		diags.Append(o.TagInterfacesBrIDgeVif.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesBrIDgeDhcpOptions.IsNull() || o.NodeInterfacesBrIDgeDhcpOptions.IsUnknown()) {
		var subModel InterfacesBrIDgeDhcpOptions
		diags.Append(o.NodeInterfacesBrIDgeDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeDhcpvsixOptions.IsNull() || o.NodeInterfacesBrIDgeDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesBrIDgeDhcpvsixOptions
		diags.Append(o.NodeInterfacesBrIDgeDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeIgmp.IsNull() || o.NodeInterfacesBrIDgeIgmp.IsUnknown()) {
		var subModel InterfacesBrIDgeIgmp
		diags.Append(o.NodeInterfacesBrIDgeIgmp.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["igmp"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeIP.IsNull() || o.NodeInterfacesBrIDgeIP.IsUnknown()) {
		var subModel InterfacesBrIDgeIP
		diags.Append(o.NodeInterfacesBrIDgeIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeIPvsix.IsNull() || o.NodeInterfacesBrIDgeIPvsix.IsUnknown()) {
		var subModel InterfacesBrIDgeIPvsix
		diags.Append(o.NodeInterfacesBrIDgeIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeMirror.IsNull() || o.NodeInterfacesBrIDgeMirror.IsUnknown()) {
		var subModel InterfacesBrIDgeMirror
		diags.Append(o.NodeInterfacesBrIDgeMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesBrIDgeMember.IsNull() || o.NodeInterfacesBrIDgeMember.IsUnknown()) {
		var subModel InterfacesBrIDgeMember
		diags.Append(o.NodeInterfacesBrIDgeMember.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["member"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesBrIDge) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "bridge"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesBrIDgeAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["aging"]; ok {
		o.LeafInterfacesBrIDgeAging = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeAging = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesBrIDgeDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesBrIDgeDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesBrIDgeDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesBrIDgeVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeVrf = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesBrIDgeMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["forwarding-delay"]; ok {
		o.LeafInterfacesBrIDgeForwardingDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeForwardingDelay = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-time"]; ok {
		o.LeafInterfacesBrIDgeHelloTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeHelloTime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesBrIDgeMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["enable-vlan"]; ok {
		o.LeafInterfacesBrIDgeEnableVlan = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeEnableVlan = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-age"]; ok {
		o.LeafInterfacesBrIDgeMaxAge = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMaxAge = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafInterfacesBrIDgePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgePriority = basetypes.NewStringNull()
	}
	if value, ok := vyosData["stp"]; ok {
		o.LeafInterfacesBrIDgeStp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeStp = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesBrIDgeRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeRedirect = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vif"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesBrIDgeVif{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesBrIDgeVif = data
	} else {
		o.TagInterfacesBrIDgeVif = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeDhcpOptions = data

	} else {
		o.NodeInterfacesBrIDgeDhcpOptions = basetypes.NewObjectNull(InterfacesBrIDgeDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeDhcpvsixOptions = data

	} else {
		o.NodeInterfacesBrIDgeDhcpvsixOptions = basetypes.NewObjectNull(InterfacesBrIDgeDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["igmp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeIgmp{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeIgmp = data

	} else {
		o.NodeInterfacesBrIDgeIgmp = basetypes.NewObjectNull(InterfacesBrIDgeIgmp{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeIP = data

	} else {
		o.NodeInterfacesBrIDgeIP = basetypes.NewObjectNull(InterfacesBrIDgeIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeIPvsix = data

	} else {
		o.NodeInterfacesBrIDgeIPvsix = basetypes.NewObjectNull(InterfacesBrIDgeIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeMirror = data

	} else {
		o.NodeInterfacesBrIDgeMirror = basetypes.NewObjectNull(InterfacesBrIDgeMirror{}.AttributeTypes())
	}
	if value, ok := vyosData["member"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesBrIDgeMember{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesBrIDgeMember = data

	} else {
		o.NodeInterfacesBrIDgeMember = basetypes.NewObjectNull(InterfacesBrIDgeMember{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "bridge"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesBrIDge) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":             types.StringType,
		"aging":               types.StringType,
		"description":         types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"vrf":                 types.StringType,
		"mtu":                 types.StringType,
		"forwarding_delay":    types.StringType,
		"hello_time":          types.StringType,
		"mac":                 types.StringType,
		"enable_vlan":         types.StringType,
		"max_age":             types.StringType,
		"priority":            types.StringType,
		"stp":                 types.StringType,
		"redirect":            types.StringType,

		// Tags
		"vif": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesBrIDgeVif{}.AttributeTypes()}},

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesBrIDgeDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesBrIDgeDhcpvsixOptions{}.AttributeTypes()},
		"igmp":           types.ObjectType{AttrTypes: InterfacesBrIDgeIgmp{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesBrIDgeIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesBrIDgeIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesBrIDgeMirror{}.AttributeTypes()},
		"member":         types.ObjectType{AttrTypes: InterfacesBrIDgeMember{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBrIDge) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Bridge Interface

|  Format  |  Description  |
|----------|---------------|
|  brN  |  Bridge interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"aging": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `MAC address aging interval

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable MAC address learning (always flood)  |
|  u32:10-1000000  |  MAC address aging time in seconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"forwarding_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Forwarding delay

|  Format  |  Description  |
|----------|---------------|
|  u32:0-200  |  Spanning Tree Protocol forwarding delay in seconds  |

`,

			// Default:          stringdefault.StaticString(`14`),
			Computed: true,
		},

		"hello_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hello packet advertisement interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Spanning Tree Protocol hello advertisement interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`2`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"enable_vlan": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable VLAN aware bridge

`,
		},

		"max_age": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval at which neighbor bridges are removed

|  Format  |  Description  |
|----------|---------------|
|  u32:1-40  |  Bridge maximum aging time in seconds  |

`,

			// Default:          stringdefault.StaticString(`20`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for this bridge

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Bridge priority  |

`,

			// Default:          stringdefault.StaticString(`32768`),
			Computed: true,
		},

		"stp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable spanning tree protocol

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		"vif": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesBrIDgeVif{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"igmp": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIgmp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) settings

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"member": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeMember{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Bridge member interfaces

`,
		},
	}
}
