// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesBrIDgeMemberInterface describes the resource data model.
type InterfacesBrIDgeMemberInterface struct {
	// LeafNodes
	LeafInterfacesBrIDgeMemberInterfaceNativeVlan  types.String `tfsdk:"native_vlan" json:"native-vlan,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceAllowedVlan types.String `tfsdk:"allowed_vlan" json:"allowed-vlan,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceCost        types.String `tfsdk:"cost" json:"cost,omitempty"`
	LeafInterfacesBrIDgeMemberInterfacePriority    types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceIsolated    types.String `tfsdk:"isolated" json:"isolated,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBrIDgeMemberInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"native_vlan": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify VLAN id which should natively be present on the link

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		"allowed_vlan": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify VLAN id which is allowed in this trunk interface

|  Format  |  Description  |
|----------|---------------|
|  <id>  |  VLAN id allowed to pass this interface  |
|  <idN>-<idM>  |  VLAN id range allowed on this interface (use '-' as delimiter)  |

`,
		},

		"cost": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bridge port cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Path cost value for Spanning Tree Protocol  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bridge port priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Bridge port priority  |

`,

			// Default:          stringdefault.StaticString(`32`),
			Computed: true,
		},

		"isolated": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port is isolated (also known as Private-VLAN)

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesBrIDgeMemberInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesBrIDgeMemberInterfaceNativeVlan.IsNull() && !o.LeafInterfacesBrIDgeMemberInterfaceNativeVlan.IsUnknown() {
		jsonData["native-vlan"] = o.LeafInterfacesBrIDgeMemberInterfaceNativeVlan.ValueString()
	}

	if !o.LeafInterfacesBrIDgeMemberInterfaceAllowedVlan.IsNull() && !o.LeafInterfacesBrIDgeMemberInterfaceAllowedVlan.IsUnknown() {
		jsonData["allowed-vlan"] = o.LeafInterfacesBrIDgeMemberInterfaceAllowedVlan.ValueString()
	}

	if !o.LeafInterfacesBrIDgeMemberInterfaceCost.IsNull() && !o.LeafInterfacesBrIDgeMemberInterfaceCost.IsUnknown() {
		jsonData["cost"] = o.LeafInterfacesBrIDgeMemberInterfaceCost.ValueString()
	}

	if !o.LeafInterfacesBrIDgeMemberInterfacePriority.IsNull() && !o.LeafInterfacesBrIDgeMemberInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafInterfacesBrIDgeMemberInterfacePriority.ValueString()
	}

	if !o.LeafInterfacesBrIDgeMemberInterfaceIsolated.IsNull() && !o.LeafInterfacesBrIDgeMemberInterfaceIsolated.IsUnknown() {
		jsonData["isolated"] = o.LeafInterfacesBrIDgeMemberInterfaceIsolated.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesBrIDgeMemberInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["native-vlan"]; ok {
		o.LeafInterfacesBrIDgeMemberInterfaceNativeVlan = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMemberInterfaceNativeVlan = basetypes.NewStringNull()
	}

	if value, ok := jsonData["allowed-vlan"]; ok {
		o.LeafInterfacesBrIDgeMemberInterfaceAllowedVlan = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMemberInterfaceAllowedVlan = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cost"]; ok {
		o.LeafInterfacesBrIDgeMemberInterfaceCost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMemberInterfaceCost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafInterfacesBrIDgeMemberInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMemberInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["isolated"]; ok {
		o.LeafInterfacesBrIDgeMemberInterfaceIsolated = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeMemberInterfaceIsolated = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
