// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSForwardingDomain describes the resource data model.
type ServiceDNSForwardingDomain struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceDNSForwardingDomainServer           types.String `tfsdk:"server" json:"server,omitempty"`
	LeafServiceDNSForwardingDomainAddnta           types.String `tfsdk:"addnta" json:"addnta,omitempty"`
	LeafServiceDNSForwardingDomainRecursionDesired types.String `tfsdk:"recursion_desired" json:"recursion-desired,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSForwardingDomain) GetVyosPath() []string {
	return []string{
		"service",
		"dns",
		"forwarding",
		"domain",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingDomain) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Domain to forward to a custom DNS server

`,
		},

		// LeafNodes

		"server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain Name Server (DNS) to forward queries to

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Domain Name Server (DNS) IPv4 address  |
|  ipv6  |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		"addnta": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add NTA (negative trust anchor) for this domain (must be set if the domain does not support DNSSEC)

`,
		},

		"recursion_desired": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set the "recursion desired" bit in requests to the upstream nameserver

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingDomain) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDNSForwardingDomainServer.IsNull() && !o.LeafServiceDNSForwardingDomainServer.IsUnknown() {
		jsonData["server"] = o.LeafServiceDNSForwardingDomainServer.ValueString()
	}

	if !o.LeafServiceDNSForwardingDomainAddnta.IsNull() && !o.LeafServiceDNSForwardingDomainAddnta.IsUnknown() {
		jsonData["addnta"] = o.LeafServiceDNSForwardingDomainAddnta.ValueString()
	}

	if !o.LeafServiceDNSForwardingDomainRecursionDesired.IsNull() && !o.LeafServiceDNSForwardingDomainRecursionDesired.IsUnknown() {
		jsonData["recursion-desired"] = o.LeafServiceDNSForwardingDomainRecursionDesired.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingDomain) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["server"]; ok {
		o.LeafServiceDNSForwardingDomainServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingDomainServer = basetypes.NewStringNull()
	}

	if value, ok := jsonData["addnta"]; ok {
		o.LeafServiceDNSForwardingDomainAddnta = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingDomainAddnta = basetypes.NewStringNull()
	}

	if value, ok := jsonData["recursion-desired"]; ok {
		o.LeafServiceDNSForwardingDomainRecursionDesired = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingDomainRecursionDesired = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
