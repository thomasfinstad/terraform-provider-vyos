// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress describes the resource data model.
type ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet       types.String `tfsdk:"as_set"`
	LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap    types.String `tfsdk:"route_map"`
	LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly types.String `tfsdk:"summary_only"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress) GetVyosPath() []string {
	return []string{
		"protocols",
		"bgp",
		"address-family",
		"ipv6-unicast",
		"aggregate-address",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "bgp", "address-family", "ipv6-unicast", "aggregate-address"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet.IsNull() || o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet.IsUnknown()) {
		vyosData["as-set"] = o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet.ValueString()
	}
	if !(o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap.IsNull() || o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap.IsUnknown()) {
		vyosData["route-map"] = o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap.ValueString()
	}
	if !(o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly.IsNull() || o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly.IsUnknown()) {
		vyosData["summary-only"] = o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "bgp", "address-family", "ipv6-unicast", "aggregate-address"}})

	// Leafs
	if value, ok := vyosData["as-set"]; ok {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressAsSet = basetypes.NewStringNull()
	}
	if value, ok := vyosData["route-map"]; ok {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressRouteMap = basetypes.NewStringNull()
	}
	if value, ok := vyosData["summary-only"]; ok {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddressSummaryOnly = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "bgp", "address-family", "ipv6-unicast", "aggregate-address"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"as_set":       types.StringType,
		"route_map":    types.StringType,
		"summary_only": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBgpAddressFamilyIPvsixUnicastAggregateAddress) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `BGP aggregate network

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Aggregate network  |

`,
		},

		// LeafNodes

		"as_set": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Generate AS-set path information for this aggregate address

`,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |

`,
		},

		"summary_only": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Announce the aggregate summary network only

`,
		},

		// TagNodes

		// Nodes

	}
}
