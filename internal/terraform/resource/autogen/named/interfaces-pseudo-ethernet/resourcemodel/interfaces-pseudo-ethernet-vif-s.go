// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesPseudoEthernetVifS describes the resource data model.
type InterfacesPseudoEthernetVifS struct {
	// LeafNodes
	LeafInterfacesPseudoEthernetVifSDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesPseudoEthernetVifSAddress           types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesPseudoEthernetVifSDisableLinkDetect types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesPseudoEthernetVifSDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesPseudoEthernetVifSProtocol          types.String `tfsdk:"protocol" json:"protocol,omitempty"`
	LeafInterfacesPseudoEthernetVifSMac               types.String `tfsdk:"mac" json:"mac,omitempty"`
	LeafInterfacesPseudoEthernetVifSMtu               types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesPseudoEthernetVifSRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesPseudoEthernetVifSVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes
	TagInterfacesPseudoEthernetVifSVifC *map[string]InterfacesPseudoEthernetVifSVifC `tfsdk:"vif_c" json:"vif-c,omitempty"`

	// Nodes
	NodeInterfacesPseudoEthernetVifSDhcpOptions     *InterfacesPseudoEthernetVifSDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesPseudoEthernetVifSDhcpvsixOptions *InterfacesPseudoEthernetVifSDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesPseudoEthernetVifSIP              *InterfacesPseudoEthernetVifSIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesPseudoEthernetVifSIPvsix          *InterfacesPseudoEthernetVifSIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesPseudoEthernetVifSMirror          *InterfacesPseudoEthernetVifSMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPseudoEthernetVifS) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

|  Format  |  Description  |
|----------|---------------|
|  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
|  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |

`,

			// Default:          stringdefault.StaticString(`802.1ad`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"vif_c": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesPseudoEthernetVifSVifC{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifSDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifSDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifSIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifSIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifSMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesPseudoEthernetVifS) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesPseudoEthernetVifSDescrIPtion.IsNull() && !o.LeafInterfacesPseudoEthernetVifSDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesPseudoEthernetVifSDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSAddress.IsNull() && !o.LeafInterfacesPseudoEthernetVifSAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesPseudoEthernetVifSAddress.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSDisableLinkDetect.IsNull() && !o.LeafInterfacesPseudoEthernetVifSDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesPseudoEthernetVifSDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSDisable.IsNull() && !o.LeafInterfacesPseudoEthernetVifSDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesPseudoEthernetVifSDisable.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSProtocol.IsNull() && !o.LeafInterfacesPseudoEthernetVifSProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafInterfacesPseudoEthernetVifSProtocol.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSMac.IsNull() && !o.LeafInterfacesPseudoEthernetVifSMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesPseudoEthernetVifSMac.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSMtu.IsNull() && !o.LeafInterfacesPseudoEthernetVifSMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesPseudoEthernetVifSMtu.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSRedirect.IsNull() && !o.LeafInterfacesPseudoEthernetVifSRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesPseudoEthernetVifSRedirect.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifSVrf.IsNull() && !o.LeafInterfacesPseudoEthernetVifSVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesPseudoEthernetVifSVrf.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagInterfacesPseudoEthernetVifSVifC).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesPseudoEthernetVifSVifC)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["vif-c"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifSDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifSDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifSDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifSDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifSIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifSIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifSIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifSIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifSMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifSMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesPseudoEthernetVifS) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesPseudoEthernetVifSDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesPseudoEthernetVifSAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesPseudoEthernetVifSDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesPseudoEthernetVifSDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafInterfacesPseudoEthernetVifSProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesPseudoEthernetVifSMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesPseudoEthernetVifSMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesPseudoEthernetVifSRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesPseudoEthernetVifSVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifSVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["vif-c"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesPseudoEthernetVifSVifC = &map[string]InterfacesPseudoEthernetVifSVifC{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesPseudoEthernetVifSVifC)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifSDhcpOptions = &InterfacesPseudoEthernetVifSDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifSDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifSDhcpvsixOptions = &InterfacesPseudoEthernetVifSDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifSDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifSIP = &InterfacesPseudoEthernetVifSIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifSIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifSIPvsix = &InterfacesPseudoEthernetVifSIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifSIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifSMirror = &InterfacesPseudoEthernetVifSMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifSMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
