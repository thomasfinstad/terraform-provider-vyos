// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesPseudoEthernetVif describes the resource data model.
type InterfacesPseudoEthernetVif struct {
	// LeafNodes
	LeafInterfacesPseudoEthernetVifDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesPseudoEthernetVifAddress           types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesPseudoEthernetVifDisableLinkDetect types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesPseudoEthernetVifDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesPseudoEthernetVifEgressQos         types.String `tfsdk:"egress_qos" json:"egress-qos,omitempty"`
	LeafInterfacesPseudoEthernetVifIngressQos        types.String `tfsdk:"ingress_qos" json:"ingress-qos,omitempty"`
	LeafInterfacesPseudoEthernetVifMac               types.String `tfsdk:"mac" json:"mac,omitempty"`
	LeafInterfacesPseudoEthernetVifMtu               types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesPseudoEthernetVifRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesPseudoEthernetVifVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesPseudoEthernetVifDhcpOptions     *InterfacesPseudoEthernetVifDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesPseudoEthernetVifDhcpvsixOptions *InterfacesPseudoEthernetVifDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesPseudoEthernetVifIP              *InterfacesPseudoEthernetVifIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesPseudoEthernetVifIPvsix          *InterfacesPseudoEthernetVifIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesPseudoEthernetVifMirror          *InterfacesPseudoEthernetVifMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPseudoEthernetVif) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"egress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"ingress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesPseudoEthernetVif) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesPseudoEthernetVifDescrIPtion.IsNull() && !o.LeafInterfacesPseudoEthernetVifDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesPseudoEthernetVifDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifAddress.IsNull() && !o.LeafInterfacesPseudoEthernetVifAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesPseudoEthernetVifAddress.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.IsNull() && !o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifDisable.IsNull() && !o.LeafInterfacesPseudoEthernetVifDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesPseudoEthernetVifDisable.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifEgressQos.IsNull() && !o.LeafInterfacesPseudoEthernetVifEgressQos.IsUnknown() {
		jsonData["egress-qos"] = o.LeafInterfacesPseudoEthernetVifEgressQos.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifIngressQos.IsNull() && !o.LeafInterfacesPseudoEthernetVifIngressQos.IsUnknown() {
		jsonData["ingress-qos"] = o.LeafInterfacesPseudoEthernetVifIngressQos.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifMac.IsNull() && !o.LeafInterfacesPseudoEthernetVifMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesPseudoEthernetVifMac.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifMtu.IsNull() && !o.LeafInterfacesPseudoEthernetVifMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesPseudoEthernetVifMtu.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifRedirect.IsNull() && !o.LeafInterfacesPseudoEthernetVifRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesPseudoEthernetVifRedirect.ValueString()
	}

	if !o.LeafInterfacesPseudoEthernetVifVrf.IsNull() && !o.LeafInterfacesPseudoEthernetVifVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesPseudoEthernetVifVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPseudoEthernetVifMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPseudoEthernetVifMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesPseudoEthernetVif) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesPseudoEthernetVifDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesPseudoEthernetVifAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesPseudoEthernetVifDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesPseudoEthernetVifDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["egress-qos"]; ok {
		o.LeafInterfacesPseudoEthernetVifEgressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifEgressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ingress-qos"]; ok {
		o.LeafInterfacesPseudoEthernetVifIngressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifIngressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesPseudoEthernetVifMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesPseudoEthernetVifMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesPseudoEthernetVifRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesPseudoEthernetVifVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifDhcpOptions = &InterfacesPseudoEthernetVifDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions = &InterfacesPseudoEthernetVifDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifIP = &InterfacesPseudoEthernetVifIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifIPvsix = &InterfacesPseudoEthernetVifIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPseudoEthernetVifMirror = &InterfacesPseudoEthernetVifMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPseudoEthernetVifMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
