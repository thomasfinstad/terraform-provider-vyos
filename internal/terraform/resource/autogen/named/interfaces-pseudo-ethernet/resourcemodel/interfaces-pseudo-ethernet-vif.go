// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesPseudoEthernetVif describes the resource data model.
type InterfacesPseudoEthernetVif struct {
	// LeafNodes
	LeafInterfacesPseudoEthernetVifDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesPseudoEthernetVifAddress           types.String `tfsdk:"address"`
	LeafInterfacesPseudoEthernetVifDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesPseudoEthernetVifDisable           types.String `tfsdk:"disable"`
	LeafInterfacesPseudoEthernetVifEgressQos         types.String `tfsdk:"egress_qos"`
	LeafInterfacesPseudoEthernetVifIngressQos        types.String `tfsdk:"ingress_qos"`
	LeafInterfacesPseudoEthernetVifMac               types.String `tfsdk:"mac"`
	LeafInterfacesPseudoEthernetVifMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesPseudoEthernetVifRedirect          types.String `tfsdk:"redirect"`
	LeafInterfacesPseudoEthernetVifVrf               types.String `tfsdk:"vrf"`

	// TagNodes

	// Nodes
	NodeInterfacesPseudoEthernetVifDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesPseudoEthernetVifDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesPseudoEthernetVifIP              types.Object `tfsdk:"ip"`
	NodeInterfacesPseudoEthernetVifIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesPseudoEthernetVifMirror          types.Object `tfsdk:"mirror"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesPseudoEthernetVif) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet", "vif"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesPseudoEthernetVifDescrIPtion.IsNull() || o.LeafInterfacesPseudoEthernetVifDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesPseudoEthernetVifDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifAddress.IsNull() || o.LeafInterfacesPseudoEthernetVifAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesPseudoEthernetVifAddress.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.IsNull() || o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesPseudoEthernetVifDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifDisable.IsNull() || o.LeafInterfacesPseudoEthernetVifDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesPseudoEthernetVifDisable.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifEgressQos.IsNull() || o.LeafInterfacesPseudoEthernetVifEgressQos.IsUnknown()) {
		vyosData["egress-qos"] = o.LeafInterfacesPseudoEthernetVifEgressQos.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifIngressQos.IsNull() || o.LeafInterfacesPseudoEthernetVifIngressQos.IsUnknown()) {
		vyosData["ingress-qos"] = o.LeafInterfacesPseudoEthernetVifIngressQos.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifMac.IsNull() || o.LeafInterfacesPseudoEthernetVifMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesPseudoEthernetVifMac.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifMtu.IsNull() || o.LeafInterfacesPseudoEthernetVifMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesPseudoEthernetVifMtu.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifRedirect.IsNull() || o.LeafInterfacesPseudoEthernetVifRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesPseudoEthernetVifRedirect.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVifVrf.IsNull() || o.LeafInterfacesPseudoEthernetVifVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesPseudoEthernetVifVrf.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesPseudoEthernetVifDhcpOptions.IsNull() || o.NodeInterfacesPseudoEthernetVifDhcpOptions.IsUnknown()) {
		var subModel InterfacesPseudoEthernetVifDhcpOptions
		diags.Append(o.NodeInterfacesPseudoEthernetVifDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions.IsNull() || o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesPseudoEthernetVifDhcpvsixOptions
		diags.Append(o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetVifIP.IsNull() || o.NodeInterfacesPseudoEthernetVifIP.IsUnknown()) {
		var subModel InterfacesPseudoEthernetVifIP
		diags.Append(o.NodeInterfacesPseudoEthernetVifIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetVifIPvsix.IsNull() || o.NodeInterfacesPseudoEthernetVifIPvsix.IsUnknown()) {
		var subModel InterfacesPseudoEthernetVifIPvsix
		diags.Append(o.NodeInterfacesPseudoEthernetVifIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetVifMirror.IsNull() || o.NodeInterfacesPseudoEthernetVifMirror.IsUnknown()) {
		var subModel InterfacesPseudoEthernetVifMirror
		diags.Append(o.NodeInterfacesPseudoEthernetVifMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesPseudoEthernetVif) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet", "vif"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesPseudoEthernetVifDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesPseudoEthernetVifAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesPseudoEthernetVifDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesPseudoEthernetVifDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["egress-qos"]; ok {
		o.LeafInterfacesPseudoEthernetVifEgressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifEgressQos = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ingress-qos"]; ok {
		o.LeafInterfacesPseudoEthernetVifIngressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifIngressQos = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesPseudoEthernetVifMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesPseudoEthernetVifMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesPseudoEthernetVifRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesPseudoEthernetVifVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVifVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetVifDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetVifDhcpOptions = data

	} else {
		o.NodeInterfacesPseudoEthernetVifDhcpOptions = basetypes.NewObjectNull(InterfacesPseudoEthernetVifDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetVifDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions = data

	} else {
		o.NodeInterfacesPseudoEthernetVifDhcpvsixOptions = basetypes.NewObjectNull(InterfacesPseudoEthernetVifDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetVifIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetVifIP = data

	} else {
		o.NodeInterfacesPseudoEthernetVifIP = basetypes.NewObjectNull(InterfacesPseudoEthernetVifIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetVifIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetVifIPvsix = data

	} else {
		o.NodeInterfacesPseudoEthernetVifIPvsix = basetypes.NewObjectNull(InterfacesPseudoEthernetVifIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetVifMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetVifMirror = data

	} else {
		o.NodeInterfacesPseudoEthernetVifMirror = basetypes.NewObjectNull(InterfacesPseudoEthernetVifMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet", "vif"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesPseudoEthernetVif) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":         types.StringType,
		"address":             types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"egress_qos":          types.StringType,
		"ingress_qos":         types.StringType,
		"mac":                 types.StringType,
		"mtu":                 types.StringType,
		"redirect":            types.StringType,
		"vrf":                 types.StringType,

		// Tags

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPseudoEthernetVif) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"egress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"ingress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetVifMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
