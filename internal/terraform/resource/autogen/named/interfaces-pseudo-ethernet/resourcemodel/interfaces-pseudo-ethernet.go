// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesPseudoEthernet describes the resource data model.
type InterfacesPseudoEthernet struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesPseudoEthernetAddress           types.String `tfsdk:"address"`
	LeafInterfacesPseudoEthernetDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesPseudoEthernetDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesPseudoEthernetDisable           types.String `tfsdk:"disable"`
	LeafInterfacesPseudoEthernetVrf               types.String `tfsdk:"vrf"`
	LeafInterfacesPseudoEthernetSourceInterface   types.String `tfsdk:"source_interface"`
	LeafInterfacesPseudoEthernetMac               types.String `tfsdk:"mac"`
	LeafInterfacesPseudoEthernetMode              types.String `tfsdk:"mode"`
	LeafInterfacesPseudoEthernetMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesPseudoEthernetRedirect          types.String `tfsdk:"redirect"`

	// TagNodes
	TagInterfacesPseudoEthernetVifS types.Map `tfsdk:"vif_s"`
	TagInterfacesPseudoEthernetVif  types.Map `tfsdk:"vif"`

	// Nodes
	NodeInterfacesPseudoEthernetDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesPseudoEthernetDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesPseudoEthernetIP              types.Object `tfsdk:"ip"`
	NodeInterfacesPseudoEthernetIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesPseudoEthernetMirror          types.Object `tfsdk:"mirror"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesPseudoEthernet) GetVyosPath() []string {
	return []string{
		"interfaces",
		"pseudo-ethernet",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesPseudoEthernet) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesPseudoEthernetAddress.IsNull() || o.LeafInterfacesPseudoEthernetAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesPseudoEthernetAddress.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetDescrIPtion.IsNull() || o.LeafInterfacesPseudoEthernetDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesPseudoEthernetDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetDisableLinkDetect.IsNull() || o.LeafInterfacesPseudoEthernetDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesPseudoEthernetDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetDisable.IsNull() || o.LeafInterfacesPseudoEthernetDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesPseudoEthernetDisable.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetVrf.IsNull() || o.LeafInterfacesPseudoEthernetVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesPseudoEthernetVrf.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetSourceInterface.IsNull() || o.LeafInterfacesPseudoEthernetSourceInterface.IsUnknown()) {
		vyosData["source-interface"] = o.LeafInterfacesPseudoEthernetSourceInterface.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetMac.IsNull() || o.LeafInterfacesPseudoEthernetMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesPseudoEthernetMac.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetMode.IsNull() || o.LeafInterfacesPseudoEthernetMode.IsUnknown()) {
		vyosData["mode"] = o.LeafInterfacesPseudoEthernetMode.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetMtu.IsNull() || o.LeafInterfacesPseudoEthernetMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesPseudoEthernetMtu.ValueString()
	}
	if !(o.LeafInterfacesPseudoEthernetRedirect.IsNull() || o.LeafInterfacesPseudoEthernetRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesPseudoEthernetRedirect.ValueString()
	}

	// Tags
	if !(o.TagInterfacesPseudoEthernetVifS.IsNull() || o.TagInterfacesPseudoEthernetVifS.IsUnknown()) {
		subModel := make(map[string]InterfacesPseudoEthernetVifS)
		diags.Append(o.TagInterfacesPseudoEthernetVifS.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif-s"] = subData
	}
	if !(o.TagInterfacesPseudoEthernetVif.IsNull() || o.TagInterfacesPseudoEthernetVif.IsUnknown()) {
		subModel := make(map[string]InterfacesPseudoEthernetVif)
		diags.Append(o.TagInterfacesPseudoEthernetVif.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesPseudoEthernetDhcpOptions.IsNull() || o.NodeInterfacesPseudoEthernetDhcpOptions.IsUnknown()) {
		var subModel InterfacesPseudoEthernetDhcpOptions
		diags.Append(o.NodeInterfacesPseudoEthernetDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetDhcpvsixOptions.IsNull() || o.NodeInterfacesPseudoEthernetDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesPseudoEthernetDhcpvsixOptions
		diags.Append(o.NodeInterfacesPseudoEthernetDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetIP.IsNull() || o.NodeInterfacesPseudoEthernetIP.IsUnknown()) {
		var subModel InterfacesPseudoEthernetIP
		diags.Append(o.NodeInterfacesPseudoEthernetIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetIPvsix.IsNull() || o.NodeInterfacesPseudoEthernetIPvsix.IsUnknown()) {
		var subModel InterfacesPseudoEthernetIPvsix
		diags.Append(o.NodeInterfacesPseudoEthernetIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPseudoEthernetMirror.IsNull() || o.NodeInterfacesPseudoEthernetMirror.IsUnknown()) {
		var subModel InterfacesPseudoEthernetMirror
		diags.Append(o.NodeInterfacesPseudoEthernetMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesPseudoEthernet) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesPseudoEthernetAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesPseudoEthernetDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesPseudoEthernetDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesPseudoEthernetDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesPseudoEthernetVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetVrf = basetypes.NewStringNull()
	}
	if value, ok := vyosData["source-interface"]; ok {
		o.LeafInterfacesPseudoEthernetSourceInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetSourceInterface = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesPseudoEthernetMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafInterfacesPseudoEthernetMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetMode = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesPseudoEthernetMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesPseudoEthernetRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPseudoEthernetRedirect = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vif-s"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifS{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesPseudoEthernetVifS = data
	} else {
		o.TagInterfacesPseudoEthernetVifS = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["vif"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesPseudoEthernetVif{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesPseudoEthernetVif = data
	} else {
		o.TagInterfacesPseudoEthernetVif = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetDhcpOptions = data

	} else {
		o.NodeInterfacesPseudoEthernetDhcpOptions = basetypes.NewObjectNull(InterfacesPseudoEthernetDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetDhcpvsixOptions = data

	} else {
		o.NodeInterfacesPseudoEthernetDhcpvsixOptions = basetypes.NewObjectNull(InterfacesPseudoEthernetDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetIP = data

	} else {
		o.NodeInterfacesPseudoEthernetIP = basetypes.NewObjectNull(InterfacesPseudoEthernetIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetIPvsix = data

	} else {
		o.NodeInterfacesPseudoEthernetIPvsix = basetypes.NewObjectNull(InterfacesPseudoEthernetIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPseudoEthernetMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPseudoEthernetMirror = data

	} else {
		o.NodeInterfacesPseudoEthernetMirror = basetypes.NewObjectNull(InterfacesPseudoEthernetMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "pseudo-ethernet"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesPseudoEthernet) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":             types.StringType,
		"description":         types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"vrf":                 types.StringType,
		"source_interface":    types.StringType,
		"mac":                 types.StringType,
		"mode":                types.StringType,
		"mtu":                 types.StringType,
		"redirect":            types.StringType,

		// Tags
		"vif_s": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesPseudoEthernetVifS{}.AttributeTypes()}},
		"vif":   types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesPseudoEthernetVif{}.AttributeTypes()}},

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesPseudoEthernetDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesPseudoEthernetDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesPseudoEthernetIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesPseudoEthernetIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesPseudoEthernetMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPseudoEthernet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Pseudo Ethernet Interface (Macvlan)

|  Format  |  Description  |
|----------|---------------|
|  pethN  |  Pseudo Ethernet interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Physical interface the traffic will go through

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Physical interface used for traffic forwarding  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Receive mode (default: private)

|  Format  |  Description  |
|----------|---------------|
|  private  |  No communication with other pseudo-devices  |
|  vepa  |  Virtual Ethernet Port Aggregator reflective relay  |
|  bridge  |  Simple bridge between pseudo-devices  |
|  passthru  |  Promicious mode passthrough of underlying device  |

`,

			// Default:          stringdefault.StaticString(`private`),
			Computed: true,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		"vif_s": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesPseudoEthernetVifS{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |

`,
		},

		"vif": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesPseudoEthernetVif{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPseudoEthernetMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
