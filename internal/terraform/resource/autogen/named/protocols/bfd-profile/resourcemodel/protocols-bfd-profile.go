// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsBfdProfile describes the resource data model.
type ProtocolsBfdProfile struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsBfdProfileEchoMode types.String `tfsdk:"echo_mode" vyos:"echo-mode,omitempty"`
	LeafProtocolsBfdProfilePassive  types.String `tfsdk:"passive" vyos:"passive,omitempty"`
	LeafProtocolsBfdProfileShutdown types.String `tfsdk:"shutdown" vyos:"shutdown,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeProtocolsBfdProfileInterval *ProtocolsBfdProfileInterval `tfsdk:"interval" vyos:"interval,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBfdProfile) GetVyosPath() []string {
	return []string{
		"protocols",
		"bfd",
		"profile",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBfdProfile) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Configure BFD profile used by individual peer

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Name of BFD profile  |

`,
		},

		// LeafNodes

		"echo_mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enables the echo transmission mode

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not attempt to start sessions

`,
		},

		"shutdown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable this peer

`,
		},

		// Nodes

		"interval": schema.SingleNestedAttribute{
			Attributes: ProtocolsBfdProfileInterval{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure timer intervals

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBfdProfile) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsBfdProfileEchoMode.IsNull() && !o.LeafProtocolsBfdProfileEchoMode.IsUnknown() {
		jsonData["echo-mode"] = o.LeafProtocolsBfdProfileEchoMode.ValueString()
	}

	if !o.LeafProtocolsBfdProfilePassive.IsNull() && !o.LeafProtocolsBfdProfilePassive.IsUnknown() {
		jsonData["passive"] = o.LeafProtocolsBfdProfilePassive.ValueString()
	}

	if !o.LeafProtocolsBfdProfileShutdown.IsNull() && !o.LeafProtocolsBfdProfileShutdown.IsUnknown() {
		jsonData["shutdown"] = o.LeafProtocolsBfdProfileShutdown.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsBfdProfileInterval).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBfdProfileInterval)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interval"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBfdProfile) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["echo-mode"]; ok {
		o.LeafProtocolsBfdProfileEchoMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileEchoMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafProtocolsBfdProfilePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfilePassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shutdown"]; ok {
		o.LeafProtocolsBfdProfileShutdown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileShutdown = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["interval"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBfdProfileInterval = &ProtocolsBfdProfileInterval{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBfdProfileInterval)
		if err != nil {
			return err
		}
	}

	return nil
}
