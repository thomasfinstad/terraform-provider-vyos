// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsOspfInterface describes the resource data model.
type ProtocolsOspfInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsOspfInterfaceArea               types.String `tfsdk:"area" vyos:"area,omitempty"`
	LeafProtocolsOspfInterfaceDeadInterval       types.String `tfsdk:"dead_interval" vyos:"dead-interval,omitempty"`
	LeafProtocolsOspfInterfaceHelloInterval      types.String `tfsdk:"hello_interval" vyos:"hello-interval,omitempty"`
	LeafProtocolsOspfInterfaceRetransmitInterval types.String `tfsdk:"retransmit_interval" vyos:"retransmit-interval,omitempty"`
	LeafProtocolsOspfInterfaceTransmitDelay      types.String `tfsdk:"transmit_delay" vyos:"transmit-delay,omitempty"`
	LeafProtocolsOspfInterfaceCost               types.String `tfsdk:"cost" vyos:"cost,omitempty"`
	LeafProtocolsOspfInterfaceMtuIgnore          types.String `tfsdk:"mtu_ignore" vyos:"mtu-ignore,omitempty"`
	LeafProtocolsOspfInterfacePriority           types.String `tfsdk:"priority" vyos:"priority,omitempty"`
	LeafProtocolsOspfInterfaceBandwIDth          types.String `tfsdk:"bandwidth" vyos:"bandwidth,omitempty"`
	LeafProtocolsOspfInterfaceHelloMultIPlier    types.String `tfsdk:"hello_multiplier" vyos:"hello-multiplier,omitempty"`
	LeafProtocolsOspfInterfaceNetwork            types.String `tfsdk:"network" vyos:"network,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeProtocolsOspfInterfaceAuthentication *ProtocolsOspfInterfaceAuthentication `tfsdk:"authentication" vyos:"authentication,omitempty"`
	NodeProtocolsOspfInterfaceBfd            *ProtocolsOspfInterfaceBfd            `tfsdk:"bfd" vyos:"bfd,omitempty"`
	NodeProtocolsOspfInterfacePassive        *ProtocolsOspfInterfacePassive        `tfsdk:"passive" vyos:"passive,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsOspfInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"ospf",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsOspfInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface configuration

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Interface name  |

`,
		},

		// LeafNodes

		"area": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable OSPF on this interface

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  OSPF area ID as decimal notation  |
    |  ipv4  |  OSPF area ID in IP address notation  |

`,
		},

		"dead_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval after which a neighbor is declared dead

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Neighbor dead interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`40`),
			Computed: true,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between hello packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Hello interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"retransmit_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between retransmitting lost link state advertisements

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Retransmit interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"transmit_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link state transmit delay

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Link state transmit delay (seconds)  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"cost": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface cost

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  OSPF interface cost  |

`,
		},

		"mtu_ignore": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Router priority

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-255  |  OSPF router priority cost  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface bandwidth (Mbit/s)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-100000  |  Bandwidth in Megabit/sec (for calculating OSPF cost)  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hello multiplier factor

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-10  |  Number of Hellos to send each second  |

`,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Network type

    |  Format  |  Description  |
    |----------|---------------|
    |  broadcast  |  Broadcast network type  |
    |  non-broadcast  |  Non-broadcast network type  |
    |  point-to-multipoint  |  Point-to-multipoint network type  |
    |  point-to-point  |  Point-to-point network type  |

`,
		},

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: ProtocolsOspfInterfaceAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},

		"bfd": schema.SingleNestedAttribute{
			Attributes: ProtocolsOspfInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"passive": schema.SingleNestedAttribute{
			Attributes: ProtocolsOspfInterfacePassive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Suppress routing updates on an interface

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsOspfInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsOspfInterfaceArea.IsNull() && !o.LeafProtocolsOspfInterfaceArea.IsUnknown() {
		jsonData["area"] = o.LeafProtocolsOspfInterfaceArea.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceDeadInterval.IsNull() && !o.LeafProtocolsOspfInterfaceDeadInterval.IsUnknown() {
		jsonData["dead-interval"] = o.LeafProtocolsOspfInterfaceDeadInterval.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceHelloInterval.IsNull() && !o.LeafProtocolsOspfInterfaceHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafProtocolsOspfInterfaceHelloInterval.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceRetransmitInterval.IsNull() && !o.LeafProtocolsOspfInterfaceRetransmitInterval.IsUnknown() {
		jsonData["retransmit-interval"] = o.LeafProtocolsOspfInterfaceRetransmitInterval.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceTransmitDelay.IsNull() && !o.LeafProtocolsOspfInterfaceTransmitDelay.IsUnknown() {
		jsonData["transmit-delay"] = o.LeafProtocolsOspfInterfaceTransmitDelay.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceCost.IsNull() && !o.LeafProtocolsOspfInterfaceCost.IsUnknown() {
		jsonData["cost"] = o.LeafProtocolsOspfInterfaceCost.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceMtuIgnore.IsNull() && !o.LeafProtocolsOspfInterfaceMtuIgnore.IsUnknown() {
		jsonData["mtu-ignore"] = o.LeafProtocolsOspfInterfaceMtuIgnore.ValueString()
	}

	if !o.LeafProtocolsOspfInterfacePriority.IsNull() && !o.LeafProtocolsOspfInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafProtocolsOspfInterfacePriority.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceBandwIDth.IsNull() && !o.LeafProtocolsOspfInterfaceBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafProtocolsOspfInterfaceBandwIDth.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceHelloMultIPlier.IsNull() && !o.LeafProtocolsOspfInterfaceHelloMultIPlier.IsUnknown() {
		jsonData["hello-multiplier"] = o.LeafProtocolsOspfInterfaceHelloMultIPlier.ValueString()
	}

	if !o.LeafProtocolsOspfInterfaceNetwork.IsNull() && !o.LeafProtocolsOspfInterfaceNetwork.IsUnknown() {
		jsonData["network"] = o.LeafProtocolsOspfInterfaceNetwork.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsOspfInterfaceAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsOspfInterfaceAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsOspfInterfaceBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsOspfInterfaceBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsOspfInterfacePassive).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsOspfInterfacePassive)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["passive"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsOspfInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["area"]; ok {
		o.LeafProtocolsOspfInterfaceArea = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceArea = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dead-interval"]; ok {
		o.LeafProtocolsOspfInterfaceDeadInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceDeadInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafProtocolsOspfInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["retransmit-interval"]; ok {
		o.LeafProtocolsOspfInterfaceRetransmitInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceRetransmitInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["transmit-delay"]; ok {
		o.LeafProtocolsOspfInterfaceTransmitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceTransmitDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cost"]; ok {
		o.LeafProtocolsOspfInterfaceCost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceCost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu-ignore"]; ok {
		o.LeafProtocolsOspfInterfaceMtuIgnore = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceMtuIgnore = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafProtocolsOspfInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafProtocolsOspfInterfaceBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-multiplier"]; ok {
		o.LeafProtocolsOspfInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafProtocolsOspfInterfaceNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfInterfaceNetwork = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsOspfInterfaceAuthentication = &ProtocolsOspfInterfaceAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsOspfInterfaceAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsOspfInterfaceBfd = &ProtocolsOspfInterfaceBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsOspfInterfaceBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["passive"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsOspfInterfacePassive = &ProtocolsOspfInterfacePassive{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsOspfInterfacePassive)
		if err != nil {
			return err
		}
	}

	return nil
}
