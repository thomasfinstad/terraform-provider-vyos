// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsRIPInterfaceAuthenticationMdfive describes the resource data model.
type ProtocolsRIPInterfaceAuthenticationMdfive struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDProtocolsRIPInterface any `tfsdk:"interface" vyos:"interface,parent-id"`

	// LeafNodes
	LeafProtocolsRIPInterfaceAuthenticationMdfivePassword types.String `tfsdk:"password" vyos:"password,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsRIPInterfaceAuthenticationMdfive) GetVyosPath() []string {
	return []string{
		"protocols",
		"rip",
		"interface",
		"authentication",
		"md5",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsRIPInterfaceAuthenticationMdfive) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `MD5 key id

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-255  |  OSPF key id  |

`,
		},

		// LeafNodes

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication password

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  MD5 Key (16 characters or less)  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsRIPInterfaceAuthenticationMdfive) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsRIPInterfaceAuthenticationMdfivePassword.IsNull() && !o.LeafProtocolsRIPInterfaceAuthenticationMdfivePassword.IsUnknown() {
		jsonData["password"] = o.LeafProtocolsRIPInterfaceAuthenticationMdfivePassword.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsRIPInterfaceAuthenticationMdfive) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["password"]; ok {
		o.LeafProtocolsRIPInterfaceAuthenticationMdfivePassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsRIPInterfaceAuthenticationMdfivePassword = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
