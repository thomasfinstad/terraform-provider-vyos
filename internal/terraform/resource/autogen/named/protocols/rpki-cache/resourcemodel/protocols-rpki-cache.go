// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsRpkiCache describes the resource data model.
type ProtocolsRpkiCache struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsRpkiCachePort       types.String `tfsdk:"port" vyos:"port,omitempty"`
	LeafProtocolsRpkiCachePreference types.String `tfsdk:"preference" vyos:"preference,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeProtocolsRpkiCacheTCP *ProtocolsRpkiCacheTCP `tfsdk:"ssh" vyos:"ssh,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsRpkiCache) GetVyosPath() []string {
	return []string{
		"protocols",
		"rpki",
		"cache",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsRpkiCache) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `RPKI cache server address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IP address of RPKI server  |
    |  ipv6  |  IPv6 address of RPKI server  |
    |  hostname  |  Fully qualified domain name of RPKI server  |

`,
		},

		// LeafNodes

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Numeric IP port  |

`,
		},

		"preference": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Preference of the cache server

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-255  |  Preference of the cache server  |

`,
		},

		// Nodes

		"ssh": schema.SingleNestedAttribute{
			Attributes: ProtocolsRpkiCacheTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RPKI SSH connection settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsRpkiCache) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsRpkiCachePort.IsNull() && !o.LeafProtocolsRpkiCachePort.IsUnknown() {
		jsonData["port"] = o.LeafProtocolsRpkiCachePort.ValueString()
	}

	if !o.LeafProtocolsRpkiCachePreference.IsNull() && !o.LeafProtocolsRpkiCachePreference.IsUnknown() {
		jsonData["preference"] = o.LeafProtocolsRpkiCachePreference.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsRpkiCacheTCP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsRpkiCacheTCP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ssh"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsRpkiCache) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["port"]; ok {
		o.LeafProtocolsRpkiCachePort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsRpkiCachePort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["preference"]; ok {
		o.LeafProtocolsRpkiCachePreference = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsRpkiCachePreference = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["ssh"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsRpkiCacheTCP = &ProtocolsRpkiCacheTCP{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsRpkiCacheTCP)
		if err != nil {
			return err
		}
	}

	return nil
}
