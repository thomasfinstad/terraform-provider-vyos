// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsIgmpInterface describes the resource data model.
type ProtocolsIgmpInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsIgmpInterfaceVersion              types.String `tfsdk:"version" vyos:"version,omitempty"`
	LeafProtocolsIgmpInterfaceQueryInterval        types.String `tfsdk:"query_interval" vyos:"query-interval,omitempty"`
	LeafProtocolsIgmpInterfaceQueryMaxResponseTime types.String `tfsdk:"query_max_response_time" vyos:"query-max-response-time,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsIgmpInterfaceJoin bool `tfsdk:"join" vyos:"join,child"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsIgmpInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"igmp",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsIgmpInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IGMP interface

`,
		},

		// LeafNodes

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IGMP version

    |  Format  |  Description  |
    |----------|---------------|
    |  2  |  IGMP version 2  |
    |  3  |  IGMP version 3  |

`,
		},

		"query_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IGMP host query interval

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-1800  |  Query interval in seconds  |

`,
		},

		"query_max_response_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IGMP max query response time

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:10-250  |  Query response value in deci-seconds  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsIgmpInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsIgmpInterfaceVersion.IsNull() && !o.LeafProtocolsIgmpInterfaceVersion.IsUnknown() {
		jsonData["version"] = o.LeafProtocolsIgmpInterfaceVersion.ValueString()
	}

	if !o.LeafProtocolsIgmpInterfaceQueryInterval.IsNull() && !o.LeafProtocolsIgmpInterfaceQueryInterval.IsUnknown() {
		jsonData["query-interval"] = o.LeafProtocolsIgmpInterfaceQueryInterval.ValueString()
	}

	if !o.LeafProtocolsIgmpInterfaceQueryMaxResponseTime.IsNull() && !o.LeafProtocolsIgmpInterfaceQueryMaxResponseTime.IsUnknown() {
		jsonData["query-max-response-time"] = o.LeafProtocolsIgmpInterfaceQueryMaxResponseTime.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsIgmpInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["version"]; ok {
		o.LeafProtocolsIgmpInterfaceVersion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpInterfaceVersion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["query-interval"]; ok {
		o.LeafProtocolsIgmpInterfaceQueryInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpInterfaceQueryInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["query-max-response-time"]; ok {
		o.LeafProtocolsIgmpInterfaceQueryMaxResponseTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpInterfaceQueryMaxResponseTime = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
