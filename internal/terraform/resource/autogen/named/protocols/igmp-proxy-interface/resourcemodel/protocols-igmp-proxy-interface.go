// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ProtocolsIgmpProxyInterface describes the resource data model.
type ProtocolsIgmpProxyInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsIgmpProxyInterfaceAltSubnet types.List   `tfsdk:"alt_subnet" vyos:"alt-subnet,omitempty"`
	LeafProtocolsIgmpProxyInterfaceRole      types.String `tfsdk:"role" vyos:"role,omitempty"`
	LeafProtocolsIgmpProxyInterfaceThreshold types.Number `tfsdk:"threshold" vyos:"threshold,omitempty"`
	LeafProtocolsIgmpProxyInterfaceWhitelist types.List   `tfsdk:"whitelist" vyos:"whitelist,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsIgmpProxyInterface) GetVyosPath() []string {
	return []string{
		"protocols",

		"igmp-proxy",

		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsIgmpProxyInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface for IGMP proxy

`,
		},

		// LeafNodes

		"alt_subnet": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Unicast source networks allowed for multicast traffic to be proxyed

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network  |

`,
		},

		"role": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IGMP interface role

    |  Format  |  Description  |
    |----------|---------------|
    |  upstream  |  Upstream interface (only 1 allowed)  |
    |  downstream  |  Downstream interface(s)  |
    |  disabled  |  Disabled interface  |

`,

			// Default:          stringdefault.StaticString(`downstream`),
			Computed: true,
		},

		"threshold": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `TTL threshold

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-255  |  TTL threshold for the interfaces  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"whitelist": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Group to whitelist

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsIgmpProxyInterface) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsIgmpProxyInterface) UnmarshalJSON(_ []byte) error {
	return nil
}
