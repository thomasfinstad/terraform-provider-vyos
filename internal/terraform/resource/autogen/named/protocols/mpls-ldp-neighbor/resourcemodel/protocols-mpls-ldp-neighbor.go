// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsMplsLdpNeighbor describes the resource data model.
type ProtocolsMplsLdpNeighbor struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsMplsLdpNeighborPassword        types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafProtocolsMplsLdpNeighborTTLSecURIty     types.String `tfsdk:"ttl_security" vyos:"ttl-security,omitempty"`
	LeafProtocolsMplsLdpNeighborSessionHoldtime types.String `tfsdk:"session_holdtime" vyos:"session-holdtime,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsMplsLdpNeighbor) GetVyosPath() []string {
	return []string{
		"protocols",
		"mpls",
		"ldp",
		"neighbor",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsMplsLdpNeighbor) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `LDP neighbor parameters

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Neighbor IPv4 address  |

`,
		},

		// LeafNodes

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor password

`,
		},

		"ttl_security": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor TTL security

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-254  |  TTL  |
    |  disable  |  Disable neighbor TTL security  |

`,
		},

		"session_holdtime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Session IPv4 hold time

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:15-65535  |  Time in seconds  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsMplsLdpNeighbor) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsMplsLdpNeighborPassword.IsNull() && !o.LeafProtocolsMplsLdpNeighborPassword.IsUnknown() {
		jsonData["password"] = o.LeafProtocolsMplsLdpNeighborPassword.ValueString()
	}

	if !o.LeafProtocolsMplsLdpNeighborTTLSecURIty.IsNull() && !o.LeafProtocolsMplsLdpNeighborTTLSecURIty.IsUnknown() {
		jsonData["ttl-security"] = o.LeafProtocolsMplsLdpNeighborTTLSecURIty.ValueString()
	}

	if !o.LeafProtocolsMplsLdpNeighborSessionHoldtime.IsNull() && !o.LeafProtocolsMplsLdpNeighborSessionHoldtime.IsUnknown() {
		jsonData["session-holdtime"] = o.LeafProtocolsMplsLdpNeighborSessionHoldtime.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsMplsLdpNeighbor) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["password"]; ok {
		o.LeafProtocolsMplsLdpNeighborPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsMplsLdpNeighborPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl-security"]; ok {
		o.LeafProtocolsMplsLdpNeighborTTLSecURIty = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsMplsLdpNeighborTTLSecURIty = basetypes.NewStringNull()
	}

	if value, ok := jsonData["session-holdtime"]; ok {
		o.LeafProtocolsMplsLdpNeighborSessionHoldtime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsMplsLdpNeighborSessionHoldtime = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
