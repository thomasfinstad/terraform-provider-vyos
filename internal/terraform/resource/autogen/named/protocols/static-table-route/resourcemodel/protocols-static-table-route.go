// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsStaticTableRoute describes the resource data model.
type ProtocolsStaticTableRoute struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDProtocolsStaticTable any `tfsdk:"table" vyos:"table,parent-id"`

	// LeafNodes
	LeafProtocolsStaticTableRouteDhcpInterface types.String `tfsdk:"dhcp_interface" vyos:"dhcp-interface,omitempty"`
	LeafProtocolsStaticTableRouteDescrIPtion   types.String `tfsdk:"description" vyos:"description,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsStaticTableRouteInterface bool `tfsdk:"interface" vyos:"interface,child"`
	ExistsTagProtocolsStaticTableRouteNextHop   bool `tfsdk:"next_hop" vyos:"next-hop,child"`

	// Nodes
	NodeProtocolsStaticTableRouteBlackhole *ProtocolsStaticTableRouteBlackhole `tfsdk:"blackhole" vyos:"blackhole,omitempty"`
	NodeProtocolsStaticTableRouteReject    *ProtocolsStaticTableRouteReject    `tfsdk:"reject" vyos:"reject,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsStaticTableRoute) GetVyosPath() []string {
	return []string{
		"protocols",
		"static",
		"table",
		"route",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticTableRoute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Static IPv4 route

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 static route  |

`,
		},

		// LeafNodes

		"dhcp_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DHCP interface supplying next-hop IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  DHCP interface name  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		// Nodes

		"blackhole": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticTableRouteBlackhole{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Silently discard pkts when matched

`,
		},

		"reject": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticTableRouteReject{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Emit an ICMP unreachable when matched

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsStaticTableRoute) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsStaticTableRouteDhcpInterface.IsNull() && !o.LeafProtocolsStaticTableRouteDhcpInterface.IsUnknown() {
		jsonData["dhcp-interface"] = o.LeafProtocolsStaticTableRouteDhcpInterface.ValueString()
	}

	if !o.LeafProtocolsStaticTableRouteDescrIPtion.IsNull() && !o.LeafProtocolsStaticTableRouteDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsStaticTableRouteDescrIPtion.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsStaticTableRouteBlackhole).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticTableRouteBlackhole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["blackhole"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsStaticTableRouteReject).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticTableRouteReject)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["reject"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsStaticTableRoute) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["dhcp-interface"]; ok {
		o.LeafProtocolsStaticTableRouteDhcpInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticTableRouteDhcpInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsStaticTableRouteDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticTableRouteDescrIPtion = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["blackhole"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticTableRouteBlackhole = &ProtocolsStaticTableRouteBlackhole{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticTableRouteBlackhole)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["reject"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticTableRouteReject = &ProtocolsStaticTableRouteReject{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticTableRouteReject)
		if err != nil {
			return err
		}
	}

	return nil
}
