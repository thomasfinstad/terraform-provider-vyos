// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsIsisInterface describes the resource data model.
type ProtocolsIsisInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsIsisInterfaceCircuitType         types.String `tfsdk:"circuit_type" vyos:"circuit-type,omitempty"`
	LeafProtocolsIsisInterfaceHelloPadding        types.String `tfsdk:"hello_padding" vyos:"hello-padding,omitempty"`
	LeafProtocolsIsisInterfaceHelloInterval       types.String `tfsdk:"hello_interval" vyos:"hello-interval,omitempty"`
	LeafProtocolsIsisInterfaceHelloMultIPlier     types.String `tfsdk:"hello_multiplier" vyos:"hello-multiplier,omitempty"`
	LeafProtocolsIsisInterfaceMetric              types.String `tfsdk:"metric" vyos:"metric,omitempty"`
	LeafProtocolsIsisInterfacePassive             types.String `tfsdk:"passive" vyos:"passive,omitempty"`
	LeafProtocolsIsisInterfacePriority            types.String `tfsdk:"priority" vyos:"priority,omitempty"`
	LeafProtocolsIsisInterfacePsnpInterval        types.String `tfsdk:"psnp_interval" vyos:"psnp-interval,omitempty"`
	LeafProtocolsIsisInterfaceNoThreeWayHandshake types.String `tfsdk:"no_three_way_handshake" vyos:"no-three-way-handshake,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeProtocolsIsisInterfaceBfd      *ProtocolsIsisInterfaceBfd      `tfsdk:"bfd" vyos:"bfd,omitempty"`
	NodeProtocolsIsisInterfaceNetwork  *ProtocolsIsisInterfaceNetwork  `tfsdk:"network" vyos:"network,omitempty"`
	NodeProtocolsIsisInterfacePassword *ProtocolsIsisInterfacePassword `tfsdk:"password" vyos:"password,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsIsisInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"isis",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsIsisInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface params

`,
		},

		// LeafNodes

		"circuit_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure circuit type for interface

    |  Format  |  Description  |
    |----------|---------------|
    |  level-1  |  Level-1 only adjacencies are formed  |
    |  level-1-2  |  Level-1-2 adjacencies are formed  |
    |  level-2-only  |  Level-2 only adjacencies are formed  |

`,
		},

		"hello_padding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add padding to IS-IS hello packets

`,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-600  |  Set Hello interval  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:2-100  |  Set multiplier for Hello holding time  |

`,
		},

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set default metric for circuit

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-16777215  |  Default metric value  |

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure passive mode for interface

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set priority for Designated Router election

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-127  |  Priority value  |

`,
		},

		"psnp_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set PSNP interval

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-127  |  PSNP interval in seconds  |

`,
		},

		"no_three_way_handshake": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable three-way handshake

`,
		},

		// Nodes

		"bfd": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"network": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfaceNetwork{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set network type

`,
		},

		"password": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfacePassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure the authentication password for a circuit

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsIsisInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsIsisInterfaceCircuitType.IsNull() && !o.LeafProtocolsIsisInterfaceCircuitType.IsUnknown() {
		jsonData["circuit-type"] = o.LeafProtocolsIsisInterfaceCircuitType.ValueString()
	}

	if !o.LeafProtocolsIsisInterfaceHelloPadding.IsNull() && !o.LeafProtocolsIsisInterfaceHelloPadding.IsUnknown() {
		jsonData["hello-padding"] = o.LeafProtocolsIsisInterfaceHelloPadding.ValueString()
	}

	if !o.LeafProtocolsIsisInterfaceHelloInterval.IsNull() && !o.LeafProtocolsIsisInterfaceHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafProtocolsIsisInterfaceHelloInterval.ValueString()
	}

	if !o.LeafProtocolsIsisInterfaceHelloMultIPlier.IsNull() && !o.LeafProtocolsIsisInterfaceHelloMultIPlier.IsUnknown() {
		jsonData["hello-multiplier"] = o.LeafProtocolsIsisInterfaceHelloMultIPlier.ValueString()
	}

	if !o.LeafProtocolsIsisInterfaceMetric.IsNull() && !o.LeafProtocolsIsisInterfaceMetric.IsUnknown() {
		jsonData["metric"] = o.LeafProtocolsIsisInterfaceMetric.ValueString()
	}

	if !o.LeafProtocolsIsisInterfacePassive.IsNull() && !o.LeafProtocolsIsisInterfacePassive.IsUnknown() {
		jsonData["passive"] = o.LeafProtocolsIsisInterfacePassive.ValueString()
	}

	if !o.LeafProtocolsIsisInterfacePriority.IsNull() && !o.LeafProtocolsIsisInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafProtocolsIsisInterfacePriority.ValueString()
	}

	if !o.LeafProtocolsIsisInterfacePsnpInterval.IsNull() && !o.LeafProtocolsIsisInterfacePsnpInterval.IsUnknown() {
		jsonData["psnp-interval"] = o.LeafProtocolsIsisInterfacePsnpInterval.ValueString()
	}

	if !o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.IsNull() && !o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.IsUnknown() {
		jsonData["no-three-way-handshake"] = o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsIsisInterfaceBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsIsisInterfaceBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsIsisInterfaceNetwork).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsIsisInterfaceNetwork)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["network"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsIsisInterfacePassword).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsIsisInterfacePassword)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["password"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsIsisInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["circuit-type"]; ok {
		o.LeafProtocolsIsisInterfaceCircuitType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceCircuitType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-padding"]; ok {
		o.LeafProtocolsIsisInterfaceHelloPadding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloPadding = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafProtocolsIsisInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-multiplier"]; ok {
		o.LeafProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}

	if value, ok := jsonData["metric"]; ok {
		o.LeafProtocolsIsisInterfaceMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceMetric = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafProtocolsIsisInterfacePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafProtocolsIsisInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["psnp-interval"]; ok {
		o.LeafProtocolsIsisInterfacePsnpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePsnpInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-three-way-handshake"]; ok {
		o.LeafProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsIsisInterfaceBfd = &ProtocolsIsisInterfaceBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsIsisInterfaceBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["network"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsIsisInterfaceNetwork = &ProtocolsIsisInterfaceNetwork{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsIsisInterfaceNetwork)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["password"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsIsisInterfacePassword = &ProtocolsIsisInterfacePassword{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsIsisInterfacePassword)
		if err != nil {
			return err
		}
	}

	return nil
}
