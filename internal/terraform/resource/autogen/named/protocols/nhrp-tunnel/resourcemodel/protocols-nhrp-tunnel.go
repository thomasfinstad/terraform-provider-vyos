// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsNhrpTunnel describes the resource data model.
type ProtocolsNhrpTunnel struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsNhrpTunnelCiscoAuthentication types.String `tfsdk:"cisco_authentication" vyos:"cisco-authentication,omitempty"`
	LeafProtocolsNhrpTunnelHoldingTime         types.String `tfsdk:"holding_time" vyos:"holding-time,omitempty"`
	LeafProtocolsNhrpTunnelMulticast           types.String `tfsdk:"multicast" vyos:"multicast,omitempty"`
	LeafProtocolsNhrpTunnelNonCaching          types.String `tfsdk:"non_caching" vyos:"non-caching,omitempty"`
	LeafProtocolsNhrpTunnelRedirect            types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafProtocolsNhrpTunnelShortcutDestination types.String `tfsdk:"shortcut_destination" vyos:"shortcut-destination,omitempty"`
	LeafProtocolsNhrpTunnelShortcut            types.String `tfsdk:"shortcut" vyos:"shortcut,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsNhrpTunnelDynamicMap     bool `tfsdk:"dynamic_map" vyos:"dynamic-map,child"`
	ExistsTagProtocolsNhrpTunnelMap            bool `tfsdk:"map" vyos:"map,child"`
	ExistsTagProtocolsNhrpTunnelShortcutTarget bool `tfsdk:"shortcut_target" vyos:"shortcut-target,child"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsNhrpTunnel) GetVyosPath() []string {
	return []string{
		"protocols",
		"nhrp",
		"tunnel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsNhrpTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Tunnel for NHRP

    |  Format  |  Description  |
    |----------|---------------|
    |  tunN  |  NHRP tunnel name  |

`,
		},

		// LeafNodes

		"cisco_authentication": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Pass phrase for cisco authentication

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Pass phrase for cisco authentication  |

`,
		},

		"holding_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Holding time in seconds

`,
		},

		"multicast": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set multicast for NHRP

`,
		},

		"non_caching": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `This can be used to reduce memory consumption on big NBMA subnets

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable sending of Cisco style NHRP Traffic Indication packets

`,
		},

		"shortcut_destination": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `This instructs opennhrp to reply with authorative answers on NHRP Resolution Requests destined to addresses in this interface

`,
		},

		"shortcut": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable creation of shortcut routes. A received NHRP Traffic Indication will trigger the resolution and establishment of a shortcut route

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsNhrpTunnel) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsNhrpTunnelCiscoAuthentication.IsNull() && !o.LeafProtocolsNhrpTunnelCiscoAuthentication.IsUnknown() {
		jsonData["cisco-authentication"] = o.LeafProtocolsNhrpTunnelCiscoAuthentication.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelHoldingTime.IsNull() && !o.LeafProtocolsNhrpTunnelHoldingTime.IsUnknown() {
		jsonData["holding-time"] = o.LeafProtocolsNhrpTunnelHoldingTime.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelMulticast.IsNull() && !o.LeafProtocolsNhrpTunnelMulticast.IsUnknown() {
		jsonData["multicast"] = o.LeafProtocolsNhrpTunnelMulticast.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelNonCaching.IsNull() && !o.LeafProtocolsNhrpTunnelNonCaching.IsUnknown() {
		jsonData["non-caching"] = o.LeafProtocolsNhrpTunnelNonCaching.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelRedirect.IsNull() && !o.LeafProtocolsNhrpTunnelRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafProtocolsNhrpTunnelRedirect.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelShortcutDestination.IsNull() && !o.LeafProtocolsNhrpTunnelShortcutDestination.IsUnknown() {
		jsonData["shortcut-destination"] = o.LeafProtocolsNhrpTunnelShortcutDestination.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelShortcut.IsNull() && !o.LeafProtocolsNhrpTunnelShortcut.IsUnknown() {
		jsonData["shortcut"] = o.LeafProtocolsNhrpTunnelShortcut.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsNhrpTunnel) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["cisco-authentication"]; ok {
		o.LeafProtocolsNhrpTunnelCiscoAuthentication = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelCiscoAuthentication = basetypes.NewStringNull()
	}

	if value, ok := jsonData["holding-time"]; ok {
		o.LeafProtocolsNhrpTunnelHoldingTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelHoldingTime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["multicast"]; ok {
		o.LeafProtocolsNhrpTunnelMulticast = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelMulticast = basetypes.NewStringNull()
	}

	if value, ok := jsonData["non-caching"]; ok {
		o.LeafProtocolsNhrpTunnelNonCaching = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelNonCaching = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafProtocolsNhrpTunnelRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shortcut-destination"]; ok {
		o.LeafProtocolsNhrpTunnelShortcutDestination = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelShortcutDestination = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shortcut"]; ok {
		o.LeafProtocolsNhrpTunnelShortcut = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelShortcut = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
