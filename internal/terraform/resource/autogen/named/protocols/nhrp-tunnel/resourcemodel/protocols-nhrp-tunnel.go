// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsNhrpTunnel describes the resource data model.
type ProtocolsNhrpTunnel struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"tunnel_id" vyos:"-,self-id"`

	// LeafNodes
	LeafProtocolsNhrpTunnelCiscoAuthentication types.String `tfsdk:"cisco_authentication" vyos:"cisco-authentication,omitempty"`
	LeafProtocolsNhrpTunnelHoldingTime         types.String `tfsdk:"holding_time" vyos:"holding-time,omitempty"`
	LeafProtocolsNhrpTunnelMulticast           types.String `tfsdk:"multicast" vyos:"multicast,omitempty"`
	LeafProtocolsNhrpTunnelNonCaching          types.Bool   `tfsdk:"non_caching" vyos:"non-caching,omitempty"`
	LeafProtocolsNhrpTunnelRedirect            types.Bool   `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafProtocolsNhrpTunnelShortcutDestination types.Bool   `tfsdk:"shortcut_destination" vyos:"shortcut-destination,omitempty"`
	LeafProtocolsNhrpTunnelShortcut            types.Bool   `tfsdk:"shortcut" vyos:"shortcut,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsNhrpTunnelDynamicMap     bool `tfsdk:"-" vyos:"dynamic-map,child"`
	ExistsTagProtocolsNhrpTunnelMap            bool `tfsdk:"-" vyos:"map,child"`
	ExistsTagProtocolsNhrpTunnelShortcutTarget bool `tfsdk:"-" vyos:"shortcut-target,child"`

	// Nodes
}

// SetID configures the resource ID
func (o *ProtocolsNhrpTunnel) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsNhrpTunnel) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"protocols",

		"nhrp",

		"tunnel",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsNhrpTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"tunnel_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Tunnel for NHRP

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  tunN  &emsp; |  NHRP tunnel name  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"cisco_authentication": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Pass phrase for cisco authentication

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Pass phrase for cisco authentication  |

`,
		},

		"holding_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Holding time in seconds

`,
		},

		"multicast": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set multicast for NHRP

`,
		},

		"non_caching": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `This can be used to reduce memory consumption on big NBMA subnets

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"redirect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable sending of Cisco style NHRP Traffic Indication packets

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"shortcut_destination": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `This instructs opennhrp to reply with authorative answers on NHRP Resolution Requests destined to addresses in this interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"shortcut": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable creation of shortcut routes. A received NHRP Traffic Indication will trigger the resolution and establishment of a shortcut route

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

	}
}
