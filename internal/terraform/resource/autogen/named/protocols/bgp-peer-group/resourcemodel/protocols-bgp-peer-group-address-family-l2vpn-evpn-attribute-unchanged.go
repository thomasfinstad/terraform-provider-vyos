// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchanged describes the resource data model.
type ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchanged struct {
	// LeafNodes
	LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath  types.String `tfsdk:"as_path" vyos:"as-path,omitempty"`
	LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed     types.String `tfsdk:"med" vyos:"med,omitempty"`
	LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop types.String `tfsdk:"next_hop" vyos:"next-hop,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchanged) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"as_path": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Send AS path unchanged

`,
		},

		"med": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Send multi-exit discriminator unchanged

`,
		},

		"next_hop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Send nexthop unchanged

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchanged) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath.IsNull() && !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath.IsUnknown() {
		jsonData["as-path"] = o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed.IsNull() && !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed.IsUnknown() {
		jsonData["med"] = o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop.IsNull() && !o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop.IsUnknown() {
		jsonData["next-hop"] = o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchanged) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["as-path"]; ok {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedAsPath = basetypes.NewStringNull()
	}

	if value, ok := jsonData["med"]; ok {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedMed = basetypes.NewStringNull()
	}

	if value, ok := jsonData["next-hop"]; ok {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpnAttributeUnchangedNextHop = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
