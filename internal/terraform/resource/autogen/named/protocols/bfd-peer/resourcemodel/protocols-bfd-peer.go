// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ProtocolsBfdPeer describes the resource data model.
type ProtocolsBfdPeer struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsBfdPeerProfile  types.String `tfsdk:"profile" vyos:"profile,omitempty"`
	LeafProtocolsBfdPeerEchoMode types.Bool   `tfsdk:"echo_mode" vyos:"echo-mode,omitempty"`
	LeafProtocolsBfdPeerPassive  types.Bool   `tfsdk:"passive" vyos:"passive,omitempty"`
	LeafProtocolsBfdPeerShutdown types.Bool   `tfsdk:"shutdown" vyos:"shutdown,omitempty"`
	LeafProtocolsBfdPeerMultihop types.Bool   `tfsdk:"multihop" vyos:"multihop,omitempty"`
	LeafProtocolsBfdPeerVrf      types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeProtocolsBfdPeerSource   *ProtocolsBfdPeerSource   `tfsdk:"source" vyos:"source,omitempty"`
	NodeProtocolsBfdPeerInterval *ProtocolsBfdPeerInterval `tfsdk:"interval" vyos:"interval,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBfdPeer) GetVyosPath() []string {
	return []string{
		"protocols",

		"bfd",

		"peer",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBfdPeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Configures BFD peer to listen and talk to

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  BFD peer IPv4 address  |
    |  ipv6  |  BFD peer IPv6 address  |

`,
		},

		// LeafNodes

		"profile": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use settings from BFD profile

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  BFD profile name  |

`,
		},

		"echo_mode": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enables the echo transmission mode

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"passive": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Do not attempt to start sessions

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"shutdown": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable this peer

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"multihop": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Allow this BFD peer to not be directly connected

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		// Nodes

		"source": schema.SingleNestedAttribute{
			Attributes: ProtocolsBfdPeerSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Bind listener to specified interface/address, mandatory for IPv6

`,
		},

		"interval": schema.SingleNestedAttribute{
			Attributes: ProtocolsBfdPeerInterval{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure timer intervals

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBfdPeer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBfdPeer) UnmarshalJSON(_ []byte) error {
	return nil
}
