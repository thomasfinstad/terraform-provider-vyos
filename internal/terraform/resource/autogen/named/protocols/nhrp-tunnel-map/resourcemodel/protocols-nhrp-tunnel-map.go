// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsNhrpTunnelMap describes the resource data model.
type ProtocolsNhrpTunnelMap struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDProtocolsNhrpTunnel any `tfsdk:"tunnel" vyos:"tunnel,parent-id"`

	// LeafNodes
	LeafProtocolsNhrpTunnelMapCisco       types.String `tfsdk:"cisco" vyos:"cisco,omitempty"`
	LeafProtocolsNhrpTunnelMapNbmaAddress types.String `tfsdk:"nbma_address" vyos:"nbma-address,omitempty"`
	LeafProtocolsNhrpTunnelMapRegister    types.String `tfsdk:"register" vyos:"register,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsNhrpTunnelMap) GetVyosPath() []string {
	return []string{
		"protocols",
		"nhrp",
		"tunnel",
		"map",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsNhrpTunnelMap) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Set an HUB tunnel address

`,
		},

		// LeafNodes

		"cisco": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `If the statically mapped peer is running Cisco IOS, specify this

`,
		},

		"nbma_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set HUB address (nbma-address - external hub address or fqdn)

`,
		},

		"register": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies that Registration Request should be sent to this peer on startup

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsNhrpTunnelMap) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsNhrpTunnelMapCisco.IsNull() && !o.LeafProtocolsNhrpTunnelMapCisco.IsUnknown() {
		jsonData["cisco"] = o.LeafProtocolsNhrpTunnelMapCisco.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelMapNbmaAddress.IsNull() && !o.LeafProtocolsNhrpTunnelMapNbmaAddress.IsUnknown() {
		jsonData["nbma-address"] = o.LeafProtocolsNhrpTunnelMapNbmaAddress.ValueString()
	}

	if !o.LeafProtocolsNhrpTunnelMapRegister.IsNull() && !o.LeafProtocolsNhrpTunnelMapRegister.IsUnknown() {
		jsonData["register"] = o.LeafProtocolsNhrpTunnelMapRegister.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsNhrpTunnelMap) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["cisco"]; ok {
		o.LeafProtocolsNhrpTunnelMapCisco = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelMapCisco = basetypes.NewStringNull()
	}

	if value, ok := jsonData["nbma-address"]; ok {
		o.LeafProtocolsNhrpTunnelMapNbmaAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelMapNbmaAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["register"]; ok {
		o.LeafProtocolsNhrpTunnelMapRegister = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsNhrpTunnelMapRegister = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
