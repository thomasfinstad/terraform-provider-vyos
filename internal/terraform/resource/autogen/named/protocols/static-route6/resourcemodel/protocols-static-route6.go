// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsStaticRoutesix describes the resource data model.
type ProtocolsStaticRoutesix struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafProtocolsStaticRoutesixDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsStaticRoutesixInterface bool `tfsdk:"interface" vyos:"interface,child"`
	ExistsTagProtocolsStaticRoutesixNextHop   bool `tfsdk:"next_hop" vyos:"next-hop,child"`

	// Nodes
	NodeProtocolsStaticRoutesixBlackhole *ProtocolsStaticRoutesixBlackhole `tfsdk:"blackhole" vyos:"blackhole,omitempty"`
	NodeProtocolsStaticRoutesixReject    *ProtocolsStaticRoutesixReject    `tfsdk:"reject" vyos:"reject,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsStaticRoutesix) GetVyosPath() []string {
	return []string{
		"protocols",
		"static",
		"route6",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticRoutesix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Static IPv6 route

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6net  |  IPv6 static route  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		// Nodes

		"blackhole": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticRoutesixBlackhole{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Silently discard pkts when matched

`,
		},

		"reject": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticRoutesixReject{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Emit an ICMP unreachable when matched

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsStaticRoutesix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsStaticRoutesixDescrIPtion.IsNull() && !o.LeafProtocolsStaticRoutesixDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsStaticRoutesixDescrIPtion.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsStaticRoutesixBlackhole).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticRoutesixBlackhole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["blackhole"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsStaticRoutesixReject).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticRoutesixReject)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["reject"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsStaticRoutesix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsStaticRoutesixDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticRoutesixDescrIPtion = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["blackhole"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticRoutesixBlackhole = &ProtocolsStaticRoutesixBlackhole{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticRoutesixBlackhole)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["reject"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticRoutesixReject = &ProtocolsStaticRoutesixReject{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticRoutesixReject)
		if err != nil {
			return err
		}
	}

	return nil
}
