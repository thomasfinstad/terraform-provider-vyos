// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsBfdProfileInterval describes the resource data model.
type ProtocolsBfdProfileInterval struct {
	// LeafNodes
	LeafProtocolsBfdProfileIntervalReceive      types.String `tfsdk:"receive"`
	LeafProtocolsBfdProfileIntervalTransmit     types.String `tfsdk:"transmit"`
	LeafProtocolsBfdProfileIntervalMultIPlier   types.String `tfsdk:"multiplier"`
	LeafProtocolsBfdProfileIntervalEchoInterval types.String `tfsdk:"echo_interval"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsBfdProfileInterval) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "bfd", "profile", "interval"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafProtocolsBfdProfileIntervalReceive.IsNull() || o.LeafProtocolsBfdProfileIntervalReceive.IsUnknown()) {
		vyosData["receive"] = o.LeafProtocolsBfdProfileIntervalReceive.ValueString()
	}
	if !(o.LeafProtocolsBfdProfileIntervalTransmit.IsNull() || o.LeafProtocolsBfdProfileIntervalTransmit.IsUnknown()) {
		vyosData["transmit"] = o.LeafProtocolsBfdProfileIntervalTransmit.ValueString()
	}
	if !(o.LeafProtocolsBfdProfileIntervalMultIPlier.IsNull() || o.LeafProtocolsBfdProfileIntervalMultIPlier.IsUnknown()) {
		vyosData["multiplier"] = o.LeafProtocolsBfdProfileIntervalMultIPlier.ValueString()
	}
	if !(o.LeafProtocolsBfdProfileIntervalEchoInterval.IsNull() || o.LeafProtocolsBfdProfileIntervalEchoInterval.IsUnknown()) {
		vyosData["echo-interval"] = o.LeafProtocolsBfdProfileIntervalEchoInterval.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsBfdProfileInterval) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "bfd", "profile", "interval"}})

	// Leafs
	if value, ok := vyosData["receive"]; ok {
		o.LeafProtocolsBfdProfileIntervalReceive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileIntervalReceive = basetypes.NewStringNull()
	}
	if value, ok := vyosData["transmit"]; ok {
		o.LeafProtocolsBfdProfileIntervalTransmit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileIntervalTransmit = basetypes.NewStringNull()
	}
	if value, ok := vyosData["multiplier"]; ok {
		o.LeafProtocolsBfdProfileIntervalMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileIntervalMultIPlier = basetypes.NewStringNull()
	}
	if value, ok := vyosData["echo-interval"]; ok {
		o.LeafProtocolsBfdProfileIntervalEchoInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdProfileIntervalEchoInterval = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "bfd", "profile", "interval"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsBfdProfileInterval) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"receive":       types.StringType,
		"transmit":      types.StringType,
		"multiplier":    types.StringType,
		"echo_interval": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBfdProfileInterval) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"receive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval of receiving control packets

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"transmit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval of transmitting control packets

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Multiplier to determine packet loss

|  Format  |  Description  |
|----------|---------------|
|  u32:2-255  |  Remote transmission interval will be multiplied by this value  |

`,

			// Default:          stringdefault.StaticString(`3`),
			Computed: true,
		},

		"echo_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Echo receive transmission interval

|  Format  |  Description  |
|----------|---------------|
|  u32:10-60000  |  The minimal echo receive transmission interval that this system is capable of handling  |

`,
		},

		// TagNodes

		// Nodes

	}
}
