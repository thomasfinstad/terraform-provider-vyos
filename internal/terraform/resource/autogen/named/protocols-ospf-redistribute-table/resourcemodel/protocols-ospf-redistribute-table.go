// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsOspfRedistributeTable describes the resource data model.
type ProtocolsOspfRedistributeTable struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsOspfRedistributeTableMetric     types.String `tfsdk:"metric"`
	LeafProtocolsOspfRedistributeTableMetricType types.String `tfsdk:"metric_type"`
	LeafProtocolsOspfRedistributeTableRouteMap   types.String `tfsdk:"route_map"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsOspfRedistributeTable) GetVyosPath() []string {
	return []string{
		"protocols",
		"ospf",
		"redistribute",
		"table",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsOspfRedistributeTable) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "ospf", "redistribute", "table"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafProtocolsOspfRedistributeTableMetric.IsNull() || o.LeafProtocolsOspfRedistributeTableMetric.IsUnknown()) {
		vyosData["metric"] = o.LeafProtocolsOspfRedistributeTableMetric.ValueString()
	}
	if !(o.LeafProtocolsOspfRedistributeTableMetricType.IsNull() || o.LeafProtocolsOspfRedistributeTableMetricType.IsUnknown()) {
		vyosData["metric-type"] = o.LeafProtocolsOspfRedistributeTableMetricType.ValueString()
	}
	if !(o.LeafProtocolsOspfRedistributeTableRouteMap.IsNull() || o.LeafProtocolsOspfRedistributeTableRouteMap.IsUnknown()) {
		vyosData["route-map"] = o.LeafProtocolsOspfRedistributeTableRouteMap.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsOspfRedistributeTable) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "ospf", "redistribute", "table"}})

	// Leafs
	if value, ok := vyosData["metric"]; ok {
		o.LeafProtocolsOspfRedistributeTableMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfRedistributeTableMetric = basetypes.NewStringNull()
	}
	if value, ok := vyosData["metric-type"]; ok {
		o.LeafProtocolsOspfRedistributeTableMetricType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfRedistributeTableMetricType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["route-map"]; ok {
		o.LeafProtocolsOspfRedistributeTableRouteMap = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsOspfRedistributeTableRouteMap = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "ospf", "redistribute", "table"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsOspfRedistributeTable) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"metric":      types.StringType,
		"metric_type": types.StringType,
		"route_map":   types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsOspfRedistributeTable) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Redistribute non-main Kernel Routing Table

|  Format  |  Description  |
|----------|---------------|
|  u32:1-200  |  Policy route table number  |

`,
		},

		// LeafNodes

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF default metric

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  Default metric  |

`,
		},

		"metric_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF metric type for default routes

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2  |  Set OSPF External Type 1/2 metrics  |

`,

			// Default:          stringdefault.StaticString(`2`),
			Computed: true,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |

`,
		},

		// TagNodes

		// Nodes

	}
}
