// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsBgpPeerGroupAddressFamily describes the resource data model.
type ProtocolsBgpPeerGroupAddressFamily struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast types.Object `tfsdk:"ipv4_unicast"`
	NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast  types.Object `tfsdk:"ipv6_unicast"`
	NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn    types.Object `tfsdk:"l2vpn_evpn"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsBgpPeerGroupAddressFamily) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "bgp", "peer-group", "address-family"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes
	if !(o.NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast.IsNull() || o.NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast.IsUnknown()) {
		var subModel ProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast
		diags.Append(o.NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv4-unicast"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast.IsNull() || o.NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast.IsUnknown()) {
		var subModel ProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast
		diags.Append(o.NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6-unicast"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn.IsNull() || o.NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn.IsUnknown()) {
		var subModel ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn
		diags.Append(o.NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["l2vpn-evpn"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsBgpPeerGroupAddressFamily) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "bgp", "peer-group", "address-family"}})

	// Leafs

	// Tags

	// Nodes
	if value, ok := vyosData["ipv4-unicast"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast = data

	} else {
		o.NodeProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast = basetypes.NewObjectNull(ProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6-unicast"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast = data

	} else {
		o.NodeProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast = basetypes.NewObjectNull(ProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast{}.AttributeTypes())
	}
	if value, ok := vyosData["l2vpn-evpn"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn = data

	} else {
		o.NodeProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn = basetypes.NewObjectNull(ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "bgp", "peer-group", "address-family"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsBgpPeerGroupAddressFamily) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags

		// Nodes
		"ipv4_unicast": types.ObjectType{AttrTypes: ProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast{}.AttributeTypes()},
		"ipv6_unicast": types.ObjectType{AttrTypes: ProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast{}.AttributeTypes()},
		"l2vpn_evpn":   types.ObjectType{AttrTypes: ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBgpPeerGroupAddressFamily) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"ipv4_unicast": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupAddressFamilyIPvfourUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 BGP neighbor parameters

`,
		},

		"ipv6_unicast": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupAddressFamilyIPvsixUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 BGP neighbor parameters

`,
		},

		"l2vpn_evpn": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupAddressFamilyLtwovpnEvpn{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `L2VPN EVPN BGP settings

`,
		},
	}
}
