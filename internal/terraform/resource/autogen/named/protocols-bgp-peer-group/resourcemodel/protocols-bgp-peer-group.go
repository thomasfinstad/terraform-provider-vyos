// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsBgpPeerGroup describes the resource data model.
type ProtocolsBgpPeerGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsBgpPeerGroupDescrIPtion                  types.String `tfsdk:"description" json:"description,omitempty"`
	LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation types.String `tfsdk:"disable_capability_negotiation" json:"disable-capability-negotiation,omitempty"`
	LeafProtocolsBgpPeerGroupDisableConnectedCheck        types.String `tfsdk:"disable_connected_check" json:"disable-connected-check,omitempty"`
	LeafProtocolsBgpPeerGroupEbgpMultihop                 types.String `tfsdk:"ebgp_multihop" json:"ebgp-multihop,omitempty"`
	LeafProtocolsBgpPeerGroupGracefulRestart              types.String `tfsdk:"graceful_restart" json:"graceful-restart,omitempty"`
	LeafProtocolsBgpPeerGroupOverrIDeCapability           types.String `tfsdk:"override_capability" json:"override-capability,omitempty"`
	LeafProtocolsBgpPeerGroupPassive                      types.String `tfsdk:"passive" json:"passive,omitempty"`
	LeafProtocolsBgpPeerGroupPassword                     types.String `tfsdk:"password" json:"password,omitempty"`
	LeafProtocolsBgpPeerGroupRemoteAs                     types.String `tfsdk:"remote_as" json:"remote-as,omitempty"`
	LeafProtocolsBgpPeerGroupShutdown                     types.String `tfsdk:"shutdown" json:"shutdown,omitempty"`
	LeafProtocolsBgpPeerGroupUpdateSource                 types.String `tfsdk:"update_source" json:"update-source,omitempty"`

	// TagNodes
	TagProtocolsBgpPeerGroupLocalAs   *map[string]ProtocolsBgpPeerGroupLocalAs   `tfsdk:"local_as" json:"local-as,omitempty"`
	TagProtocolsBgpPeerGroupLocalRole *map[string]ProtocolsBgpPeerGroupLocalRole `tfsdk:"local_role" json:"local-role,omitempty"`

	// Nodes
	NodeProtocolsBgpPeerGroupAddressFamily *ProtocolsBgpPeerGroupAddressFamily `tfsdk:"address_family" json:"address-family,omitempty"`
	NodeProtocolsBgpPeerGroupBfd           *ProtocolsBgpPeerGroupBfd           `tfsdk:"bfd" json:"bfd,omitempty"`
	NodeProtocolsBgpPeerGroupCapability    *ProtocolsBgpPeerGroupCapability    `tfsdk:"capability" json:"capability,omitempty"`
	NodeProtocolsBgpPeerGroupTTLSecURIty   *ProtocolsBgpPeerGroupTTLSecURIty   `tfsdk:"ttl_security" json:"ttl-security,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBgpPeerGroup) GetVyosPath() []string {
	return []string{
		"protocols",
		"bgp",
		"peer-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBgpPeerGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of peer-group

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_capability_negotiation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable capability negotiation with this neighbor

`,
		},

		"disable_connected_check": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable check to see if eBGP peer address is a connected route

`,
		},

		"ebgp_multihop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow this EBGP neighbor to not be on a directly connected network

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of hops  |

`,
		},

		"graceful_restart": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP graceful restart functionality

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable BGP graceful restart at peer level  |
|  disable  |  Disable BGP graceful restart at peer level  |
|  restart-helper  |  Enable BGP graceful restart helper only functionality  |

`,
		},

		"override_capability": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore capability negotiation with specified neighbor

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not initiate a session with this neighbor

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP MD5 password

`,
		},

		"remote_as": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |

`,
		},

		"shutdown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively shutdown this neighbor

`,
		},

		"update_source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP of routing updates

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of route source  |
|  ipv6  |  IPv6 address of route source  |
|  txt  |  Interface as route source  |

`,
		},

		// TagNodes

		"local_as": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsBgpPeerGroupLocalAs{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Specify alternate ASN for this BGP process

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number (ASN)  |

`,
		},

		"local_role": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsBgpPeerGroupLocalRole{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Local role for BGP neighbor (RFC9234)

|  Format  |  Description  |
|----------|---------------|
|  customer  |  Using Transit  |
|  peer  |  Public/Private Peering  |
|  provider  |  Providing Transit  |
|  rs-client  |  RS Client  |
|  rs-server  |  Route Server  |

`,
		},

		// Nodes

		"address_family": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupAddressFamily{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Address-family parameters

`,
		},

		"bfd": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD) support

`,
		},

		"capability": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupCapability{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertise capabilities to this peer-group

`,
		},

		"ttl_security": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpPeerGroupTTLSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Ttl security mechanism

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBgpPeerGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsBgpPeerGroupDescrIPtion.IsNull() && !o.LeafProtocolsBgpPeerGroupDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsBgpPeerGroupDescrIPtion.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation.IsNull() && !o.LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation.IsUnknown() {
		jsonData["disable-capability-negotiation"] = o.LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupDisableConnectedCheck.IsNull() && !o.LeafProtocolsBgpPeerGroupDisableConnectedCheck.IsUnknown() {
		jsonData["disable-connected-check"] = o.LeafProtocolsBgpPeerGroupDisableConnectedCheck.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupEbgpMultihop.IsNull() && !o.LeafProtocolsBgpPeerGroupEbgpMultihop.IsUnknown() {
		jsonData["ebgp-multihop"] = o.LeafProtocolsBgpPeerGroupEbgpMultihop.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupGracefulRestart.IsNull() && !o.LeafProtocolsBgpPeerGroupGracefulRestart.IsUnknown() {
		jsonData["graceful-restart"] = o.LeafProtocolsBgpPeerGroupGracefulRestart.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupOverrIDeCapability.IsNull() && !o.LeafProtocolsBgpPeerGroupOverrIDeCapability.IsUnknown() {
		jsonData["override-capability"] = o.LeafProtocolsBgpPeerGroupOverrIDeCapability.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupPassive.IsNull() && !o.LeafProtocolsBgpPeerGroupPassive.IsUnknown() {
		jsonData["passive"] = o.LeafProtocolsBgpPeerGroupPassive.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupPassword.IsNull() && !o.LeafProtocolsBgpPeerGroupPassword.IsUnknown() {
		jsonData["password"] = o.LeafProtocolsBgpPeerGroupPassword.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupRemoteAs.IsNull() && !o.LeafProtocolsBgpPeerGroupRemoteAs.IsUnknown() {
		jsonData["remote-as"] = o.LeafProtocolsBgpPeerGroupRemoteAs.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupShutdown.IsNull() && !o.LeafProtocolsBgpPeerGroupShutdown.IsUnknown() {
		jsonData["shutdown"] = o.LeafProtocolsBgpPeerGroupShutdown.ValueString()
	}

	if !o.LeafProtocolsBgpPeerGroupUpdateSource.IsNull() && !o.LeafProtocolsBgpPeerGroupUpdateSource.IsUnknown() {
		jsonData["update-source"] = o.LeafProtocolsBgpPeerGroupUpdateSource.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagProtocolsBgpPeerGroupLocalAs).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsBgpPeerGroupLocalAs)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-as"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsBgpPeerGroupLocalRole).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsBgpPeerGroupLocalRole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-role"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsBgpPeerGroupAddressFamily).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpPeerGroupAddressFamily)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["address-family"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpPeerGroupBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpPeerGroupBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpPeerGroupCapability).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpPeerGroupCapability)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["capability"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpPeerGroupTTLSecURIty).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpPeerGroupTTLSecURIty)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ttl-security"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBgpPeerGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsBgpPeerGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-capability-negotiation"]; ok {
		o.LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupDisableCapabilityNegotiation = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-connected-check"]; ok {
		o.LeafProtocolsBgpPeerGroupDisableConnectedCheck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupDisableConnectedCheck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ebgp-multihop"]; ok {
		o.LeafProtocolsBgpPeerGroupEbgpMultihop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupEbgpMultihop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["graceful-restart"]; ok {
		o.LeafProtocolsBgpPeerGroupGracefulRestart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupGracefulRestart = basetypes.NewStringNull()
	}

	if value, ok := jsonData["override-capability"]; ok {
		o.LeafProtocolsBgpPeerGroupOverrIDeCapability = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupOverrIDeCapability = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafProtocolsBgpPeerGroupPassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupPassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafProtocolsBgpPeerGroupPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-as"]; ok {
		o.LeafProtocolsBgpPeerGroupRemoteAs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupRemoteAs = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shutdown"]; ok {
		o.LeafProtocolsBgpPeerGroupShutdown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupShutdown = basetypes.NewStringNull()
	}

	if value, ok := jsonData["update-source"]; ok {
		o.LeafProtocolsBgpPeerGroupUpdateSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpPeerGroupUpdateSource = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["local-as"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsBgpPeerGroupLocalAs = &map[string]ProtocolsBgpPeerGroupLocalAs{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsBgpPeerGroupLocalAs)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["local-role"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsBgpPeerGroupLocalRole = &map[string]ProtocolsBgpPeerGroupLocalRole{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsBgpPeerGroupLocalRole)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["address-family"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpPeerGroupAddressFamily = &ProtocolsBgpPeerGroupAddressFamily{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpPeerGroupAddressFamily)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpPeerGroupBfd = &ProtocolsBgpPeerGroupBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpPeerGroupBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["capability"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpPeerGroupCapability = &ProtocolsBgpPeerGroupCapability{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpPeerGroupCapability)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ttl-security"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpPeerGroupTTLSecURIty = &ProtocolsBgpPeerGroupTTLSecURIty{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpPeerGroupTTLSecURIty)
		if err != nil {
			return err
		}
	}

	return nil
}
