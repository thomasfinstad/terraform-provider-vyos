// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyShaperClass describes the resource data model.
type QosPolicyShaperClass struct {
	// LeafNodes
	LeafQosPolicyShaperClassDescrIPtion  types.String `tfsdk:"description"`
	LeafQosPolicyShaperClassBandwIDth    types.String `tfsdk:"bandwidth"`
	LeafQosPolicyShaperClassBurst        types.String `tfsdk:"burst"`
	LeafQosPolicyShaperClassCeiling      types.String `tfsdk:"ceiling"`
	LeafQosPolicyShaperClassCodelQuantum types.String `tfsdk:"codel_quantum"`
	LeafQosPolicyShaperClassFlows        types.String `tfsdk:"flows"`
	LeafQosPolicyShaperClassInterval     types.String `tfsdk:"interval"`
	LeafQosPolicyShaperClassPriority     types.String `tfsdk:"priority"`
	LeafQosPolicyShaperClassQueueLimit   types.String `tfsdk:"queue_limit"`
	LeafQosPolicyShaperClassQueueType    types.String `tfsdk:"queue_type"`
	LeafQosPolicyShaperClassSetDscp      types.String `tfsdk:"set_dscp"`
	LeafQosPolicyShaperClassTarget       types.String `tfsdk:"target"`

	// TagNodes
	TagQosPolicyShaperClassMatch types.Map `tfsdk:"match"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyShaperClass) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "shaper", "class"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyShaperClassDescrIPtion.IsNull() || o.LeafQosPolicyShaperClassDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafQosPolicyShaperClassDescrIPtion.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassBandwIDth.IsNull() || o.LeafQosPolicyShaperClassBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafQosPolicyShaperClassBandwIDth.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassBurst.IsNull() || o.LeafQosPolicyShaperClassBurst.IsUnknown()) {
		vyosData["burst"] = o.LeafQosPolicyShaperClassBurst.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassCeiling.IsNull() || o.LeafQosPolicyShaperClassCeiling.IsUnknown()) {
		vyosData["ceiling"] = o.LeafQosPolicyShaperClassCeiling.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassCodelQuantum.IsNull() || o.LeafQosPolicyShaperClassCodelQuantum.IsUnknown()) {
		vyosData["codel-quantum"] = o.LeafQosPolicyShaperClassCodelQuantum.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassFlows.IsNull() || o.LeafQosPolicyShaperClassFlows.IsUnknown()) {
		vyosData["flows"] = o.LeafQosPolicyShaperClassFlows.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassInterval.IsNull() || o.LeafQosPolicyShaperClassInterval.IsUnknown()) {
		vyosData["interval"] = o.LeafQosPolicyShaperClassInterval.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassPriority.IsNull() || o.LeafQosPolicyShaperClassPriority.IsUnknown()) {
		vyosData["priority"] = o.LeafQosPolicyShaperClassPriority.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassQueueLimit.IsNull() || o.LeafQosPolicyShaperClassQueueLimit.IsUnknown()) {
		vyosData["queue-limit"] = o.LeafQosPolicyShaperClassQueueLimit.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassQueueType.IsNull() || o.LeafQosPolicyShaperClassQueueType.IsUnknown()) {
		vyosData["queue-type"] = o.LeafQosPolicyShaperClassQueueType.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassSetDscp.IsNull() || o.LeafQosPolicyShaperClassSetDscp.IsUnknown()) {
		vyosData["set-dscp"] = o.LeafQosPolicyShaperClassSetDscp.ValueString()
	}
	if !(o.LeafQosPolicyShaperClassTarget.IsNull() || o.LeafQosPolicyShaperClassTarget.IsUnknown()) {
		vyosData["target"] = o.LeafQosPolicyShaperClassTarget.ValueString()
	}

	// Tags
	if !(o.TagQosPolicyShaperClassMatch.IsNull() || o.TagQosPolicyShaperClassMatch.IsUnknown()) {
		subModel := make(map[string]QosPolicyShaperClassMatch)
		diags.Append(o.TagQosPolicyShaperClassMatch.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["match"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyShaperClass) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "shaper", "class"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafQosPolicyShaperClassDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafQosPolicyShaperClassBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["burst"]; ok {
		o.LeafQosPolicyShaperClassBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassBurst = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ceiling"]; ok {
		o.LeafQosPolicyShaperClassCeiling = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassCeiling = basetypes.NewStringNull()
	}
	if value, ok := vyosData["codel-quantum"]; ok {
		o.LeafQosPolicyShaperClassCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassCodelQuantum = basetypes.NewStringNull()
	}
	if value, ok := vyosData["flows"]; ok {
		o.LeafQosPolicyShaperClassFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassFlows = basetypes.NewStringNull()
	}
	if value, ok := vyosData["interval"]; ok {
		o.LeafQosPolicyShaperClassInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafQosPolicyShaperClassPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassPriority = basetypes.NewStringNull()
	}
	if value, ok := vyosData["queue-limit"]; ok {
		o.LeafQosPolicyShaperClassQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassQueueLimit = basetypes.NewStringNull()
	}
	if value, ok := vyosData["queue-type"]; ok {
		o.LeafQosPolicyShaperClassQueueType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassQueueType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["set-dscp"]; ok {
		o.LeafQosPolicyShaperClassSetDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassSetDscp = basetypes.NewStringNull()
	}
	if value, ok := vyosData["target"]; ok {
		o.LeafQosPolicyShaperClassTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassTarget = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["match"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: QosPolicyShaperClassMatch{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagQosPolicyShaperClassMatch = data
	} else {
		o.TagQosPolicyShaperClassMatch = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "shaper", "class"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyShaperClass) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":   types.StringType,
		"bandwidth":     types.StringType,
		"burst":         types.StringType,
		"ceiling":       types.StringType,
		"codel_quantum": types.StringType,
		"flows":         types.StringType,
		"interval":      types.StringType,
		"priority":      types.StringType,
		"queue_limit":   types.StringType,
		"queue_type":    types.StringType,
		"set_dscp":      types.StringType,
		"target":        types.StringType,

		// Tags
		"match": types.MapType{ElemType: types.ObjectType{AttrTypes: QosPolicyShaperClassMatch{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperClass) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  auto  |  Bandwidth matches interface speed  |
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%%  |  Percentage of interface link speed  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst size for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bytes  |
|  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |

`,

			// Default:          stringdefault.StaticString(`15k`),
			Computed: true,
		},

		"ceiling": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bandwidth limit for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Rate in kbit (kilobit per second)  |
|  <number>%%  |  Percentage of overall rate  |
|  <number>bit  |  bit(1), kbit(10^3), mbit(10^6), gbit, tbit  |
|  <number>ibit  |  kibit(1024), mibit(1024^2), gibit(1024^3), tbit(1024^4)  |
|  <number>ibps  |  kibps(1024&8), mibps(1024^2&8), gibps, tibps - Byte/sec  |
|  <number>bps  |  bps(8),kbps(8&10^3),mbps(8&10^6), gbps, tbps - Byte/sec  |

`,
		},

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for rule evaluation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-20  |  Priority for match rule evaluation  |

`,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"queue_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |

`,

			// Default:          stringdefault.StaticString(`fq-codel`),
			Computed: true,
		},

		"set_dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Change the Differentiated Services (DiffServ) field in the IP header

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Priority order for bandwidth pool  |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |

`,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		"match": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: QosPolicyShaperClassMatch{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Class matching rule name

`,
		},

		// Nodes

	}
}
