// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyShaperClass describes the resource data model.
type QosPolicyShaperClass struct {
	// LeafNodes
	LeafQosPolicyShaperClassDescrIPtion  types.String `tfsdk:"description" json:"description,omitempty"`
	LeafQosPolicyShaperClassBandwIDth    types.String `tfsdk:"bandwidth" json:"bandwidth,omitempty"`
	LeafQosPolicyShaperClassBurst        types.String `tfsdk:"burst" json:"burst,omitempty"`
	LeafQosPolicyShaperClassCeiling      types.String `tfsdk:"ceiling" json:"ceiling,omitempty"`
	LeafQosPolicyShaperClassCodelQuantum types.String `tfsdk:"codel_quantum" json:"codel-quantum,omitempty"`
	LeafQosPolicyShaperClassFlows        types.String `tfsdk:"flows" json:"flows,omitempty"`
	LeafQosPolicyShaperClassInterval     types.String `tfsdk:"interval" json:"interval,omitempty"`
	LeafQosPolicyShaperClassPriority     types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafQosPolicyShaperClassQueueLimit   types.String `tfsdk:"queue_limit" json:"queue-limit,omitempty"`
	LeafQosPolicyShaperClassQueueType    types.String `tfsdk:"queue_type" json:"queue-type,omitempty"`
	LeafQosPolicyShaperClassSetDscp      types.String `tfsdk:"set_dscp" json:"set-dscp,omitempty"`
	LeafQosPolicyShaperClassTarget       types.String `tfsdk:"target" json:"target,omitempty"`

	// TagNodes
	TagQosPolicyShaperClassMatch *map[string]QosPolicyShaperClassMatch `tfsdk:"match" json:"match,omitempty"`

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperClass) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  auto  |  Bandwidth matches interface speed  |
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%%  |  Percentage of interface link speed  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst size for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bytes  |
|  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |

`,

			// Default:          stringdefault.StaticString(`15k`),
			Computed: true,
		},

		"ceiling": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bandwidth limit for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Rate in kbit (kilobit per second)  |
|  <number>%%  |  Percentage of overall rate  |
|  <number>bit  |  bit(1), kbit(10^3), mbit(10^6), gbit, tbit  |
|  <number>ibit  |  kibit(1024), mibit(1024^2), gibit(1024^3), tbit(1024^4)  |
|  <number>ibps  |  kibps(1024&8), mibps(1024^2&8), gibps, tibps - Byte/sec  |
|  <number>bps  |  bps(8),kbps(8&10^3),mbps(8&10^6), gbps, tbps - Byte/sec  |

`,
		},

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for rule evaluation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-20  |  Priority for match rule evaluation  |

`,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"queue_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |

`,

			// Default:          stringdefault.StaticString(`fq-codel`),
			Computed: true,
		},

		"set_dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Change the Differentiated Services (DiffServ) field in the IP header

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Priority order for bandwidth pool  |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |

`,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		"match": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: QosPolicyShaperClassMatch{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Class matching rule name

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyShaperClass) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyShaperClassDescrIPtion.IsNull() && !o.LeafQosPolicyShaperClassDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyShaperClassDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyShaperClassBandwIDth.IsNull() && !o.LeafQosPolicyShaperClassBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafQosPolicyShaperClassBandwIDth.ValueString()
	}

	if !o.LeafQosPolicyShaperClassBurst.IsNull() && !o.LeafQosPolicyShaperClassBurst.IsUnknown() {
		jsonData["burst"] = o.LeafQosPolicyShaperClassBurst.ValueString()
	}

	if !o.LeafQosPolicyShaperClassCeiling.IsNull() && !o.LeafQosPolicyShaperClassCeiling.IsUnknown() {
		jsonData["ceiling"] = o.LeafQosPolicyShaperClassCeiling.ValueString()
	}

	if !o.LeafQosPolicyShaperClassCodelQuantum.IsNull() && !o.LeafQosPolicyShaperClassCodelQuantum.IsUnknown() {
		jsonData["codel-quantum"] = o.LeafQosPolicyShaperClassCodelQuantum.ValueString()
	}

	if !o.LeafQosPolicyShaperClassFlows.IsNull() && !o.LeafQosPolicyShaperClassFlows.IsUnknown() {
		jsonData["flows"] = o.LeafQosPolicyShaperClassFlows.ValueString()
	}

	if !o.LeafQosPolicyShaperClassInterval.IsNull() && !o.LeafQosPolicyShaperClassInterval.IsUnknown() {
		jsonData["interval"] = o.LeafQosPolicyShaperClassInterval.ValueString()
	}

	if !o.LeafQosPolicyShaperClassPriority.IsNull() && !o.LeafQosPolicyShaperClassPriority.IsUnknown() {
		jsonData["priority"] = o.LeafQosPolicyShaperClassPriority.ValueString()
	}

	if !o.LeafQosPolicyShaperClassQueueLimit.IsNull() && !o.LeafQosPolicyShaperClassQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyShaperClassQueueLimit.ValueString()
	}

	if !o.LeafQosPolicyShaperClassQueueType.IsNull() && !o.LeafQosPolicyShaperClassQueueType.IsUnknown() {
		jsonData["queue-type"] = o.LeafQosPolicyShaperClassQueueType.ValueString()
	}

	if !o.LeafQosPolicyShaperClassSetDscp.IsNull() && !o.LeafQosPolicyShaperClassSetDscp.IsUnknown() {
		jsonData["set-dscp"] = o.LeafQosPolicyShaperClassSetDscp.ValueString()
	}

	if !o.LeafQosPolicyShaperClassTarget.IsNull() && !o.LeafQosPolicyShaperClassTarget.IsUnknown() {
		jsonData["target"] = o.LeafQosPolicyShaperClassTarget.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagQosPolicyShaperClassMatch).IsZero() {
		subJSONStr, err := json.Marshal(o.TagQosPolicyShaperClassMatch)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["match"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyShaperClass) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyShaperClassDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafQosPolicyShaperClassBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["burst"]; ok {
		o.LeafQosPolicyShaperClassBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassBurst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ceiling"]; ok {
		o.LeafQosPolicyShaperClassCeiling = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassCeiling = basetypes.NewStringNull()
	}

	if value, ok := jsonData["codel-quantum"]; ok {
		o.LeafQosPolicyShaperClassCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassCodelQuantum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["flows"]; ok {
		o.LeafQosPolicyShaperClassFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassFlows = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafQosPolicyShaperClassInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafQosPolicyShaperClassPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassPriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyShaperClassQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassQueueLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-type"]; ok {
		o.LeafQosPolicyShaperClassQueueType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassQueueType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["set-dscp"]; ok {
		o.LeafQosPolicyShaperClassSetDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassSetDscp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["target"]; ok {
		o.LeafQosPolicyShaperClassTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperClassTarget = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["match"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagQosPolicyShaperClassMatch = &map[string]QosPolicyShaperClassMatch{}

		err = json.Unmarshal(subJSONStr, o.TagQosPolicyShaperClassMatch)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
