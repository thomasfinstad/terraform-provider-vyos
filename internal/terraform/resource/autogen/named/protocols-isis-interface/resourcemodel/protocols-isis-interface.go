// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsIsisInterface describes the resource data model.
type ProtocolsIsisInterface struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsIsisInterfaceCircuitType         types.String `tfsdk:"circuit_type"`
	LeafProtocolsIsisInterfaceHelloPadding        types.String `tfsdk:"hello_padding"`
	LeafProtocolsIsisInterfaceHelloInterval       types.String `tfsdk:"hello_interval"`
	LeafProtocolsIsisInterfaceHelloMultIPlier     types.String `tfsdk:"hello_multiplier"`
	LeafProtocolsIsisInterfaceMetric              types.String `tfsdk:"metric"`
	LeafProtocolsIsisInterfacePassive             types.String `tfsdk:"passive"`
	LeafProtocolsIsisInterfacePriority            types.String `tfsdk:"priority"`
	LeafProtocolsIsisInterfacePsnpInterval        types.String `tfsdk:"psnp_interval"`
	LeafProtocolsIsisInterfaceNoThreeWayHandshake types.String `tfsdk:"no_three_way_handshake"`

	// TagNodes

	// Nodes
	NodeProtocolsIsisInterfaceBfd      types.Object `tfsdk:"bfd"`
	NodeProtocolsIsisInterfaceNetwork  types.Object `tfsdk:"network"`
	NodeProtocolsIsisInterfacePassword types.Object `tfsdk:"password"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsIsisInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"isis",
		"interface",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsIsisInterface) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "isis", "interface"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafProtocolsIsisInterfaceCircuitType.IsNull() || o.LeafProtocolsIsisInterfaceCircuitType.IsUnknown()) {
		vyosData["circuit-type"] = o.LeafProtocolsIsisInterfaceCircuitType.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfaceHelloPadding.IsNull() || o.LeafProtocolsIsisInterfaceHelloPadding.IsUnknown()) {
		vyosData["hello-padding"] = o.LeafProtocolsIsisInterfaceHelloPadding.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfaceHelloInterval.IsNull() || o.LeafProtocolsIsisInterfaceHelloInterval.IsUnknown()) {
		vyosData["hello-interval"] = o.LeafProtocolsIsisInterfaceHelloInterval.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfaceHelloMultIPlier.IsNull() || o.LeafProtocolsIsisInterfaceHelloMultIPlier.IsUnknown()) {
		vyosData["hello-multiplier"] = o.LeafProtocolsIsisInterfaceHelloMultIPlier.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfaceMetric.IsNull() || o.LeafProtocolsIsisInterfaceMetric.IsUnknown()) {
		vyosData["metric"] = o.LeafProtocolsIsisInterfaceMetric.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfacePassive.IsNull() || o.LeafProtocolsIsisInterfacePassive.IsUnknown()) {
		vyosData["passive"] = o.LeafProtocolsIsisInterfacePassive.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfacePriority.IsNull() || o.LeafProtocolsIsisInterfacePriority.IsUnknown()) {
		vyosData["priority"] = o.LeafProtocolsIsisInterfacePriority.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfacePsnpInterval.IsNull() || o.LeafProtocolsIsisInterfacePsnpInterval.IsUnknown()) {
		vyosData["psnp-interval"] = o.LeafProtocolsIsisInterfacePsnpInterval.ValueString()
	}
	if !(o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.IsNull() || o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.IsUnknown()) {
		vyosData["no-three-way-handshake"] = o.LeafProtocolsIsisInterfaceNoThreeWayHandshake.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeProtocolsIsisInterfaceBfd.IsNull() || o.NodeProtocolsIsisInterfaceBfd.IsUnknown()) {
		var subModel ProtocolsIsisInterfaceBfd
		diags.Append(o.NodeProtocolsIsisInterfaceBfd.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["bfd"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsIsisInterfaceNetwork.IsNull() || o.NodeProtocolsIsisInterfaceNetwork.IsUnknown()) {
		var subModel ProtocolsIsisInterfaceNetwork
		diags.Append(o.NodeProtocolsIsisInterfaceNetwork.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["network"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsIsisInterfacePassword.IsNull() || o.NodeProtocolsIsisInterfacePassword.IsUnknown()) {
		var subModel ProtocolsIsisInterfacePassword
		diags.Append(o.NodeProtocolsIsisInterfacePassword.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["password"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsIsisInterface) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "isis", "interface"}})

	// Leafs
	if value, ok := vyosData["circuit-type"]; ok {
		o.LeafProtocolsIsisInterfaceCircuitType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceCircuitType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-padding"]; ok {
		o.LeafProtocolsIsisInterfaceHelloPadding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloPadding = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-interval"]; ok {
		o.LeafProtocolsIsisInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-multiplier"]; ok {
		o.LeafProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}
	if value, ok := vyosData["metric"]; ok {
		o.LeafProtocolsIsisInterfaceMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceMetric = basetypes.NewStringNull()
	}
	if value, ok := vyosData["passive"]; ok {
		o.LeafProtocolsIsisInterfacePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePassive = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafProtocolsIsisInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePriority = basetypes.NewStringNull()
	}
	if value, ok := vyosData["psnp-interval"]; ok {
		o.LeafProtocolsIsisInterfacePsnpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfacePsnpInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-three-way-handshake"]; ok {
		o.LeafProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["bfd"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsIsisInterfaceBfd{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsIsisInterfaceBfd = data

	} else {
		o.NodeProtocolsIsisInterfaceBfd = basetypes.NewObjectNull(ProtocolsIsisInterfaceBfd{}.AttributeTypes())
	}
	if value, ok := vyosData["network"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsIsisInterfaceNetwork{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsIsisInterfaceNetwork = data

	} else {
		o.NodeProtocolsIsisInterfaceNetwork = basetypes.NewObjectNull(ProtocolsIsisInterfaceNetwork{}.AttributeTypes())
	}
	if value, ok := vyosData["password"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsIsisInterfacePassword{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsIsisInterfacePassword = data

	} else {
		o.NodeProtocolsIsisInterfacePassword = basetypes.NewObjectNull(ProtocolsIsisInterfacePassword{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "isis", "interface"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsIsisInterface) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"circuit_type":           types.StringType,
		"hello_padding":          types.StringType,
		"hello_interval":         types.StringType,
		"hello_multiplier":       types.StringType,
		"metric":                 types.StringType,
		"passive":                types.StringType,
		"priority":               types.StringType,
		"psnp_interval":          types.StringType,
		"no_three_way_handshake": types.StringType,

		// Tags

		// Nodes
		"bfd":      types.ObjectType{AttrTypes: ProtocolsIsisInterfaceBfd{}.AttributeTypes()},
		"network":  types.ObjectType{AttrTypes: ProtocolsIsisInterfaceNetwork{}.AttributeTypes()},
		"password": types.ObjectType{AttrTypes: ProtocolsIsisInterfacePassword{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsIsisInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface params

`,
		},

		// LeafNodes

		"circuit_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure circuit type for interface

|  Format  |  Description  |
|----------|---------------|
|  level-1  |  Level-1 only adjacencies are formed  |
|  level-1-2  |  Level-1-2 adjacencies are formed  |
|  level-2-only  |  Level-2 only adjacencies are formed  |

`,
		},

		"hello_padding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add padding to IS-IS hello packets

`,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Set Hello interval  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-100  |  Set multiplier for Hello holding time  |

`,
		},

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure passive mode for interface

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set priority for Designated Router election

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  Priority value  |

`,
		},

		"psnp_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set PSNP interval

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  PSNP interval in seconds  |

`,
		},

		"no_three_way_handshake": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable three-way handshake

`,
		},

		// TagNodes

		// Nodes

		"bfd": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"network": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfaceNetwork{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set network type

`,
		},

		"password": schema.SingleNestedAttribute{
			Attributes: ProtocolsIsisInterfacePassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure the authentication password for a circuit

`,
		},
	}
}
