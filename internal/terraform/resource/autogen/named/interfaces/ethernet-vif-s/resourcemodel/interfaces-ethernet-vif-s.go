// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernetVifS describes the resource data model.
type InterfacesEthernetVifS struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDInterfacesEthernet any `tfsdk:"ethernet" vyos:"ethernet,parent-id"`

	// LeafNodes
	LeafInterfacesEthernetVifSDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesEthernetVifSAddress           types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesEthernetVifSDisableLinkDetect types.String `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesEthernetVifSDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesEthernetVifSProtocol          types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafInterfacesEthernetVifSMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesEthernetVifSMtu               types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesEthernetVifSRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesEthernetVifSVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesEthernetVifSVifC bool `tfsdk:"vif_c" vyos:"vif-c,child"`

	// Nodes
	NodeInterfacesEthernetVifSDhcpOptions     *InterfacesEthernetVifSDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesEthernetVifSDhcpvsixOptions *InterfacesEthernetVifSDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesEthernetVifSIP              *InterfacesEthernetVifSIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesEthernetVifSIPvsix          *InterfacesEthernetVifSIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesEthernetVifSMirror          *InterfacesEthernetVifSMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesEthernetVifS) GetVyosPath() []string {
	return []string{
		"interfaces",
		"ethernet",
		"vif-s",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVifS) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |
    |  dhcp  |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

    |  Format  |  Description  |
    |----------|---------------|
    |  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
    |  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |

`,

			// Default:          stringdefault.StaticString(`802.1ad`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernetVifS) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetVifSDescrIPtion.IsNull() && !o.LeafInterfacesEthernetVifSDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesEthernetVifSDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSAddress.IsNull() && !o.LeafInterfacesEthernetVifSAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesEthernetVifSAddress.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSDisableLinkDetect.IsNull() && !o.LeafInterfacesEthernetVifSDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesEthernetVifSDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSDisable.IsNull() && !o.LeafInterfacesEthernetVifSDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesEthernetVifSDisable.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSProtocol.IsNull() && !o.LeafInterfacesEthernetVifSProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafInterfacesEthernetVifSProtocol.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSMac.IsNull() && !o.LeafInterfacesEthernetVifSMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesEthernetVifSMac.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSMtu.IsNull() && !o.LeafInterfacesEthernetVifSMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesEthernetVifSMtu.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSRedirect.IsNull() && !o.LeafInterfacesEthernetVifSRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesEthernetVifSRedirect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVrf.IsNull() && !o.LeafInterfacesEthernetVifSVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesEthernetVifSVrf.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernetVifS) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesEthernetVifSDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesEthernetVifSAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetVifSDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesEthernetVifSDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafInterfacesEthernetVifSProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesEthernetVifSMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesEthernetVifSMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesEthernetVifSRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesEthernetVifSVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVrf = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSDhcpOptions = &InterfacesEthernetVifSDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSDhcpvsixOptions = &InterfacesEthernetVifSDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSIP = &InterfacesEthernetVifSIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSIPvsix = &InterfacesEthernetVifSIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSMirror = &InterfacesEthernetVifSMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
