// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesOpenvpnServerClient describes the resource data model.
type InterfacesOpenvpnServerClient struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDInterfacesOpenvpn any `tfsdk:"openvpn" vyos:"openvpn,parent-id"`

	// LeafNodes
	LeafInterfacesOpenvpnServerClientDisable   types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesOpenvpnServerClientIP        types.String `tfsdk:"ip" vyos:"ip,omitempty"`
	LeafInterfacesOpenvpnServerClientPushRoute types.String `tfsdk:"push_route" vyos:"push-route,omitempty"`
	LeafInterfacesOpenvpnServerClientSubnet    types.String `tfsdk:"subnet" vyos:"subnet,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesOpenvpnServerClient) GetVyosPath() []string {
	return []string{
		"interfaces",
		"openvpn",
		"server",
		"client",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnServerClient) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Client-specific settings

    |  Format  |  Description  |
    |----------|---------------|
    |  name  |  Client common-name in the certificate  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of the client

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Client IPv4 address  |
    |  ipv6  |  Client IPv6 address  |

`,
		},

		"push_route": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Route to be pushed to the client

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network and prefix length  |
    |  ipv6net  |  IPv6 network and prefix length  |

`,
		},

		"subnet": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Subnet belonging to the client (iroute)

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network and prefix length belonging to the client  |
    |  ipv6net  |  IPv6 network and prefix length belonging to the client  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpnServerClient) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesOpenvpnServerClientDisable.IsNull() && !o.LeafInterfacesOpenvpnServerClientDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesOpenvpnServerClientDisable.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientIP.IsNull() && !o.LeafInterfacesOpenvpnServerClientIP.IsUnknown() {
		jsonData["ip"] = o.LeafInterfacesOpenvpnServerClientIP.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientPushRoute.IsNull() && !o.LeafInterfacesOpenvpnServerClientPushRoute.IsUnknown() {
		jsonData["push-route"] = o.LeafInterfacesOpenvpnServerClientPushRoute.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientSubnet.IsNull() && !o.LeafInterfacesOpenvpnServerClientSubnet.IsUnknown() {
		jsonData["subnet"] = o.LeafInterfacesOpenvpnServerClientSubnet.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpnServerClient) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesOpenvpnServerClientDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ip"]; ok {
		o.LeafInterfacesOpenvpnServerClientIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientIP = basetypes.NewStringNull()
	}

	if value, ok := jsonData["push-route"]; ok {
		o.LeafInterfacesOpenvpnServerClientPushRoute = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientPushRoute = basetypes.NewStringNull()
	}

	if value, ok := jsonData["subnet"]; ok {
		o.LeafInterfacesOpenvpnServerClientSubnet = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientSubnet = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
