// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesOpenvpnServerClient describes the resource data model.
type InterfacesOpenvpnServerClient struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDInterfacesOpenvpn types.String `tfsdk:"openvpn" vyos:"openvpn_identifier,parent-id"`

	// LeafNodes
	LeafInterfacesOpenvpnServerClientDisable   types.Bool `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesOpenvpnServerClientIP        types.List `tfsdk:"ip" vyos:"ip,omitempty"`
	LeafInterfacesOpenvpnServerClientPushRoute types.List `tfsdk:"push_route" vyos:"push-route,omitempty"`
	LeafInterfacesOpenvpnServerClientSubnet    types.List `tfsdk:"subnet" vyos:"subnet,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesOpenvpnServerClient) GetVyosPath() []string {
	return []string{
		"interfaces",

		"openvpn",
		o.ParentIDInterfacesOpenvpn.ValueString(),

		"server",

		"client",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnServerClient) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Client-specific settings

    |  Format  |  Description  |
    |----------|---------------|
    |  name  |  Client common-name in the certificate  |

`,
		},

		"openvpn_identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `OpenVPN Tunnel Interface

    |  Format  |  Description  |
    |----------|---------------|
    |  vtunN  |  OpenVPN interface name  |

`,
		},

		// LeafNodes

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"ip": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of the client

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Client IPv4 address  |
    |  ipv6  |  Client IPv6 address  |

`,
		},

		"push_route": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Route to be pushed to the client

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network and prefix length  |
    |  ipv6net  |  IPv6 network and prefix length  |

`,
		},

		"subnet": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Subnet belonging to the client (iroute)

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 network and prefix length belonging to the client  |
    |  ipv6net  |  IPv6 network and prefix length belonging to the client  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpnServerClient) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpnServerClient) UnmarshalJSON(_ []byte) error {
	return nil
}
