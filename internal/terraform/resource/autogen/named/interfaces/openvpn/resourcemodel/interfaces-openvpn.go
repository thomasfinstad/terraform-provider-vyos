// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesOpenvpn describes the resource data model.
type InterfacesOpenvpn struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"openvpn_id" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesOpenvpnDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesOpenvpnDeviceType        types.String `tfsdk:"device_type" vyos:"device-type,omitempty"`
	LeafInterfacesOpenvpnDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesOpenvpnHash              types.String `tfsdk:"hash" vyos:"hash,omitempty"`
	LeafInterfacesOpenvpnLocalHost         types.String `tfsdk:"local_host" vyos:"local-host,omitempty"`
	LeafInterfacesOpenvpnLocalPort         types.Number `tfsdk:"local_port" vyos:"local-port,omitempty"`
	LeafInterfacesOpenvpnMode              types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafInterfacesOpenvpnOpenvpnOption     types.List   `tfsdk:"openvpn_option" vyos:"openvpn-option,omitempty"`
	LeafInterfacesOpenvpnPersistentTunnel  types.Bool   `tfsdk:"persistent_tunnel" vyos:"persistent-tunnel,omitempty"`
	LeafInterfacesOpenvpnProtocol          types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafInterfacesOpenvpnRemoteAddress     types.List   `tfsdk:"remote_address" vyos:"remote-address,omitempty"`
	LeafInterfacesOpenvpnRemoteHost        types.List   `tfsdk:"remote_host" vyos:"remote-host,omitempty"`
	LeafInterfacesOpenvpnRemotePort        types.Number `tfsdk:"remote_port" vyos:"remote-port,omitempty"`
	LeafInterfacesOpenvpnSharedSecretKey   types.String `tfsdk:"shared_secret_key" vyos:"shared-secret-key,omitempty"`
	LeafInterfacesOpenvpnUseLzoCompression types.Bool   `tfsdk:"use_lzo_compression" vyos:"use-lzo-compression,omitempty"`
	LeafInterfacesOpenvpnRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesOpenvpnVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesOpenvpnLocalAddress bool `tfsdk:"-" vyos:"local-address,ignore,child"`

	// Nodes
	NodeInterfacesOpenvpnAuthentication      *InterfacesOpenvpnAuthentication      `tfsdk:"authentication" vyos:"authentication,omitempty"`
	NodeInterfacesOpenvpnEncryption          *InterfacesOpenvpnEncryption          `tfsdk:"encryption" vyos:"encryption,omitempty"`
	NodeInterfacesOpenvpnIP                  *InterfacesOpenvpnIP                  `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesOpenvpnIPvsix              *InterfacesOpenvpnIPvsix              `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesOpenvpnMirror              *InterfacesOpenvpnMirror              `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesOpenvpnKeepAlive           *InterfacesOpenvpnKeepAlive           `tfsdk:"keep_alive" vyos:"keep-alive,omitempty"`
	NodeInterfacesOpenvpnReplaceDefaultRoute *InterfacesOpenvpnReplaceDefaultRoute `tfsdk:"replace_default_route" vyos:"replace-default-route,omitempty"`
	NodeInterfacesOpenvpnServer              *InterfacesOpenvpnServer              `tfsdk:"server" vyos:"server,omitempty"`
	NodeInterfacesOpenvpnTLS                 *InterfacesOpenvpnTLS                 `tfsdk:"tls" vyos:"tls,omitempty"`
}

// SetID configures the resource ID
func (o *InterfacesOpenvpn) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesOpenvpn) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"interfaces",

		"openvpn",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpn) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"openvpn_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `OpenVPN Tunnel Interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  vtunN  &emsp; |  OpenVPN interface name  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"device_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN interface device-type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  tun  &emsp; |  TUN device, required for OSI layer 3  |
    |  tap  &emsp; |  TAP device, required for OSI layer 2  |

`,

			// Default:          stringdefault.StaticString(`tun`),
			Computed: true,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"hash": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hashing Algorithm

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  md5  &emsp; |  MD5 algorithm  |
    |  sha1  &emsp; |  SHA-1 algorithm  |
    |  sha256  &emsp; |  SHA-256 algorithm  |
    |  sha384  &emsp; |  SHA-384 algorithm  |
    |  sha512  &emsp; |  SHA-512 algorithm  |

`,
		},

		"local_host": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local IP address to accept connections (all if not set)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Local IPv4 address  |
    |  ipv6  &emsp; |  Local IPv6 address  |

`,
		},

		"local_port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Local port number to accept connections

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN mode of operation

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  site-to-site  &emsp; |  Site-to-site mode  |
    |  client  &emsp; |  Client in client-server mode  |
    |  server  &emsp; |  Server in client-server mode  |

`,
		},

		"openvpn_option": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Additional OpenVPN options. You must use the syntax of openvpn.conf in this text-field. Using this without proper knowledge may result in a crashed OpenVPN server. Check system log to look for errors.

`,
		},

		"persistent_tunnel": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Do not close and reopen interface (TUN/TAP device) on client restarts

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN communication protocol

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  udp  &emsp; |  UDP  |
    |  tcp-passive  &emsp; |  TCP and accepts connections passively  |
    |  tcp-active  &emsp; |  TCP and initiates connections actively  |

`,

			// Default:          stringdefault.StaticString(`udp`),
			Computed: true,
		},

		"remote_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of remote end of tunnel

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Remote end IPv4 address  |
    |  ipv6  &emsp; |  Remote end IPv6 address  |

`,
		},

		"remote_host": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Remote host to connect to (dynamic if not set)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address of remote host  |
    |  ipv6  &emsp; |  IPv6 address of remote host  |
    |  txt  &emsp; |  Hostname of remote host  |

`,
		},

		"remote_port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Remote port number to connect to

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,
		},

		"shared_secret_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Secret key shared with remote end of tunnel

`,
		},

		"use_lzo_compression": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Use fast LZO compression on this TUN/TAP interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication settings

`,
		},

		"encryption": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnEncryption{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Data Encryption settings

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"keep_alive": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnKeepAlive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Keepalive helper options

`,
		},

		"replace_default_route": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnReplaceDefaultRoute{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `OpenVPN tunnel to be used as the default route

`,
		},

		"server": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnServer{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Server-mode options

`,
		},

		"tls": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnTLS{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Transport Layer Security (TLS) options

`,
		},
	}
}
