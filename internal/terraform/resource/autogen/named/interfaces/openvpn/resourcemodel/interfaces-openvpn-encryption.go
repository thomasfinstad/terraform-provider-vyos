// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesOpenvpnEncryption describes the resource data model.
type InterfacesOpenvpnEncryption struct {
	// LeafNodes
	LeafInterfacesOpenvpnEncryptionCIPher     types.String `tfsdk:"cipher" vyos:"cipher,omitempty"`
	LeafInterfacesOpenvpnEncryptionNcpCIPhers types.List   `tfsdk:"ncp_ciphers" vyos:"ncp-ciphers,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnEncryption) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Standard Data Encryption Algorithm

    |  Format  |  Description  |
    |----------|---------------|
    |  none  |  Disable encryption  |
    |  des  |  DES algorithm  |
    |  3des  |  DES algorithm with triple encryption  |
    |  bf128  |  Blowfish algorithm with 128-bit key  |
    |  bf256  |  Blowfish algorithm with 256-bit key  |
    |  aes128  |  AES algorithm with 128-bit key CBC  |
    |  aes128gcm  |  AES algorithm with 128-bit key GCM  |
    |  aes192  |  AES algorithm with 192-bit key CBC  |
    |  aes192gcm  |  AES algorithm with 192-bit key GCM  |
    |  aes256  |  AES algorithm with 256-bit key CBC  |
    |  aes256gcm  |  AES algorithm with 256-bit key GCM  |

`,
		},

		"ncp_ciphers": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Cipher negotiation list for use in server or client mode

    |  Format  |  Description  |
    |----------|---------------|
    |  none  |  Disable encryption  |
    |  des  |  DES algorithm  |
    |  3des  |  DES algorithm with triple encryption  |
    |  aes128  |  AES algorithm with 128-bit key CBC  |
    |  aes128gcm  |  AES algorithm with 128-bit key GCM  |
    |  aes192  |  AES algorithm with 192-bit key CBC  |
    |  aes192gcm  |  AES algorithm with 192-bit key GCM  |
    |  aes256  |  AES algorithm with 256-bit key CBC  |
    |  aes256gcm  |  AES algorithm with 256-bit key GCM  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpnEncryption) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpnEncryption) UnmarshalJSON(_ []byte) error {
	return nil
}
