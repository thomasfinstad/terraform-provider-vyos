// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWirelessVif describes the resource data model.
type InterfacesWirelessVif struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDInterfacesWireless any `tfsdk:"wireless" vyos:"wireless,parent-id"`

	// LeafNodes
	LeafInterfacesWirelessVifDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesWirelessVifAddress           types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesWirelessVifDisableLinkDetect types.String `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesWirelessVifDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesWirelessVifEgressQos         types.String `tfsdk:"egress_qos" vyos:"egress-qos,omitempty"`
	LeafInterfacesWirelessVifIngressQos        types.String `tfsdk:"ingress_qos" vyos:"ingress-qos,omitempty"`
	LeafInterfacesWirelessVifMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesWirelessVifMtu               types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesWirelessVifRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesWirelessVifVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesWirelessVifDhcpOptions     *InterfacesWirelessVifDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesWirelessVifDhcpvsixOptions *InterfacesWirelessVifDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesWirelessVifIP              *InterfacesWirelessVifIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesWirelessVifIPvsix          *InterfacesWirelessVifIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesWirelessVifMirror          *InterfacesWirelessVifMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWirelessVif) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireless",
		"vif",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessVif) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |
    |  dhcp  |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"egress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN egress QoS

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"ingress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN ingress QoS

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessVif) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessVifDescrIPtion.IsNull() && !o.LeafInterfacesWirelessVifDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesWirelessVifDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesWirelessVifAddress.IsNull() && !o.LeafInterfacesWirelessVifAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesWirelessVifAddress.ValueString()
	}

	if !o.LeafInterfacesWirelessVifDisableLinkDetect.IsNull() && !o.LeafInterfacesWirelessVifDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesWirelessVifDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesWirelessVifDisable.IsNull() && !o.LeafInterfacesWirelessVifDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesWirelessVifDisable.ValueString()
	}

	if !o.LeafInterfacesWirelessVifEgressQos.IsNull() && !o.LeafInterfacesWirelessVifEgressQos.IsUnknown() {
		jsonData["egress-qos"] = o.LeafInterfacesWirelessVifEgressQos.ValueString()
	}

	if !o.LeafInterfacesWirelessVifIngressQos.IsNull() && !o.LeafInterfacesWirelessVifIngressQos.IsUnknown() {
		jsonData["ingress-qos"] = o.LeafInterfacesWirelessVifIngressQos.ValueString()
	}

	if !o.LeafInterfacesWirelessVifMac.IsNull() && !o.LeafInterfacesWirelessVifMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesWirelessVifMac.ValueString()
	}

	if !o.LeafInterfacesWirelessVifMtu.IsNull() && !o.LeafInterfacesWirelessVifMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesWirelessVifMtu.ValueString()
	}

	if !o.LeafInterfacesWirelessVifRedirect.IsNull() && !o.LeafInterfacesWirelessVifRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesWirelessVifRedirect.ValueString()
	}

	if !o.LeafInterfacesWirelessVifVrf.IsNull() && !o.LeafInterfacesWirelessVifVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesWirelessVifVrf.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessVif) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesWirelessVifDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesWirelessVifAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesWirelessVifDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesWirelessVifDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["egress-qos"]; ok {
		o.LeafInterfacesWirelessVifEgressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifEgressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ingress-qos"]; ok {
		o.LeafInterfacesWirelessVifIngressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifIngressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesWirelessVifMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesWirelessVifMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesWirelessVifRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesWirelessVifVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifVrf = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifDhcpOptions = &InterfacesWirelessVifDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifDhcpvsixOptions = &InterfacesWirelessVifDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifIP = &InterfacesWirelessVifIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifIPvsix = &InterfacesWirelessVifIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifMirror = &InterfacesWirelessVifMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
