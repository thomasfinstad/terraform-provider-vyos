// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesBrIDge describes the resource data model.
type InterfacesBrIDge struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"bridge_id" vyos:"-,self-id"`

	// LeafNodes
	LeafInterfacesBrIDgeAddress           types.List   `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesBrIDgeAging             types.Number `tfsdk:"aging" vyos:"aging,omitempty"`
	LeafInterfacesBrIDgeDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesBrIDgeDisableLinkDetect types.Bool   `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesBrIDgeDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesBrIDgeVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesBrIDgeMtu               types.Number `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesBrIDgeForwardingDelay   types.Number `tfsdk:"forwarding_delay" vyos:"forwarding-delay,omitempty"`
	LeafInterfacesBrIDgeHelloTime         types.Number `tfsdk:"hello_time" vyos:"hello-time,omitempty"`
	LeafInterfacesBrIDgeMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesBrIDgeEnableVlan        types.Bool   `tfsdk:"enable_vlan" vyos:"enable-vlan,omitempty"`
	LeafInterfacesBrIDgeMaxAge            types.Number `tfsdk:"max_age" vyos:"max-age,omitempty"`
	LeafInterfacesBrIDgePriority          types.Number `tfsdk:"priority" vyos:"priority,omitempty"`
	LeafInterfacesBrIDgeStp               types.Bool   `tfsdk:"stp" vyos:"stp,omitempty"`
	LeafInterfacesBrIDgeRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesBrIDgeVif bool `tfsdk:"-" vyos:"vif,ignore,child"`

	// Nodes
	NodeInterfacesBrIDgeDhcpOptions     *InterfacesBrIDgeDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesBrIDgeDhcpvsixOptions *InterfacesBrIDgeDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesBrIDgeIgmp            *InterfacesBrIDgeIgmp            `tfsdk:"igmp" vyos:"igmp,omitempty"`
	NodeInterfacesBrIDgeIP              *InterfacesBrIDgeIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesBrIDgeIPvsix          *InterfacesBrIDgeIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesBrIDgeMirror          *InterfacesBrIDgeMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesBrIDgeMember          *InterfacesBrIDgeMember          `tfsdk:"member" vyos:"member,omitempty"`
}

// SetID configures the resource ID
func (o *InterfacesBrIDge) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesBrIDge) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"interfaces",

		"bridge",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBrIDge) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"bridge_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Bridge Interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  brN  &emsp; |  Bridge interface name  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 address and prefix length  |
    |  ipv6net  &emsp; |  IPv6 address and prefix length  |
    |  dhcp  &emsp; |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  &emsp; |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"aging": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `MAC address aging interval

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0  &emsp; |  Disable MAC address learning (always flood)  |
    |  number: 10-1000000  &emsp; |  MAC address aging time in seconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable_link_detect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},

		"mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 68-16000  &emsp; |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"forwarding_delay": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Forwarding delay

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-200  &emsp; |  Spanning Tree Protocol forwarding delay in seconds  |

`,

			// Default:          stringdefault.StaticString(`14`),
			Computed: true,
		},

		"hello_time": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Hello packet advertisement interval

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-10  &emsp; |  Spanning Tree Protocol hello advertisement interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`2`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  macaddr  &emsp; |  Hardware (MAC) address  |

`,
		},

		"enable_vlan": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable VLAN aware bridge

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"max_age": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Interval at which neighbor bridges are removed

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-40  &emsp; |  Bridge maximum aging time in seconds  |

`,

			// Default:          stringdefault.StaticString(`20`),
			Computed: true,
		},

		"priority": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Priority for this bridge

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-65535  &emsp; |  Bridge priority  |

`,

			// Default:          stringdefault.StaticString(`32768`),
			Computed: true,
		},

		"stp": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable spanning tree protocol

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Destination interface name  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"igmp": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIgmp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) settings

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"member": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeMember{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Bridge member interfaces

`,
		},
	}
}
