// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesBonding describes the resource data model.
type InterfacesBonding struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesBondingAddress           types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesBondingDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesBondingDisableLinkDetect types.String `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesBondingDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesBondingVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesBondingHashPolicy        types.String `tfsdk:"hash_policy" vyos:"hash-policy,omitempty"`
	LeafInterfacesBondingMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesBondingMiiMonInterval    types.String `tfsdk:"mii_mon_interval" vyos:"mii-mon-interval,omitempty"`
	LeafInterfacesBondingMinLinks          types.String `tfsdk:"min_links" vyos:"min-links,omitempty"`
	LeafInterfacesBondingLacpRate          types.String `tfsdk:"lacp_rate" vyos:"lacp-rate,omitempty"`
	LeafInterfacesBondingMode              types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafInterfacesBondingMtu               types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesBondingPrimary           types.String `tfsdk:"primary" vyos:"primary,omitempty"`
	LeafInterfacesBondingRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesBondingXdp               types.String `tfsdk:"xdp" vyos:"xdp,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesBondingVifS bool `tfsdk:"vif_s" vyos:"vif-s,child"`
	ExistsTagInterfacesBondingVif  bool `tfsdk:"vif" vyos:"vif,child"`

	// Nodes
	NodeInterfacesBondingArpMonitor      *InterfacesBondingArpMonitor      `tfsdk:"arp_monitor" vyos:"arp-monitor,omitempty"`
	NodeInterfacesBondingDhcpOptions     *InterfacesBondingDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesBondingDhcpvsixOptions *InterfacesBondingDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesBondingMirror          *InterfacesBondingMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesBondingIP              *InterfacesBondingIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesBondingIPvsix          *InterfacesBondingIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesBondingMember          *InterfacesBondingMember          `tfsdk:"member" vyos:"member,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesBonding) GetVyosPath() []string {
	return []string{
		"interfaces",
		"bonding",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBonding) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Bonding Interface/Link Aggregation

    |  Format  |  Description  |
    |----------|---------------|
    |  bondN  |  Bonding interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |
    |  dhcp  |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		"hash_policy": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bonding transmit hash policy

    |  Format  |  Description  |
    |----------|---------------|
    |  layer2  |  use MAC addresses to generate the hash  |
    |  layer2+3  |  combine MAC address and IP address to make hash  |
    |  layer3+4  |  combine IP address and port to make hash  |
    |  encap2+3  |  combine encapsulated MAC address and IP address to make hash  |
    |  encap3+4  |  combine encapsulated IP address and port to make hash  |

`,

			// Default:          stringdefault.StaticString(`layer2`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mii_mon_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies the MII link monitoring frequency in milliseconds

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Disable MII link monitoring  |
    |  u32:50-1000  |  MII link monitoring frequency in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"min_links": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum number of member interfaces required up before enabling bond

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-16  |  Minimum number of member interfaces required up before enabling bond  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"lacp_rate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rate in which we will ask our link partner to transmit LACPDU packets

    |  Format  |  Description  |
    |----------|---------------|
    |  slow  |  Request partner to transmit LACPDUs every 30 seconds  |
    |  fast  |  Request partner to transmit LACPDUs every 1 second  |

`,

			// Default:          stringdefault.StaticString(`slow`),
			Computed: true,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bonding mode

    |  Format  |  Description  |
    |----------|---------------|
    |  802.3ad  |  IEEE 802.3ad Dynamic link aggregation  |
    |  active-backup  |  Fault tolerant: only one slave in the bond is active  |
    |  broadcast  |  Fault tolerant: transmits everything on all slave interfaces  |
    |  round-robin  |  Load balance: transmit packets in sequential order  |
    |  transmit-load-balance  |  Load balance: adapts based on transmit load and speed  |
    |  adaptive-load-balance  |  Load balance: adapts based on transmit and receive plus ARP  |
    |  xor-hash  |  Distribute based on MAC address  |

`,

			// Default:          stringdefault.StaticString(`802.3ad`),
			Computed: true,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"primary": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Primary device interface

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Interface name  |

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"xdp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable eXpress Data Path

`,
		},

		// Nodes

		"arp_monitor": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingArpMonitor{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `ARP link monitoring parameters

`,
		},

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"member": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingMember{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Bridge member interfaces

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesBonding) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesBondingAddress.IsNull() && !o.LeafInterfacesBondingAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesBondingAddress.ValueString()
	}

	if !o.LeafInterfacesBondingDescrIPtion.IsNull() && !o.LeafInterfacesBondingDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesBondingDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesBondingDisableLinkDetect.IsNull() && !o.LeafInterfacesBondingDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesBondingDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesBondingDisable.IsNull() && !o.LeafInterfacesBondingDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesBondingDisable.ValueString()
	}

	if !o.LeafInterfacesBondingVrf.IsNull() && !o.LeafInterfacesBondingVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesBondingVrf.ValueString()
	}

	if !o.LeafInterfacesBondingHashPolicy.IsNull() && !o.LeafInterfacesBondingHashPolicy.IsUnknown() {
		jsonData["hash-policy"] = o.LeafInterfacesBondingHashPolicy.ValueString()
	}

	if !o.LeafInterfacesBondingMac.IsNull() && !o.LeafInterfacesBondingMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesBondingMac.ValueString()
	}

	if !o.LeafInterfacesBondingMiiMonInterval.IsNull() && !o.LeafInterfacesBondingMiiMonInterval.IsUnknown() {
		jsonData["mii-mon-interval"] = o.LeafInterfacesBondingMiiMonInterval.ValueString()
	}

	if !o.LeafInterfacesBondingMinLinks.IsNull() && !o.LeafInterfacesBondingMinLinks.IsUnknown() {
		jsonData["min-links"] = o.LeafInterfacesBondingMinLinks.ValueString()
	}

	if !o.LeafInterfacesBondingLacpRate.IsNull() && !o.LeafInterfacesBondingLacpRate.IsUnknown() {
		jsonData["lacp-rate"] = o.LeafInterfacesBondingLacpRate.ValueString()
	}

	if !o.LeafInterfacesBondingMode.IsNull() && !o.LeafInterfacesBondingMode.IsUnknown() {
		jsonData["mode"] = o.LeafInterfacesBondingMode.ValueString()
	}

	if !o.LeafInterfacesBondingMtu.IsNull() && !o.LeafInterfacesBondingMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesBondingMtu.ValueString()
	}

	if !o.LeafInterfacesBondingPrimary.IsNull() && !o.LeafInterfacesBondingPrimary.IsUnknown() {
		jsonData["primary"] = o.LeafInterfacesBondingPrimary.ValueString()
	}

	if !o.LeafInterfacesBondingRedirect.IsNull() && !o.LeafInterfacesBondingRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesBondingRedirect.ValueString()
	}

	if !o.LeafInterfacesBondingXdp.IsNull() && !o.LeafInterfacesBondingXdp.IsUnknown() {
		jsonData["xdp"] = o.LeafInterfacesBondingXdp.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesBondingArpMonitor).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingArpMonitor)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["arp-monitor"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesBondingMember).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBondingMember)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["member"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesBonding) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesBondingAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesBondingDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesBondingDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesBondingDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesBondingVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingVrf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hash-policy"]; ok {
		o.LeafInterfacesBondingHashPolicy = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingHashPolicy = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesBondingMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mii-mon-interval"]; ok {
		o.LeafInterfacesBondingMiiMonInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingMiiMonInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["min-links"]; ok {
		o.LeafInterfacesBondingMinLinks = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingMinLinks = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lacp-rate"]; ok {
		o.LeafInterfacesBondingLacpRate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingLacpRate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafInterfacesBondingMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesBondingMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["primary"]; ok {
		o.LeafInterfacesBondingPrimary = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingPrimary = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesBondingRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["xdp"]; ok {
		o.LeafInterfacesBondingXdp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingXdp = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["arp-monitor"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingArpMonitor = &InterfacesBondingArpMonitor{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingArpMonitor)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingDhcpOptions = &InterfacesBondingDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingDhcpvsixOptions = &InterfacesBondingDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingMirror = &InterfacesBondingMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingIP = &InterfacesBondingIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingIPvsix = &InterfacesBondingIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["member"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBondingMember = &InterfacesBondingMember{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBondingMember)
		if err != nil {
			return err
		}
	}

	return nil
}
