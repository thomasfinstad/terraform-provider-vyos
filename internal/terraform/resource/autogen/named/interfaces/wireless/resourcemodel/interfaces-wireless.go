// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWireless describes the resource data model.
type InterfacesWireless struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"wireless_id" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesWirelessAddress                types.List   `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesWirelessChannel                types.String `tfsdk:"channel" vyos:"channel,omitempty"`
	LeafInterfacesWirelessCountryCode            types.String `tfsdk:"country_code" vyos:"country-code,omitempty"`
	LeafInterfacesWirelessDescrIPtion            types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesWirelessDisableBroadcastSsID   types.Bool   `tfsdk:"disable_broadcast_ssid" vyos:"disable-broadcast-ssid,omitempty"`
	LeafInterfacesWirelessDisableLinkDetect      types.Bool   `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesWirelessDisable                types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesWirelessVrf                    types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesWirelessExpungeFailingStations types.Bool   `tfsdk:"expunge_failing_stations" vyos:"expunge-failing-stations,omitempty"`
	LeafInterfacesWirelessHwID                   types.String `tfsdk:"hw_id" vyos:"hw-id,omitempty"`
	LeafInterfacesWirelessIsolateStations        types.Bool   `tfsdk:"isolate_stations" vyos:"isolate-stations,omitempty"`
	LeafInterfacesWirelessMac                    types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesWirelessMaxStations            types.Number `tfsdk:"max_stations" vyos:"max-stations,omitempty"`
	LeafInterfacesWirelessMgmtFrameProtection    types.String `tfsdk:"mgmt_frame_protection" vyos:"mgmt-frame-protection,omitempty"`
	LeafInterfacesWirelessMode                   types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafInterfacesWirelessPhysicalDevice         types.String `tfsdk:"physical_device" vyos:"physical-device,omitempty"`
	LeafInterfacesWirelessReduceTransmitPower    types.Number `tfsdk:"reduce_transmit_power" vyos:"reduce-transmit-power,omitempty"`
	LeafInterfacesWirelessSsID                   types.String `tfsdk:"ssid" vyos:"ssid,omitempty"`
	LeafInterfacesWirelessType                   types.String `tfsdk:"type" vyos:"type,omitempty"`
	LeafInterfacesWirelessRedirect               types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesWirelessVif  bool `tfsdk:"-" vyos:"vif,child"`
	ExistsTagInterfacesWirelessVifS bool `tfsdk:"-" vyos:"vif-s,child"`

	// Nodes
	NodeInterfacesWirelessCapabilities    *InterfacesWirelessCapabilities    `tfsdk:"capabilities" vyos:"capabilities,omitempty"`
	NodeInterfacesWirelessDhcpOptions     *InterfacesWirelessDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesWirelessDhcpvsixOptions *InterfacesWirelessDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesWirelessIP              *InterfacesWirelessIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesWirelessIPvsix          *InterfacesWirelessIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesWirelessMirror          *InterfacesWirelessMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesWirelessSecURIty        *InterfacesWirelessSecURIty        `tfsdk:"security" vyos:"security,omitempty"`
}

// SetID configures the resource ID
func (o *InterfacesWireless) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWireless) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"interfaces",

		"wireless",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireless) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"wireless_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Wireless (WiFi/WLAN) Network Interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  wlanN  &emsp; |  Wireless (WiFi/WLAN) interface name  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 address and prefix length  |
    |  ipv6net  &emsp; |  IPv6 address and prefix length  |
    |  dhcp  &emsp; |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  &emsp; |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"channel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio channel

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  0  &emsp; |  Automatic Channel Selection (ACS)  |
    |  number: 1-14  &emsp; |  2.4Ghz (802.11 b/g/n) Channel  |
    |  number: 34-173  &emsp; |  5Ghz (802.11 a/h/j/n/ac) Channel  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"country_code": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Indicate country in which device is operating

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  ISO/IEC 3166-1 Country Code  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable_broadcast_ssid": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable broadcast of SSID from access-point

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable_link_detect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},

		"expunge_failing_stations": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disassociate stations based on excessive transmission failures

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Associate Ethernet Interface with given Media Access Control (MAC) address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  macaddr  &emsp; |  Hardware (MAC) address  |

`,
		},

		"isolate_stations": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Isolate stations on the AP so they cannot see each other

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  macaddr  &emsp; |  Hardware (MAC) address  |

`,
		},

		"max_stations": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum number of wireless radio stations. Excess stations will be rejected upon authentication request.

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-2007  &emsp; |  Number of allowed stations  |

`,
		},

		"mgmt_frame_protection": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Management Frame Protection (MFP) according to IEEE 802.11w

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  disabled  &emsp; |  no MFP  |
    |  optional  &emsp; |  MFP optional  |
    |  required  &emsp; |  MFP enforced  |

`,

			// Default:          stringdefault.StaticString(`disabled`),
			Computed: true,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio mode

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  a  &emsp; |  802.11a - 54 Mbits/sec  |
    |  b  &emsp; |  802.11b - 11 Mbits/sec  |
    |  g  &emsp; |  802.11g - 54 Mbits/sec  |
    |  n  &emsp; |  802.11n - 600 Mbits/sec  |
    |  ac  &emsp; |  802.11ac - 1300 Mbits/sec  |

`,

			// Default:          stringdefault.StaticString(`g`),
			Computed: true,
		},

		"physical_device": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless physical device

`,

			// Default:          stringdefault.StaticString(`phy0`),
			Computed: true,
		},

		"reduce_transmit_power": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Transmission power reduction in dBm

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-255  &emsp; |  TX power reduction in dBm  |

`,
		},

		"ssid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless access-point service set identifier (SSID)

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless device type for this interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  access-point  &emsp; |  Access-point forwards packets between other nodes  |
    |  station  &emsp; |  Connects to another access point  |
    |  monitor  &emsp; |  Passively monitor all packets on the frequency/channel  |

`,

			// Default:          stringdefault.StaticString(`monitor`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Destination interface name  |

`,
		},

		// Nodes

		"capabilities": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilities{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `HT and VHT capabilities for your card

`,
		},

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"security": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Wireless security settings

`,
		},
	}
}
