// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesWirelessSecURItyWpa describes the resource data model.
type InterfacesWirelessSecURItyWpa struct {
	// LeafNodes
	LeafInterfacesWirelessSecURItyWpaCIPher      types.List   `tfsdk:"cipher" vyos:"cipher,omitempty"`
	LeafInterfacesWirelessSecURItyWpaGroupCIPher types.List   `tfsdk:"group_cipher" vyos:"group-cipher,omitempty"`
	LeafInterfacesWirelessSecURItyWpaMode        types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafInterfacesWirelessSecURItyWpaPassphrase  types.String `tfsdk:"passphrase" vyos:"passphrase,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesWirelessSecURItyWpaRadius *InterfacesWirelessSecURItyWpaRadius `tfsdk:"radius" vyos:"radius,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessSecURItyWpa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Cipher suite for WPA unicast packets

    |  Format  |  Description  |
    |----------|---------------|
    |  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
    |  GCMP  |  AES in Galois/counter mode with 128-bit key  |
    |  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
    |  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
    |  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"group_cipher": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Cipher suite for WPA multicast and broadcast packets

    |  Format  |  Description  |
    |----------|---------------|
    |  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
    |  GCMP  |  AES in Galois/counter mode with 128-bit key  |
    |  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
    |  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
    |  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA mode

    |  Format  |  Description  |
    |----------|---------------|
    |  wpa  |  WPA (IEEE 802.11i/D3.0)  |
    |  wpa2  |  WPA2 (full IEEE 802.11i/RSN)  |
    |  wpa+wpa2  |  Allow both WPA and WPA2  |

`,

			// Default:          stringdefault.StaticString(`wpa+wpa2`),
			Computed: true,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA personal shared pass phrase. If you are using special characters in the WPA passphrase then single quotes are required.

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Passphrase of at least 8 but not more than 63 printable characters  |

`,
		},

		// Nodes

		"radius": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURItyWpaRadius{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RADIUS based user authentication

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessSecURItyWpa) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessSecURItyWpa) UnmarshalJSON(_ []byte) error {
	return nil
}
