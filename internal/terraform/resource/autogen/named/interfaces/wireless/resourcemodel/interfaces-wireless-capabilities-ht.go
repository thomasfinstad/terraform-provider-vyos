// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWirelessCapabilitiesHt describes the resource data model.
type InterfacesWirelessCapabilitiesHt struct {
	// LeafNodes
	LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable types.String `tfsdk:"40mhz_incapable" vyos:"40mhz-incapable,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtAutoPowersave        types.String `tfsdk:"auto_powersave" vyos:"auto-powersave,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth      types.String `tfsdk:"channel_set_width" vyos:"channel-set-width,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck      types.String `tfsdk:"delayed_block_ack" vyos:"delayed-block-ack,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero      types.String `tfsdk:"dsss_cck_40" vyos:"dsss-cck-40,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtGreenfield           types.String `tfsdk:"greenfield" vyos:"greenfield,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtLdpc                 types.String `tfsdk:"ldpc" vyos:"ldpc,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtLsigProtection       types.String `tfsdk:"lsig_protection" vyos:"lsig-protection,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtMaxAmsdu             types.String `tfsdk:"max_amsdu" vyos:"max-amsdu,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtShortGi              types.String `tfsdk:"short_gi" vyos:"short-gi,omitempty"`
	LeafInterfacesWirelessCapabilitiesHtSmps                 types.String `tfsdk:"smps" vyos:"smps,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesWirelessCapabilitiesHtStbc *InterfacesWirelessCapabilitiesHtStbc `tfsdk:"stbc" vyos:"stbc,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessCapabilitiesHt) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"40mhz_incapable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `40MHz intolerance, use 20MHz only!

`,
		},

		"auto_powersave": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable WMM-PS unscheduled automatic power aave delivery [U-APSD]

`,
		},

		"channel_set_width": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Supported channel set width

    |  Format  |  Description  |
    |----------|---------------|
    |  ht20  |  Supported channel set width both 20 MHz only  |
    |  ht40+  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel above primary channel  |
    |  ht40-  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel below primary channel  |

`,
		},

		"delayed_block_ack": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable HT-delayed block ack

`,
		},

		"dsss_cck_40": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable DSSS_CCK-40

`,
		},

		"greenfield": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable HT-greenfield

`,
		},

		"ldpc": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable LDPC coding capability

`,
		},

		"lsig_protection": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable L-SIG TXOP protection capability

`,
		},

		"max_amsdu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set maximum A-MSDU length

    |  Format  |  Description  |
    |----------|---------------|
    |  3839  |  Set maximum A-MSDU length to 3839 octets  |
    |  7935  |  Set maximum A-MSDU length to 7935 octets  |

`,
		},

		"short_gi": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Short GI capabilities

    |  Format  |  Description  |
    |----------|---------------|
    |  20  |  Short GI for 20 MHz  |
    |  40  |  Short GI for 40 MHz  |

`,
		},

		"smps": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Spatial Multiplexing Power Save (SMPS) settings

    |  Format  |  Description  |
    |----------|---------------|
    |  static  |  STATIC Spatial Multiplexing (SM) Power Save  |
    |  dynamic  |  DYNAMIC Spatial Multiplexing (SM) Power Save  |

`,
		},

		// Nodes

		"stbc": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesHtStbc{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Support for sending and receiving PPDU using STBC (Space Time Block Coding)

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessCapabilitiesHt) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.IsUnknown() {
		jsonData["40mhz-incapable"] = o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.IsUnknown() {
		jsonData["auto-powersave"] = o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.IsUnknown() {
		jsonData["channel-set-width"] = o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.IsUnknown() {
		jsonData["delayed-block-ack"] = o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.IsUnknown() {
		jsonData["dsss-cck-40"] = o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtGreenfield.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtGreenfield.IsUnknown() {
		jsonData["greenfield"] = o.LeafInterfacesWirelessCapabilitiesHtGreenfield.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtLdpc.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtLdpc.IsUnknown() {
		jsonData["ldpc"] = o.LeafInterfacesWirelessCapabilitiesHtLdpc.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.IsUnknown() {
		jsonData["lsig-protection"] = o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.IsUnknown() {
		jsonData["max-amsdu"] = o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtShortGi.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtShortGi.IsUnknown() {
		jsonData["short-gi"] = o.LeafInterfacesWirelessCapabilitiesHtShortGi.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesHtSmps.IsNull() && !o.LeafInterfacesWirelessCapabilitiesHtSmps.IsUnknown() {
		jsonData["smps"] = o.LeafInterfacesWirelessCapabilitiesHtSmps.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessCapabilitiesHtStbc).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessCapabilitiesHtStbc)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["stbc"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessCapabilitiesHt) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["40mhz-incapable"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["auto-powersave"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave = basetypes.NewStringNull()
	}

	if value, ok := jsonData["channel-set-width"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["delayed-block-ack"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dsss-cck-40"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero = basetypes.NewStringNull()
	}

	if value, ok := jsonData["greenfield"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtGreenfield = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtGreenfield = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ldpc"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtLdpc = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtLdpc = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lsig-protection"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtLsigProtection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtLsigProtection = basetypes.NewStringNull()
	}

	if value, ok := jsonData["max-amsdu"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["short-gi"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtShortGi = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtShortGi = basetypes.NewStringNull()
	}

	if value, ok := jsonData["smps"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtSmps = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtSmps = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["stbc"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessCapabilitiesHtStbc = &InterfacesWirelessCapabilitiesHtStbc{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessCapabilitiesHtStbc)
		if err != nil {
			return err
		}
	}

	return nil
}
