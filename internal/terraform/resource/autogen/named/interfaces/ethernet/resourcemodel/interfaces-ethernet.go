// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernet describes the resource data model.
type InterfacesEthernet struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesEthernetAddress            types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesEthernetDescrIPtion        types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesEthernetDisableFlowControl types.String `tfsdk:"disable_flow_control" vyos:"disable-flow-control,omitempty"`
	LeafInterfacesEthernetDisableLinkDetect  types.String `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesEthernetDisable            types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesEthernetDuplex             types.String `tfsdk:"duplex" vyos:"duplex,omitempty"`
	LeafInterfacesEthernetHwID               types.String `tfsdk:"hw_id" vyos:"hw-id,omitempty"`
	LeafInterfacesEthernetMac                types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesEthernetMtu                types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesEthernetSpeed              types.String `tfsdk:"speed" vyos:"speed,omitempty"`
	LeafInterfacesEthernetRedirect           types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesEthernetVrf                types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesEthernetXdp                types.String `tfsdk:"xdp" vyos:"xdp,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagInterfacesEthernetVifS bool `tfsdk:"vif_s" vyos:"vif-s,child"`
	ExistsTagInterfacesEthernetVif  bool `tfsdk:"vif" vyos:"vif,child"`

	// Nodes
	NodeInterfacesEthernetDhcpOptions     *InterfacesEthernetDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesEthernetDhcpvsixOptions *InterfacesEthernetDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesEthernetEapol           *InterfacesEthernetEapol           `tfsdk:"eapol" vyos:"eapol,omitempty"`
	NodeInterfacesEthernetIP              *InterfacesEthernetIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesEthernetIPvsix          *InterfacesEthernetIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesEthernetMirror          *InterfacesEthernetMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesEthernetOffload         *InterfacesEthernetOffload         `tfsdk:"offload" vyos:"offload,omitempty"`
	NodeInterfacesEthernetRingBuffer      *InterfacesEthernetRingBuffer      `tfsdk:"ring_buffer" vyos:"ring-buffer,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesEthernet) GetVyosPath() []string {
	return []string{
		"interfaces",
		"ethernet",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Ethernet Interface

    |  Format  |  Description  |
    |----------|---------------|
    |  ethN  |  Ethernet interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |
    |  dhcp  |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"disable_flow_control": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable Ethernet flow control (pause frames)

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"duplex": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Duplex mode

    |  Format  |  Description  |
    |----------|---------------|
    |  auto  |  Auto negotiation  |
    |  half  |  Half duplex  |
    |  full  |  Full duplex  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Associate Ethernet Interface with given Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"speed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link speed

    |  Format  |  Description  |
    |----------|---------------|
    |  auto  |  Auto negotiation  |
    |  10  |  10 Mbit/sec  |
    |  100  |  100 Mbit/sec  |
    |  1000  |  1 Gbit/sec  |
    |  2500  |  2.5 Gbit/sec  |
    |  5000  |  5 Gbit/sec  |
    |  10000  |  10 Gbit/sec  |
    |  25000  |  25 Gbit/sec  |
    |  40000  |  40 Gbit/sec  |
    |  50000  |  50 Gbit/sec  |
    |  100000  |  100 Gbit/sec  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		"xdp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable eXpress Data Path

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"eapol": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetEapol{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Extensible Authentication Protocol over Local Area Network

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"offload": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetOffload{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configurable offload options

`,
		},

		"ring_buffer": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetRingBuffer{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Shared buffer between the device driver and NIC

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernet) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetAddress.IsNull() && !o.LeafInterfacesEthernetAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesEthernetAddress.ValueString()
	}

	if !o.LeafInterfacesEthernetDescrIPtion.IsNull() && !o.LeafInterfacesEthernetDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesEthernetDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesEthernetDisableFlowControl.IsNull() && !o.LeafInterfacesEthernetDisableFlowControl.IsUnknown() {
		jsonData["disable-flow-control"] = o.LeafInterfacesEthernetDisableFlowControl.ValueString()
	}

	if !o.LeafInterfacesEthernetDisableLinkDetect.IsNull() && !o.LeafInterfacesEthernetDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesEthernetDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesEthernetDisable.IsNull() && !o.LeafInterfacesEthernetDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesEthernetDisable.ValueString()
	}

	if !o.LeafInterfacesEthernetDuplex.IsNull() && !o.LeafInterfacesEthernetDuplex.IsUnknown() {
		jsonData["duplex"] = o.LeafInterfacesEthernetDuplex.ValueString()
	}

	if !o.LeafInterfacesEthernetHwID.IsNull() && !o.LeafInterfacesEthernetHwID.IsUnknown() {
		jsonData["hw-id"] = o.LeafInterfacesEthernetHwID.ValueString()
	}

	if !o.LeafInterfacesEthernetMac.IsNull() && !o.LeafInterfacesEthernetMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesEthernetMac.ValueString()
	}

	if !o.LeafInterfacesEthernetMtu.IsNull() && !o.LeafInterfacesEthernetMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesEthernetMtu.ValueString()
	}

	if !o.LeafInterfacesEthernetSpeed.IsNull() && !o.LeafInterfacesEthernetSpeed.IsUnknown() {
		jsonData["speed"] = o.LeafInterfacesEthernetSpeed.ValueString()
	}

	if !o.LeafInterfacesEthernetRedirect.IsNull() && !o.LeafInterfacesEthernetRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesEthernetRedirect.ValueString()
	}

	if !o.LeafInterfacesEthernetVrf.IsNull() && !o.LeafInterfacesEthernetVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesEthernetVrf.ValueString()
	}

	if !o.LeafInterfacesEthernetXdp.IsNull() && !o.LeafInterfacesEthernetXdp.IsUnknown() {
		jsonData["xdp"] = o.LeafInterfacesEthernetXdp.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesEthernetDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetEapol).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetEapol)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["eapol"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetOffload).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetOffload)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["offload"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetRingBuffer).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetRingBuffer)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ring-buffer"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernet) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesEthernetAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesEthernetDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-flow-control"]; ok {
		o.LeafInterfacesEthernetDisableFlowControl = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetDisableFlowControl = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesEthernetDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["duplex"]; ok {
		o.LeafInterfacesEthernetDuplex = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetDuplex = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hw-id"]; ok {
		o.LeafInterfacesEthernetHwID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetHwID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesEthernetMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesEthernetMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["speed"]; ok {
		o.LeafInterfacesEthernetSpeed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetSpeed = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesEthernetRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesEthernetVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVrf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["xdp"]; ok {
		o.LeafInterfacesEthernetXdp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetXdp = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetDhcpOptions = &InterfacesEthernetDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetDhcpvsixOptions = &InterfacesEthernetDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["eapol"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetEapol = &InterfacesEthernetEapol{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetEapol)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetIP = &InterfacesEthernetIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetIPvsix = &InterfacesEthernetIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetMirror = &InterfacesEthernetMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["offload"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetOffload = &InterfacesEthernetOffload{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetOffload)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ring-buffer"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetRingBuffer = &InterfacesEthernetRingBuffer{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetRingBuffer)
		if err != nil {
			return err
		}
	}

	return nil
}
