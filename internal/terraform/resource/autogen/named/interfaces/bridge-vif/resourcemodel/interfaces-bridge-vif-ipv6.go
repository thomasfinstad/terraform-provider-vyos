// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesBrIDgeVifIPvsix describes the resource data model.
type InterfacesBrIDgeVifIPvsix struct {
	// LeafNodes
	LeafInterfacesBrIDgeVifIPvsixAdjustMss              types.String `tfsdk:"adjust_mss" vyos:"adjust-mss,omitempty"`
	LeafInterfacesBrIDgeVifIPvsixDisableForwarding      types.String `tfsdk:"disable_forwarding" vyos:"disable-forwarding,omitempty"`
	LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits types.String `tfsdk:"dup_addr_detect_transmits" vyos:"dup-addr-detect-transmits,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesBrIDgeVifIPvsixAddress *InterfacesBrIDgeVifIPvsixAddress `tfsdk:"address" vyos:"address,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBrIDgeVifIPvsix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"adjust_mss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Adjust TCP MSS value

    |  Format  |  Description  |
    |----------|---------------|
    |  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
    |  u32:536-65535  |  TCP Maximum segment size in bytes  |

`,
		},

		"disable_forwarding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable IP forwarding on this interface

`,
		},

		"dup_addr_detect_transmits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
    |  u32:1-n  |  Number of NS messages to send while performing DAD  |

`,
		},

		// Nodes

		"address": schema.SingleNestedAttribute{
			Attributes: InterfacesBrIDgeVifIPvsixAddress{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 address configuration modes

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesBrIDgeVifIPvsix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesBrIDgeVifIPvsixAdjustMss.IsNull() && !o.LeafInterfacesBrIDgeVifIPvsixAdjustMss.IsUnknown() {
		jsonData["adjust-mss"] = o.LeafInterfacesBrIDgeVifIPvsixAdjustMss.ValueString()
	}

	if !o.LeafInterfacesBrIDgeVifIPvsixDisableForwarding.IsNull() && !o.LeafInterfacesBrIDgeVifIPvsixDisableForwarding.IsUnknown() {
		jsonData["disable-forwarding"] = o.LeafInterfacesBrIDgeVifIPvsixDisableForwarding.ValueString()
	}

	if !o.LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits.IsNull() && !o.LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits.IsUnknown() {
		jsonData["dup-addr-detect-transmits"] = o.LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesBrIDgeVifIPvsixAddress).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesBrIDgeVifIPvsixAddress)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["address"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesBrIDgeVifIPvsix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["adjust-mss"]; ok {
		o.LeafInterfacesBrIDgeVifIPvsixAdjustMss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeVifIPvsixAdjustMss = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-forwarding"]; ok {
		o.LeafInterfacesBrIDgeVifIPvsixDisableForwarding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeVifIPvsixDisableForwarding = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dup-addr-detect-transmits"]; ok {
		o.LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBrIDgeVifIPvsixDupAddrDetectTransmits = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["address"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesBrIDgeVifIPvsixAddress = &InterfacesBrIDgeVifIPvsixAddress{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesBrIDgeVifIPvsixAddress)
		if err != nil {
			return err
		}
	}

	return nil
}
