// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWirelessVifSVifC describes the resource data model.
type InterfacesWirelessVifSVifC struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDInterfacesWireless any `tfsdk:"wireless" vyos:"wireless,parent-id"`

	ParentIDInterfacesWirelessVifS any `tfsdk:"vif_s" vyos:"vif-s,parent-id"`

	// LeafNodes
	LeafInterfacesWirelessVifSVifCDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesWirelessVifSVifCAddress           types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesWirelessVifSVifCDisableLinkDetect types.String `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesWirelessVifSVifCDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesWirelessVifSVifCMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesWirelessVifSVifCMtu               types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesWirelessVifSVifCRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesWirelessVifSVifCVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesWirelessVifSVifCDhcpOptions     *InterfacesWirelessVifSVifCDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesWirelessVifSVifCDhcpvsixOptions *InterfacesWirelessVifSVifCDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesWirelessVifSVifCIP              *InterfacesWirelessVifSVifCIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesWirelessVifSVifCIPvsix          *InterfacesWirelessVifSVifCIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesWirelessVifSVifCMirror          *InterfacesWirelessVifSVifCMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWirelessVifSVifC) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireless",
		"vif-s",
		"vif-c",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessVifSVifC) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |
    |  dhcp  |  Dynamic Host Configuration Protocol  |
    |  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSVifCDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSVifCDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSVifCIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSVifCIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSVifCMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessVifSVifC) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessVifSVifCDescrIPtion.IsNull() && !o.LeafInterfacesWirelessVifSVifCDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesWirelessVifSVifCDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCAddress.IsNull() && !o.LeafInterfacesWirelessVifSVifCAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesWirelessVifSVifCAddress.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCDisableLinkDetect.IsNull() && !o.LeafInterfacesWirelessVifSVifCDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesWirelessVifSVifCDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCDisable.IsNull() && !o.LeafInterfacesWirelessVifSVifCDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesWirelessVifSVifCDisable.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCMac.IsNull() && !o.LeafInterfacesWirelessVifSVifCMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesWirelessVifSVifCMac.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCMtu.IsNull() && !o.LeafInterfacesWirelessVifSVifCMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesWirelessVifSVifCMtu.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCRedirect.IsNull() && !o.LeafInterfacesWirelessVifSVifCRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesWirelessVifSVifCRedirect.ValueString()
	}

	if !o.LeafInterfacesWirelessVifSVifCVrf.IsNull() && !o.LeafInterfacesWirelessVifSVifCVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesWirelessVifSVifCVrf.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifSVifCDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifSVifCDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifSVifCDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifSVifCDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifSVifCIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifSVifCIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifSVifCIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifSVifCIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessVifSVifCMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessVifSVifCMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessVifSVifC) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesWirelessVifSVifCDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesWirelessVifSVifCAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesWirelessVifSVifCDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesWirelessVifSVifCDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesWirelessVifSVifCMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesWirelessVifSVifCMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesWirelessVifSVifCRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesWirelessVifSVifCVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVifCVrf = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifSVifCDhcpOptions = &InterfacesWirelessVifSVifCDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifSVifCDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifSVifCDhcpvsixOptions = &InterfacesWirelessVifSVifCDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifSVifCDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifSVifCIP = &InterfacesWirelessVifSVifCIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifSVifCIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifSVifCIPvsix = &InterfacesWirelessVifSVifCIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifSVifCIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessVifSVifCMirror = &InterfacesWirelessVifSVifCMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessVifSVifCMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
