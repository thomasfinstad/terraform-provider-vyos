// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesTunnelParametersIP describes the resource data model.
type InterfacesTunnelParametersIP struct {
	// LeafNodes
	LeafInterfacesTunnelParametersIPNoPmtuDiscovery types.String `tfsdk:"no_pmtu_discovery" vyos:"no-pmtu-discovery,omitempty"`
	LeafInterfacesTunnelParametersIPIgnoreDf        types.String `tfsdk:"ignore_df" vyos:"ignore-df,omitempty"`
	LeafInterfacesTunnelParametersIPKey             types.String `tfsdk:"key" vyos:"key,omitempty"`
	LeafInterfacesTunnelParametersIPTos             types.String `tfsdk:"tos" vyos:"tos,omitempty"`
	LeafInterfacesTunnelParametersIPTTL             types.String `tfsdk:"ttl" vyos:"ttl,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnelParametersIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"no_pmtu_discovery": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable path MTU discovery

`,
		},

		"ignore_df": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore the DF (don't fragment) bit

`,
		},

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel key (only GRE tunnels)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Tunnel key  |

`,
		},

		"tos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TOS value to use in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-99  |  Type of Service (TOS)  |

`,

			// Default:          stringdefault.StaticString(`inherit`),
			Computed: true,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TTL value to use in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Inherit - copy value from original IP header  |
    |  u32:1-255  |  Time to Live  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnelParametersIP) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesTunnelParametersIPNoPmtuDiscovery.IsNull() && !o.LeafInterfacesTunnelParametersIPNoPmtuDiscovery.IsUnknown() {
		jsonData["no-pmtu-discovery"] = o.LeafInterfacesTunnelParametersIPNoPmtuDiscovery.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPIgnoreDf.IsNull() && !o.LeafInterfacesTunnelParametersIPIgnoreDf.IsUnknown() {
		jsonData["ignore-df"] = o.LeafInterfacesTunnelParametersIPIgnoreDf.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPKey.IsNull() && !o.LeafInterfacesTunnelParametersIPKey.IsUnknown() {
		jsonData["key"] = o.LeafInterfacesTunnelParametersIPKey.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPTos.IsNull() && !o.LeafInterfacesTunnelParametersIPTos.IsUnknown() {
		jsonData["tos"] = o.LeafInterfacesTunnelParametersIPTos.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPTTL.IsNull() && !o.LeafInterfacesTunnelParametersIPTTL.IsUnknown() {
		jsonData["ttl"] = o.LeafInterfacesTunnelParametersIPTTL.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnelParametersIP) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["no-pmtu-discovery"]; ok {
		o.LeafInterfacesTunnelParametersIPNoPmtuDiscovery = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPNoPmtuDiscovery = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ignore-df"]; ok {
		o.LeafInterfacesTunnelParametersIPIgnoreDf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPIgnoreDf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["key"]; ok {
		o.LeafInterfacesTunnelParametersIPKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tos"]; ok {
		o.LeafInterfacesTunnelParametersIPTos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPTos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl"]; ok {
		o.LeafInterfacesTunnelParametersIPTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPTTL = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
