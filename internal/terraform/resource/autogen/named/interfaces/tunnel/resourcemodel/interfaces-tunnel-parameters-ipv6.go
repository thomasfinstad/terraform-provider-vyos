// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesTunnelParametersIPvsix describes the resource data model.
type InterfacesTunnelParametersIPvsix struct {
	// LeafNodes
	LeafInterfacesTunnelParametersIPvsixEncaplimit types.String `tfsdk:"encaplimit" vyos:"encaplimit,omitempty"`
	LeafInterfacesTunnelParametersIPvsixFlowlabel  types.String `tfsdk:"flowlabel" vyos:"flowlabel,omitempty"`
	LeafInterfacesTunnelParametersIPvsixHoplimit   types.String `tfsdk:"hoplimit" vyos:"hoplimit,omitempty"`
	LeafInterfacesTunnelParametersIPvsixTclass     types.String `tfsdk:"tclass" vyos:"tclass,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnelParametersIPvsix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"encaplimit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set fixed encapsulation limit

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-255  |  Encapsulation limit  |
    |  none  |  Disable encapsulation limit  |

`,

			// Default:          stringdefault.StaticString(`4`),
			Computed: true,
		},

		"flowlabel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies the flow label to use in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  inherit  |  Copy field from original header  |
    |  0x0-0x0fffff  |  Tunnel key, or hex value  |

`,
		},

		"hoplimit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hoplimit

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-255  |  Hop limit  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		"tclass": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Traffic class (Tclass)

    |  Format  |  Description  |
    |----------|---------------|
    |  0x0-0x0fffff  |  Traffic class, 'inherit' or hex value  |

`,

			// Default:          stringdefault.StaticString(`inherit`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnelParametersIPvsix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesTunnelParametersIPvsixEncaplimit.IsNull() && !o.LeafInterfacesTunnelParametersIPvsixEncaplimit.IsUnknown() {
		jsonData["encaplimit"] = o.LeafInterfacesTunnelParametersIPvsixEncaplimit.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPvsixFlowlabel.IsNull() && !o.LeafInterfacesTunnelParametersIPvsixFlowlabel.IsUnknown() {
		jsonData["flowlabel"] = o.LeafInterfacesTunnelParametersIPvsixFlowlabel.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPvsixHoplimit.IsNull() && !o.LeafInterfacesTunnelParametersIPvsixHoplimit.IsUnknown() {
		jsonData["hoplimit"] = o.LeafInterfacesTunnelParametersIPvsixHoplimit.ValueString()
	}

	if !o.LeafInterfacesTunnelParametersIPvsixTclass.IsNull() && !o.LeafInterfacesTunnelParametersIPvsixTclass.IsUnknown() {
		jsonData["tclass"] = o.LeafInterfacesTunnelParametersIPvsixTclass.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnelParametersIPvsix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["encaplimit"]; ok {
		o.LeafInterfacesTunnelParametersIPvsixEncaplimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPvsixEncaplimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["flowlabel"]; ok {
		o.LeafInterfacesTunnelParametersIPvsixFlowlabel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPvsixFlowlabel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hoplimit"]; ok {
		o.LeafInterfacesTunnelParametersIPvsixHoplimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPvsixHoplimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tclass"]; ok {
		o.LeafInterfacesTunnelParametersIPvsixTclass = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesTunnelParametersIPvsixTclass = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
