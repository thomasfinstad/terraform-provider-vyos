// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesTunnel describes the resource data model.
type InterfacesTunnel struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesTunnelDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesTunnelAddress           types.List   `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesTunnelDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesTunnelDisableLinkDetect types.Bool   `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesTunnelMtu               types.Number `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesTunnelSourceAddress     types.String `tfsdk:"source_address" vyos:"source-address,omitempty"`
	LeafInterfacesTunnelRemote            types.String `tfsdk:"remote" vyos:"remote,omitempty"`
	LeafInterfacesTunnelSourceInterface   types.String `tfsdk:"source_interface" vyos:"source-interface,omitempty"`
	LeafInterfacesTunnelSixrdPrefix       types.String `tfsdk:"6rd_prefix" vyos:"6rd-prefix,omitempty"`
	LeafInterfacesTunnelSixrdRelayPrefix  types.String `tfsdk:"6rd_relay_prefix" vyos:"6rd-relay-prefix,omitempty"`
	LeafInterfacesTunnelEncapsulation     types.String `tfsdk:"encapsulation" vyos:"encapsulation,omitempty"`
	LeafInterfacesTunnelEnableMulticast   types.Bool   `tfsdk:"enable_multicast" vyos:"enable-multicast,omitempty"`
	LeafInterfacesTunnelVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesTunnelRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesTunnelIP         *InterfacesTunnelIP         `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesTunnelIPvsix     *InterfacesTunnelIPvsix     `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesTunnelMirror     *InterfacesTunnelMirror     `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesTunnelParameters *InterfacesTunnelParameters `tfsdk:"parameters" vyos:"parameters,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesTunnel) GetVyosPath() []string {
	return []string{
		"interfaces",

		"tunnel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Tunnel interface

    |  Format  |  Description  |
    |----------|---------------|
    |  tunN  |  Tunnel interface name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable_link_detect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:64-8024  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1476`),
			Computed: true,
		},

		"source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP address used to initiate connection

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 source address  |
    |  ipv6  |  IPv6 source address  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel remote address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Tunnel remote IPv4 address  |
    |  ipv6  |  Tunnel remote IPv6 address  |

`,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface used to establish connection

    |  Format  |  Description  |
    |----------|---------------|
    |  interface  |  Interface name  |

`,
		},

		"6rd_prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `6rd network prefix

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6  |  IPv6 address and prefix length  |

`,
		},

		"6rd_relay_prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `6rd relay prefix

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 prefix of interface for 6rd  |

`,
		},

		"encapsulation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulation of this tunnel interface

    |  Format  |  Description  |
    |----------|---------------|
    |  erspan  |  Encapsulated Remote Switched Port Analyzer  |
    |  gre  |  Generic Routing Encapsulation (network layer)  |
    |  gretap  |  Generic Routing Encapsulation (datalink layer)  |
    |  ip6erspan  |  Encapsulated Remote Switched Port Analyzer over IPv6  |
    |  ip6gre  |  GRE over IPv6 (network layer)  |
    |  ip6gretap  |  GRE over IPv6 (datalink layer)  |
    |  ip6ip6  |  IPv6 in IPv6 encapsulation  |
    |  ipip  |  IPv4 in IPv4 encapsulation  |
    |  ipip6  |  IPv4 in IP6 encapsulation  |
    |  sit  |  Simple Internet Transition (IPv6 in IPv4)  |

`,
		},

		"enable_multicast": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable multicast operation over tunnel

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  VRF instance name  |

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: InterfacesTunnelParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Tunnel parameters

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnel) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnel) UnmarshalJSON(_ []byte) error {
	return nil
}
