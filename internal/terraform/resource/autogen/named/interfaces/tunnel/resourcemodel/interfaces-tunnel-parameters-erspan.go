// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesTunnelParametersErspan describes the resource data model.
type InterfacesTunnelParametersErspan struct {
	// LeafNodes
	LeafInterfacesTunnelParametersErspanDirection types.String `tfsdk:"direction" vyos:"direction,omitempty"`
	LeafInterfacesTunnelParametersErspanHwID      types.Number `tfsdk:"hw_id" vyos:"hw-id,omitempty"`
	LeafInterfacesTunnelParametersErspanIndex     types.Number `tfsdk:"index" vyos:"index,omitempty"`
	LeafInterfacesTunnelParametersErspanVersion   types.String `tfsdk:"version" vyos:"version,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesTunnelParametersErspan) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"direction": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Mirrored traffic direction

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ingress  &emsp; |  Mirror ingress traffic  |
    |  egress  &emsp; |  Mirror egress traffic  |

`,
		},

		"hw_id": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Unique identifier of an ERSPAN engine within a system

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-1048575  &emsp; |  Unique identifier of an ERSPAN engine  |

`,
		},

		"index": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `ERSPAN version 1 index field

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-63  &emsp; |  Platform-depedent field for specifying port number and direction  |

`,
		},

		"version": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol version

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  1  &emsp; |  ERSPAN Type II  |
    |  2  &emsp; |  ERSPAN Type III  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesTunnelParametersErspan) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesTunnelParametersErspan) UnmarshalJSON(_ []byte) error {
	return nil
}
