// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesGeneveParametersIP describes the resource data model.
type InterfacesGeneveParametersIP struct {
	// LeafNodes
	LeafInterfacesGeneveParametersIPDf  types.String `tfsdk:"df" vyos:"df,omitempty"`
	LeafInterfacesGeneveParametersIPTos types.String `tfsdk:"tos" vyos:"tos,omitempty"`
	LeafInterfacesGeneveParametersIPTTL types.String `tfsdk:"ttl" vyos:"ttl,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesGeneveParametersIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"df": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Usage of the DF (don't Fragment) bit in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  set  |  Always set DF (don't fragment) bit  |
    |  unset  |  Always unset DF (don't fragment) bit  |
    |  inherit  |  Copy from the original IP header  |

`,

			// Default:          stringdefault.StaticString(`unset`),
			Computed: true,
		},

		"tos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TOS value to use in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-99  |  Type of Service (TOS)  |

`,

			// Default:          stringdefault.StaticString(`inherit`),
			Computed: true,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TTL value to use in outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Inherit - copy value from original IP header  |
    |  u32:1-255  |  Time to Live  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesGeneveParametersIP) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesGeneveParametersIPDf.IsNull() && !o.LeafInterfacesGeneveParametersIPDf.IsUnknown() {
		jsonData["df"] = o.LeafInterfacesGeneveParametersIPDf.ValueString()
	}

	if !o.LeafInterfacesGeneveParametersIPTos.IsNull() && !o.LeafInterfacesGeneveParametersIPTos.IsUnknown() {
		jsonData["tos"] = o.LeafInterfacesGeneveParametersIPTos.ValueString()
	}

	if !o.LeafInterfacesGeneveParametersIPTTL.IsNull() && !o.LeafInterfacesGeneveParametersIPTTL.IsUnknown() {
		jsonData["ttl"] = o.LeafInterfacesGeneveParametersIPTTL.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesGeneveParametersIP) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["df"]; ok {
		o.LeafInterfacesGeneveParametersIPDf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveParametersIPDf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tos"]; ok {
		o.LeafInterfacesGeneveParametersIPTos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveParametersIPTos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl"]; ok {
		o.LeafInterfacesGeneveParametersIPTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveParametersIPTTL = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
