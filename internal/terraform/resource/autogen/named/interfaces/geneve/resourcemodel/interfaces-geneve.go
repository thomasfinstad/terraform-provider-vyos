// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// InterfacesGeneve describes the resource data model.
type InterfacesGeneve struct {
	SelfIdentifier types.String `tfsdk:"geneve_id" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesGeneveAddress     types.List   `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesGeneveDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesGeneveDisable     types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesGeneveMac         types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesGeneveMtu         types.Number `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesGeneveRedirect    types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesGeneveRemote      types.String `tfsdk:"remote" vyos:"remote,omitempty"`
	LeafInterfacesGeneveVni         types.Number `tfsdk:"vni" vyos:"vni,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesGeneveIP         *InterfacesGeneveIP         `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesGeneveIPvsix     *InterfacesGeneveIPvsix     `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesGeneveParameters *InterfacesGeneveParameters `tfsdk:"parameters" vyos:"parameters,omitempty"`
	NodeInterfacesGeneveMirror     *InterfacesGeneveMirror     `tfsdk:"mirror" vyos:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesGeneve) GetVyosPath() []string {
	return []string{
		"interfaces",

		"geneve",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesGeneve) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"geneve_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Generic Network Virtualization Encapsulation (GENEVE) Interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  gnvN  &emsp; |  GENEVE interface name  |

`,
		},

		// LeafNodes

		"address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 address and prefix length  |
    |  ipv6net  &emsp; |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  macaddr  &emsp; |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1450-16000  &emsp; |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Destination interface name  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel remote address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Tunnel remote IPv4 address  |
    |  ipv6  &emsp; |  Tunnel remote IPv6 address  |

`,
		},

		"vni": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Network Identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-16777214  &emsp; |  VXLAN virtual network identifier  |

`,
		},

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `GENEVE tunnel parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesGeneve) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesGeneve) UnmarshalJSON(_ []byte) error {
	return nil
}
