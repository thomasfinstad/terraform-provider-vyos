// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesGeneve describes the resource data model.
type InterfacesGeneve struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafInterfacesGeneveAddress     types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesGeneveDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesGeneveDisable     types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesGeneveMac         types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesGeneveMtu         types.String `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesGeneveRedirect    types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`
	LeafInterfacesGeneveRemote      types.String `tfsdk:"remote" vyos:"remote,omitempty"`
	LeafInterfacesGeneveVni         types.String `tfsdk:"vni" vyos:"vni,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeInterfacesGeneveIP         *InterfacesGeneveIP         `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesGeneveIPvsix     *InterfacesGeneveIPvsix     `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesGeneveParameters *InterfacesGeneveParameters `tfsdk:"parameters" vyos:"parameters,omitempty"`
	NodeInterfacesGeneveMirror     *InterfacesGeneveMirror     `tfsdk:"mirror" vyos:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesGeneve) GetVyosPath() []string {
	return []string{
		"interfaces",
		"geneve",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesGeneve) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Generic Network Virtualization Encapsulation (GENEVE) Interface

    |  Format  |  Description  |
    |----------|---------------|
    |  gnvN  |  GENEVE interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |
    |  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1450-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Destination interface name  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel remote address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Tunnel remote IPv4 address  |
    |  ipv6  |  Tunnel remote IPv6 address  |

`,
		},

		"vni": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Network Identifier

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-16777214  |  VXLAN virtual network identifier  |

`,
		},

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `GENEVE tunnel parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesGeneve) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesGeneveAddress.IsNull() && !o.LeafInterfacesGeneveAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesGeneveAddress.ValueString()
	}

	if !o.LeafInterfacesGeneveDescrIPtion.IsNull() && !o.LeafInterfacesGeneveDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesGeneveDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesGeneveDisable.IsNull() && !o.LeafInterfacesGeneveDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesGeneveDisable.ValueString()
	}

	if !o.LeafInterfacesGeneveMac.IsNull() && !o.LeafInterfacesGeneveMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesGeneveMac.ValueString()
	}

	if !o.LeafInterfacesGeneveMtu.IsNull() && !o.LeafInterfacesGeneveMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesGeneveMtu.ValueString()
	}

	if !o.LeafInterfacesGeneveRedirect.IsNull() && !o.LeafInterfacesGeneveRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesGeneveRedirect.ValueString()
	}

	if !o.LeafInterfacesGeneveRemote.IsNull() && !o.LeafInterfacesGeneveRemote.IsUnknown() {
		jsonData["remote"] = o.LeafInterfacesGeneveRemote.ValueString()
	}

	if !o.LeafInterfacesGeneveVni.IsNull() && !o.LeafInterfacesGeneveVni.IsUnknown() {
		jsonData["vni"] = o.LeafInterfacesGeneveVni.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesGeneveIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesGeneveIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesGeneveIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesGeneveIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesGeneveParameters).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesGeneveParameters)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["parameters"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesGeneveMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesGeneveMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesGeneve) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesGeneveAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesGeneveDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesGeneveDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesGeneveMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesGeneveMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesGeneveRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote"]; ok {
		o.LeafInterfacesGeneveRemote = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveRemote = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vni"]; ok {
		o.LeafInterfacesGeneveVni = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveVni = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesGeneveIP = &InterfacesGeneveIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesGeneveIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesGeneveIPvsix = &InterfacesGeneveIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesGeneveIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["parameters"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesGeneveParameters = &InterfacesGeneveParameters{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesGeneveParameters)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesGeneveMirror = &InterfacesGeneveMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesGeneveMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
