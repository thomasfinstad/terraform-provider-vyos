// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceDhcpServerSharedNetworkNameSubnet describes the resource data model.
type ServiceDhcpServerSharedNetworkNameSubnet struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceDhcpServerSharedNetworkName types.String `tfsdk:"shared_network_name" vyos:"shared-network-name_identifier,parent-id"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameSubnetBootfileName        types.String `tfsdk:"bootfile_name" vyos:"bootfile-name,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetBootfileServer      types.String `tfsdk:"bootfile_server" vyos:"bootfile-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetBootfileSize        types.Number `tfsdk:"bootfile_size" vyos:"bootfile-size,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetClientPrefixLength  types.Number `tfsdk:"client_prefix_length" vyos:"client-prefix-length,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetDefaultRouter       types.String `tfsdk:"default_router" vyos:"default-router,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetDomainName          types.String `tfsdk:"domain_name" vyos:"domain-name,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetDomainSearch        types.List   `tfsdk:"domain_search" vyos:"domain-search,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetDescrIPtion         types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetNameServer          types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetEnableFailover      types.Bool   `tfsdk:"enable_failover" vyos:"enable-failover,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetExclude             types.List   `tfsdk:"exclude" vyos:"exclude,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetIPForwarding        types.Bool   `tfsdk:"ip_forwarding" vyos:"ip-forwarding,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetLease               types.Number `tfsdk:"lease" vyos:"lease,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetNtpServer           types.List   `tfsdk:"ntp_server" vyos:"ntp-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetPingCheck           types.Bool   `tfsdk:"ping_check" vyos:"ping-check,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetPopServer           types.List   `tfsdk:"pop_server" vyos:"pop-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetServerIDentifier    types.String `tfsdk:"server_identifier" vyos:"server-identifier,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetSMTPServer          types.List   `tfsdk:"smtp_server" vyos:"smtp-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetIPvsixOnlyPreferred types.Number `tfsdk:"ipv6_only_preferred" vyos:"ipv6-only-preferred,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetSubnetParameters    types.List   `tfsdk:"subnet_parameters" vyos:"subnet-parameters,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetTftpServerName      types.String `tfsdk:"tftp_server_name" vyos:"tftp-server-name,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetTimeOffset          types.String `tfsdk:"time_offset" vyos:"time-offset,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetTimeServer          types.List   `tfsdk:"time_server" vyos:"time-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetWinsServer          types.List   `tfsdk:"wins_server" vyos:"wins-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetWpadURL             types.String `tfsdk:"wpad_url" vyos:"wpad-url,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceDhcpServerSharedNetworkNameSubnetRange         bool `tfsdk:"range" vyos:"range,child"`
	ExistsTagServiceDhcpServerSharedNetworkNameSubnetStaticMapping bool `tfsdk:"static_mapping" vyos:"static-mapping,child"`
	ExistsTagServiceDhcpServerSharedNetworkNameSubnetStaticRoute   bool `tfsdk:"static_route" vyos:"static-route,child"`

	// Nodes
	NodeServiceDhcpServerSharedNetworkNameSubnetVendorOption *ServiceDhcpServerSharedNetworkNameSubnetVendorOption `tfsdk:"vendor_option" vyos:"vendor-option,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkNameSubnet) GetVyosPath() []string {
	return []string{
		"service",

		"dhcp-server",

		"shared-network-name",
		o.ParentIDServiceDhcpServerSharedNetworkName.ValueString(),

		"subnet",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkNameSubnet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `DHCP subnet for shared network

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |

`,
		},

		"shared_network_name_identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of DHCP shared network

`,
		},

		// LeafNodes

		"bootfile_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bootstrap file name

`,
		},

		"bootfile_server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Server from which the initial boot file is to be loaded

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Bootfile server IPv4 address  |
    |  hostname  |  Bootfile server FQDN  |

`,
		},

		"bootfile_size": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Bootstrap file size

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-16  |  Bootstrap file size in 512 byte blocks  |

`,
		},

		"client_prefix_length": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Specifies the clients subnet mask as per RFC 950. If unset, subnet declaration is used.

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-32  |  DHCP client prefix length must be 0 to 32  |

`,
		},

		"default_router": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of default router

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Default router IPv4 address  |

`,
		},

		"domain_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name

`,
		},

		"domain_search": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Client Domain Name search list

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Domain Name Server (DNS) IPv4 address  |

`,
		},

		"enable_failover": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable DHCP failover support for this subnet

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"exclude": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address to exclude from DHCP lease range

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 address to exclude from lease range  |

`,
		},

		"ip_forwarding": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable IP forwarding on client

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"lease": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Lease timeout in seconds

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  DHCP lease time in seconds  |

`,

			// Default:          stringdefault.StaticString(`86400`),
			Computed: true,
		},

		"ntp_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of NTP server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  NTP server IPv4 address  |

`,
		},

		"ping_check": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Sends ICMP Echo request to the address being assigned

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"pop_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of POP3 server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  POP3 server IPv4 address  |

`,
		},

		"server_identifier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Address for DHCP server identifier

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  DHCP server identifier IPv4 address  |

`,
		},

		"smtp_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of SMTP server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  SMTP server IPv4 address  |

`,
		},

		"ipv6_only_preferred": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Disable IPv4 on IPv6 only hosts (RFC 8925)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Seconds  |

`,
		},

		"subnet_parameters": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Additional subnet parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		"tftp_server_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `TFTP server name

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  TFTP server IPv4 address  |
    |  hostname  |  TFTP server FQDN  |

`,
		},

		"time_offset": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client subnet offset in seconds from Coordinated Universal Time (UTC)

    |  Format  |  Description  |
    |----------|---------------|
    |  [-]N  |  Time offset (number, may be negative)  |

`,
		},

		"time_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of time server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Time server IPv4 address  |

`,
		},

		"wins_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address for Windows Internet Name Service (WINS) server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  WINS server IPv4 address  |

`,
		},

		"wpad_url": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Web Proxy Autodiscovery (WPAD) URL

`,
		},

		// Nodes

		"vendor_option": schema.SingleNestedAttribute{
			Attributes: ServiceDhcpServerSharedNetworkNameSubnetVendorOption{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Vendor Specific Options

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDhcpServerSharedNetworkNameSubnet) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDhcpServerSharedNetworkNameSubnet) UnmarshalJSON(_ []byte) error {
	return nil
}
