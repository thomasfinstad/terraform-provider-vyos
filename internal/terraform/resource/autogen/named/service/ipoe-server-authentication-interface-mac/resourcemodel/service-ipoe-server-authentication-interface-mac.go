// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceIPoeServerAuthenticationInterfaceMac describes the resource data model.
type ServiceIPoeServerAuthenticationInterfaceMac struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceIPoeServerAuthenticationInterface any `tfsdk:"interface" vyos:"interface,parent-id"`

	// LeafNodes
	LeafServiceIPoeServerAuthenticationInterfaceMacVlan types.String `tfsdk:"vlan" vyos:"vlan,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeServiceIPoeServerAuthenticationInterfaceMacRateLimit *ServiceIPoeServerAuthenticationInterfaceMacRateLimit `tfsdk:"rate_limit" vyos:"rate-limit,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceIPoeServerAuthenticationInterfaceMac) GetVyosPath() []string {
	return []string{
		"service",
		"ipoe-server",
		"authentication",
		"interface",
		"mac",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceIPoeServerAuthenticationInterfaceMac) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  Hardware (MAC) address  |

`,
		},

		// LeafNodes

		"vlan": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN monitor for automatic creation of VLAN interfaces

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-4094  |  Client VLAN id  |

`,
		},

		// Nodes

		"rate_limit": schema.SingleNestedAttribute{
			Attributes: ServiceIPoeServerAuthenticationInterfaceMacRateLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Upload/Download speed limits

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceIPoeServerAuthenticationInterfaceMac) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceIPoeServerAuthenticationInterfaceMacVlan.IsNull() && !o.LeafServiceIPoeServerAuthenticationInterfaceMacVlan.IsUnknown() {
		jsonData["vlan"] = o.LeafServiceIPoeServerAuthenticationInterfaceMacVlan.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeServiceIPoeServerAuthenticationInterfaceMacRateLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeServiceIPoeServerAuthenticationInterfaceMacRateLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rate-limit"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceIPoeServerAuthenticationInterfaceMac) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["vlan"]; ok {
		o.LeafServiceIPoeServerAuthenticationInterfaceMacVlan = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceIPoeServerAuthenticationInterfaceMacVlan = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["rate-limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeServiceIPoeServerAuthenticationInterfaceMacRateLimit = &ServiceIPoeServerAuthenticationInterfaceMacRateLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeServiceIPoeServerAuthenticationInterfaceMacRateLimit)
		if err != nil {
			return err
		}
	}

	return nil
}
