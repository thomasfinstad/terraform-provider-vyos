// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceNtpServer describes the resource data model.
type ServiceNtpServer struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceNtpServerNoselect types.Bool `tfsdk:"noselect" vyos:"noselect,omitempty"`
	LeafServiceNtpServerPool     types.Bool `tfsdk:"pool" vyos:"pool,omitempty"`
	LeafServiceNtpServerPrefer   types.Bool `tfsdk:"prefer" vyos:"prefer,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceNtpServer) GetVyosPath() []string {
	return []string{
		"service",

		"ntp",

		"server",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceNtpServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Network Time Protocol (NTP) server

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IP address of NTP server  |
    |  ipv6  |  IPv6 address of NTP server  |
    |  hostname  |  Fully qualified domain name of NTP server  |

`,
		},

		// LeafNodes

		"noselect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Marks the server as unused

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"pool": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Associate with a number of remote servers

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"prefer": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Marks the server as preferred

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceNtpServer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceNtpServer) UnmarshalJSON(_ []byte) error {
	return nil
}
