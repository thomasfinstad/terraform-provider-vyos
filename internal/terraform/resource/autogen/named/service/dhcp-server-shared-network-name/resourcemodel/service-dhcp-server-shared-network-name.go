// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDhcpServerSharedNetworkName describes the resource data model.
type ServiceDhcpServerSharedNetworkName struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"shared_network_name_id" vyos:"-,self-id"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameAuthoritative           types.Bool   `tfsdk:"authoritative" vyos:"authoritative,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDomainName              types.String `tfsdk:"domain_name" vyos:"domain-name,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDomainSearch            types.List   `tfsdk:"domain_search" vyos:"domain-search,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameNtpServer               types.List   `tfsdk:"ntp_server" vyos:"ntp-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNamePingCheck               types.Bool   `tfsdk:"ping_check" vyos:"ping-check,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDescrIPtion             types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDisable                 types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameNameServer              types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters types.List   `tfsdk:"shared_network_parameters" vyos:"shared-network-parameters,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceDhcpServerSharedNetworkNameSubnet bool `tfsdk:"-" vyos:"subnet,ignore,child"`

	// Nodes
}

// SetID configures the resource ID
func (o *ServiceDhcpServerSharedNetworkName) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkName) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"dhcp-server",

		"shared-network-name",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"shared_network_name_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of DHCP shared network

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"authoritative": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Option to make DHCP server authoritative for this physical network

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"domain_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name

`,
		},

		"domain_search": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Client Domain Name search list

`,
		},

		"ntp_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address of NTP server

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  NTP server IPv4 address  |

`,
		},

		"ping_check": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Sends ICMP Echo request to the address being assigned

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Domain Name Server (DNS) IPv4 address  |

`,
		},

		"shared_network_parameters": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Additional shared-network parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		// Nodes

	}
}
