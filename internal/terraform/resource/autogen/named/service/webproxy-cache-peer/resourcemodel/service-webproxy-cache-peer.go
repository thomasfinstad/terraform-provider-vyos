// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceWebproxyCachePeer describes the resource data model.
type ServiceWebproxyCachePeer struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceWebproxyCachePeerAddress  types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafServiceWebproxyCachePeerHTTPPort types.String `tfsdk:"http_port" vyos:"http-port,omitempty"`
	LeafServiceWebproxyCachePeerIcpPort  types.String `tfsdk:"icp_port" vyos:"icp-port,omitempty"`
	LeafServiceWebproxyCachePeerOptions  types.String `tfsdk:"options" vyos:"options,omitempty"`
	LeafServiceWebproxyCachePeerType     types.String `tfsdk:"type" vyos:"type,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyCachePeer) GetVyosPath() []string {
	return []string{
		"service",
		"webproxy",
		"cache-peer",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyCachePeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specify other caches in a hierarchy

    |  Format  |  Description  |
    |----------|---------------|
    |  hostname  |  Cache peers FQDN  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hostname or IP address of peer

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Squid cache-peer IPv4 address  |
    |  hostname  |  Squid cache-peer hostname  |

`,
		},

		"http_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default Proxy Port

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1025-65535  |  Default port number  |

`,

			// Default:          stringdefault.StaticString(`3128`),
			Computed: true,
		},

		"icp_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer ICP port

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Cache peer disabled  |
    |  u32:1-65535  |  Cache peer ICP port  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"options": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer options

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Cache peer options  |

`,

			// Default:          stringdefault.StaticString(`no-query default`),
			Computed: true,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Squid peer type (default parent)

    |  Format  |  Description  |
    |----------|---------------|
    |  parent  |  Peer is a parent  |
    |  sibling  |  Peer is a sibling  |
    |  multicast  |  Peer is a member of a multicast group  |

`,

			// Default:          stringdefault.StaticString(`parent`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceWebproxyCachePeer) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceWebproxyCachePeerAddress.IsNull() && !o.LeafServiceWebproxyCachePeerAddress.IsUnknown() {
		jsonData["address"] = o.LeafServiceWebproxyCachePeerAddress.ValueString()
	}

	if !o.LeafServiceWebproxyCachePeerHTTPPort.IsNull() && !o.LeafServiceWebproxyCachePeerHTTPPort.IsUnknown() {
		jsonData["http-port"] = o.LeafServiceWebproxyCachePeerHTTPPort.ValueString()
	}

	if !o.LeafServiceWebproxyCachePeerIcpPort.IsNull() && !o.LeafServiceWebproxyCachePeerIcpPort.IsUnknown() {
		jsonData["icp-port"] = o.LeafServiceWebproxyCachePeerIcpPort.ValueString()
	}

	if !o.LeafServiceWebproxyCachePeerOptions.IsNull() && !o.LeafServiceWebproxyCachePeerOptions.IsUnknown() {
		jsonData["options"] = o.LeafServiceWebproxyCachePeerOptions.ValueString()
	}

	if !o.LeafServiceWebproxyCachePeerType.IsNull() && !o.LeafServiceWebproxyCachePeerType.IsUnknown() {
		jsonData["type"] = o.LeafServiceWebproxyCachePeerType.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceWebproxyCachePeer) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafServiceWebproxyCachePeerAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["http-port"]; ok {
		o.LeafServiceWebproxyCachePeerHTTPPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerHTTPPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["icp-port"]; ok {
		o.LeafServiceWebproxyCachePeerIcpPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerIcpPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["options"]; ok {
		o.LeafServiceWebproxyCachePeerOptions = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerOptions = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafServiceWebproxyCachePeerType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerType = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
