// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceWebproxyCachePeer describes the resource data model.
type ServiceWebproxyCachePeer struct {
	SelfIdentifier types.String `tfsdk:"cache_peer_id" vyos:",self-id"`

	// LeafNodes
	LeafServiceWebproxyCachePeerAddress  types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafServiceWebproxyCachePeerHTTPPort types.Number `tfsdk:"http_port" vyos:"http-port,omitempty"`
	LeafServiceWebproxyCachePeerIcpPort  types.Number `tfsdk:"icp_port" vyos:"icp-port,omitempty"`
	LeafServiceWebproxyCachePeerOptions  types.String `tfsdk:"options" vyos:"options,omitempty"`
	LeafServiceWebproxyCachePeerType     types.String `tfsdk:"type" vyos:"type,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyCachePeer) GetVyosPath() []string {
	return []string{
		"service",

		"webproxy",

		"cache-peer",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyCachePeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"cache_peer_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specify other caches in a hierarchy

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  hostname  &emsp; |  Cache peers FQDN  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hostname or IP address of peer

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Squid cache-peer IPv4 address  |
    |  hostname  &emsp; |  Squid cache-peer hostname  |

`,
		},

		"http_port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Default Proxy Port

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1025-65535  &emsp; |  Default port number  |

`,

			// Default:          stringdefault.StaticString(`3128`),
			Computed: true,
		},

		"icp_port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer ICP port

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0  &emsp; |  Cache peer disabled  |
    |  number: 1-65535  &emsp; |  Cache peer ICP port  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"options": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer options

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Cache peer options  |

`,

			// Default:          stringdefault.StaticString(`no-query default`),
			Computed: true,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Squid peer type (default parent)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  parent  &emsp; |  Peer is a parent  |
    |  sibling  &emsp; |  Peer is a sibling  |
    |  multicast  &emsp; |  Peer is a member of a multicast group  |

`,

			// Default:          stringdefault.StaticString(`parent`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceWebproxyCachePeer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceWebproxyCachePeer) UnmarshalJSON(_ []byte) error {
	return nil
}
