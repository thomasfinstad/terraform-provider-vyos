// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceConsoleServerDevice describes the resource data model.
type ServiceConsoleServerDevice struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceConsoleServerDeviceDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafServiceConsoleServerDeviceAlias       types.String `tfsdk:"alias" vyos:"alias,omitempty"`
	LeafServiceConsoleServerDeviceSpeed       types.String `tfsdk:"speed" vyos:"speed,omitempty"`
	LeafServiceConsoleServerDeviceDataBits    types.String `tfsdk:"data_bits" vyos:"data-bits,omitempty"`
	LeafServiceConsoleServerDeviceStopBits    types.String `tfsdk:"stop_bits" vyos:"stop-bits,omitempty"`
	LeafServiceConsoleServerDeviceParity      types.String `tfsdk:"parity" vyos:"parity,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeServiceConsoleServerDeviceTCP *ServiceConsoleServerDeviceTCP `tfsdk:"ssh" vyos:"ssh,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceConsoleServerDevice) GetVyosPath() []string {
	return []string{
		"service",
		"console-server",
		"device",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceConsoleServerDevice) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `System serial interface name (ttyS or ttyUSB)

    |  Format  |  Description  |
    |----------|---------------|
    |  ttySxxx  |  Regular serial interface  |
    |  usbxbxpx  |  USB based serial interface  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"alias": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Human-readable name for this console

`,
		},

		"speed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port baud rate

`,
		},

		"data_bits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port data bits

`,

			// Default:          stringdefault.StaticString(`8`),
			Computed: true,
		},

		"stop_bits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port stop bits

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"parity": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Parity setting

`,

			// Default:          stringdefault.StaticString(`none`),
			Computed: true,
		},

		// Nodes

		"ssh": schema.SingleNestedAttribute{
			Attributes: ServiceConsoleServerDeviceTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `SSH remote access to this console

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceConsoleServerDevice) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceConsoleServerDeviceDescrIPtion.IsNull() && !o.LeafServiceConsoleServerDeviceDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafServiceConsoleServerDeviceDescrIPtion.ValueString()
	}

	if !o.LeafServiceConsoleServerDeviceAlias.IsNull() && !o.LeafServiceConsoleServerDeviceAlias.IsUnknown() {
		jsonData["alias"] = o.LeafServiceConsoleServerDeviceAlias.ValueString()
	}

	if !o.LeafServiceConsoleServerDeviceSpeed.IsNull() && !o.LeafServiceConsoleServerDeviceSpeed.IsUnknown() {
		jsonData["speed"] = o.LeafServiceConsoleServerDeviceSpeed.ValueString()
	}

	if !o.LeafServiceConsoleServerDeviceDataBits.IsNull() && !o.LeafServiceConsoleServerDeviceDataBits.IsUnknown() {
		jsonData["data-bits"] = o.LeafServiceConsoleServerDeviceDataBits.ValueString()
	}

	if !o.LeafServiceConsoleServerDeviceStopBits.IsNull() && !o.LeafServiceConsoleServerDeviceStopBits.IsUnknown() {
		jsonData["stop-bits"] = o.LeafServiceConsoleServerDeviceStopBits.ValueString()
	}

	if !o.LeafServiceConsoleServerDeviceParity.IsNull() && !o.LeafServiceConsoleServerDeviceParity.IsUnknown() {
		jsonData["parity"] = o.LeafServiceConsoleServerDeviceParity.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeServiceConsoleServerDeviceTCP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeServiceConsoleServerDeviceTCP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ssh"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceConsoleServerDevice) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafServiceConsoleServerDeviceDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["alias"]; ok {
		o.LeafServiceConsoleServerDeviceAlias = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceAlias = basetypes.NewStringNull()
	}

	if value, ok := jsonData["speed"]; ok {
		o.LeafServiceConsoleServerDeviceSpeed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceSpeed = basetypes.NewStringNull()
	}

	if value, ok := jsonData["data-bits"]; ok {
		o.LeafServiceConsoleServerDeviceDataBits = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceDataBits = basetypes.NewStringNull()
	}

	if value, ok := jsonData["stop-bits"]; ok {
		o.LeafServiceConsoleServerDeviceStopBits = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceStopBits = basetypes.NewStringNull()
	}

	if value, ok := jsonData["parity"]; ok {
		o.LeafServiceConsoleServerDeviceParity = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceConsoleServerDeviceParity = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["ssh"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeServiceConsoleServerDeviceTCP = &ServiceConsoleServerDeviceTCP{}

		err = json.Unmarshal(subJSONStr, o.NodeServiceConsoleServerDeviceTCP)
		if err != nil {
			return err
		}
	}

	return nil
}
