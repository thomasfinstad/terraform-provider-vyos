// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceConsoleServerDevice describes the resource data model.
type ServiceConsoleServerDevice struct {
	SelfIdentifier types.String `tfsdk:"device_id" vyos:",self-id"`

	// LeafNodes
	LeafServiceConsoleServerDeviceDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafServiceConsoleServerDeviceAlias       types.String `tfsdk:"alias" vyos:"alias,omitempty"`
	LeafServiceConsoleServerDeviceSpeed       types.String `tfsdk:"speed" vyos:"speed,omitempty"`
	LeafServiceConsoleServerDeviceDataBits    types.String `tfsdk:"data_bits" vyos:"data-bits,omitempty"`
	LeafServiceConsoleServerDeviceStopBits    types.String `tfsdk:"stop_bits" vyos:"stop-bits,omitempty"`
	LeafServiceConsoleServerDeviceParity      types.String `tfsdk:"parity" vyos:"parity,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeServiceConsoleServerDeviceTCP *ServiceConsoleServerDeviceTCP `tfsdk:"ssh" vyos:"ssh,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceConsoleServerDevice) GetVyosPath() []string {
	return []string{
		"service",

		"console-server",

		"device",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceConsoleServerDevice) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `device_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"device_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `System serial interface name (ttyS or ttyUSB)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ttySxxx  &emsp; |  Regular serial interface  |
    |  usbxbxpx  &emsp; |  USB based serial interface  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"alias": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Human-readable name for this console

`,
		},

		"speed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port baud rate

`,
		},

		"data_bits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port data bits

`,

			// Default:          stringdefault.StaticString(`8`),
			Computed: true,
		},

		"stop_bits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Serial port stop bits

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"parity": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Parity setting

`,

			// Default:          stringdefault.StaticString(`none`),
			Computed: true,
		},

		// Nodes

		"ssh": schema.SingleNestedAttribute{
			Attributes: ServiceConsoleServerDeviceTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `SSH remote access to this console

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceConsoleServerDevice) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceConsoleServerDevice) UnmarshalJSON(_ []byte) error {
	return nil
}
