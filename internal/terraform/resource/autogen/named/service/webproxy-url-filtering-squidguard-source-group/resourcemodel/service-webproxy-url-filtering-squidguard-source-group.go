// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceWebproxyURLFilteringSquIDguardSourceGroup describes the resource data model.
type ServiceWebproxyURLFilteringSquIDguardSourceGroup struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress        types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion    types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain         types.String `tfsdk:"domain" vyos:"domain,omitempty"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch   types.String `tfsdk:"ldap_ip_search" vyos:"ldap-ip-search,omitempty"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch types.String `tfsdk:"ldap_user_search" vyos:"ldap-user-search,omitempty"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser           types.String `tfsdk:"user" vyos:"user,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) GetVyosPath() []string {
	return []string{
		"service",
		"webproxy",
		"url-filtering",
		"squidguard",
		"source-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyURLFilteringSquIDguardSourceGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Source group name

    |  Format  |  Description  |
    |----------|---------------|
    |  name  |  Name of source group  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Address for source-group

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 address to match  |
    |  ipv4net  |  IPv4 prefix to match  |
    |  ipv4range  |  IPv4 address range to match  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description for source-group

`,
		},

		"domain": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain for source-group

    |  Format  |  Description  |
    |----------|---------------|
    |  domain  |  Domain name for the source-group  |

`,
		},

		"ldap_ip_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP search expression for an IP address list

`,
		},

		"ldap_user_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP search expression for a user group

`,
		},

		"user": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `List of user names

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.IsUnknown() {
		jsonData["address"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.ValueString()
	}

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.ValueString()
	}

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.IsUnknown() {
		jsonData["domain"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.ValueString()
	}

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.IsUnknown() {
		jsonData["ldap-ip-search"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.ValueString()
	}

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.IsUnknown() {
		jsonData["ldap-user-search"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.ValueString()
	}

	if !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.IsNull() && !o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.IsUnknown() {
		jsonData["user"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["domain"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ldap-ip-search"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ldap-user-search"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["user"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
