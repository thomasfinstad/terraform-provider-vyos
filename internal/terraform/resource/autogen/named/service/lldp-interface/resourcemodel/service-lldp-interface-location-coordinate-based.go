// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceLldpInterfaceLocationCoordinateBased describes the resource data model.
type ServiceLldpInterfaceLocationCoordinateBased struct {
	// LeafNodes
	LeafServiceLldpInterfaceLocationCoordinateBasedAltitude  types.String `tfsdk:"altitude" vyos:"altitude,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedDatum     types.String `tfsdk:"datum" vyos:"datum,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedLatitude  types.String `tfsdk:"latitude" vyos:"latitude,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedLongitude types.String `tfsdk:"longitude" vyos:"longitude,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceLldpInterfaceLocationCoordinateBased) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"altitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Altitude in meters

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  0  &emsp; |  No altitude  |
    |  [+-]<meters>  &emsp; |  Altitude in meters  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"datum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Coordinate datum type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  WGS84  &emsp; |  WGS84  |
    |  NAD83  &emsp; |  NAD83  |
    |  MLLW  &emsp; |  NAD83/MLLW  |

`,

			// Default:          stringdefault.StaticString(`WGS84`),
			Computed: true,
		},

		"latitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Latitude

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  <latitude>  &emsp; |  Latitude (example "37.524449N")  |

`,
		},

		"longitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Longitude

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  <longitude>  &emsp; |  Longitude (example "122.267255W")  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceLldpInterfaceLocationCoordinateBased) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceLldpInterfaceLocationCoordinateBased) UnmarshalJSON(_ []byte) error {
	return nil
}
