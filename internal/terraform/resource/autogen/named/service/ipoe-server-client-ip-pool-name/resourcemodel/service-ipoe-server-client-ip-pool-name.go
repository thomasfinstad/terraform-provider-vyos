// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceIPoeServerClientIPPoolName describes the resource data model.
type ServiceIPoeServerClientIPPoolName struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceIPoeServerClientIPPoolNameGatewayAddress types.String `tfsdk:"gateway_address" vyos:"gateway-address,omitempty"`
	LeafServiceIPoeServerClientIPPoolNameSubnet         types.String `tfsdk:"subnet" vyos:"subnet,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceIPoeServerClientIPPoolName) GetVyosPath() []string {
	return []string{
		"service",
		"ipoe-server",
		"client-ip-pool",
		"name",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceIPoeServerClientIPPoolName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Pool name

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Name of IP pool  |

`,
		},

		// LeafNodes

		"gateway_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Gateway IP address

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Default Gateway send to the client  |

`,
		},

		"subnet": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client IP subnet (CIDR notation)

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  IPv4 address and prefix length  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceIPoeServerClientIPPoolName) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceIPoeServerClientIPPoolNameGatewayAddress.IsNull() && !o.LeafServiceIPoeServerClientIPPoolNameGatewayAddress.IsUnknown() {
		jsonData["gateway-address"] = o.LeafServiceIPoeServerClientIPPoolNameGatewayAddress.ValueString()
	}

	if !o.LeafServiceIPoeServerClientIPPoolNameSubnet.IsNull() && !o.LeafServiceIPoeServerClientIPPoolNameSubnet.IsUnknown() {
		jsonData["subnet"] = o.LeafServiceIPoeServerClientIPPoolNameSubnet.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceIPoeServerClientIPPoolName) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["gateway-address"]; ok {
		o.LeafServiceIPoeServerClientIPPoolNameGatewayAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceIPoeServerClientIPPoolNameGatewayAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["subnet"]; ok {
		o.LeafServiceIPoeServerClientIPPoolNameSubnet = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceIPoeServerClientIPPoolNameSubnet = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
