// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceDNSForwardingDomain describes the resource data model.
type ServiceDNSForwardingDomain struct {
	SelfIdentifier types.String `tfsdk:"domain_id" vyos:",self-id"`

	// LeafNodes
	LeafServiceDNSForwardingDomainServer           types.List `tfsdk:"server" vyos:"server,omitempty"`
	LeafServiceDNSForwardingDomainAddnta           types.Bool `tfsdk:"addnta" vyos:"addnta,omitempty"`
	LeafServiceDNSForwardingDomainRecursionDesired types.Bool `tfsdk:"recursion_desired" vyos:"recursion-desired,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSForwardingDomain) GetVyosPath() []string {
	return []string{
		"service",

		"dns",

		"forwarding",

		"domain",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingDomain) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `domain_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"domain_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Domain to forward to a custom DNS server

`,
		},

		// LeafNodes

		"server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Server (DNS) to forward queries to

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Domain Name Server (DNS) IPv4 address  |
    |  ipv6  &emsp; |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		"addnta": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Add NTA (negative trust anchor) for this domain (must be set if the domain does not support DNSSEC)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"recursion_desired": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Set the "recursion desired" bit in requests to the upstream nameserver

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingDomain) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingDomain) UnmarshalJSON(_ []byte) error {
	return nil
}
