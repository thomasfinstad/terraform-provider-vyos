// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceDNSDynamicInterfaceService describes the resource data model.
type ServiceDNSDynamicInterfaceService struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceDNSDynamicInterface types.String `tfsdk:"interface" vyos:"interface_identifier,parent-id"`

	// LeafNodes
	LeafServiceDNSDynamicInterfaceServiceHostName types.List   `tfsdk:"host_name" vyos:"host-name,omitempty"`
	LeafServiceDNSDynamicInterfaceServiceLogin    types.String `tfsdk:"login" vyos:"login,omitempty"`
	LeafServiceDNSDynamicInterfaceServicePassword types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafServiceDNSDynamicInterfaceServiceProtocol types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafServiceDNSDynamicInterfaceServiceServer   types.String `tfsdk:"server" vyos:"server,omitempty"`
	LeafServiceDNSDynamicInterfaceServiceZone     types.String `tfsdk:"zone" vyos:"zone,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSDynamicInterfaceService) GetVyosPath() []string {
	return []string{
		"service",

		"dns",

		"dynamic",

		"interface",
		o.ParentIDServiceDNSDynamicInterface.ValueString(),

		"service",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSDynamicInterfaceService) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Service being used for Dynamic DNS

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Dynanmic DNS service with a custom name  |
    |  afraid  |  afraid.org Services  |
    |  changeip  |  changeip.com Services  |
    |  cloudflare  |  cloudflare.com Services  |
    |  dnspark  |  dnspark.com Services  |
    |  dslreports  |  dslreports.com Services  |
    |  dyndns  |  dyndns.com Services  |
    |  easydns  |  easydns.com Services  |
    |  namecheap  |  namecheap.com Services  |
    |  noip  |  noip.com Services  |
    |  sitelutions  |  sitelutions.com Services  |
    |  zoneedit  |  zoneedit.com Services  |

`,
		},

		"interface_identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface to send DDNS updates for

`,
		},

		// LeafNodes

		"host_name": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Hostname registered with DDNS service

`,
		},

		"login": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Login for DDNS service

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Password for DDNS service

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ddclient protocol used for DDNS service

    |  Format  |  Description  |
    |----------|---------------|
    |  changeip  |  ChangeIP protocol  |
    |  cloudflare  |  Cloudflare protocol  |
    |  dnsmadeeasy  |  DNS Made Easy protocol  |
    |  dnspark  |  DNS Park protocol  |
    |  dondominio  |  DonDominio protocol  |
    |  dslreports1  |  DslReports protocol  |
    |  dtdns  |  DtDNS protocol  |
    |  duckdns  |  DuckDNS protocol  |
    |  dyndns2  |  DynDNS protocol v2  |
    |  easydns  |  easyDNS protocol  |
    |  freedns  |  FreeDNS protocol  |
    |  freemyip  |  freemyip protocol  |
    |  googledomains  |  Google domains protocol  |
    |  hammernode1  |  Hammernode protocol  |
    |  namecheap  |  Namecheap protocol  |
    |  nfsn  |  NearlyFreeSpeech DNS protocol  |
    |  noip  |  No-IP protocol  |
    |  sitelutions  |  Sitelutions protocol  |
    |  woima  |  WOIMA protocol  |
    |  yandex  |  Yandex.DNS protocol  |
    |  zoneedit1  |  Zoneedit protocol  |

`,
		},

		"server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Remote server to connect to

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Server IPv4 address  |
    |  hostname  |  Server hostname/FQDN  |

`,
		},

		"zone": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DNS zone to update (only available with CloudFlare)

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSDynamicInterfaceService) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSDynamicInterfaceService) UnmarshalJSON(_ []byte) error {
	return nil
}
