// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSDynamicInterface describes the resource data model.
type ServiceDNSDynamicInterface struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"interface_id" vyos:",self-id"`

	// LeafNodes
	LeafServiceDNSDynamicInterfaceIPvsixEnable types.Bool `tfsdk:"ipv6_enable" vyos:"ipv6-enable,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceDNSDynamicInterfaceRfctwoonethreesix bool `tfsdk:"-" vyos:"rfc2136,ignore,child"`
	ExistsTagServiceDNSDynamicInterfaceService           bool `tfsdk:"-" vyos:"service,ignore,child"`

	// Nodes
	NodeServiceDNSDynamicInterfaceUseWeb *ServiceDNSDynamicInterfaceUseWeb `tfsdk:"use_web" vyos:"use-web,omitempty"`
}

// SetID configures the resource ID
func (o *ServiceDNSDynamicInterface) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSDynamicInterface) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"dns",

		"dynamic",

		"interface",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSDynamicInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"interface_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface to send DDNS updates for

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"ipv6_enable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Allow explicit IPv6 addresses for Dynamic DNS for this interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

		"use_web": schema.SingleNestedAttribute{
			Attributes: ServiceDNSDynamicInterfaceUseWeb{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Web check used for obtaining the external IP address

`,
		},
	}
}
