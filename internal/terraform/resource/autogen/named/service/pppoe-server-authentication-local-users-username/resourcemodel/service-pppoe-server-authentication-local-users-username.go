// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServicePppoeServerAuthenticationLocalUsersUsername describes the resource data model.
type ServicePppoeServerAuthenticationLocalUsersUsername struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable  types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP types.String `tfsdk:"static_ip" vyos:"static-ip,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeServicePppoeServerAuthenticationLocalUsersUsernameRateLimit *ServicePppoeServerAuthenticationLocalUsersUsernameRateLimit `tfsdk:"rate_limit" vyos:"rate-limit,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServicePppoeServerAuthenticationLocalUsersUsername) GetVyosPath() []string {
	return []string{
		"service",
		"pppoe-server",
		"authentication",
		"local-users",
		"username",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServicePppoeServerAuthenticationLocalUsersUsername) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `User name for authentication

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Password for authentication

`,
		},

		"static_ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Static client IP address

`,

			// Default:          stringdefault.StaticString(`&`),
			Computed: true,
		},

		// Nodes

		"rate_limit": schema.SingleNestedAttribute{
			Attributes: ServicePppoeServerAuthenticationLocalUsersUsernameRateLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Upload/Download speed limits

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServicePppoeServerAuthenticationLocalUsersUsername) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable.IsNull() && !o.LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable.IsUnknown() {
		jsonData["disable"] = o.LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable.ValueString()
	}

	if !o.LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword.IsNull() && !o.LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword.IsUnknown() {
		jsonData["password"] = o.LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword.ValueString()
	}

	if !o.LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP.IsNull() && !o.LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP.IsUnknown() {
		jsonData["static-ip"] = o.LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeServicePppoeServerAuthenticationLocalUsersUsernameRateLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeServicePppoeServerAuthenticationLocalUsersUsernameRateLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rate-limit"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServicePppoeServerAuthenticationLocalUsersUsername) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernameDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernamePassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["static-ip"]; ok {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServicePppoeServerAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["rate-limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeServicePppoeServerAuthenticationLocalUsersUsernameRateLimit = &ServicePppoeServerAuthenticationLocalUsersUsernameRateLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeServicePppoeServerAuthenticationLocalUsersUsernameRateLimit)
		if err != nil {
			return err
		}
	}

	return nil
}
