// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceSnmpVthreeUser describes the resource data model.
type ServiceSnmpVthreeUser struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceSnmpVthreeUserGroup types.String `tfsdk:"group" vyos:"group,omitempty"`
	LeafServiceSnmpVthreeUserMode  types.String `tfsdk:"mode" vyos:"mode,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeServiceSnmpVthreeUserAuth    *ServiceSnmpVthreeUserAuth    `tfsdk:"auth" vyos:"auth,omitempty"`
	NodeServiceSnmpVthreeUserPrivacy *ServiceSnmpVthreeUserPrivacy `tfsdk:"privacy" vyos:"privacy,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpVthreeUser) GetVyosPath() []string {
	return []string{
		"service",
		"snmp",
		"v3",
		"user",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeUser) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the user with name username

`,
		},

		// LeafNodes

		"group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies group for user name

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Define access permission

    |  Format  |  Description  |
    |----------|---------------|
    |  ro  |  Read-Only  |
    |  rw  |  read write  |

`,

			// Default:          stringdefault.StaticString(`ro`),
			Computed: true,
		},

		// Nodes

		"auth": schema.SingleNestedAttribute{
			Attributes: ServiceSnmpVthreeUserAuth{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Specifies the auth

`,
		},

		"privacy": schema.SingleNestedAttribute{
			Attributes: ServiceSnmpVthreeUserPrivacy{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Defines the privacy

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceSnmpVthreeUser) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceSnmpVthreeUserGroup.IsNull() && !o.LeafServiceSnmpVthreeUserGroup.IsUnknown() {
		jsonData["group"] = o.LeafServiceSnmpVthreeUserGroup.ValueString()
	}

	if !o.LeafServiceSnmpVthreeUserMode.IsNull() && !o.LeafServiceSnmpVthreeUserMode.IsUnknown() {
		jsonData["mode"] = o.LeafServiceSnmpVthreeUserMode.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeServiceSnmpVthreeUserAuth).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeServiceSnmpVthreeUserAuth)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["auth"] = subData
	}

	if !reflect.ValueOf(o.NodeServiceSnmpVthreeUserPrivacy).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeServiceSnmpVthreeUserPrivacy)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["privacy"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceSnmpVthreeUser) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["group"]; ok {
		o.LeafServiceSnmpVthreeUserGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafServiceSnmpVthreeUserMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserMode = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["auth"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeServiceSnmpVthreeUserAuth = &ServiceSnmpVthreeUserAuth{}

		err = json.Unmarshal(subJSONStr, o.NodeServiceSnmpVthreeUserAuth)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["privacy"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeServiceSnmpVthreeUserPrivacy = &ServiceSnmpVthreeUserPrivacy{}

		err = json.Unmarshal(subJSONStr, o.NodeServiceSnmpVthreeUserPrivacy)
		if err != nil {
			return err
		}
	}

	return nil
}
