// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSDynamicInterfaceRfctwoonethreesix describes the resource data model.
type ServiceDNSDynamicInterfaceRfctwoonethreesix struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceDNSDynamicInterface any `tfsdk:"interface" vyos:"interface,parent-id"`

	// LeafNodes
	LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey    types.String `tfsdk:"key" vyos:"key,omitempty"`
	LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord types.String `tfsdk:"record" vyos:"record,omitempty"`
	LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer types.String `tfsdk:"server" vyos:"server,omitempty"`
	LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL    types.String `tfsdk:"ttl" vyos:"ttl,omitempty"`
	LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone   types.String `tfsdk:"zone" vyos:"zone,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSDynamicInterfaceRfctwoonethreesix) GetVyosPath() []string {
	return []string{
		"service",
		"dns",
		"dynamic",
		"interface",
		"rfc2136",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSDynamicInterfaceRfctwoonethreesix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `RFC2136 Update name

`,
		},

		// LeafNodes

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `File containing the secret key shared with remote DNS server

    |  Format  |  Description  |
    |----------|---------------|
    |  filename  |  File in /config/auth directory  |

`,
		},

		"record": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Record to be updated

`,
		},

		"server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Server to be updated

`,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time To Live (default: 600)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-86400  |  DNS forwarding cache size  |

`,

			// Default:          stringdefault.StaticString(`600`),
			Computed: true,
		},

		"zone": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Zone to be updated

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSDynamicInterfaceRfctwoonethreesix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey.IsNull() && !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey.IsUnknown() {
		jsonData["key"] = o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey.ValueString()
	}

	if !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord.IsNull() && !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord.IsUnknown() {
		jsonData["record"] = o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord.ValueString()
	}

	if !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer.IsNull() && !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer.IsUnknown() {
		jsonData["server"] = o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer.ValueString()
	}

	if !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL.IsNull() && !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL.IsUnknown() {
		jsonData["ttl"] = o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL.ValueString()
	}

	if !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone.IsNull() && !o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone.IsUnknown() {
		jsonData["zone"] = o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSDynamicInterfaceRfctwoonethreesix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["key"]; ok {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["record"]; ok {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixRecord = basetypes.NewStringNull()
	}

	if value, ok := jsonData["server"]; ok {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixServer = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl"]; ok {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixTTL = basetypes.NewStringNull()
	}

	if value, ok := jsonData["zone"]; ok {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSDynamicInterfaceRfctwoonethreesixZone = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
