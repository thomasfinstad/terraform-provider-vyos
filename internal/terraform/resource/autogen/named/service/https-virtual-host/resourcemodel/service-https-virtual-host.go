// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceHTTPSVirtualHost describes the resource data model.
type ServiceHTTPSVirtualHost struct {
	SelfIdentifier types.String `tfsdk:"virtual_host_id" vyos:",self-id"`

	// LeafNodes
	LeafServiceHTTPSVirtualHostListenAddress types.String `tfsdk:"listen_address" vyos:"listen-address,omitempty"`
	LeafServiceHTTPSVirtualHostListenPort    types.Number `tfsdk:"listen_port" vyos:"listen-port,omitempty"`
	LeafServiceHTTPSVirtualHostServerName    types.List   `tfsdk:"server_name" vyos:"server-name,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceHTTPSVirtualHost) GetVyosPath() []string {
	return []string{
		"service",

		"https",

		"virtual-host",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceHTTPSVirtualHost) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `virtual_host_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"virtual_host_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Identifier for virtual host

`,
		},

		// LeafNodes

		"listen_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Address to listen for HTTPS requests

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  HTTPS IPv4 address  |
    |  ipv6  &emsp; |  HTTPS IPv6 address  |
    |  '&'  &emsp; |  any  |

`,
		},

		"listen_port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Port to listen for HTTPS requests; default 443

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,
		},

		"server_name": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Server names: exact, wildcard, or regex

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceHTTPSVirtualHost) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceHTTPSVirtualHost) UnmarshalJSON(_ []byte) error {
	return nil
}
