// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceUpnpRule describes the resource data model.
type ServiceUpnpRule struct {
	ID types.Number `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceUpnpRuleDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafServiceUpnpRuleExternalPortRange types.String `tfsdk:"external_port_range" vyos:"external-port-range,omitempty"`
	LeafServiceUpnpRuleInternalPortRange types.String `tfsdk:"internal_port_range" vyos:"internal-port-range,omitempty"`
	LeafServiceUpnpRuleIP                types.String `tfsdk:"ip" vyos:"ip,omitempty"`
	LeafServiceUpnpRuleAction            types.String `tfsdk:"action" vyos:"action,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceUpnpRule) GetVyosPath() []string {
	return []string{
		"service",

		"upnp",

		"rule",
		o.ID.ValueBigFloat().String(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceUpnpRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `UPnP Rule

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  Rule number  |

`,
		},

		// LeafNodes

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"external_port_range": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port range (REQUIRE)

    |  Format  |  Description  |
    |----------|---------------|
    |  <port>  |  single port  |
    |  <portN>-<portM>  |  Port range (use '-' as delimiter)  |

`,
		},

		"internal_port_range": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port range (REQUIRE)

    |  Format  |  Description  |
    |----------|---------------|
    |  <port>  |  single port  |
    |  <portN>-<portM>  |  Port range (use '-' as delimiter)  |

`,
		},

		"ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `The IP to which this rule applies (REQUIRE)

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  The IPv4 address to which this rule applies  |
    |  ipv4net  |  The IPv4 to which this rule applies  |

`,
		},

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Actions against the rule (REQUIRE)

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceUpnpRule) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceUpnpRule) UnmarshalJSON(_ []byte) error {
	return nil
}
