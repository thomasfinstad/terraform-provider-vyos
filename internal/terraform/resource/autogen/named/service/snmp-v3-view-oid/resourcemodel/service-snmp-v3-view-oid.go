// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceSnmpVthreeViewOID describes the resource data model.
type ServiceSnmpVthreeViewOID struct {
	ID types.String `tfsdk:"id" vyos:"_,tfsdk-id"`

	SelfIdentifier types.String `tfsdk:"oid_id" vyos:",self-id"`

	ParentIDServiceSnmpVthreeView types.String `tfsdk:"view" vyos:"view,parent-id"`

	// LeafNodes
	LeafServiceSnmpVthreeViewOIDExclude types.String `tfsdk:"exclude" vyos:"exclude,omitempty"`
	LeafServiceSnmpVthreeViewOIDMask    types.String `tfsdk:"mask" vyos:"mask,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// SetID configures the resource ID
func (o *ServiceSnmpVthreeViewOID) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpVthreeViewOID) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return []string{
		"service",

		"snmp",

		"v3",

		"view",
		o.ParentIDServiceSnmpVthreeView.ValueString(),

		"oid",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeViewOID) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field seperated by dunder (`__`).",
		},
		"oid_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the oid

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		"view_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the view with name viewname

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Exclude is an optional argument

`,
		},

		"mask": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Defines a bit-mask that is indicating which subidentifiers of the associated subtree OID should be regarded as significant

`,
		},

		// Nodes

	}
}
