// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceDhcpServerSharedNetworkNameSubnetStaticRoute describes the resource data model.
type ServiceDhcpServerSharedNetworkNameSubnetStaticRoute struct {
	SelfIdentifier types.String `tfsdk:"static_route_id" vyos:",self-id"`

	ParentIDServiceDhcpServerSharedNetworkName types.String `tfsdk:"shared_network_name" vyos:"shared-network-name,parent-id"`

	ParentIDServiceDhcpServerSharedNetworkNameSubnet types.String `tfsdk:"subnet" vyos:"subnet,parent-id"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameSubnetStaticRouteNextHop types.String `tfsdk:"next_hop" vyos:"next-hop,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkNameSubnetStaticRoute) GetVyosPath() []string {
	return []string{
		"service",

		"dhcp-server",

		"shared-network-name",
		o.ParentIDServiceDhcpServerSharedNetworkName.ValueString(),

		"subnet",
		o.ParentIDServiceDhcpServerSharedNetworkNameSubnet.ValueString(),

		"static-route",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkNameSubnetStaticRoute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `static_route_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"static_route_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Classless static route destination subnet

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 address and prefix length  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		"shared_network_name_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of DHCP shared network

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		"subnet_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `DHCP subnet for shared network

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  IPv4 address and prefix length  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"next_hop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of router to be used to reach the destination subnet

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address of router  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDhcpServerSharedNetworkNameSubnetStaticRoute) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDhcpServerSharedNetworkNameSubnetStaticRoute) UnmarshalJSON(_ []byte) error {
	return nil
}
