// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceDNSForwardingAuthoritativeDomain any `tfsdk:"authoritative_domain" vyos:"authoritative-domain,parent-id"`

	ParentIDServiceDNSForwardingAuthoritativeDomainRecordsSrv any `tfsdk:"srv" vyos:"srv,parent-id"`

	// LeafNodes
	LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname types.String `tfsdk:"hostname" vyos:"hostname,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort     types.String `tfsdk:"port" vyos:"port,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority types.String `tfsdk:"priority" vyos:"priority,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight   types.String `tfsdk:"weight" vyos:"weight,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry) GetVyosPath() []string {
	return []string{
		"service",
		"dns",
		"forwarding",
		"authoritative-domain",
		"records",
		"srv",
		"entry",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Service entry

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  Entry number  |

`,
		},

		// LeafNodes

		"hostname": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Server hostname

    |  Format  |  Description  |
    |----------|---------------|
    |  name.example.com  |  An absolute DNS name  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  TCP/UDP port number  |

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Entry priority

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  Entry priority (lower numbers are higher priority)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"weight": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Entry weight

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  Entry weight  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname.IsUnknown() {
		jsonData["hostname"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort.IsUnknown() {
		jsonData["port"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority.IsUnknown() {
		jsonData["priority"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight.IsUnknown() {
		jsonData["weight"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsSrvEntry) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["hostname"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryHostname = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryPriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["weight"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsSrvEntryWeight = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
