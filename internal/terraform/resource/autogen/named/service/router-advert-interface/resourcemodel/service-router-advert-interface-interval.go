// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceRouterAdvertInterfaceInterval describes the resource data model.
type ServiceRouterAdvertInterfaceInterval struct {
	// LeafNodes
	LeafServiceRouterAdvertInterfaceIntervalMax types.String `tfsdk:"max" vyos:"max,omitempty"`
	LeafServiceRouterAdvertInterfaceIntervalMin types.String `tfsdk:"min" vyos:"min,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceRouterAdvertInterfaceInterval) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"max": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum interval between unsolicited multicast RAs

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:4-1800  |  Maximum interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`600`),
			Computed: true,
		},

		"min": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval between unsolicited multicast RAs

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:3-1350  |  Minimum interval in seconds  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceRouterAdvertInterfaceInterval) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceRouterAdvertInterfaceIntervalMax.IsNull() && !o.LeafServiceRouterAdvertInterfaceIntervalMax.IsUnknown() {
		jsonData["max"] = o.LeafServiceRouterAdvertInterfaceIntervalMax.ValueString()
	}

	if !o.LeafServiceRouterAdvertInterfaceIntervalMin.IsNull() && !o.LeafServiceRouterAdvertInterfaceIntervalMin.IsUnknown() {
		jsonData["min"] = o.LeafServiceRouterAdvertInterfaceIntervalMin.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceRouterAdvertInterfaceInterval) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["max"]; ok {
		o.LeafServiceRouterAdvertInterfaceIntervalMax = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceRouterAdvertInterfaceIntervalMax = basetypes.NewStringNull()
	}

	if value, ok := jsonData["min"]; ok {
		o.LeafServiceRouterAdvertInterfaceIntervalMin = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceRouterAdvertInterfaceIntervalMin = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
