// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceRouterAdvertInterface describes the resource data model.
type ServiceRouterAdvertInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafServiceRouterAdvertInterfaceHopLimit           types.Number `tfsdk:"hop_limit" vyos:"hop-limit,omitempty"`
	LeafServiceRouterAdvertInterfaceDefaultLifetime    types.String `tfsdk:"default_lifetime" vyos:"default-lifetime,omitempty"`
	LeafServiceRouterAdvertInterfaceDefaultPreference  types.String `tfsdk:"default_preference" vyos:"default-preference,omitempty"`
	LeafServiceRouterAdvertInterfaceDNSsl              types.List   `tfsdk:"dnssl" vyos:"dnssl,omitempty"`
	LeafServiceRouterAdvertInterfaceLinkMtu            types.Number `tfsdk:"link_mtu" vyos:"link-mtu,omitempty"`
	LeafServiceRouterAdvertInterfaceManagedFlag        types.Bool   `tfsdk:"managed_flag" vyos:"managed-flag,omitempty"`
	LeafServiceRouterAdvertInterfaceNameServer         types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`
	LeafServiceRouterAdvertInterfaceNameServerLifetime types.Number `tfsdk:"name_server_lifetime" vyos:"name-server-lifetime,omitempty"`
	LeafServiceRouterAdvertInterfaceOtherConfigFlag    types.Bool   `tfsdk:"other_config_flag" vyos:"other-config-flag,omitempty"`
	LeafServiceRouterAdvertInterfaceSourceAddress      types.List   `tfsdk:"source_address" vyos:"source-address,omitempty"`
	LeafServiceRouterAdvertInterfaceReachableTime      types.Number `tfsdk:"reachable_time" vyos:"reachable-time,omitempty"`
	LeafServiceRouterAdvertInterfaceRetransTimer       types.Number `tfsdk:"retrans_timer" vyos:"retrans-timer,omitempty"`
	LeafServiceRouterAdvertInterfaceNoSendAdvert       types.Bool   `tfsdk:"no_send_advert" vyos:"no-send-advert,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagServiceRouterAdvertInterfaceRoute  bool `tfsdk:"route" vyos:"route,child"`
	ExistsTagServiceRouterAdvertInterfacePrefix bool `tfsdk:"prefix" vyos:"prefix,child"`

	// Nodes
	NodeServiceRouterAdvertInterfaceInterval *ServiceRouterAdvertInterfaceInterval `tfsdk:"interval" vyos:"interval,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceRouterAdvertInterface) GetVyosPath() []string {
	return []string{
		"service",

		"router-advert",

		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceRouterAdvertInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface to send RA on

`,
		},

		// LeafNodes

		"hop_limit": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Set Hop Count field of the IP header for outgoing packets

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Unspecified (by this router)  |
    |  u32:1-255  |  Value should represent current diameter of the Internet  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		"default_lifetime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Lifetime associated with the default router in units of seconds

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:4-9000  |  Router Lifetime in seconds  |
    |  0  |  Not a default router  |

`,
		},

		"default_preference": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Preference associated with the default router,

    |  Format  |  Description  |
    |----------|---------------|
    |  low  |  Default router has low preference  |
    |  medium  |  Default router has medium preference  |
    |  high  |  Default router has high preference  |

`,

			// Default:          stringdefault.StaticString(`medium`),
			Computed: true,
		},

		"dnssl": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `DNS search list

`,
		},

		"link_mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Link MTU value placed in RAs, exluded in RAs if unset

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1280-9000  |  Link MTU value in RAs  |

`,
		},

		"managed_flag": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Hosts use the administered (stateful) protocol for address autoconfiguration in addition to any addresses autoconfigured using SLAAC

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6  |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		"name_server_lifetime": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum duration how long the RDNSS entries are used

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Name-servers should no longer be used  |
    |  u32:1-7200  |  Maximum interval in seconds  |

`,
		},

		"other_config_flag": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Hosts use the administered (stateful) protocol for autoconfiguration of other (non-address) information

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"source_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Use IPv6 address as source address. Useful with VRRP.

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6  |  IPv6 address to be advertized (must be configured on interface)  |

`,
		},

		"reachable_time": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Time, in milliseconds, that a node assumes a neighbor is reachable after having received a reachability confirmation

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Reachable Time unspecified by this router  |
    |  u32:1-3600000  |  Reachable Time value in RAs (in milliseconds)  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"retrans_timer": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Time in milliseconds between retransmitted Neighbor Solicitation messages

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Time, in milliseconds, between retransmitted Neighbor Solicitation messages  |
    |  u32:1-4294967295  |  Minimum interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"no_send_advert": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Do not send router adverts

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

		"interval": schema.SingleNestedAttribute{
			Attributes: ServiceRouterAdvertInterfaceInterval{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set interval between unsolicited multicast RAs

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceRouterAdvertInterface) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceRouterAdvertInterface) UnmarshalJSON(_ []byte) error {
	return nil
}
