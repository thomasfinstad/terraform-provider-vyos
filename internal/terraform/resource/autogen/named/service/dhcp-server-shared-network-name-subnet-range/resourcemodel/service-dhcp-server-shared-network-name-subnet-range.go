// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDhcpServerSharedNetworkNameSubnetRange describes the resource data model.
type ServiceDhcpServerSharedNetworkNameSubnetRange struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDServiceDhcpServerSharedNetworkName any `tfsdk:"shared_network_name" vyos:"shared-network-name,parent-id"`

	ParentIDServiceDhcpServerSharedNetworkNameSubnet any `tfsdk:"subnet" vyos:"subnet,parent-id"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart types.String `tfsdk:"start" vyos:"start,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop  types.String `tfsdk:"stop" vyos:"stop,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkNameSubnetRange) GetVyosPath() []string {
	return []string{
		"service",
		"dhcp-server",
		"shared-network-name",
		"subnet",
		"range",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkNameSubnetRange) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `DHCP lease range

`,
		},

		// LeafNodes

		"start": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `First IP address for DHCP lease range

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 start address of pool  |

`,
		},

		"stop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Last IP address for DHCP lease range

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 end address of pool  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDhcpServerSharedNetworkNameSubnetRange) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart.IsUnknown() {
		jsonData["start"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop.IsUnknown() {
		jsonData["stop"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDhcpServerSharedNetworkNameSubnetRange) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["start"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStart = basetypes.NewStringNull()
	}

	if value, ok := jsonData["stop"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetRangeStop = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
