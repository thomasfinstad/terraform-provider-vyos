// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyShaperHfscClass describes the resource data model.
type QosPolicyShaperHfscClass struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDQosPolicyShaperHfsc any `tfsdk:"shaper_hfsc" vyos:"shaper-hfsc,parent-id"`

	// LeafNodes
	LeafQosPolicyShaperHfscClassDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagQosPolicyShaperHfscClassMatch bool `tfsdk:"match" vyos:"match,child"`

	// Nodes
	NodeQosPolicyShaperHfscClassLinkshare  *QosPolicyShaperHfscClassLinkshare  `tfsdk:"linkshare" vyos:"linkshare,omitempty"`
	NodeQosPolicyShaperHfscClassRealtime   *QosPolicyShaperHfscClassRealtime   `tfsdk:"realtime" vyos:"realtime,omitempty"`
	NodeQosPolicyShaperHfscClassUpperlimit *QosPolicyShaperHfscClassUpperlimit `tfsdk:"upperlimit" vyos:"upperlimit,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyShaperHfscClass) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"shaper-hfsc",
		"class",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperHfscClass) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Class ID

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-4095  |  Class Identifier  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		// Nodes

		"linkshare": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassLinkshare{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Linkshare class settings

`,
		},

		"realtime": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassRealtime{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Realtime class settings

`,
		},

		"upperlimit": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassUpperlimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Upperlimit class settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyShaperHfscClass) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyShaperHfscClassDescrIPtion.IsNull() && !o.LeafQosPolicyShaperHfscClassDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyShaperHfscClassDescrIPtion.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassLinkshare).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassLinkshare)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["linkshare"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassRealtime).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassRealtime)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["realtime"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassUpperlimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassUpperlimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["upperlimit"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyShaperHfscClass) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyShaperHfscClassDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassDescrIPtion = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["linkshare"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassLinkshare = &QosPolicyShaperHfscClassLinkshare{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassLinkshare)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["realtime"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassRealtime = &QosPolicyShaperHfscClassRealtime{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassRealtime)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["upperlimit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassUpperlimit = &QosPolicyShaperHfscClassUpperlimit{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassUpperlimit)
		if err != nil {
			return err
		}
	}

	return nil
}
