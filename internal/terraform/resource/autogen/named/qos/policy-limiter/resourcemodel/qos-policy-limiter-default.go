// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyLimiterDefault describes the resource data model.
type QosPolicyLimiterDefault struct {
	// LeafNodes
	LeafQosPolicyLimiterDefaultBandwIDth types.String `tfsdk:"bandwidth" vyos:"bandwidth,omitempty"`
	LeafQosPolicyLimiterDefaultBurst     types.String `tfsdk:"burst" vyos:"burst,omitempty"`
	LeafQosPolicyLimiterDefaultExceed    types.String `tfsdk:"exceed" vyos:"exceed,omitempty"`
	LeafQosPolicyLimiterDefaultNotExceed types.String `tfsdk:"not_exceed" vyos:"not-exceed,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyLimiterDefault) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

    |  Format  |  Description  |
    |----------|---------------|
    |  <number>  |  Bits per second  |
    |  <number>bit  |  Bits per second  |
    |  <number>kbit  |  Kilobits per second  |
    |  <number>mbit  |  Megabits per second  |
    |  <number>gbit  |  Gigabits per second  |
    |  <number>tbit  |  Terabits per second  |
    |  <number>%  |  Percentage of interface link speed  |

`,
		},

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst size for this class

    |  Format  |  Description  |
    |----------|---------------|
    |  <number>  |  Bytes  |
    |  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |

`,

			// Default:          stringdefault.StaticString(`15k`),
			Computed: true,
		},

		"exceed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default action for packets exceeding the limiter

    |  Format  |  Description  |
    |----------|---------------|
    |  continue  |  Do not do anything, just continue with the next action in line  |
    |  drop  |  Drop the packet immediately  |
    |  ok  |  Accept the packet  |
    |  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
    |  pipe  |  Pass the packet to the next action in line  |

`,

			// Default:          stringdefault.StaticString(`drop`),
			Computed: true,
		},

		"not_exceed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default action for packets not exceeding the limiter

    |  Format  |  Description  |
    |----------|---------------|
    |  continue  |  Do not do anything, just continue with the next action in line  |
    |  drop  |  Drop the packet immediately  |
    |  ok  |  Accept the packet  |
    |  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
    |  pipe  |  Pass the packet to the next action in line  |

`,

			// Default:          stringdefault.StaticString(`ok`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyLimiterDefault) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyLimiterDefaultBandwIDth.IsNull() && !o.LeafQosPolicyLimiterDefaultBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafQosPolicyLimiterDefaultBandwIDth.ValueString()
	}

	if !o.LeafQosPolicyLimiterDefaultBurst.IsNull() && !o.LeafQosPolicyLimiterDefaultBurst.IsUnknown() {
		jsonData["burst"] = o.LeafQosPolicyLimiterDefaultBurst.ValueString()
	}

	if !o.LeafQosPolicyLimiterDefaultExceed.IsNull() && !o.LeafQosPolicyLimiterDefaultExceed.IsUnknown() {
		jsonData["exceed"] = o.LeafQosPolicyLimiterDefaultExceed.ValueString()
	}

	if !o.LeafQosPolicyLimiterDefaultNotExceed.IsNull() && !o.LeafQosPolicyLimiterDefaultNotExceed.IsUnknown() {
		jsonData["not-exceed"] = o.LeafQosPolicyLimiterDefaultNotExceed.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyLimiterDefault) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafQosPolicyLimiterDefaultBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterDefaultBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["burst"]; ok {
		o.LeafQosPolicyLimiterDefaultBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterDefaultBurst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["exceed"]; ok {
		o.LeafQosPolicyLimiterDefaultExceed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterDefaultExceed = basetypes.NewStringNull()
	}

	if value, ok := jsonData["not-exceed"]; ok {
		o.LeafQosPolicyLimiterDefaultNotExceed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterDefaultNotExceed = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
