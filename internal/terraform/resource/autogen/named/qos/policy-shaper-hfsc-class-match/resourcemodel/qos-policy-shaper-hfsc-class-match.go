// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyShaperHfscClassMatch describes the resource data model.
type QosPolicyShaperHfscClassMatch struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDQosPolicyShaperHfsc any `tfsdk:"shaper_hfsc" vyos:"shaper-hfsc,parent-id"`

	ParentIDQosPolicyShaperHfscClass any `tfsdk:"class" vyos:"class,parent-id"`

	// LeafNodes
	LeafQosPolicyShaperHfscClassMatchDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafQosPolicyShaperHfscClassMatchInterface   types.String `tfsdk:"interface" vyos:"interface,omitempty"`
	LeafQosPolicyShaperHfscClassMatchMark        types.String `tfsdk:"mark" vyos:"mark,omitempty"`
	LeafQosPolicyShaperHfscClassMatchVif         types.String `tfsdk:"vif" vyos:"vif,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeQosPolicyShaperHfscClassMatchEther  *QosPolicyShaperHfscClassMatchEther  `tfsdk:"ether" vyos:"ether,omitempty"`
	NodeQosPolicyShaperHfscClassMatchIP     *QosPolicyShaperHfscClassMatchIP     `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeQosPolicyShaperHfscClassMatchIPvsix *QosPolicyShaperHfscClassMatchIPvsix `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyShaperHfscClassMatch) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"shaper-hfsc",
		"class",
		"match",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperHfscClassMatch) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Class matching rule name

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface to use

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Interface name  |

`,
		},

		"mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match on mark applied by firewall

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  FW mark to match  |

`,
		},

		"vif": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID for this match

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-4095  |  Virtual Local Area Network (VLAN) tag   |

`,
		},

		// Nodes

		"ether": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchEther{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Ethernet header match

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match IP protocol header

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match IPv6 protocol header

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyShaperHfscClassMatch) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyShaperHfscClassMatchDescrIPtion.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyShaperHfscClassMatchDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyShaperHfscClassMatchInterface.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchInterface.IsUnknown() {
		jsonData["interface"] = o.LeafQosPolicyShaperHfscClassMatchInterface.ValueString()
	}

	if !o.LeafQosPolicyShaperHfscClassMatchMark.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchMark.IsUnknown() {
		jsonData["mark"] = o.LeafQosPolicyShaperHfscClassMatchMark.ValueString()
	}

	if !o.LeafQosPolicyShaperHfscClassMatchVif.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchVif.IsUnknown() {
		jsonData["vif"] = o.LeafQosPolicyShaperHfscClassMatchVif.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchEther).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchEther)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ether"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyShaperHfscClassMatch) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interface"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mark"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchMark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vif"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchVif = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchVif = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["ether"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchEther = &QosPolicyShaperHfscClassMatchEther{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchEther)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchIP = &QosPolicyShaperHfscClassMatchIP{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchIPvsix = &QosPolicyShaperHfscClassMatchIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchIPvsix)
		if err != nil {
			return err
		}
	}

	return nil
}
