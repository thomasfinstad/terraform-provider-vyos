// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyShaperHfscClassMatchIP describes the resource data model.
type QosPolicyShaperHfscClassMatchIP struct {
	// LeafNodes
	LeafQosPolicyShaperHfscClassMatchIPDscp      types.String `tfsdk:"dscp" vyos:"dscp,omitempty"`
	LeafQosPolicyShaperHfscClassMatchIPMaxLength types.String `tfsdk:"max_length" vyos:"max-length,omitempty"`
	LeafQosPolicyShaperHfscClassMatchIPProtocol  types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeQosPolicyShaperHfscClassMatchIPDestination *QosPolicyShaperHfscClassMatchIPDestination `tfsdk:"destination" vyos:"destination,omitempty"`
	NodeQosPolicyShaperHfscClassMatchIPSource      *QosPolicyShaperHfscClassMatchIPSource      `tfsdk:"source" vyos:"source,omitempty"`
	NodeQosPolicyShaperHfscClassMatchIPTCP         *QosPolicyShaperHfscClassMatchIPTCP         `tfsdk:"tcp" vyos:"tcp,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperHfscClassMatchIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
    |  default  |  match DSCP (000000)  |
    |  reliability  |  match DSCP (000001)  |
    |  throughput  |  match DSCP (000010)  |
    |  lowdelay  |  match DSCP (000100)  |
    |  priority  |  match DSCP (001000)  |
    |  immediate  |  match DSCP (010000)  |
    |  flash  |  match DSCP (011000)  |
    |  flash-override  |  match DSCP (100000)  |
    |  critical  |  match DSCP (101000)  |
    |  internet  |  match DSCP (110000)  |
    |  network  |  match DSCP (111000)  |
    |  AF11  |  High-throughput data  |
    |  AF12  |  High-throughput data  |
    |  AF13  |  High-throughput data  |
    |  AF21  |  Low-latency data  |
    |  AF22  |  Low-latency data  |
    |  AF23  |  Low-latency data  |
    |  AF31  |  Multimedia streaming  |
    |  AF32  |  Multimedia streaming  |
    |  AF33  |  Multimedia streaming  |
    |  AF41  |  Multimedia conferencing  |
    |  AF42  |  Multimedia conferencing  |
    |  AF43  |  Multimedia conferencing  |
    |  CS1  |  Low-priority data  |
    |  CS2  |  OAM  |
    |  CS3  |  Broadcast video  |
    |  CS4  |  Real-time interactive  |
    |  CS5  |  Signaling  |
    |  CS6  |  Network control  |
    |  CS7  |    |
    |  EF  |  Expedited Forwarding  |

`,
		},

		"max_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum packet length

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Maximum packet/payload length  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Protocol name  |

`,
		},

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchIPDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on destination port or address

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchIPSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on source port or address

`,
		},

		"tcp": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscClassMatchIPTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP Flags matching

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyShaperHfscClassMatchIP) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyShaperHfscClassMatchIPDscp.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchIPDscp.IsUnknown() {
		jsonData["dscp"] = o.LeafQosPolicyShaperHfscClassMatchIPDscp.ValueString()
	}

	if !o.LeafQosPolicyShaperHfscClassMatchIPMaxLength.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchIPMaxLength.IsUnknown() {
		jsonData["max-length"] = o.LeafQosPolicyShaperHfscClassMatchIPMaxLength.ValueString()
	}

	if !o.LeafQosPolicyShaperHfscClassMatchIPProtocol.IsNull() && !o.LeafQosPolicyShaperHfscClassMatchIPProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafQosPolicyShaperHfscClassMatchIPProtocol.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchIPDestination).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchIPDestination)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["destination"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchIPSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchIPSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyShaperHfscClassMatchIPTCP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperHfscClassMatchIPTCP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["tcp"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyShaperHfscClassMatchIP) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["dscp"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchIPDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchIPDscp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["max-length"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchIPMaxLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchIPMaxLength = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafQosPolicyShaperHfscClassMatchIPProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassMatchIPProtocol = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["destination"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchIPDestination = &QosPolicyShaperHfscClassMatchIPDestination{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchIPDestination)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchIPSource = &QosPolicyShaperHfscClassMatchIPSource{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchIPSource)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["tcp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperHfscClassMatchIPTCP = &QosPolicyShaperHfscClassMatchIPTCP{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperHfscClassMatchIPTCP)
		if err != nil {
			return err
		}
	}

	return nil
}
