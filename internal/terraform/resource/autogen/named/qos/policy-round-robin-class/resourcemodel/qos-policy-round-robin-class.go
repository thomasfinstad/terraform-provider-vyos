// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyRoundRobinClass describes the resource data model.
type QosPolicyRoundRobinClass struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDQosPolicyRoundRobin any `tfsdk:"round_robin" vyos:"round-robin,parent-id"`

	// LeafNodes
	LeafQosPolicyRoundRobinClassDescrIPtion  types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafQosPolicyRoundRobinClassCodelQuantum types.String `tfsdk:"codel_quantum" vyos:"codel-quantum,omitempty"`
	LeafQosPolicyRoundRobinClassFlows        types.String `tfsdk:"flows" vyos:"flows,omitempty"`
	LeafQosPolicyRoundRobinClassInterval     types.String `tfsdk:"interval" vyos:"interval,omitempty"`
	LeafQosPolicyRoundRobinClassQuantum      types.String `tfsdk:"quantum" vyos:"quantum,omitempty"`
	LeafQosPolicyRoundRobinClassQueueLimit   types.String `tfsdk:"queue_limit" vyos:"queue-limit,omitempty"`
	LeafQosPolicyRoundRobinClassQueueType    types.String `tfsdk:"queue_type" vyos:"queue-type,omitempty"`
	LeafQosPolicyRoundRobinClassTarget       types.String `tfsdk:"target" vyos:"target,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagQosPolicyRoundRobinClassMatch bool `tfsdk:"match" vyos:"match,child"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyRoundRobinClass) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"round-robin",
		"class",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyRoundRobinClass) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Class ID

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-4095  |  Class Identifier  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet scheduling quantum

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-4294967295  |  Packet scheduling quantum (bytes)  |

`,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"queue_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue type for default traffic

    |  Format  |  Description  |
    |----------|---------------|
    |  drop-tail  |  First-In-First-Out (FIFO)  |
    |  fair-queue  |  Stochastic Fair Queue (SFQ)  |
    |  fq-codel  |  Fair Queue Codel  |
    |  priority  |  Priority queuing  |
    |  random-detect  |  Random Early Detection (RED)  |

`,

			// Default:          stringdefault.StaticString(`drop-tail`),
			Computed: true,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyRoundRobinClass) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyRoundRobinClassDescrIPtion.IsNull() && !o.LeafQosPolicyRoundRobinClassDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyRoundRobinClassDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassCodelQuantum.IsNull() && !o.LeafQosPolicyRoundRobinClassCodelQuantum.IsUnknown() {
		jsonData["codel-quantum"] = o.LeafQosPolicyRoundRobinClassCodelQuantum.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassFlows.IsNull() && !o.LeafQosPolicyRoundRobinClassFlows.IsUnknown() {
		jsonData["flows"] = o.LeafQosPolicyRoundRobinClassFlows.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassInterval.IsNull() && !o.LeafQosPolicyRoundRobinClassInterval.IsUnknown() {
		jsonData["interval"] = o.LeafQosPolicyRoundRobinClassInterval.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassQuantum.IsNull() && !o.LeafQosPolicyRoundRobinClassQuantum.IsUnknown() {
		jsonData["quantum"] = o.LeafQosPolicyRoundRobinClassQuantum.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassQueueLimit.IsNull() && !o.LeafQosPolicyRoundRobinClassQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyRoundRobinClassQueueLimit.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassQueueType.IsNull() && !o.LeafQosPolicyRoundRobinClassQueueType.IsUnknown() {
		jsonData["queue-type"] = o.LeafQosPolicyRoundRobinClassQueueType.ValueString()
	}

	if !o.LeafQosPolicyRoundRobinClassTarget.IsNull() && !o.LeafQosPolicyRoundRobinClassTarget.IsUnknown() {
		jsonData["target"] = o.LeafQosPolicyRoundRobinClassTarget.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyRoundRobinClass) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyRoundRobinClassDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["codel-quantum"]; ok {
		o.LeafQosPolicyRoundRobinClassCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassCodelQuantum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["flows"]; ok {
		o.LeafQosPolicyRoundRobinClassFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassFlows = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafQosPolicyRoundRobinClassInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["quantum"]; ok {
		o.LeafQosPolicyRoundRobinClassQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassQuantum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyRoundRobinClassQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassQueueLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-type"]; ok {
		o.LeafQosPolicyRoundRobinClassQueueType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassQueueType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["target"]; ok {
		o.LeafQosPolicyRoundRobinClassTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinClassTarget = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
