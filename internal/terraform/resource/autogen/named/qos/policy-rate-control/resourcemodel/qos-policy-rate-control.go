// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyRateControl describes the resource data model.
type QosPolicyRateControl struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafQosPolicyRateControlDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafQosPolicyRateControlBandwIDth   types.String `tfsdk:"bandwidth" vyos:"bandwidth,omitempty"`
	LeafQosPolicyRateControlBurst       types.String `tfsdk:"burst" vyos:"burst,omitempty"`
	LeafQosPolicyRateControlLatency     types.String `tfsdk:"latency" vyos:"latency,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyRateControl) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"rate-control",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyRateControl) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rate limiting policy (Token Bucket Filter)

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

    |  Format  |  Description  |
    |----------|---------------|
    |  <number>  |  Bits per second  |
    |  <number>bit  |  Bits per second  |
    |  <number>kbit  |  Kilobits per second  |
    |  <number>mbit  |  Megabits per second  |
    |  <number>gbit  |  Gigabits per second  |
    |  <number>tbit  |  Terabits per second  |
    |  <number>%  |  Percentage of interface link speed  |

`,
		},

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst size for this class

    |  Format  |  Description  |
    |----------|---------------|
    |  <number>  |  Bytes  |
    |  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |

`,

			// Default:          stringdefault.StaticString(`15k`),
			Computed: true,
		},

		"latency": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum latency

    |  Format  |  Description  |
    |----------|---------------|
    |  <number>  |  Time in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`50`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyRateControl) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyRateControlDescrIPtion.IsNull() && !o.LeafQosPolicyRateControlDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyRateControlDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyRateControlBandwIDth.IsNull() && !o.LeafQosPolicyRateControlBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafQosPolicyRateControlBandwIDth.ValueString()
	}

	if !o.LeafQosPolicyRateControlBurst.IsNull() && !o.LeafQosPolicyRateControlBurst.IsUnknown() {
		jsonData["burst"] = o.LeafQosPolicyRateControlBurst.ValueString()
	}

	if !o.LeafQosPolicyRateControlLatency.IsNull() && !o.LeafQosPolicyRateControlLatency.IsUnknown() {
		jsonData["latency"] = o.LeafQosPolicyRateControlLatency.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyRateControl) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyRateControlDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRateControlDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafQosPolicyRateControlBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRateControlBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["burst"]; ok {
		o.LeafQosPolicyRateControlBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRateControlBurst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["latency"]; ok {
		o.LeafQosPolicyRateControlLatency = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRateControlLatency = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
