// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyFairQueue describes the resource data model.
type QosPolicyFairQueue struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafQosPolicyFairQueueDescrIPtion  types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafQosPolicyFairQueueHashInterval types.String `tfsdk:"hash_interval" vyos:"hash-interval,omitempty"`
	LeafQosPolicyFairQueueQueueLimit   types.String `tfsdk:"queue_limit" vyos:"queue-limit,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyFairQueue) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"fair-queue",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyFairQueue) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Stochastic Fairness Queueing

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"hash_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval in seconds for queue algorithm perturbation

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  No perturbation  |
    |  u32:1-127  |  Interval in seconds for queue algorithm perturbation (advised: 10)  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Upper limit of the SFQ

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-127  |  Queue size in packets  |

`,

			// Default:          stringdefault.StaticString(`127`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyFairQueue) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyFairQueueDescrIPtion.IsNull() && !o.LeafQosPolicyFairQueueDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyFairQueueDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyFairQueueHashInterval.IsNull() && !o.LeafQosPolicyFairQueueHashInterval.IsUnknown() {
		jsonData["hash-interval"] = o.LeafQosPolicyFairQueueHashInterval.ValueString()
	}

	if !o.LeafQosPolicyFairQueueQueueLimit.IsNull() && !o.LeafQosPolicyFairQueueQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyFairQueueQueueLimit.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyFairQueue) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyFairQueueDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFairQueueDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hash-interval"]; ok {
		o.LeafQosPolicyFairQueueHashInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFairQueueHashInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyFairQueueQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFairQueueQueueLimit = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
