// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyShaper describes the resource data model.
type QosPolicyShaper struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafQosPolicyShaperDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafQosPolicyShaperBandwIDth   types.String `tfsdk:"bandwidth" vyos:"bandwidth,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagQosPolicyShaperClass bool `tfsdk:"class" vyos:"class,child"`

	// Nodes
	NodeQosPolicyShaperDefault *QosPolicyShaperDefault `tfsdk:"default" vyos:"default,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyShaper) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"shaper",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaper) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Traffic shaping based policy (Hierarchy Token Bucket)

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

    |  Format  |  Description  |
    |----------|---------------|
    |  auto  |  Bandwidth matches interface speed  |
    |  <number>  |  Bits per second  |
    |  <number>bit  |  Bits per second  |
    |  <number>kbit  |  Kilobits per second  |
    |  <number>mbit  |  Megabits per second  |
    |  <number>gbit  |  Gigabits per second  |
    |  <number>tbit  |  Terabits per second  |
    |  <number>%%  |  Percentage of interface link speed  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		// Nodes

		"default": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperDefault{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Default policy

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyShaper) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyShaperDescrIPtion.IsNull() && !o.LeafQosPolicyShaperDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyShaperDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyShaperBandwIDth.IsNull() && !o.LeafQosPolicyShaperBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafQosPolicyShaperBandwIDth.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyShaperDefault).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyShaperDefault)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["default"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyShaper) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyShaperDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafQosPolicyShaperBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperBandwIDth = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["default"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyShaperDefault = &QosPolicyShaperDefault{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyShaperDefault)
		if err != nil {
			return err
		}
	}

	return nil
}
