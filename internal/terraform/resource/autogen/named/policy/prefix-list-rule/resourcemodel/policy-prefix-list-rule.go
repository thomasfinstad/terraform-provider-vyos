// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// PolicyPrefixListRule describes the resource data model.
type PolicyPrefixListRule struct {
	ID types.Number `tfsdk:"identifier" vyos:",self-id"`

	ParentIDPolicyPrefixList types.String `tfsdk:"prefix_list" vyos:"prefix-list_identifier,parent-id"`

	// LeafNodes
	LeafPolicyPrefixListRuleAction      types.String `tfsdk:"action" vyos:"action,omitempty"`
	LeafPolicyPrefixListRuleDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafPolicyPrefixListRuleGe          types.Number `tfsdk:"ge" vyos:"ge,omitempty"`
	LeafPolicyPrefixListRuleLe          types.Number `tfsdk:"le" vyos:"le,omitempty"`
	LeafPolicyPrefixListRulePrefix      types.String `tfsdk:"prefix" vyos:"prefix,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyPrefixListRule) GetVyosPath() []string {
	return []string{
		"policy",

		"prefix-list",
		o.ParentIDPolicyPrefixList.ValueString(),

		"rule",
		o.ID.ValueBigFloat().String(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyPrefixListRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule for this prefix-list

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Prefix-list rule number  |

`,
		},

		"prefix_list_identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP prefix-list filter

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Name of IPv4 prefix-list  |

`,
		},

		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take on entries matching this rule

    |  Format  |  Description  |
    |----------|---------------|
    |  permit  |  Permit matching entries  |
    |  deny  |  Deny matching entries  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"ge": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Prefix length to match a netmask greater than or equal to it

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-32  |  Netmask greater than length  |

`,
		},

		"le": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Prefix length to match a netmask less than or equal to it

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-32  |  Netmask less than length  |

`,
		},

		"prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefix to match

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  Prefix to match against  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyPrefixListRule) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyPrefixListRule) UnmarshalJSON(_ []byte) error {
	return nil
}
