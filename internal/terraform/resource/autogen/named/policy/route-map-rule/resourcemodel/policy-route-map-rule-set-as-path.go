// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRuleSetAsPath describes the resource data model.
type PolicyRouteMapRuleSetAsPath struct {
	// LeafNodes
	LeafPolicyRouteMapRuleSetAsPathExclude       types.String `tfsdk:"exclude" vyos:"exclude,omitempty"`
	LeafPolicyRouteMapRuleSetAsPathPrepend       types.String `tfsdk:"prepend" vyos:"prepend,omitempty"`
	LeafPolicyRouteMapRuleSetAsPathPrependLastAs types.String `tfsdk:"prepend_last_as" vyos:"prepend-last-as,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleSetAsPath) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Remove/exclude from the as-path attribute

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  AS number  |

`,
		},

		"prepend": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prepend to the as-path

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  AS number  |

`,
		},

		"prepend_last_as": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use the last AS-number in the as-path

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-10  |  Number of times to insert  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRuleSetAsPath) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleSetAsPathExclude.IsNull() && !o.LeafPolicyRouteMapRuleSetAsPathExclude.IsUnknown() {
		jsonData["exclude"] = o.LeafPolicyRouteMapRuleSetAsPathExclude.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetAsPathPrepend.IsNull() && !o.LeafPolicyRouteMapRuleSetAsPathPrepend.IsUnknown() {
		jsonData["prepend"] = o.LeafPolicyRouteMapRuleSetAsPathPrepend.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetAsPathPrependLastAs.IsNull() && !o.LeafPolicyRouteMapRuleSetAsPathPrependLastAs.IsUnknown() {
		jsonData["prepend-last-as"] = o.LeafPolicyRouteMapRuleSetAsPathPrependLastAs.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRuleSetAsPath) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["exclude"]; ok {
		o.LeafPolicyRouteMapRuleSetAsPathExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetAsPathExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prepend"]; ok {
		o.LeafPolicyRouteMapRuleSetAsPathPrepend = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetAsPathPrepend = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prepend-last-as"]; ok {
		o.LeafPolicyRouteMapRuleSetAsPathPrependLastAs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetAsPathPrependLastAs = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
