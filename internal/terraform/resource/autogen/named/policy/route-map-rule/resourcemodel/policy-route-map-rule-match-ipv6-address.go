// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRuleMatchIPvsixAddress describes the resource data model.
type PolicyRouteMapRuleMatchIPvsixAddress struct {
	// LeafNodes
	LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList types.String `tfsdk:"access_list" vyos:"access-list,omitempty"`
	LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList types.String `tfsdk:"prefix_list" vyos:"prefix-list,omitempty"`
	LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen  types.String `tfsdk:"prefix_len" vyos:"prefix-len,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleMatchIPvsixAddress) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"access_list": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv6 access-list to match

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  IPV6 access list name  |

`,
		},

		"prefix_list": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv6 prefix-list to match

`,
		},

		"prefix_len": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv6 prefix-length to match (can be used for kernel routes only)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-128  |  Prefix length  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRuleMatchIPvsixAddress) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList.IsNull() && !o.LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList.IsUnknown() {
		jsonData["access-list"] = o.LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList.IsNull() && !o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList.IsUnknown() {
		jsonData["prefix-list"] = o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen.IsNull() && !o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen.IsUnknown() {
		jsonData["prefix-len"] = o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRuleMatchIPvsixAddress) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["access-list"]; ok {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressAccessList = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prefix-list"]; ok {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixList = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prefix-len"]; ok {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleMatchIPvsixAddressPrefixLen = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
