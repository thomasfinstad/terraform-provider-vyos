// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyLocalRouteRule describes the resource data model.
type PolicyLocalRouteRule struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafPolicyLocalRouteRuleFwmark           types.String `tfsdk:"fwmark" vyos:"fwmark,omitempty"`
	LeafPolicyLocalRouteRuleSource           types.String `tfsdk:"source" vyos:"source,omitempty"`
	LeafPolicyLocalRouteRuleDestination      types.String `tfsdk:"destination" vyos:"destination,omitempty"`
	LeafPolicyLocalRouteRuleInboundInterface types.String `tfsdk:"inbound_interface" vyos:"inbound-interface,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodePolicyLocalRouteRuleSet *PolicyLocalRouteRuleSet `tfsdk:"set" vyos:"set,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyLocalRouteRule) GetVyosPath() []string {
	return []string{
		"policy",
		"local-route",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyLocalRouteRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Policy local-route rule set number

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-32765  |  Local-route rule number (1-32765)  |

`,
		},

		// LeafNodes

		"fwmark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match fwmark value

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-2147483647  |  Address to match against  |

`,
		},

		"source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source address or prefix

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Address to match against  |
    |  ipv4net  |  Prefix to match against  |

`,
		},

		"destination": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Destination address or prefix

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Address to match against  |
    |  ipv4net  |  Prefix to match against  |

`,
		},

		"inbound_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Inbound Interface

`,
		},

		// Nodes

		"set": schema.SingleNestedAttribute{
			Attributes: PolicyLocalRouteRuleSet{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Packet modifications

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyLocalRouteRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyLocalRouteRuleFwmark.IsNull() && !o.LeafPolicyLocalRouteRuleFwmark.IsUnknown() {
		jsonData["fwmark"] = o.LeafPolicyLocalRouteRuleFwmark.ValueString()
	}

	if !o.LeafPolicyLocalRouteRuleSource.IsNull() && !o.LeafPolicyLocalRouteRuleSource.IsUnknown() {
		jsonData["source"] = o.LeafPolicyLocalRouteRuleSource.ValueString()
	}

	if !o.LeafPolicyLocalRouteRuleDestination.IsNull() && !o.LeafPolicyLocalRouteRuleDestination.IsUnknown() {
		jsonData["destination"] = o.LeafPolicyLocalRouteRuleDestination.ValueString()
	}

	if !o.LeafPolicyLocalRouteRuleInboundInterface.IsNull() && !o.LeafPolicyLocalRouteRuleInboundInterface.IsUnknown() {
		jsonData["inbound-interface"] = o.LeafPolicyLocalRouteRuleInboundInterface.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodePolicyLocalRouteRuleSet).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyLocalRouteRuleSet)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["set"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyLocalRouteRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["fwmark"]; ok {
		o.LeafPolicyLocalRouteRuleFwmark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyLocalRouteRuleFwmark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source"]; ok {
		o.LeafPolicyLocalRouteRuleSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyLocalRouteRuleSource = basetypes.NewStringNull()
	}

	if value, ok := jsonData["destination"]; ok {
		o.LeafPolicyLocalRouteRuleDestination = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyLocalRouteRuleDestination = basetypes.NewStringNull()
	}

	if value, ok := jsonData["inbound-interface"]; ok {
		o.LeafPolicyLocalRouteRuleInboundInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyLocalRouteRuleInboundInterface = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["set"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyLocalRouteRuleSet = &PolicyLocalRouteRuleSet{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyLocalRouteRuleSet)
		if err != nil {
			return err
		}
	}

	return nil
}
