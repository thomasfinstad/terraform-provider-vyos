// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyAccessListsixRuleSource describes the resource data model.
type PolicyAccessListsixRuleSource struct {
	// LeafNodes
	LeafPolicyAccessListsixRuleSourceAny        types.String `tfsdk:"any" vyos:"any,omitempty"`
	LeafPolicyAccessListsixRuleSourceExactMatch types.String `tfsdk:"exact_match" vyos:"exact-match,omitempty"`
	LeafPolicyAccessListsixRuleSourceNetwork    types.String `tfsdk:"network" vyos:"network,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyAccessListsixRuleSource) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"any": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Any IP address to match

`,
		},

		"exact_match": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Exact match of the network prefixes

`,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Network/netmask to match

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyAccessListsixRuleSource) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyAccessListsixRuleSourceAny.IsNull() && !o.LeafPolicyAccessListsixRuleSourceAny.IsUnknown() {
		jsonData["any"] = o.LeafPolicyAccessListsixRuleSourceAny.ValueString()
	}

	if !o.LeafPolicyAccessListsixRuleSourceExactMatch.IsNull() && !o.LeafPolicyAccessListsixRuleSourceExactMatch.IsUnknown() {
		jsonData["exact-match"] = o.LeafPolicyAccessListsixRuleSourceExactMatch.ValueString()
	}

	if !o.LeafPolicyAccessListsixRuleSourceNetwork.IsNull() && !o.LeafPolicyAccessListsixRuleSourceNetwork.IsUnknown() {
		jsonData["network"] = o.LeafPolicyAccessListsixRuleSourceNetwork.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyAccessListsixRuleSource) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["any"]; ok {
		o.LeafPolicyAccessListsixRuleSourceAny = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAccessListsixRuleSourceAny = basetypes.NewStringNull()
	}

	if value, ok := jsonData["exact-match"]; ok {
		o.LeafPolicyAccessListsixRuleSourceExactMatch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAccessListsixRuleSourceExactMatch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafPolicyAccessListsixRuleSourceNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAccessListsixRuleSourceNetwork = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
