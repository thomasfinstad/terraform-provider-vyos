// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyAccessListRule describes the resource data model.
type PolicyAccessListRule struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDPolicyAccessList any `tfsdk:"access_list" vyos:"access-list,parent-id"`

	// LeafNodes
	LeafPolicyAccessListRuleAction      types.String `tfsdk:"action" vyos:"action,omitempty"`
	LeafPolicyAccessListRuleDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodePolicyAccessListRuleDestination *PolicyAccessListRuleDestination `tfsdk:"destination" vyos:"destination,omitempty"`
	NodePolicyAccessListRuleSource      *PolicyAccessListRuleSource      `tfsdk:"source" vyos:"source,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyAccessListRule) GetVyosPath() []string {
	return []string{
		"policy",
		"access-list",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyAccessListRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule for this access-list

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Access-list rule number  |

`,
		},

		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take on entries matching this rule

    |  Format  |  Description  |
    |----------|---------------|
    |  permit  |  Permit matching entries  |
    |  deny  |  Deny matching entries  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: PolicyAccessListRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Destination network or address

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: PolicyAccessListRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Source network or address to match

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyAccessListRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyAccessListRuleAction.IsNull() && !o.LeafPolicyAccessListRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafPolicyAccessListRuleAction.ValueString()
	}

	if !o.LeafPolicyAccessListRuleDescrIPtion.IsNull() && !o.LeafPolicyAccessListRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyAccessListRuleDescrIPtion.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodePolicyAccessListRuleDestination).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyAccessListRuleDestination)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["destination"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyAccessListRuleSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyAccessListRuleSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyAccessListRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafPolicyAccessListRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAccessListRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyAccessListRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAccessListRuleDescrIPtion = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["destination"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyAccessListRuleDestination = &PolicyAccessListRuleDestination{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyAccessListRuleDestination)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyAccessListRuleSource = &PolicyAccessListRuleSource{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyAccessListRuleSource)
		if err != nil {
			return err
		}
	}

	return nil
}
