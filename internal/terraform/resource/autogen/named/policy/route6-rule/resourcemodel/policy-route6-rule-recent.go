// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRoutesixRuleRecent describes the resource data model.
type PolicyRoutesixRuleRecent struct {
	// LeafNodes
	LeafPolicyRoutesixRuleRecentCount types.String `tfsdk:"count" vyos:"count,omitempty"`
	LeafPolicyRoutesixRuleRecentTime  types.String `tfsdk:"time" vyos:"time,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRoutesixRuleRecent) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"count": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source addresses seen more than N times

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-255  |  Source addresses seen more than N times  |

`,
		},

		"time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source addresses seen in the last N seconds

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-4294967295  |  Source addresses seen in the last N seconds  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRoutesixRuleRecent) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRoutesixRuleRecentCount.IsNull() && !o.LeafPolicyRoutesixRuleRecentCount.IsUnknown() {
		jsonData["count"] = o.LeafPolicyRoutesixRuleRecentCount.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleRecentTime.IsNull() && !o.LeafPolicyRoutesixRuleRecentTime.IsUnknown() {
		jsonData["time"] = o.LeafPolicyRoutesixRuleRecentTime.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRoutesixRuleRecent) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["count"]; ok {
		o.LeafPolicyRoutesixRuleRecentCount = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleRecentCount = basetypes.NewStringNull()
	}

	if value, ok := jsonData["time"]; ok {
		o.LeafPolicyRoutesixRuleRecentTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleRecentTime = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
