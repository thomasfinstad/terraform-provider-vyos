// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRoutesixRuleSet describes the resource data model.
type PolicyRoutesixRuleSet struct {
	// LeafNodes
	LeafPolicyRoutesixRuleSetConnectionMark types.String `tfsdk:"connection_mark" vyos:"connection-mark,omitempty"`
	LeafPolicyRoutesixRuleSetDscp           types.String `tfsdk:"dscp" vyos:"dscp,omitempty"`
	LeafPolicyRoutesixRuleSetMark           types.String `tfsdk:"mark" vyos:"mark,omitempty"`
	LeafPolicyRoutesixRuleSetTable          types.String `tfsdk:"table" vyos:"table,omitempty"`
	LeafPolicyRoutesixRuleSetTCPMss         types.String `tfsdk:"tcp_mss" vyos:"tcp-mss,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRoutesixRuleSet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"connection_mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection marking

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-2147483647  |  Connection marking  |

`,
		},

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet Differentiated Services Codepoint (DSCP)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-63  |  DSCP number  |

`,
		},

		"mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet marking

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-2147483647  |  Packet marking  |

`,
		},

		"table": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Routing table to forward packet with

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-200  |  Table number  |
    |  main  |  Main table  |

`,
		},

		"tcp_mss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `TCP Maximum Segment Size

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:500-1460  |  Explicitly set TCP MSS value  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRoutesixRuleSet) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRoutesixRuleSetConnectionMark.IsNull() && !o.LeafPolicyRoutesixRuleSetConnectionMark.IsUnknown() {
		jsonData["connection-mark"] = o.LeafPolicyRoutesixRuleSetConnectionMark.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleSetDscp.IsNull() && !o.LeafPolicyRoutesixRuleSetDscp.IsUnknown() {
		jsonData["dscp"] = o.LeafPolicyRoutesixRuleSetDscp.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleSetMark.IsNull() && !o.LeafPolicyRoutesixRuleSetMark.IsUnknown() {
		jsonData["mark"] = o.LeafPolicyRoutesixRuleSetMark.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleSetTable.IsNull() && !o.LeafPolicyRoutesixRuleSetTable.IsUnknown() {
		jsonData["table"] = o.LeafPolicyRoutesixRuleSetTable.ValueString()
	}

	if !o.LeafPolicyRoutesixRuleSetTCPMss.IsNull() && !o.LeafPolicyRoutesixRuleSetTCPMss.IsUnknown() {
		jsonData["tcp-mss"] = o.LeafPolicyRoutesixRuleSetTCPMss.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRoutesixRuleSet) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["connection-mark"]; ok {
		o.LeafPolicyRoutesixRuleSetConnectionMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleSetConnectionMark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dscp"]; ok {
		o.LeafPolicyRoutesixRuleSetDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleSetDscp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mark"]; ok {
		o.LeafPolicyRoutesixRuleSetMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleSetMark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["table"]; ok {
		o.LeafPolicyRoutesixRuleSetTable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleSetTable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tcp-mss"]; ok {
		o.LeafPolicyRoutesixRuleSetTCPMss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRoutesixRuleSetTCPMss = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
