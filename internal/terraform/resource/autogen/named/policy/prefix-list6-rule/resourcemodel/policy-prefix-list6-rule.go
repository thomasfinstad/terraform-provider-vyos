// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyPrefixListsixRule describes the resource data model.
type PolicyPrefixListsixRule struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDPolicyPrefixListsix any `tfsdk:"prefix_list6" vyos:"prefix-list6,parent-id"`

	// LeafNodes
	LeafPolicyPrefixListsixRuleAction      types.String `tfsdk:"action" vyos:"action,omitempty"`
	LeafPolicyPrefixListsixRuleDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafPolicyPrefixListsixRuleGe          types.String `tfsdk:"ge" vyos:"ge,omitempty"`
	LeafPolicyPrefixListsixRuleLe          types.String `tfsdk:"le" vyos:"le,omitempty"`
	LeafPolicyPrefixListsixRulePrefix      types.String `tfsdk:"prefix" vyos:"prefix,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyPrefixListsixRule) GetVyosPath() []string {
	return []string{
		"policy",
		"prefix-list6",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyPrefixListsixRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule for this prefix-list6

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Prefix-list rule number  |

`,
		},

		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take on entries matching this rule

    |  Format  |  Description  |
    |----------|---------------|
    |  permit  |  Permit matching entries  |
    |  deny  |  Deny matching entries  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"ge": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefix length to match a netmask greater than or equal to it

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-128  |  Netmask greater than length  |

`,
		},

		"le": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefix length to match a netmask less than or equal to it

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-128  |  Netmask less than length  |

`,
		},

		"prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefix to match

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6net  |  IPv6 prefix  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyPrefixListsixRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyPrefixListsixRuleAction.IsNull() && !o.LeafPolicyPrefixListsixRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafPolicyPrefixListsixRuleAction.ValueString()
	}

	if !o.LeafPolicyPrefixListsixRuleDescrIPtion.IsNull() && !o.LeafPolicyPrefixListsixRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyPrefixListsixRuleDescrIPtion.ValueString()
	}

	if !o.LeafPolicyPrefixListsixRuleGe.IsNull() && !o.LeafPolicyPrefixListsixRuleGe.IsUnknown() {
		jsonData["ge"] = o.LeafPolicyPrefixListsixRuleGe.ValueString()
	}

	if !o.LeafPolicyPrefixListsixRuleLe.IsNull() && !o.LeafPolicyPrefixListsixRuleLe.IsUnknown() {
		jsonData["le"] = o.LeafPolicyPrefixListsixRuleLe.ValueString()
	}

	if !o.LeafPolicyPrefixListsixRulePrefix.IsNull() && !o.LeafPolicyPrefixListsixRulePrefix.IsUnknown() {
		jsonData["prefix"] = o.LeafPolicyPrefixListsixRulePrefix.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyPrefixListsixRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafPolicyPrefixListsixRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListsixRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyPrefixListsixRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListsixRuleDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ge"]; ok {
		o.LeafPolicyPrefixListsixRuleGe = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListsixRuleGe = basetypes.NewStringNull()
	}

	if value, ok := jsonData["le"]; ok {
		o.LeafPolicyPrefixListsixRuleLe = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListsixRuleLe = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prefix"]; ok {
		o.LeafPolicyPrefixListsixRulePrefix = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListsixRulePrefix = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
