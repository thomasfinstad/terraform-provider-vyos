// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// HighAvailabilityVrrpSyncGroup describes the resource data model.
type HighAvailabilityVrrpSyncGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafHighAvailabilityVrrpSyncGroupMember types.String `tfsdk:"member"`

	// TagNodes

	// Nodes
	NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt types.Object `tfsdk:"transition_script"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *HighAvailabilityVrrpSyncGroup) GetVyosPath() []string {
	return []string{
		"high-availability",
		"vrrp",
		"sync-group",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *HighAvailabilityVrrpSyncGroup) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "sync-group"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafHighAvailabilityVrrpSyncGroupMember.IsNull() || o.LeafHighAvailabilityVrrpSyncGroupMember.IsUnknown()) {
		vyosData["member"] = o.LeafHighAvailabilityVrrpSyncGroupMember.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt.IsNull() || o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt.IsUnknown()) {
		var subModel HighAvailabilityVrrpSyncGroupTransitionScrIPt
		diags.Append(o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["transition-script"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *HighAvailabilityVrrpSyncGroup) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "sync-group"}})

	// Leafs
	if value, ok := vyosData["member"]; ok {
		o.LeafHighAvailabilityVrrpSyncGroupMember = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpSyncGroupMember = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["transition-script"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpSyncGroupTransitionScrIPt{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt = data

	} else {
		o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt = basetypes.NewObjectNull(HighAvailabilityVrrpSyncGroupTransitionScrIPt{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "sync-group"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o HighAvailabilityVrrpSyncGroup) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"member": types.StringType,

		// Tags

		// Nodes
		"transition_script": types.ObjectType{AttrTypes: HighAvailabilityVrrpSyncGroupTransitionScrIPt{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpSyncGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `VRRP sync group

`,
		},

		// LeafNodes

		"member": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Sync group member

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRRP group name  |

`,
		},

		// TagNodes

		// Nodes

		"transition_script": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpSyncGroupTransitionScrIPt{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP transition scripts

`,
		},
	}
}
