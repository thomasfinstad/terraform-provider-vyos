// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// HighAvailabilityVrrpSyncGroup describes the resource data model.
type HighAvailabilityVrrpSyncGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafHighAvailabilityVrrpSyncGroupMember types.String `tfsdk:"member" json:"member,omitempty"`

	// TagNodes

	// Nodes
	NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt *HighAvailabilityVrrpSyncGroupTransitionScrIPt `tfsdk:"transition_script" json:"transition-script,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *HighAvailabilityVrrpSyncGroup) GetVyosPath() []string {
	return []string{
		"high-availability",
		"vrrp",
		"sync-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpSyncGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `VRRP sync group

`,
		},

		// LeafNodes

		"member": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Sync group member

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRRP group name  |

`,
		},

		// TagNodes

		// Nodes

		"transition_script": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpSyncGroupTransitionScrIPt{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP transition scripts

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *HighAvailabilityVrrpSyncGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafHighAvailabilityVrrpSyncGroupMember.IsNull() && !o.LeafHighAvailabilityVrrpSyncGroupMember.IsUnknown() {
		jsonData["member"] = o.LeafHighAvailabilityVrrpSyncGroupMember.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["transition-script"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *HighAvailabilityVrrpSyncGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["member"]; ok {
		o.LeafHighAvailabilityVrrpSyncGroupMember = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpSyncGroupMember = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["transition-script"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt = &HighAvailabilityVrrpSyncGroupTransitionScrIPt{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpSyncGroupTransitionScrIPt)
		if err != nil {
			return err
		}
	}

	return nil
}
