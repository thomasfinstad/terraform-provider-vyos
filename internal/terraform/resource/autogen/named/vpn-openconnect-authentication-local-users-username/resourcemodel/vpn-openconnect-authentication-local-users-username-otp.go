// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnOpenconnectAuthenticationLocalUsersUsernameOtp describes the resource data model.
type VpnOpenconnectAuthenticationLocalUsersUsernameOtp struct {
	// LeafNodes
	LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey       types.String `tfsdk:"key"`
	LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength types.String `tfsdk:"otp_length"`
	LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval  types.String `tfsdk:"interval"`
	LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType types.String `tfsdk:"token_type"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnOpenconnectAuthenticationLocalUsersUsernameOtp) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "openconnect", "authentication", "local-users", "username", "otp"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey.IsNull() || o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey.IsUnknown()) {
		vyosData["key"] = o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey.ValueString()
	}
	if !(o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength.IsNull() || o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength.IsUnknown()) {
		vyosData["otp-length"] = o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength.ValueString()
	}
	if !(o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval.IsNull() || o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval.IsUnknown()) {
		vyosData["interval"] = o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval.ValueString()
	}
	if !(o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType.IsNull() || o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType.IsUnknown()) {
		vyosData["token-type"] = o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnOpenconnectAuthenticationLocalUsersUsernameOtp) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "openconnect", "authentication", "local-users", "username", "otp"}})

	// Leafs
	if value, ok := vyosData["key"]; ok {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpKey = basetypes.NewStringNull()
	}
	if value, ok := vyosData["otp-length"]; ok {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpOtpLength = basetypes.NewStringNull()
	}
	if value, ok := vyosData["interval"]; ok {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["token-type"]; ok {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationLocalUsersUsernameOtpTokenType = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "openconnect", "authentication", "local-users", "username", "otp"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnOpenconnectAuthenticationLocalUsersUsernameOtp) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"key":        types.StringType,
		"otp_length": types.StringType,
		"interval":   types.StringType,
		"token_type": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnOpenconnectAuthenticationLocalUsersUsernameOtp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Token Key Secret key for the token algorithm (see RFC 4226)

|  Format  |  Description  |
|----------|---------------|
|  txt  |  OTP key in hex-encoded format  |

`,
		},

		"otp_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of digits in OTP code

|  Format  |  Description  |
|----------|---------------|
|  u32:6-8  |  Number of digits in OTP code  |

`,

			// Default:          stringdefault.StaticString(`6`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time tokens interval in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:5-86400  |  Time tokens interval in seconds.  |

`,

			// Default:          stringdefault.StaticString(`30`),
			Computed: true,
		},

		"token_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Token type

|  Format  |  Description  |
|----------|---------------|
|  hotp-time  |  Time-based OTP algorithm  |
|  hotp-event  |  Event-based OTP algorithm  |

`,

			// Default:          stringdefault.StaticString(`hotp-time`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
