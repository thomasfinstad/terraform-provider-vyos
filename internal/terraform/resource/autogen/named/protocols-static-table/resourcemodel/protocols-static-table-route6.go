// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsStaticTableRoutesix describes the resource data model.
type ProtocolsStaticTableRoutesix struct {
	// LeafNodes
	LeafProtocolsStaticTableRoutesixDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes
	TagProtocolsStaticTableRoutesixInterface *map[string]ProtocolsStaticTableRoutesixInterface `tfsdk:"interface" json:"interface,omitempty"`
	TagProtocolsStaticTableRoutesixNextHop   *map[string]ProtocolsStaticTableRoutesixNextHop   `tfsdk:"next_hop" json:"next-hop,omitempty"`

	// Nodes
	NodeProtocolsStaticTableRoutesixBlackhole *ProtocolsStaticTableRoutesixBlackhole `tfsdk:"blackhole" json:"blackhole,omitempty"`
	NodeProtocolsStaticTableRoutesixReject    *ProtocolsStaticTableRoutesixReject    `tfsdk:"reject" json:"reject,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticTableRoutesix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"interface": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticTableRoutesixInterface{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `IPv6 gateway interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |

`,
		},

		"next_hop": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticTableRoutesixNextHop{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `IPv6 gateway address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  Next-hop IPv6 router  |

`,
		},

		// Nodes

		"blackhole": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticTableRoutesixBlackhole{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Silently discard pkts when matched

`,
		},

		"reject": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticTableRoutesixReject{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Emit an ICMP unreachable when matched

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsStaticTableRoutesix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsStaticTableRoutesixDescrIPtion.IsNull() && !o.LeafProtocolsStaticTableRoutesixDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsStaticTableRoutesixDescrIPtion.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagProtocolsStaticTableRoutesixInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsStaticTableRoutesixInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interface"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsStaticTableRoutesixNextHop).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsStaticTableRoutesixNextHop)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["next-hop"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsStaticTableRoutesixBlackhole).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticTableRoutesixBlackhole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["blackhole"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsStaticTableRoutesixReject).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsStaticTableRoutesixReject)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["reject"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsStaticTableRoutesix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsStaticTableRoutesixDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticTableRoutesixDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsStaticTableRoutesixInterface = &map[string]ProtocolsStaticTableRoutesixInterface{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsStaticTableRoutesixInterface)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["next-hop"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsStaticTableRoutesixNextHop = &map[string]ProtocolsStaticTableRoutesixNextHop{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsStaticTableRoutesixNextHop)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["blackhole"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticTableRoutesixBlackhole = &ProtocolsStaticTableRoutesixBlackhole{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticTableRoutesixBlackhole)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["reject"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsStaticTableRoutesixReject = &ProtocolsStaticTableRoutesixReject{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsStaticTableRoutesixReject)
		if err != nil {
			return err
		}
	}

	return nil
}
