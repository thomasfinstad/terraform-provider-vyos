// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsStaticTable describes the resource data model.
type ProtocolsStaticTable struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsStaticTableDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes
	TagProtocolsStaticTableRoute    *map[string]ProtocolsStaticTableRoute    `tfsdk:"route" json:"route,omitempty"`
	TagProtocolsStaticTableRoutesix *map[string]ProtocolsStaticTableRoutesix `tfsdk:"route6" json:"route6,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsStaticTable) GetVyosPath() []string {
	return []string{
		"protocols",
		"static",
		"table",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticTable) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Policy route table number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-200  |  Policy route table number  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"route": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticTableRoute{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Static IPv4 route

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 static route  |

`,
		},

		"route6": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticTableRoutesix{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Static IPv6 route

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 static route  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsStaticTable) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsStaticTableDescrIPtion.IsNull() && !o.LeafProtocolsStaticTableDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsStaticTableDescrIPtion.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagProtocolsStaticTableRoute).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsStaticTableRoute)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["route"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsStaticTableRoutesix).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsStaticTableRoutesix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["route6"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsStaticTable) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsStaticTableDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticTableDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["route"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsStaticTableRoute = &map[string]ProtocolsStaticTableRoute{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsStaticTableRoute)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["route6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsStaticTableRoutesix = &map[string]ProtocolsStaticTableRoutesix{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsStaticTableRoutesix)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
