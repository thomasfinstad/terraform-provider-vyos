// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// HighAvailabilityVirtualServerRealServer describes the resource data model.
type HighAvailabilityVirtualServerRealServer struct {
	// LeafNodes
	LeafHighAvailabilityVirtualServerRealServerPort              types.String `tfsdk:"port"`
	LeafHighAvailabilityVirtualServerRealServerConnectionTimeout types.String `tfsdk:"connection_timeout"`

	// TagNodes

	// Nodes
	NodeHighAvailabilityVirtualServerRealServerHealthCheck types.Object `tfsdk:"health_check"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *HighAvailabilityVirtualServerRealServer) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"high-availability", "virtual-server", "real-server"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafHighAvailabilityVirtualServerRealServerPort.IsNull() || o.LeafHighAvailabilityVirtualServerRealServerPort.IsUnknown()) {
		vyosData["port"] = o.LeafHighAvailabilityVirtualServerRealServerPort.ValueString()
	}
	if !(o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.IsNull() || o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.IsUnknown()) {
		vyosData["connection-timeout"] = o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeHighAvailabilityVirtualServerRealServerHealthCheck.IsNull() || o.NodeHighAvailabilityVirtualServerRealServerHealthCheck.IsUnknown()) {
		var subModel HighAvailabilityVirtualServerRealServerHealthCheck
		diags.Append(o.NodeHighAvailabilityVirtualServerRealServerHealthCheck.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["health-check"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *HighAvailabilityVirtualServerRealServer) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"high-availability", "virtual-server", "real-server"}})

	// Leafs
	if value, ok := vyosData["port"]; ok {
		o.LeafHighAvailabilityVirtualServerRealServerPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVirtualServerRealServerPort = basetypes.NewStringNull()
	}
	if value, ok := vyosData["connection-timeout"]; ok {
		o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["health-check"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVirtualServerRealServerHealthCheck{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVirtualServerRealServerHealthCheck = data

	} else {
		o.NodeHighAvailabilityVirtualServerRealServerHealthCheck = basetypes.NewObjectNull(HighAvailabilityVirtualServerRealServerHealthCheck{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"high-availability", "virtual-server", "real-server"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o HighAvailabilityVirtualServerRealServer) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"port":               types.StringType,
		"connection_timeout": types.StringType,

		// Tags

		// Nodes
		"health_check": types.ObjectType{AttrTypes: HighAvailabilityVirtualServerRealServerHealthCheck{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVirtualServerRealServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Numeric IP port  |

`,
		},

		"connection_timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Server connection timeout

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  Connection timeout to remote server  |

`,
		},

		// TagNodes

		// Nodes

		"health_check": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVirtualServerRealServerHealthCheck{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Health check script

`,
		},
	}
}
