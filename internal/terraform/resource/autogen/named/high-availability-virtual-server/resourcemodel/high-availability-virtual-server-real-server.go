// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// HighAvailabilityVirtualServerRealServer describes the resource data model.
type HighAvailabilityVirtualServerRealServer struct {
	// LeafNodes
	LeafHighAvailabilityVirtualServerRealServerPort              types.String `tfsdk:"port" json:"port,omitempty"`
	LeafHighAvailabilityVirtualServerRealServerConnectionTimeout types.String `tfsdk:"connection_timeout" json:"connection-timeout,omitempty"`

	// TagNodes

	// Nodes
	NodeHighAvailabilityVirtualServerRealServerHealthCheck *HighAvailabilityVirtualServerRealServerHealthCheck `tfsdk:"health_check" json:"health-check,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVirtualServerRealServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Numeric IP port  |

`,
		},

		"connection_timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Server connection timeout

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  Connection timeout to remote server  |

`,
		},

		// TagNodes

		// Nodes

		"health_check": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVirtualServerRealServerHealthCheck{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Health check script

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *HighAvailabilityVirtualServerRealServer) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafHighAvailabilityVirtualServerRealServerPort.IsNull() && !o.LeafHighAvailabilityVirtualServerRealServerPort.IsUnknown() {
		jsonData["port"] = o.LeafHighAvailabilityVirtualServerRealServerPort.ValueString()
	}

	if !o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.IsNull() && !o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.IsUnknown() {
		jsonData["connection-timeout"] = o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeHighAvailabilityVirtualServerRealServerHealthCheck).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVirtualServerRealServerHealthCheck)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["health-check"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *HighAvailabilityVirtualServerRealServer) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["port"]; ok {
		o.LeafHighAvailabilityVirtualServerRealServerPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVirtualServerRealServerPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["connection-timeout"]; ok {
		o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVirtualServerRealServerConnectionTimeout = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["health-check"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVirtualServerRealServerHealthCheck = &HighAvailabilityVirtualServerRealServerHealthCheck{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVirtualServerRealServerHealthCheck)
		if err != nil {
			return err
		}
	}

	return nil
}
