// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/customtypes"
)

// HighAvailabilityVirtualServer describes the resource data model.
type HighAvailabilityVirtualServer struct {
	// LeafNodes
	HighAvailabilityVirtualServerAlgorithm          customtypes.CustomStringValue `tfsdk:"algorithm" json:"algorithm,omitempty"`
	HighAvailabilityVirtualServerDelayLoop          customtypes.CustomStringValue `tfsdk:"delay_loop" json:"delay-loop,omitempty"`
	HighAvailabilityVirtualServerForwardMethod      customtypes.CustomStringValue `tfsdk:"forward_method" json:"forward-method,omitempty"`
	HighAvailabilityVirtualServerFwmark             customtypes.CustomStringValue `tfsdk:"fwmark" json:"fwmark,omitempty"`
	HighAvailabilityVirtualServerPort               customtypes.CustomStringValue `tfsdk:"port" json:"port,omitempty"`
	HighAvailabilityVirtualServerPersistenceTimeout customtypes.CustomStringValue `tfsdk:"persistence_timeout" json:"persistence-timeout,omitempty"`
	HighAvailabilityVirtualServerProtocol           customtypes.CustomStringValue `tfsdk:"protocol" json:"protocol,omitempty"`

	// TagNodes
	HighAvailabilityVirtualServerRealServer types.Map `tfsdk:"real_server" json:"real-server,omitempty"`

	// Nodes
}

// ResourceAttributes generates the attributes for the resource at this level
func (o HighAvailabilityVirtualServer) ResourceAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"algorithm": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Schedule algorithm (default - least-connection)

|  Format  |  Description  |
|----------|---------------|
|  round-robin  |  Round robin  |
|  weighted-round-robin  |  Weighted round robin  |
|  least-connection  |  Least connection  |
|  weighted-least-connection  |  Weighted least connection  |
|  source-hashing  |  Source hashing  |
|  destination-hashing  |  Destination hashing  |
|  locality-based-least-connection  |  Locality-Based least connection  |

`,

			// Default:          stringdefault.StaticString(`least-connection`),
			Computed: true,
		},

		"delay_loop": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Interval between health-checks (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"forward_method": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Forwarding method

|  Format  |  Description  |
|----------|---------------|
|  direct  |  Direct routing  |
|  nat  |  NAT  |
|  tunnel  |  Tunneling  |

`,

			// Default:          stringdefault.StaticString(`nat`),
			Computed: true,
		},

		"fwmark": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Match fwmark value

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2147483647  |  Match firewall mark value  |

`,
		},

		"port": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Numeric IP port  |

`,
		},

		"persistence_timeout": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Timeout for persistent connections

|  Format  |  Description  |
|----------|---------------|
|  u32:1-86400  |  Timeout for persistent connections  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"protocol": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Protocol for port checks

|  Format  |  Description  |
|----------|---------------|
|  tcp  |  TCP  |
|  udp  |  UDP  |

`,

			// Default:          stringdefault.StaticString(`tcp`),
			Computed: true,
		},

		// TagNodes

		"real_server": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: HighAvailabilityVirtualServerRealServer{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Real server address

`,
		},

		// Nodes

	}
}
