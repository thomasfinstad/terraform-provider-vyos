// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// SystemSyslogUser describes the resource data model.
type SystemSyslogUser struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes
	TagSystemSyslogUserFacility types.Map `tfsdk:"facility"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemSyslogUser) GetVyosPath() []string {
	return []string{
		"system",
		"syslog",
		"user",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *SystemSyslogUser) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"system", "syslog", "user"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags
	if !(o.TagSystemSyslogUserFacility.IsNull() || o.TagSystemSyslogUserFacility.IsUnknown()) {
		subModel := make(map[string]SystemSyslogUserFacility)
		diags.Append(o.TagSystemSyslogUserFacility.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["facility"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *SystemSyslogUser) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"system", "syslog", "user"}})

	// Leafs

	// Tags
	if value, ok := vyosData["facility"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: SystemSyslogUserFacility{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagSystemSyslogUserFacility = data
	} else {
		o.TagSystemSyslogUserFacility = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"system", "syslog", "user"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o SystemSyslogUser) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags
		"facility": types.MapType{ElemType: types.ObjectType{AttrTypes: SystemSyslogUserFacility{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogUser) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Logging to specific terminal of given user

|  Format  |  Description  |
|----------|---------------|
|  username  |  user login name  |

`,
		},

		// LeafNodes

		// TagNodes

		"facility": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: SystemSyslogUserFacility{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Facility for logging

|  Format  |  Description  |
|----------|---------------|
|  all  |  All facilities excluding "mark"  |
|  auth  |  Authentication and authorization  |
|  authpriv  |  Non-system authorization  |
|  cron  |  Cron daemon  |
|  daemon  |  System daemons  |
|  kern  |  Kernel  |
|  lpr  |  Line printer spooler  |
|  mail  |  Mail subsystem  |
|  mark  |  Timestamp  |
|  news  |  USENET subsystem  |
|  protocols  |  depricated will be set to local7  |
|  security  |  depricated will be set to auth  |
|  syslog  |  Authentication and authorization  |
|  user  |  Application processes  |
|  uucp  |  UUCP subsystem  |
|  local0  |  Local facility 0  |
|  local1  |  Local facility 1  |
|  local2  |  Local facility 2  |
|  local3  |  Local facility 3  |
|  local4  |  Local facility 4  |
|  local5  |  Local facility 5  |
|  local6  |  Local facility 6  |
|  local7  |  Local facility 7  |

`,
		},

		// Nodes

	}
}
