// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PkiCa describes the resource data model.
type PkiCa struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPkiCaCertificate types.String `tfsdk:"certificate" json:"certificate,omitempty"`
	LeafPkiCaDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafPkiCaCrl         types.String `tfsdk:"crl" json:"crl,omitempty"`
	LeafPkiCaRevoke      types.String `tfsdk:"revoke" json:"revoke,omitempty"`

	// TagNodes

	// Nodes
	NodePkiCaPrivate *PkiCaPrivate `tfsdk:"private" json:"private,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PkiCa) GetVyosPath() []string {
	return []string{
		"pki",
		"ca",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PkiCa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Certificate Authority

`,
		},

		// LeafNodes

		"certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `CA certificate in PEM format

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

`,
		},

		"crl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate revocation list in PEM format

`,
		},

		"revoke": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `If parent CA is present, this CA certificate will be included in generated CRLs

`,
		},

		// TagNodes

		// Nodes

		"private": schema.SingleNestedAttribute{
			Attributes: PkiCaPrivate{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `CA private key in PEM format

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PkiCa) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPkiCaCertificate.IsNull() && !o.LeafPkiCaCertificate.IsUnknown() {
		jsonData["certificate"] = o.LeafPkiCaCertificate.ValueString()
	}

	if !o.LeafPkiCaDescrIPtion.IsNull() && !o.LeafPkiCaDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPkiCaDescrIPtion.ValueString()
	}

	if !o.LeafPkiCaCrl.IsNull() && !o.LeafPkiCaCrl.IsUnknown() {
		jsonData["crl"] = o.LeafPkiCaCrl.ValueString()
	}

	if !o.LeafPkiCaRevoke.IsNull() && !o.LeafPkiCaRevoke.IsUnknown() {
		jsonData["revoke"] = o.LeafPkiCaRevoke.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodePkiCaPrivate).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePkiCaPrivate)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["private"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PkiCa) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["certificate"]; ok {
		o.LeafPkiCaCertificate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCaCertificate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPkiCaDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCaDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["crl"]; ok {
		o.LeafPkiCaCrl = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCaCrl = basetypes.NewStringNull()
	}

	if value, ok := jsonData["revoke"]; ok {
		o.LeafPkiCaRevoke = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCaRevoke = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["private"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePkiCaPrivate = &PkiCaPrivate{}

		err = json.Unmarshal(subJSONStr, o.NodePkiCaPrivate)
		if err != nil {
			return err
		}
	}

	return nil
}
