// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecSiteToSitePeerAuthenticationRsa describes the resource data model.
type VpnIPsecSiteToSitePeerAuthenticationRsa struct {
	// LeafNodes
	LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey   types.String `tfsdk:"local_key"`
	LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase types.String `tfsdk:"passphrase"`
	LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey  types.String `tfsdk:"remote_key"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecSiteToSitePeerAuthenticationRsa) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "authentication", "rsa"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey.IsNull() || o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey.IsUnknown()) {
		vyosData["local-key"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey.ValueString()
	}
	if !(o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase.IsNull() || o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase.IsUnknown()) {
		vyosData["passphrase"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase.ValueString()
	}
	if !(o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey.IsNull() || o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey.IsUnknown()) {
		vyosData["remote-key"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecSiteToSitePeerAuthenticationRsa) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "authentication", "rsa"}})

	// Leafs
	if value, ok := vyosData["local-key"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaLocalKey = basetypes.NewStringNull()
	}
	if value, ok := vyosData["passphrase"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaPassphrase = basetypes.NewStringNull()
	}
	if value, ok := vyosData["remote-key"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRsaRemoteKey = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "authentication", "rsa"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecSiteToSitePeerAuthenticationRsa) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"local_key":  types.StringType,
		"passphrase": types.StringType,
		"remote_key": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeerAuthenticationRsa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"local_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Name of PKI key-pair with local private key

`,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local private key passphrase

`,
		},

		"remote_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Name of PKI key-pair with remote public key

`,
		},

		// TagNodes

		// Nodes

	}
}
