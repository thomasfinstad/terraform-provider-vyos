// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecSiteToSitePeerAuthentication describes the resource data model.
type VpnIPsecSiteToSitePeerAuthentication struct {
	// LeafNodes
	LeafVpnIPsecSiteToSitePeerAuthenticationLocalID            types.String `tfsdk:"local_id" json:"local-id,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationMode               types.String `tfsdk:"mode" json:"mode,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID           types.String `tfsdk:"remote_id" json:"remote-id,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID types.String `tfsdk:"use_x509_id" json:"use-x509-id,omitempty"`

	// TagNodes

	// Nodes
	NodeVpnIPsecSiteToSitePeerAuthenticationRsa           *VpnIPsecSiteToSitePeerAuthenticationRsa           `tfsdk:"rsa" json:"rsa,omitempty"`
	NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine *VpnIPsecSiteToSitePeerAuthenticationXfivezeronine `tfsdk:"x509" json:"x509,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeerAuthentication) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"local_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local ID for peer authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Local ID used for peer authentication  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication mode

|  Format  |  Description  |
|----------|---------------|
|  pre-shared-secret  |  Use pre-shared secret key  |
|  rsa  |  Use RSA key  |
|  x509  |  Use x.509 certificate  |

`,
		},

		"remote_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ID for remote authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  ID used for peer authentication  |

`,

			// Default:          stringdefault.StaticString(`%any`),
			Computed: true,
		},

		"use_x509_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use certificate common name as ID

`,
		},

		// TagNodes

		// Nodes

		"rsa": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerAuthenticationRsa{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RSA keys

`,
		},

		"x509": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerAuthenticationXfivezeronine{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `X.509 certificate

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecSiteToSitePeerAuthentication) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnIPsecSiteToSitePeerAuthenticationLocalID.IsNull() && !o.LeafVpnIPsecSiteToSitePeerAuthenticationLocalID.IsUnknown() {
		jsonData["local-id"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationLocalID.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerAuthenticationMode.IsNull() && !o.LeafVpnIPsecSiteToSitePeerAuthenticationMode.IsUnknown() {
		jsonData["mode"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationMode.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID.IsNull() && !o.LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID.IsUnknown() {
		jsonData["remote-id"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID.IsNull() && !o.LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID.IsUnknown() {
		jsonData["use-x509-id"] = o.LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVpnIPsecSiteToSitePeerAuthenticationRsa).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnIPsecSiteToSitePeerAuthenticationRsa)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rsa"] = subData
	}

	if !reflect.ValueOf(o.NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["x509"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecSiteToSitePeerAuthentication) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["local-id"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationLocalID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationLocalID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-id"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["use-x509-id"]; ok {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["rsa"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnIPsecSiteToSitePeerAuthenticationRsa = &VpnIPsecSiteToSitePeerAuthenticationRsa{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnIPsecSiteToSitePeerAuthenticationRsa)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["x509"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine = &VpnIPsecSiteToSitePeerAuthenticationXfivezeronine{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine)
		if err != nil {
			return err
		}
	}

	return nil
}
