// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecSiteToSitePeerTunnel describes the resource data model.
type VpnIPsecSiteToSitePeerTunnel struct {
	// LeafNodes
	LeafVpnIPsecSiteToSitePeerTunnelDisable  types.String `tfsdk:"disable"`
	LeafVpnIPsecSiteToSitePeerTunnelEspGroup types.String `tfsdk:"esp_group"`
	LeafVpnIPsecSiteToSitePeerTunnelProtocol types.String `tfsdk:"protocol"`
	LeafVpnIPsecSiteToSitePeerTunnelPriority types.String `tfsdk:"priority"`

	// TagNodes

	// Nodes
	NodeVpnIPsecSiteToSitePeerTunnelLocal  types.Object `tfsdk:"local"`
	NodeVpnIPsecSiteToSitePeerTunnelRemote types.Object `tfsdk:"remote"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecSiteToSitePeerTunnel) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "tunnel"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnIPsecSiteToSitePeerTunnelDisable.IsNull() || o.LeafVpnIPsecSiteToSitePeerTunnelDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafVpnIPsecSiteToSitePeerTunnelDisable.ValueString()
	}
	if !(o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.IsNull() || o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.IsUnknown()) {
		vyosData["esp-group"] = o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.ValueString()
	}
	if !(o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.IsNull() || o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.ValueString()
	}
	if !(o.LeafVpnIPsecSiteToSitePeerTunnelPriority.IsNull() || o.LeafVpnIPsecSiteToSitePeerTunnelPriority.IsUnknown()) {
		vyosData["priority"] = o.LeafVpnIPsecSiteToSitePeerTunnelPriority.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeVpnIPsecSiteToSitePeerTunnelLocal.IsNull() || o.NodeVpnIPsecSiteToSitePeerTunnelLocal.IsUnknown()) {
		var subModel VpnIPsecSiteToSitePeerTunnelLocal
		diags.Append(o.NodeVpnIPsecSiteToSitePeerTunnelLocal.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["local"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVpnIPsecSiteToSitePeerTunnelRemote.IsNull() || o.NodeVpnIPsecSiteToSitePeerTunnelRemote.IsUnknown()) {
		var subModel VpnIPsecSiteToSitePeerTunnelRemote
		diags.Append(o.NodeVpnIPsecSiteToSitePeerTunnelRemote.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["remote"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecSiteToSitePeerTunnel) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "tunnel"}})

	// Leafs
	if value, ok := vyosData["disable"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["esp-group"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelProtocol = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelPriority = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["local"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VpnIPsecSiteToSitePeerTunnelLocal{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVpnIPsecSiteToSitePeerTunnelLocal = data

	} else {
		o.NodeVpnIPsecSiteToSitePeerTunnelLocal = basetypes.NewObjectNull(VpnIPsecSiteToSitePeerTunnelLocal{}.AttributeTypes())
	}
	if value, ok := vyosData["remote"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VpnIPsecSiteToSitePeerTunnelRemote{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVpnIPsecSiteToSitePeerTunnelRemote = data

	} else {
		o.NodeVpnIPsecSiteToSitePeerTunnelRemote = basetypes.NewObjectNull(VpnIPsecSiteToSitePeerTunnelRemote{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "site-to-site", "peer", "tunnel"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecSiteToSitePeerTunnel) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"disable":   types.StringType,
		"esp_group": types.StringType,
		"protocol":  types.StringType,
		"priority":  types.StringType,

		// Tags

		// Nodes
		"local":  types.ObjectType{AttrTypes: VpnIPsecSiteToSitePeerTunnelLocal{}.AttributeTypes()},
		"remote": types.ObjectType{AttrTypes: VpnIPsecSiteToSitePeerTunnelRemote{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeerTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"esp_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for IPsec policy (lowest value more preferable)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-100  |  Priority for IPsec policy (lowest value more preferable)  |

`,
		},

		// TagNodes

		// Nodes

		"local": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerTunnelLocal{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Local parameters for interesting traffic

`,
		},

		"remote": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerTunnelRemote{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match remote addresses

`,
		},
	}
}
