// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceWebproxyCachePeer describes the resource data model.
type ServiceWebproxyCachePeer struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceWebproxyCachePeerAddress  types.String `tfsdk:"address"`
	LeafServiceWebproxyCachePeerHTTPPort types.String `tfsdk:"http_port"`
	LeafServiceWebproxyCachePeerIcpPort  types.String `tfsdk:"icp_port"`
	LeafServiceWebproxyCachePeerOptions  types.String `tfsdk:"options"`
	LeafServiceWebproxyCachePeerType     types.String `tfsdk:"type"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyCachePeer) GetVyosPath() []string {
	return []string{
		"service",
		"webproxy",
		"cache-peer",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceWebproxyCachePeer) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "webproxy", "cache-peer"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceWebproxyCachePeerAddress.IsNull() || o.LeafServiceWebproxyCachePeerAddress.IsUnknown()) {
		vyosData["address"] = o.LeafServiceWebproxyCachePeerAddress.ValueString()
	}
	if !(o.LeafServiceWebproxyCachePeerHTTPPort.IsNull() || o.LeafServiceWebproxyCachePeerHTTPPort.IsUnknown()) {
		vyosData["http-port"] = o.LeafServiceWebproxyCachePeerHTTPPort.ValueString()
	}
	if !(o.LeafServiceWebproxyCachePeerIcpPort.IsNull() || o.LeafServiceWebproxyCachePeerIcpPort.IsUnknown()) {
		vyosData["icp-port"] = o.LeafServiceWebproxyCachePeerIcpPort.ValueString()
	}
	if !(o.LeafServiceWebproxyCachePeerOptions.IsNull() || o.LeafServiceWebproxyCachePeerOptions.IsUnknown()) {
		vyosData["options"] = o.LeafServiceWebproxyCachePeerOptions.ValueString()
	}
	if !(o.LeafServiceWebproxyCachePeerType.IsNull() || o.LeafServiceWebproxyCachePeerType.IsUnknown()) {
		vyosData["type"] = o.LeafServiceWebproxyCachePeerType.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceWebproxyCachePeer) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "webproxy", "cache-peer"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafServiceWebproxyCachePeerAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["http-port"]; ok {
		o.LeafServiceWebproxyCachePeerHTTPPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerHTTPPort = basetypes.NewStringNull()
	}
	if value, ok := vyosData["icp-port"]; ok {
		o.LeafServiceWebproxyCachePeerIcpPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerIcpPort = basetypes.NewStringNull()
	}
	if value, ok := vyosData["options"]; ok {
		o.LeafServiceWebproxyCachePeerOptions = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerOptions = basetypes.NewStringNull()
	}
	if value, ok := vyosData["type"]; ok {
		o.LeafServiceWebproxyCachePeerType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyCachePeerType = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "webproxy", "cache-peer"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceWebproxyCachePeer) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":   types.StringType,
		"http_port": types.StringType,
		"icp_port":  types.StringType,
		"options":   types.StringType,
		"type":      types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyCachePeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specify other caches in a hierarchy

|  Format  |  Description  |
|----------|---------------|
|  hostname  |  Cache peers FQDN  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hostname or IP address of peer

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Squid cache-peer IPv4 address  |
|  hostname  |  Squid cache-peer hostname  |

`,
		},

		"http_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default Proxy Port

|  Format  |  Description  |
|----------|---------------|
|  u32:1025-65535  |  Default port number  |

`,

			// Default:          stringdefault.StaticString(`3128`),
			Computed: true,
		},

		"icp_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer ICP port

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Cache peer disabled  |
|  u32:1-65535  |  Cache peer ICP port  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"options": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cache peer options

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Cache peer options  |

`,

			// Default:          stringdefault.StaticString(`no-query default`),
			Computed: true,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Squid peer type (default parent)

|  Format  |  Description  |
|----------|---------------|
|  parent  |  Peer is a parent  |
|  sibling  |  Peer is a sibling  |
|  multicast  |  Peer is a member of a multicast group  |

`,

			// Default:          stringdefault.StaticString(`parent`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
