// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// LoadBalancingWanInterfaceHealth describes the resource data model.
type LoadBalancingWanInterfaceHealth struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafLoadBalancingWanInterfaceHealthFailureCount types.String `tfsdk:"failure_count" json:"failure-count,omitempty"`
	LeafLoadBalancingWanInterfaceHealthNexthop      types.String `tfsdk:"nexthop" json:"nexthop,omitempty"`
	LeafLoadBalancingWanInterfaceHealthSuccessCount types.String `tfsdk:"success_count" json:"success-count,omitempty"`

	// TagNodes
	TagLoadBalancingWanInterfaceHealthTest *map[string]LoadBalancingWanInterfaceHealthTest `tfsdk:"test" json:"test,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *LoadBalancingWanInterfaceHealth) GetVyosPath() []string {
	return []string{
		"load-balancing",
		"wan",
		"interface-health",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWanInterfaceHealth) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface name

`,
		},

		// LeafNodes

		"failure_count": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Failure count

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Failure count  |

`,
		},

		"nexthop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Outbound interface nexthop address. Can be 'DHCP or IPv4 address' [REQUIRED]

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Nexthop IP address  |
|  dhcp  |  Set the nexthop via DHCP  |

`,
		},

		"success_count": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Success count

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Success count  |

`,
		},

		// TagNodes

		"test": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: LoadBalancingWanInterfaceHealthTest{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Rule number

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Rule number  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *LoadBalancingWanInterfaceHealth) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafLoadBalancingWanInterfaceHealthFailureCount.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthFailureCount.IsUnknown() {
		jsonData["failure-count"] = o.LeafLoadBalancingWanInterfaceHealthFailureCount.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthNexthop.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthNexthop.IsUnknown() {
		jsonData["nexthop"] = o.LeafLoadBalancingWanInterfaceHealthNexthop.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthSuccessCount.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthSuccessCount.IsUnknown() {
		jsonData["success-count"] = o.LeafLoadBalancingWanInterfaceHealthSuccessCount.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagLoadBalancingWanInterfaceHealthTest).IsZero() {
		subJSONStr, err := json.Marshal(o.TagLoadBalancingWanInterfaceHealthTest)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["test"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *LoadBalancingWanInterfaceHealth) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["failure-count"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthFailureCount = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthFailureCount = basetypes.NewStringNull()
	}

	if value, ok := jsonData["nexthop"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthNexthop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthNexthop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["success-count"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthSuccessCount = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthSuccessCount = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["test"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagLoadBalancingWanInterfaceHealthTest = &map[string]LoadBalancingWanInterfaceHealthTest{}

		err = json.Unmarshal(subJSONStr, o.TagLoadBalancingWanInterfaceHealthTest)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
