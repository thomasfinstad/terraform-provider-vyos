// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// LoadBalancingWanInterfaceHealthTest describes the resource data model.
type LoadBalancingWanInterfaceHealthTest struct {
	// LeafNodes
	LeafLoadBalancingWanInterfaceHealthTestRespTime   types.String `tfsdk:"resp_time" json:"resp-time,omitempty"`
	LeafLoadBalancingWanInterfaceHealthTestTarget     types.String `tfsdk:"target" json:"target,omitempty"`
	LeafLoadBalancingWanInterfaceHealthTestTestScrIPt types.String `tfsdk:"test_script" json:"test-script,omitempty"`
	LeafLoadBalancingWanInterfaceHealthTestTTLLimit   types.String `tfsdk:"ttl_limit" json:"ttl-limit,omitempty"`
	LeafLoadBalancingWanInterfaceHealthTestType       types.String `tfsdk:"type" json:"type,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWanInterfaceHealthTest) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"resp_time": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ping response time (seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-30  |  Response time (seconds)  |

`,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Health target address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Health target address  |

`,
		},

		"test_script": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Path to user-defined script

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Script in /config/scripts  |

`,
		},

		"ttl_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `TTL limit (hop count)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-254  |  Number of hops  |

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WLB test type

|  Format  |  Description  |
|----------|---------------|
|  ping  |  Test with ICMP echo response  |
|  ttl  |  Test with UDP TTL expired response  |
|  user-defined  |  User-defined test script  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *LoadBalancingWanInterfaceHealthTest) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafLoadBalancingWanInterfaceHealthTestRespTime.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthTestRespTime.IsUnknown() {
		jsonData["resp-time"] = o.LeafLoadBalancingWanInterfaceHealthTestRespTime.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthTestTarget.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthTestTarget.IsUnknown() {
		jsonData["target"] = o.LeafLoadBalancingWanInterfaceHealthTestTarget.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthTestTestScrIPt.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthTestTestScrIPt.IsUnknown() {
		jsonData["test-script"] = o.LeafLoadBalancingWanInterfaceHealthTestTestScrIPt.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthTestTTLLimit.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthTestTTLLimit.IsUnknown() {
		jsonData["ttl-limit"] = o.LeafLoadBalancingWanInterfaceHealthTestTTLLimit.ValueString()
	}

	if !o.LeafLoadBalancingWanInterfaceHealthTestType.IsNull() && !o.LeafLoadBalancingWanInterfaceHealthTestType.IsUnknown() {
		jsonData["type"] = o.LeafLoadBalancingWanInterfaceHealthTestType.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *LoadBalancingWanInterfaceHealthTest) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["resp-time"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthTestRespTime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthTestRespTime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["target"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthTestTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthTestTarget = basetypes.NewStringNull()
	}

	if value, ok := jsonData["test-script"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthTestTestScrIPt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthTestTestScrIPt = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl-limit"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthTestTTLLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthTestTTLLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafLoadBalancingWanInterfaceHealthTestType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanInterfaceHealthTestType = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
