// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceDhcpServerSharedNetworkName describes the resource data model.
type ServiceDhcpServerSharedNetworkName struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameAuthoritative           types.String `tfsdk:"authoritative"`
	LeafServiceDhcpServerSharedNetworkNameDomainName              types.String `tfsdk:"domain_name"`
	LeafServiceDhcpServerSharedNetworkNameDomainSearch            types.String `tfsdk:"domain_search"`
	LeafServiceDhcpServerSharedNetworkNameNtpServer               types.String `tfsdk:"ntp_server"`
	LeafServiceDhcpServerSharedNetworkNamePingCheck               types.String `tfsdk:"ping_check"`
	LeafServiceDhcpServerSharedNetworkNameDescrIPtion             types.String `tfsdk:"description"`
	LeafServiceDhcpServerSharedNetworkNameDisable                 types.String `tfsdk:"disable"`
	LeafServiceDhcpServerSharedNetworkNameNameServer              types.String `tfsdk:"name_server"`
	LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters types.String `tfsdk:"shared_network_parameters"`

	// TagNodes
	TagServiceDhcpServerSharedNetworkNameSubnet types.Map `tfsdk:"subnet"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkName) GetVyosPath() []string {
	return []string{
		"service",
		"dhcp-server",
		"shared-network-name",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceDhcpServerSharedNetworkName) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.IsUnknown()) {
		vyosData["authoritative"] = o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameDomainName.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameDomainName.IsUnknown()) {
		vyosData["domain-name"] = o.LeafServiceDhcpServerSharedNetworkNameDomainName.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.IsUnknown()) {
		vyosData["domain-search"] = o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameNtpServer.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameNtpServer.IsUnknown()) {
		vyosData["ntp-server"] = o.LeafServiceDhcpServerSharedNetworkNameNtpServer.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNamePingCheck.IsNull() || o.LeafServiceDhcpServerSharedNetworkNamePingCheck.IsUnknown()) {
		vyosData["ping-check"] = o.LeafServiceDhcpServerSharedNetworkNamePingCheck.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameDisable.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafServiceDhcpServerSharedNetworkNameDisable.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameNameServer.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameNameServer.IsUnknown()) {
		vyosData["name-server"] = o.LeafServiceDhcpServerSharedNetworkNameNameServer.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.IsUnknown()) {
		vyosData["shared-network-parameters"] = o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.ValueString()
	}

	// Tags
	if !(o.TagServiceDhcpServerSharedNetworkNameSubnet.IsNull() || o.TagServiceDhcpServerSharedNetworkNameSubnet.IsUnknown()) {
		subModel := make(map[string]ServiceDhcpServerSharedNetworkNameSubnet)
		diags.Append(o.TagServiceDhcpServerSharedNetworkNameSubnet.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["subnet"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceDhcpServerSharedNetworkName) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name"}})

	// Leafs
	if value, ok := vyosData["authoritative"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameAuthoritative = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameAuthoritative = basetypes.NewStringNull()
	}
	if value, ok := vyosData["domain-name"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDomainName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDomainName = basetypes.NewStringNull()
	}
	if value, ok := vyosData["domain-search"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDomainSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDomainSearch = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ntp-server"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameNtpServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameNtpServer = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ping-check"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNamePingCheck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNamePingCheck = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["name-server"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameNameServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameNameServer = basetypes.NewStringNull()
	}
	if value, ok := vyosData["shared-network-parameters"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["subnet"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDhcpServerSharedNetworkNameSubnet{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDhcpServerSharedNetworkNameSubnet = data
	} else {
		o.TagServiceDhcpServerSharedNetworkNameSubnet = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceDhcpServerSharedNetworkName) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"authoritative":             types.StringType,
		"domain_name":               types.StringType,
		"domain_search":             types.StringType,
		"ntp_server":                types.StringType,
		"ping_check":                types.StringType,
		"description":               types.StringType,
		"disable":                   types.StringType,
		"name_server":               types.StringType,
		"shared_network_parameters": types.StringType,

		// Tags
		"subnet": types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDhcpServerSharedNetworkNameSubnet{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of DHCP shared network

`,
		},

		// LeafNodes

		"authoritative": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to make DHCP server authoritative for this physical network

`,
		},

		"domain_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name

`,
		},

		"domain_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name search list

`,
		},

		"ntp_server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of NTP server

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  NTP server IPv4 address  |

`,
		},

		"ping_check": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Sends ICMP Echo request to the address being assigned

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"name_server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Domain Name Server (DNS) IPv4 address  |

`,
		},

		"shared_network_parameters": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Additional shared-network parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		// TagNodes

		"subnet": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDhcpServerSharedNetworkNameSubnet{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `DHCP subnet for shared network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |

`,
		},

		// Nodes

	}
}
