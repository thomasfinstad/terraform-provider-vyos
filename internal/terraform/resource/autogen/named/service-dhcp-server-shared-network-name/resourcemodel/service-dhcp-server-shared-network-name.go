// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDhcpServerSharedNetworkName describes the resource data model.
type ServiceDhcpServerSharedNetworkName struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameAuthoritative           types.String `tfsdk:"authoritative" json:"authoritative,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDomainName              types.String `tfsdk:"domain_name" json:"domain-name,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDomainSearch            types.String `tfsdk:"domain_search" json:"domain-search,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameNtpServer               types.String `tfsdk:"ntp_server" json:"ntp-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNamePingCheck               types.String `tfsdk:"ping_check" json:"ping-check,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDescrIPtion             types.String `tfsdk:"description" json:"description,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameDisable                 types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameNameServer              types.String `tfsdk:"name_server" json:"name-server,omitempty"`
	LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters types.String `tfsdk:"shared_network_parameters" json:"shared-network-parameters,omitempty"`

	// TagNodes
	TagServiceDhcpServerSharedNetworkNameSubnet *map[string]ServiceDhcpServerSharedNetworkNameSubnet `tfsdk:"subnet" json:"subnet,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpServerSharedNetworkName) GetVyosPath() []string {
	return []string{
		"service",
		"dhcp-server",
		"shared-network-name",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Name of DHCP shared network

`,
		},

		// LeafNodes

		"authoritative": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to make DHCP server authoritative for this physical network

`,
		},

		"domain_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name

`,
		},

		"domain_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Client Domain Name search list

`,
		},

		"ntp_server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of NTP server

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  NTP server IPv4 address  |

`,
		},

		"ping_check": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Sends ICMP Echo request to the address being assigned

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"name_server": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Domain Name Server (DNS) IPv4 address  |

`,
		},

		"shared_network_parameters": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Additional shared-network parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		// TagNodes

		"subnet": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDhcpServerSharedNetworkNameSubnet{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `DHCP subnet for shared network

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDhcpServerSharedNetworkName) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.IsUnknown() {
		jsonData["authoritative"] = o.LeafServiceDhcpServerSharedNetworkNameAuthoritative.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameDomainName.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameDomainName.IsUnknown() {
		jsonData["domain-name"] = o.LeafServiceDhcpServerSharedNetworkNameDomainName.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.IsUnknown() {
		jsonData["domain-search"] = o.LeafServiceDhcpServerSharedNetworkNameDomainSearch.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameNtpServer.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameNtpServer.IsUnknown() {
		jsonData["ntp-server"] = o.LeafServiceDhcpServerSharedNetworkNameNtpServer.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNamePingCheck.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNamePingCheck.IsUnknown() {
		jsonData["ping-check"] = o.LeafServiceDhcpServerSharedNetworkNamePingCheck.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameDisable.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameDisable.IsUnknown() {
		jsonData["disable"] = o.LeafServiceDhcpServerSharedNetworkNameDisable.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameNameServer.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameNameServer.IsUnknown() {
		jsonData["name-server"] = o.LeafServiceDhcpServerSharedNetworkNameNameServer.ValueString()
	}

	if !o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.IsNull() && !o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.IsUnknown() {
		jsonData["shared-network-parameters"] = o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagServiceDhcpServerSharedNetworkNameSubnet).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDhcpServerSharedNetworkNameSubnet)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["subnet"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDhcpServerSharedNetworkName) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["authoritative"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameAuthoritative = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameAuthoritative = basetypes.NewStringNull()
	}

	if value, ok := jsonData["domain-name"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDomainName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDomainName = basetypes.NewStringNull()
	}

	if value, ok := jsonData["domain-search"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDomainSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDomainSearch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ntp-server"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameNtpServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameNtpServer = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ping-check"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNamePingCheck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNamePingCheck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["name-server"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameNameServer = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameNameServer = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shared-network-parameters"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSharedNetworkParameters = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["subnet"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDhcpServerSharedNetworkNameSubnet = &map[string]ServiceDhcpServerSharedNetworkNameSubnet{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDhcpServerSharedNetworkNameSubnet)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
