// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceDhcpServerSharedNetworkNameSubnetStaticMapping describes the resource data model.
type ServiceDhcpServerSharedNetworkNameSubnetStaticMapping struct {
	// LeafNodes
	LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable                 types.String `tfsdk:"disable"`
	LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress               types.String `tfsdk:"ip_address"`
	LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress              types.String `tfsdk:"mac_address"`
	LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters types.String `tfsdk:"static_mapping_parameters"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceDhcpServerSharedNetworkNameSubnetStaticMapping) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name", "subnet", "static-mapping"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress.IsUnknown()) {
		vyosData["ip-address"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress.IsUnknown()) {
		vyosData["mac-address"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress.ValueString()
	}
	if !(o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters.IsNull() || o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters.IsUnknown()) {
		vyosData["static-mapping-parameters"] = o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceDhcpServerSharedNetworkNameSubnetStaticMapping) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name", "subnet", "static-mapping"}})

	// Leafs
	if value, ok := vyosData["disable"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ip-address"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingIPAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac-address"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingMacAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["static-mapping-parameters"]; ok {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDhcpServerSharedNetworkNameSubnetStaticMappingStaticMappingParameters = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "dhcp-server", "shared-network-name", "subnet", "static-mapping"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceDhcpServerSharedNetworkNameSubnetStaticMapping) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"disable":                   types.StringType,
		"ip_address":                types.StringType,
		"mac_address":               types.StringType,
		"static_mapping_parameters": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpServerSharedNetworkNameSubnetStaticMapping) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"ip_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Fixed IP address of static mapping

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address used in static mapping  |

`,
		},

		"mac_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"static_mapping_parameters": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Additional static-mapping parameters for DHCP server. Will be placed inside the "host" block of the mapping. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.

`,
		},

		// TagNodes

		// Nodes

	}
}
