// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecRemoteAccessConnection describes the resource data model.
type VpnIPsecRemoteAccessConnection struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafVpnIPsecRemoteAccessConnectionDescrIPtion  types.String `tfsdk:"description"`
	LeafVpnIPsecRemoteAccessConnectionDisable      types.String `tfsdk:"disable"`
	LeafVpnIPsecRemoteAccessConnectionEspGroup     types.String `tfsdk:"esp_group"`
	LeafVpnIPsecRemoteAccessConnectionIkeGroup     types.String `tfsdk:"ike_group"`
	LeafVpnIPsecRemoteAccessConnectionLocalAddress types.String `tfsdk:"local_address"`
	LeafVpnIPsecRemoteAccessConnectionTimeout      types.String `tfsdk:"timeout"`
	LeafVpnIPsecRemoteAccessConnectionPool         types.String `tfsdk:"pool"`
	LeafVpnIPsecRemoteAccessConnectionUnique       types.String `tfsdk:"unique"`

	// TagNodes

	// Nodes
	NodeVpnIPsecRemoteAccessConnectionAuthentication types.Object `tfsdk:"authentication"`
	NodeVpnIPsecRemoteAccessConnectionLocal          types.Object `tfsdk:"local"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecRemoteAccessConnection) GetVyosPath() []string {
	return []string{
		"vpn",
		"ipsec",
		"remote-access",
		"connection",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecRemoteAccessConnection) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVpnIPsecRemoteAccessConnectionDescrIPtion.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafVpnIPsecRemoteAccessConnectionDescrIPtion.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionDisable.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafVpnIPsecRemoteAccessConnectionDisable.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionEspGroup.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionEspGroup.IsUnknown()) {
		vyosData["esp-group"] = o.LeafVpnIPsecRemoteAccessConnectionEspGroup.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionIkeGroup.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionIkeGroup.IsUnknown()) {
		vyosData["ike-group"] = o.LeafVpnIPsecRemoteAccessConnectionIkeGroup.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionLocalAddress.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionLocalAddress.IsUnknown()) {
		vyosData["local-address"] = o.LeafVpnIPsecRemoteAccessConnectionLocalAddress.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionTimeout.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionTimeout.IsUnknown()) {
		vyosData["timeout"] = o.LeafVpnIPsecRemoteAccessConnectionTimeout.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionPool.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionPool.IsUnknown()) {
		vyosData["pool"] = o.LeafVpnIPsecRemoteAccessConnectionPool.ValueString()
	}
	if !(o.LeafVpnIPsecRemoteAccessConnectionUnique.IsNull() || o.LeafVpnIPsecRemoteAccessConnectionUnique.IsUnknown()) {
		vyosData["unique"] = o.LeafVpnIPsecRemoteAccessConnectionUnique.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeVpnIPsecRemoteAccessConnectionAuthentication.IsNull() || o.NodeVpnIPsecRemoteAccessConnectionAuthentication.IsUnknown()) {
		var subModel VpnIPsecRemoteAccessConnectionAuthentication
		diags.Append(o.NodeVpnIPsecRemoteAccessConnectionAuthentication.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["authentication"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVpnIPsecRemoteAccessConnectionLocal.IsNull() || o.NodeVpnIPsecRemoteAccessConnectionLocal.IsUnknown()) {
		var subModel VpnIPsecRemoteAccessConnectionLocal
		diags.Append(o.NodeVpnIPsecRemoteAccessConnectionLocal.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["local"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecRemoteAccessConnection) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["esp-group"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionEspGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionEspGroup = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ike-group"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionIkeGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionIkeGroup = basetypes.NewStringNull()
	}
	if value, ok := vyosData["local-address"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionLocalAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionLocalAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["timeout"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionTimeout = basetypes.NewStringNull()
	}
	if value, ok := vyosData["pool"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionPool = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionPool = basetypes.NewStringNull()
	}
	if value, ok := vyosData["unique"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionUnique = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionUnique = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["authentication"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VpnIPsecRemoteAccessConnectionAuthentication{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVpnIPsecRemoteAccessConnectionAuthentication = data

	} else {
		o.NodeVpnIPsecRemoteAccessConnectionAuthentication = basetypes.NewObjectNull(VpnIPsecRemoteAccessConnectionAuthentication{}.AttributeTypes())
	}
	if value, ok := vyosData["local"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VpnIPsecRemoteAccessConnectionLocal{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVpnIPsecRemoteAccessConnectionLocal = data

	} else {
		o.NodeVpnIPsecRemoteAccessConnectionLocal = basetypes.NewObjectNull(VpnIPsecRemoteAccessConnectionLocal{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecRemoteAccessConnection) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":   types.StringType,
		"disable":       types.StringType,
		"esp_group":     types.StringType,
		"ike_group":     types.StringType,
		"local_address": types.StringType,
		"timeout":       types.StringType,
		"pool":          types.StringType,
		"unique":        types.StringType,

		// Tags

		// Nodes
		"authentication": types.ObjectType{AttrTypes: VpnIPsecRemoteAccessConnectionAuthentication{}.AttributeTypes()},
		"local":          types.ObjectType{AttrTypes: VpnIPsecRemoteAccessConnectionLocal{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessConnection) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IKEv2 VPN connection name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Connection name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"esp_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
		},

		"ike_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
		},

		"local_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 or IPv6 address of a local interface to use for VPN

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of a local interface for VPN  |
|  ipv6  |  IPv6 address of a local interface for VPN  |
|  any  |  Allow any IPv4 address present on the system to be used for VPN  |

`,
		},

		"timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Timeout to close connection if no data is transmitted

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable inactivity checks  |
|  u32:1-86400  |  Timeout in seconds  |

`,

			// Default:          stringdefault.StaticString(`28800`),
			Computed: true,
		},

		"pool": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address pool

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Predefined IP pool name  |
|  dhcp  |  Forward requests for virtual IP addresses to a DHCP server  |
|  radius  |  Forward requests for virtual IP addresses to a RADIUS server  |

`,
		},

		"unique": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection uniqueness enforcement policy

|  Format  |  Description  |
|----------|---------------|
|  never  |  Never enforce connection uniqueness  |
|  keep  |  Reject new connection attempts if the same user already has an active connection  |
|  replace  |  Delete any existing connection if a new one for the same user gets established  |

`,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VpnIPsecRemoteAccessConnectionAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication for remote access

`,
		},

		"local": schema.SingleNestedAttribute{
			Attributes: VpnIPsecRemoteAccessConnectionLocal{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Local parameters for interesting traffic

`,
		},
	}
}
