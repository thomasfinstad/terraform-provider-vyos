// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecRemoteAccessConnectionAuthenticationXfivezeronine describes the resource data model.
type VpnIPsecRemoteAccessConnectionAuthenticationXfivezeronine struct {
	// LeafNodes
	LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate   types.String `tfsdk:"certificate" json:"certificate,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase    types.String `tfsdk:"passphrase" json:"passphrase,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate types.String `tfsdk:"ca_certificate" json:"ca-certificate,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessConnectionAuthenticationXfivezeronine) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of certificate in PKI configuration  |

`,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Private key passphrase

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase to decrypt the private key  |

`,
		},

		"ca_certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate Authority in PKI configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of CA in PKI configuration  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecRemoteAccessConnectionAuthenticationXfivezeronine) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate.IsNull() && !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate.IsUnknown() {
		jsonData["certificate"] = o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate.ValueString()
	}

	if !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase.IsNull() && !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase.IsUnknown() {
		jsonData["passphrase"] = o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase.ValueString()
	}

	if !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate.IsNull() && !o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate.IsUnknown() {
		jsonData["ca-certificate"] = o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecRemoteAccessConnectionAuthenticationXfivezeronine) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["certificate"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCertificate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passphrase"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeroninePassphrase = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ca-certificate"]; ok {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessConnectionAuthenticationXfivezeronineCaCertificate = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
