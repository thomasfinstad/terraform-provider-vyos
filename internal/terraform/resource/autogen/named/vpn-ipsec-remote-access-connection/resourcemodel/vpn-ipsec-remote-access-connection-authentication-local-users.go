// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers describes the resource data model.
type VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers struct {
	// LeafNodes

	// TagNodes
	TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername types.Map `tfsdk:"username"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection", "authentication", "local-users"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags
	if !(o.TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername.IsNull() || o.TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername.IsUnknown()) {
		subModel := make(map[string]VpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername)
		diags.Append(o.TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["username"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection", "authentication", "local-users"}})

	// Leafs

	// Tags
	if value, ok := vyosData["username"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: VpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername = data
	} else {
		o.TagVpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vpn", "ipsec", "remote-access", "connection", "authentication", "local-users"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags
		"username": types.MapType{ElemType: types.ObjectType{AttrTypes: VpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessConnectionAuthenticationLocalUsers) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"username": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VpnIPsecRemoteAccessConnectionAuthenticationLocalUsersUsername{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Username used for authentication

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Username used for authentication  |

`,
		},

		// Nodes

	}
}
