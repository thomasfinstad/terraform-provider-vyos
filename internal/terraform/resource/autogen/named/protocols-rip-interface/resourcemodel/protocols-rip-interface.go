// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsRIPInterface describes the resource data model.
type ProtocolsRIPInterface struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes

	// Nodes
	NodeProtocolsRIPInterfaceSplitHorizon   types.Object `tfsdk:"split_horizon"`
	NodeProtocolsRIPInterfaceAuthentication types.Object `tfsdk:"authentication"`
	NodeProtocolsRIPInterfaceReceive        types.Object `tfsdk:"receive"`
	NodeProtocolsRIPInterfaceSend           types.Object `tfsdk:"send"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsRIPInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"rip",
		"interface",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsRIPInterface) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "rip", "interface"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes
	if !(o.NodeProtocolsRIPInterfaceSplitHorizon.IsNull() || o.NodeProtocolsRIPInterfaceSplitHorizon.IsUnknown()) {
		var subModel ProtocolsRIPInterfaceSplitHorizon
		diags.Append(o.NodeProtocolsRIPInterfaceSplitHorizon.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["split-horizon"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsRIPInterfaceAuthentication.IsNull() || o.NodeProtocolsRIPInterfaceAuthentication.IsUnknown()) {
		var subModel ProtocolsRIPInterfaceAuthentication
		diags.Append(o.NodeProtocolsRIPInterfaceAuthentication.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["authentication"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsRIPInterfaceReceive.IsNull() || o.NodeProtocolsRIPInterfaceReceive.IsUnknown()) {
		var subModel ProtocolsRIPInterfaceReceive
		diags.Append(o.NodeProtocolsRIPInterfaceReceive.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["receive"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsRIPInterfaceSend.IsNull() || o.NodeProtocolsRIPInterfaceSend.IsUnknown()) {
		var subModel ProtocolsRIPInterfaceSend
		diags.Append(o.NodeProtocolsRIPInterfaceSend.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["send"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsRIPInterface) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "rip", "interface"}})

	// Leafs

	// Tags

	// Nodes
	if value, ok := vyosData["split-horizon"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsRIPInterfaceSplitHorizon{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsRIPInterfaceSplitHorizon = data

	} else {
		o.NodeProtocolsRIPInterfaceSplitHorizon = basetypes.NewObjectNull(ProtocolsRIPInterfaceSplitHorizon{}.AttributeTypes())
	}
	if value, ok := vyosData["authentication"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsRIPInterfaceAuthentication{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsRIPInterfaceAuthentication = data

	} else {
		o.NodeProtocolsRIPInterfaceAuthentication = basetypes.NewObjectNull(ProtocolsRIPInterfaceAuthentication{}.AttributeTypes())
	}
	if value, ok := vyosData["receive"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsRIPInterfaceReceive{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsRIPInterfaceReceive = data

	} else {
		o.NodeProtocolsRIPInterfaceReceive = basetypes.NewObjectNull(ProtocolsRIPInterfaceReceive{}.AttributeTypes())
	}
	if value, ok := vyosData["send"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsRIPInterfaceSend{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsRIPInterfaceSend = data

	} else {
		o.NodeProtocolsRIPInterfaceSend = basetypes.NewObjectNull(ProtocolsRIPInterfaceSend{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "rip", "interface"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsRIPInterface) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags

		// Nodes
		"split_horizon":  types.ObjectType{AttrTypes: ProtocolsRIPInterfaceSplitHorizon{}.AttributeTypes()},
		"authentication": types.ObjectType{AttrTypes: ProtocolsRIPInterfaceAuthentication{}.AttributeTypes()},
		"receive":        types.ObjectType{AttrTypes: ProtocolsRIPInterfaceReceive{}.AttributeTypes()},
		"send":           types.ObjectType{AttrTypes: ProtocolsRIPInterfaceSend{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsRIPInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		// LeafNodes

		// TagNodes

		// Nodes

		"split_horizon": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceSplitHorizon{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Split horizon parameters

`,
		},

		"authentication": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},

		"receive": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceReceive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertisement reception

`,
		},

		"send": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceSend{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertisement transmission

`,
		},
	}
}
