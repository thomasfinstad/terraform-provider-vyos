// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ProtocolsRIPInterface describes the resource data model.
type ProtocolsRIPInterface struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes

	// Nodes
	NodeProtocolsRIPInterfaceSplitHorizon   *ProtocolsRIPInterfaceSplitHorizon   `tfsdk:"split_horizon" json:"split-horizon,omitempty"`
	NodeProtocolsRIPInterfaceAuthentication *ProtocolsRIPInterfaceAuthentication `tfsdk:"authentication" json:"authentication,omitempty"`
	NodeProtocolsRIPInterfaceReceive        *ProtocolsRIPInterfaceReceive        `tfsdk:"receive" json:"receive,omitempty"`
	NodeProtocolsRIPInterfaceSend           *ProtocolsRIPInterfaceSend           `tfsdk:"send" json:"send,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsRIPInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"rip",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsRIPInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		// LeafNodes

		// TagNodes

		// Nodes

		"split_horizon": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceSplitHorizon{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Split horizon parameters

`,
		},

		"authentication": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},

		"receive": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceReceive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertisement reception

`,
		},

		"send": schema.SingleNestedAttribute{
			Attributes: ProtocolsRIPInterfaceSend{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertisement transmission

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsRIPInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsRIPInterfaceSplitHorizon).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsRIPInterfaceSplitHorizon)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["split-horizon"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsRIPInterfaceAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsRIPInterfaceAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsRIPInterfaceReceive).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsRIPInterfaceReceive)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["receive"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsRIPInterfaceSend).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsRIPInterfaceSend)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["send"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsRIPInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags

	// Nodes
	if value, ok := jsonData["split-horizon"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsRIPInterfaceSplitHorizon = &ProtocolsRIPInterfaceSplitHorizon{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsRIPInterfaceSplitHorizon)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsRIPInterfaceAuthentication = &ProtocolsRIPInterfaceAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsRIPInterfaceAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["receive"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsRIPInterfaceReceive = &ProtocolsRIPInterfaceReceive{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsRIPInterfaceReceive)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["send"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsRIPInterfaceSend = &ProtocolsRIPInterfaceSend{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsRIPInterfaceSend)
		if err != nil {
			return err
		}
	}

	return nil
}
