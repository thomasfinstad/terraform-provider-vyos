// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyLimiterClass describes the resource data model.
type QosPolicyLimiterClass struct {
	// LeafNodes
	LeafQosPolicyLimiterClassDescrIPtion types.String `tfsdk:"description"`
	LeafQosPolicyLimiterClassBandwIDth   types.String `tfsdk:"bandwidth"`
	LeafQosPolicyLimiterClassBurst       types.String `tfsdk:"burst"`
	LeafQosPolicyLimiterClassExceed      types.String `tfsdk:"exceed"`
	LeafQosPolicyLimiterClassNotExceed   types.String `tfsdk:"not_exceed"`
	LeafQosPolicyLimiterClassPriority    types.String `tfsdk:"priority"`

	// TagNodes
	TagQosPolicyLimiterClassMatch types.Map `tfsdk:"match"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyLimiterClass) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyLimiterClassDescrIPtion.IsNull() || o.LeafQosPolicyLimiterClassDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafQosPolicyLimiterClassDescrIPtion.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassBandwIDth.IsNull() || o.LeafQosPolicyLimiterClassBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafQosPolicyLimiterClassBandwIDth.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassBurst.IsNull() || o.LeafQosPolicyLimiterClassBurst.IsUnknown()) {
		vyosData["burst"] = o.LeafQosPolicyLimiterClassBurst.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassExceed.IsNull() || o.LeafQosPolicyLimiterClassExceed.IsUnknown()) {
		vyosData["exceed"] = o.LeafQosPolicyLimiterClassExceed.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassNotExceed.IsNull() || o.LeafQosPolicyLimiterClassNotExceed.IsUnknown()) {
		vyosData["not-exceed"] = o.LeafQosPolicyLimiterClassNotExceed.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassPriority.IsNull() || o.LeafQosPolicyLimiterClassPriority.IsUnknown()) {
		vyosData["priority"] = o.LeafQosPolicyLimiterClassPriority.ValueString()
	}

	// Tags
	if !(o.TagQosPolicyLimiterClassMatch.IsNull() || o.TagQosPolicyLimiterClassMatch.IsUnknown()) {
		subModel := make(map[string]QosPolicyLimiterClassMatch)
		diags.Append(o.TagQosPolicyLimiterClassMatch.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["match"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyLimiterClass) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafQosPolicyLimiterClassDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafQosPolicyLimiterClassBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["burst"]; ok {
		o.LeafQosPolicyLimiterClassBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassBurst = basetypes.NewStringNull()
	}
	if value, ok := vyosData["exceed"]; ok {
		o.LeafQosPolicyLimiterClassExceed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassExceed = basetypes.NewStringNull()
	}
	if value, ok := vyosData["not-exceed"]; ok {
		o.LeafQosPolicyLimiterClassNotExceed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassNotExceed = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafQosPolicyLimiterClassPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassPriority = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["match"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: QosPolicyLimiterClassMatch{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagQosPolicyLimiterClassMatch = data
	} else {
		o.TagQosPolicyLimiterClassMatch = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyLimiterClass) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,
		"bandwidth":   types.StringType,
		"burst":       types.StringType,
		"exceed":      types.StringType,
		"not_exceed":  types.StringType,
		"priority":    types.StringType,

		// Tags
		"match": types.MapType{ElemType: types.ObjectType{AttrTypes: QosPolicyLimiterClassMatch{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyLimiterClass) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |

`,
		},

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst size for this class

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bytes  |
|  <number><suffix>  |  Bytes with scaling suffix (kb, mb, gb)  |

`,

			// Default:          stringdefault.StaticString(`15k`),
			Computed: true,
		},

		"exceed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default action for packets exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |

`,

			// Default:          stringdefault.StaticString(`drop`),
			Computed: true,
		},

		"not_exceed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default action for packets not exceeding the limiter

|  Format  |  Description  |
|----------|---------------|
|  continue  |  Do not do anything, just continue with the next action in line  |
|  drop  |  Drop the packet immediately  |
|  ok  |  Accept the packet  |
|  reclassify  |  Treat the packet as non-matching to the filter this action is attached to and continue with the next filter in line (if any)  |
|  pipe  |  Pass the packet to the next action in line  |

`,

			// Default:          stringdefault.StaticString(`ok`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for rule evaluation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-20  |  Priority for match rule evaluation  |

`,

			// Default:          stringdefault.StaticString(`20`),
			Computed: true,
		},

		// TagNodes

		"match": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: QosPolicyLimiterClassMatch{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Class matching rule name

`,
		},

		// Nodes

	}
}
