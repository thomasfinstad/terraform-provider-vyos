// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyLimiterClassMatch describes the resource data model.
type QosPolicyLimiterClassMatch struct {
	// LeafNodes
	LeafQosPolicyLimiterClassMatchDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafQosPolicyLimiterClassMatchInterface   types.String `tfsdk:"interface" json:"interface,omitempty"`
	LeafQosPolicyLimiterClassMatchMark        types.String `tfsdk:"mark" json:"mark,omitempty"`
	LeafQosPolicyLimiterClassMatchVif         types.String `tfsdk:"vif" json:"vif,omitempty"`

	// TagNodes

	// Nodes
	NodeQosPolicyLimiterClassMatchEther  *QosPolicyLimiterClassMatchEther  `tfsdk:"ether" json:"ether,omitempty"`
	NodeQosPolicyLimiterClassMatchIP     *QosPolicyLimiterClassMatchIP     `tfsdk:"ip" json:"ip,omitempty"`
	NodeQosPolicyLimiterClassMatchIPvsix *QosPolicyLimiterClassMatchIPvsix `tfsdk:"ipv6" json:"ipv6,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyLimiterClassMatch) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		"mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match on mark applied by firewall

|  Format  |  Description  |
|----------|---------------|
|  u32  |  FW mark to match  |

`,
		},

		"vif": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4095  |  Virtual Local Area Network (VLAN) tag   |

`,
		},

		// TagNodes

		// Nodes

		"ether": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchEther{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Ethernet header match

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match IP protocol header

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match IPv6 protocol header

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyLimiterClassMatch) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyLimiterClassMatchDescrIPtion.IsNull() && !o.LeafQosPolicyLimiterClassMatchDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyLimiterClassMatchDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyLimiterClassMatchInterface.IsNull() && !o.LeafQosPolicyLimiterClassMatchInterface.IsUnknown() {
		jsonData["interface"] = o.LeafQosPolicyLimiterClassMatchInterface.ValueString()
	}

	if !o.LeafQosPolicyLimiterClassMatchMark.IsNull() && !o.LeafQosPolicyLimiterClassMatchMark.IsUnknown() {
		jsonData["mark"] = o.LeafQosPolicyLimiterClassMatchMark.ValueString()
	}

	if !o.LeafQosPolicyLimiterClassMatchVif.IsNull() && !o.LeafQosPolicyLimiterClassMatchVif.IsUnknown() {
		jsonData["vif"] = o.LeafQosPolicyLimiterClassMatchVif.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyLimiterClassMatchEther).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyLimiterClassMatchEther)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ether"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyLimiterClassMatchIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyLimiterClassMatchIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeQosPolicyLimiterClassMatchIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyLimiterClassMatchIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyLimiterClassMatch) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyLimiterClassMatchDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interface"]; ok {
		o.LeafQosPolicyLimiterClassMatchInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mark"]; ok {
		o.LeafQosPolicyLimiterClassMatchMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchMark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vif"]; ok {
		o.LeafQosPolicyLimiterClassMatchVif = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchVif = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["ether"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyLimiterClassMatchEther = &QosPolicyLimiterClassMatchEther{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyLimiterClassMatchEther)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyLimiterClassMatchIP = &QosPolicyLimiterClassMatchIP{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyLimiterClassMatchIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyLimiterClassMatchIPvsix = &QosPolicyLimiterClassMatchIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyLimiterClassMatchIPvsix)
		if err != nil {
			return err
		}
	}

	return nil
}
