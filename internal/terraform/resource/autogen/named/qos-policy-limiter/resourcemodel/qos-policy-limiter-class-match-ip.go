// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyLimiterClassMatchIP describes the resource data model.
type QosPolicyLimiterClassMatchIP struct {
	// LeafNodes
	LeafQosPolicyLimiterClassMatchIPDscp      types.String `tfsdk:"dscp"`
	LeafQosPolicyLimiterClassMatchIPMaxLength types.String `tfsdk:"max_length"`
	LeafQosPolicyLimiterClassMatchIPProtocol  types.String `tfsdk:"protocol"`

	// TagNodes

	// Nodes
	NodeQosPolicyLimiterClassMatchIPDestination types.Object `tfsdk:"destination"`
	NodeQosPolicyLimiterClassMatchIPSource      types.Object `tfsdk:"source"`
	NodeQosPolicyLimiterClassMatchIPTCP         types.Object `tfsdk:"tcp"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyLimiterClassMatchIP) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class", "match", "ip"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyLimiterClassMatchIPDscp.IsNull() || o.LeafQosPolicyLimiterClassMatchIPDscp.IsUnknown()) {
		vyosData["dscp"] = o.LeafQosPolicyLimiterClassMatchIPDscp.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassMatchIPMaxLength.IsNull() || o.LeafQosPolicyLimiterClassMatchIPMaxLength.IsUnknown()) {
		vyosData["max-length"] = o.LeafQosPolicyLimiterClassMatchIPMaxLength.ValueString()
	}
	if !(o.LeafQosPolicyLimiterClassMatchIPProtocol.IsNull() || o.LeafQosPolicyLimiterClassMatchIPProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafQosPolicyLimiterClassMatchIPProtocol.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeQosPolicyLimiterClassMatchIPDestination.IsNull() || o.NodeQosPolicyLimiterClassMatchIPDestination.IsUnknown()) {
		var subModel QosPolicyLimiterClassMatchIPDestination
		diags.Append(o.NodeQosPolicyLimiterClassMatchIPDestination.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["destination"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeQosPolicyLimiterClassMatchIPSource.IsNull() || o.NodeQosPolicyLimiterClassMatchIPSource.IsUnknown()) {
		var subModel QosPolicyLimiterClassMatchIPSource
		diags.Append(o.NodeQosPolicyLimiterClassMatchIPSource.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["source"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeQosPolicyLimiterClassMatchIPTCP.IsNull() || o.NodeQosPolicyLimiterClassMatchIPTCP.IsUnknown()) {
		var subModel QosPolicyLimiterClassMatchIPTCP
		diags.Append(o.NodeQosPolicyLimiterClassMatchIPTCP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["tcp"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyLimiterClassMatchIP) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class", "match", "ip"}})

	// Leafs
	if value, ok := vyosData["dscp"]; ok {
		o.LeafQosPolicyLimiterClassMatchIPDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchIPDscp = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-length"]; ok {
		o.LeafQosPolicyLimiterClassMatchIPMaxLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchIPMaxLength = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafQosPolicyLimiterClassMatchIPProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyLimiterClassMatchIPProtocol = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["destination"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyLimiterClassMatchIPDestination{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyLimiterClassMatchIPDestination = data

	} else {
		o.NodeQosPolicyLimiterClassMatchIPDestination = basetypes.NewObjectNull(QosPolicyLimiterClassMatchIPDestination{}.AttributeTypes())
	}
	if value, ok := vyosData["source"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyLimiterClassMatchIPSource{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyLimiterClassMatchIPSource = data

	} else {
		o.NodeQosPolicyLimiterClassMatchIPSource = basetypes.NewObjectNull(QosPolicyLimiterClassMatchIPSource{}.AttributeTypes())
	}
	if value, ok := vyosData["tcp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyLimiterClassMatchIPTCP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyLimiterClassMatchIPTCP = data

	} else {
		o.NodeQosPolicyLimiterClassMatchIPTCP = basetypes.NewObjectNull(QosPolicyLimiterClassMatchIPTCP{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "limiter", "class", "match", "ip"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyLimiterClassMatchIP) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"dscp":       types.StringType,
		"max_length": types.StringType,
		"protocol":   types.StringType,

		// Tags

		// Nodes
		"destination": types.ObjectType{AttrTypes: QosPolicyLimiterClassMatchIPDestination{}.AttributeTypes()},
		"source":      types.ObjectType{AttrTypes: QosPolicyLimiterClassMatchIPSource{}.AttributeTypes()},
		"tcp":         types.ObjectType{AttrTypes: QosPolicyLimiterClassMatchIPTCP{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyLimiterClassMatchIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |

`,
		},

		"max_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |

`,
		},

		// TagNodes

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchIPDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on destination port or address

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchIPSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on source port or address

`,
		},

		"tcp": schema.SingleNestedAttribute{
			Attributes: QosPolicyLimiterClassMatchIPTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP Flags matching

`,
		},
	}
}
