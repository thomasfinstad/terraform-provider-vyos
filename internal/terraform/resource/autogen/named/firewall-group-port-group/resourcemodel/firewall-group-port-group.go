// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallGroupPortGroup describes the resource data model.
type FirewallGroupPortGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafFirewallGroupPortGroupDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafFirewallGroupPortGroupPort        types.String `tfsdk:"port" json:"port,omitempty"`
	LeafFirewallGroupPortGroupInclude     types.String `tfsdk:"include" json:"include,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *FirewallGroupPortGroup) GetVyosPath() []string {
	return []string{
		"firewall",
		"group",
		"port-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallGroupPortGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Firewall port-group

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port-group member

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Named port (any name in /etc/services, e.g., http)  |
|  u32:1-65535  |  Numbered port  |
|  start-end  |  Numbered port range (e.g. 1001-1050)  |

`,
		},

		"include": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Include another port-group

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallGroupPortGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallGroupPortGroupDescrIPtion.IsNull() && !o.LeafFirewallGroupPortGroupDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafFirewallGroupPortGroupDescrIPtion.ValueString()
	}

	if !o.LeafFirewallGroupPortGroupPort.IsNull() && !o.LeafFirewallGroupPortGroupPort.IsUnknown() {
		jsonData["port"] = o.LeafFirewallGroupPortGroupPort.ValueString()
	}

	if !o.LeafFirewallGroupPortGroupInclude.IsNull() && !o.LeafFirewallGroupPortGroupInclude.IsUnknown() {
		jsonData["include"] = o.LeafFirewallGroupPortGroupInclude.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallGroupPortGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafFirewallGroupPortGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallGroupPortGroupDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafFirewallGroupPortGroupPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallGroupPortGroupPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["include"]; ok {
		o.LeafFirewallGroupPortGroupInclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallGroupPortGroupInclude = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
