// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceLldpInterfaceLocationCoordinateBased describes the resource data model.
type ServiceLldpInterfaceLocationCoordinateBased struct {
	// LeafNodes
	LeafServiceLldpInterfaceLocationCoordinateBasedAltitude  types.String `tfsdk:"altitude" json:"altitude,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedDatum     types.String `tfsdk:"datum" json:"datum,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedLatitude  types.String `tfsdk:"latitude" json:"latitude,omitempty"`
	LeafServiceLldpInterfaceLocationCoordinateBasedLongitude types.String `tfsdk:"longitude" json:"longitude,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceLldpInterfaceLocationCoordinateBased) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"altitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Altitude in meters

|  Format  |  Description  |
|----------|---------------|
|  0  |  No altitude  |
|  [+-]<meters>  |  Altitude in meters  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"datum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Coordinate datum type

|  Format  |  Description  |
|----------|---------------|
|  WGS84  |  WGS84  |
|  NAD83  |  NAD83  |
|  MLLW  |  NAD83/MLLW  |

`,

			// Default:          stringdefault.StaticString(`WGS84`),
			Computed: true,
		},

		"latitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Latitude

|  Format  |  Description  |
|----------|---------------|
|  <latitude>  |  Latitude (example "37.524449N")  |

`,
		},

		"longitude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Longitude

|  Format  |  Description  |
|----------|---------------|
|  <longitude>  |  Longitude (example "122.267255W")  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceLldpInterfaceLocationCoordinateBased) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceLldpInterfaceLocationCoordinateBasedAltitude.IsNull() && !o.LeafServiceLldpInterfaceLocationCoordinateBasedAltitude.IsUnknown() {
		jsonData["altitude"] = o.LeafServiceLldpInterfaceLocationCoordinateBasedAltitude.ValueString()
	}

	if !o.LeafServiceLldpInterfaceLocationCoordinateBasedDatum.IsNull() && !o.LeafServiceLldpInterfaceLocationCoordinateBasedDatum.IsUnknown() {
		jsonData["datum"] = o.LeafServiceLldpInterfaceLocationCoordinateBasedDatum.ValueString()
	}

	if !o.LeafServiceLldpInterfaceLocationCoordinateBasedLatitude.IsNull() && !o.LeafServiceLldpInterfaceLocationCoordinateBasedLatitude.IsUnknown() {
		jsonData["latitude"] = o.LeafServiceLldpInterfaceLocationCoordinateBasedLatitude.ValueString()
	}

	if !o.LeafServiceLldpInterfaceLocationCoordinateBasedLongitude.IsNull() && !o.LeafServiceLldpInterfaceLocationCoordinateBasedLongitude.IsUnknown() {
		jsonData["longitude"] = o.LeafServiceLldpInterfaceLocationCoordinateBasedLongitude.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceLldpInterfaceLocationCoordinateBased) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["altitude"]; ok {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedAltitude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedAltitude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["datum"]; ok {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedDatum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedDatum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["latitude"]; ok {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedLatitude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedLatitude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["longitude"]; ok {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedLongitude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceLldpInterfaceLocationCoordinateBasedLongitude = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
