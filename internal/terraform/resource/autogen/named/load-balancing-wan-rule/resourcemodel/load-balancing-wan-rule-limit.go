// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// LoadBalancingWanRuleLimit describes the resource data model.
type LoadBalancingWanRuleLimit struct {
	// LeafNodes
	LeafLoadBalancingWanRuleLimitBurst     types.String `tfsdk:"burst" json:"burst,omitempty"`
	LeafLoadBalancingWanRuleLimitPeriod    types.String `tfsdk:"period" json:"period,omitempty"`
	LeafLoadBalancingWanRuleLimitRate      types.String `tfsdk:"rate" json:"rate,omitempty"`
	LeafLoadBalancingWanRuleLimitThreshold types.String `tfsdk:"threshold" json:"threshold,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWanRuleLimit) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst limit for matching packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Burst limit for matching packets  |

`,
		},

		"period": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time window for rate calculation

|  Format  |  Description  |
|----------|---------------|
|  hour  |  hour  |
|  minute  |  minute  |
|  second  |  second  |

`,
		},

		"rate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of packets used for rate limit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Number of packets used for rate limit  |

`,
		},

		"threshold": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Threshold behavior for limit

|  Format  |  Description  |
|----------|---------------|
|  above  |  Above limit  |
|  below  |  Below limit  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *LoadBalancingWanRuleLimit) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafLoadBalancingWanRuleLimitBurst.IsNull() && !o.LeafLoadBalancingWanRuleLimitBurst.IsUnknown() {
		jsonData["burst"] = o.LeafLoadBalancingWanRuleLimitBurst.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleLimitPeriod.IsNull() && !o.LeafLoadBalancingWanRuleLimitPeriod.IsUnknown() {
		jsonData["period"] = o.LeafLoadBalancingWanRuleLimitPeriod.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleLimitRate.IsNull() && !o.LeafLoadBalancingWanRuleLimitRate.IsUnknown() {
		jsonData["rate"] = o.LeafLoadBalancingWanRuleLimitRate.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleLimitThreshold.IsNull() && !o.LeafLoadBalancingWanRuleLimitThreshold.IsUnknown() {
		jsonData["threshold"] = o.LeafLoadBalancingWanRuleLimitThreshold.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *LoadBalancingWanRuleLimit) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["burst"]; ok {
		o.LeafLoadBalancingWanRuleLimitBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitBurst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["period"]; ok {
		o.LeafLoadBalancingWanRuleLimitPeriod = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitPeriod = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rate"]; ok {
		o.LeafLoadBalancingWanRuleLimitRate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitRate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["threshold"]; ok {
		o.LeafLoadBalancingWanRuleLimitThreshold = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitThreshold = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
