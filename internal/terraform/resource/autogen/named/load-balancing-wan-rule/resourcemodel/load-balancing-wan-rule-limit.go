// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// LoadBalancingWanRuleLimit describes the resource data model.
type LoadBalancingWanRuleLimit struct {
	// LeafNodes
	LeafLoadBalancingWanRuleLimitBurst     types.String `tfsdk:"burst"`
	LeafLoadBalancingWanRuleLimitPeriod    types.String `tfsdk:"period"`
	LeafLoadBalancingWanRuleLimitRate      types.String `tfsdk:"rate"`
	LeafLoadBalancingWanRuleLimitThreshold types.String `tfsdk:"threshold"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *LoadBalancingWanRuleLimit) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"load-balancing", "wan", "rule", "limit"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafLoadBalancingWanRuleLimitBurst.IsNull() || o.LeafLoadBalancingWanRuleLimitBurst.IsUnknown()) {
		vyosData["burst"] = o.LeafLoadBalancingWanRuleLimitBurst.ValueString()
	}
	if !(o.LeafLoadBalancingWanRuleLimitPeriod.IsNull() || o.LeafLoadBalancingWanRuleLimitPeriod.IsUnknown()) {
		vyosData["period"] = o.LeafLoadBalancingWanRuleLimitPeriod.ValueString()
	}
	if !(o.LeafLoadBalancingWanRuleLimitRate.IsNull() || o.LeafLoadBalancingWanRuleLimitRate.IsUnknown()) {
		vyosData["rate"] = o.LeafLoadBalancingWanRuleLimitRate.ValueString()
	}
	if !(o.LeafLoadBalancingWanRuleLimitThreshold.IsNull() || o.LeafLoadBalancingWanRuleLimitThreshold.IsUnknown()) {
		vyosData["threshold"] = o.LeafLoadBalancingWanRuleLimitThreshold.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *LoadBalancingWanRuleLimit) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"load-balancing", "wan", "rule", "limit"}})

	// Leafs
	if value, ok := vyosData["burst"]; ok {
		o.LeafLoadBalancingWanRuleLimitBurst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitBurst = basetypes.NewStringNull()
	}
	if value, ok := vyosData["period"]; ok {
		o.LeafLoadBalancingWanRuleLimitPeriod = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitPeriod = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rate"]; ok {
		o.LeafLoadBalancingWanRuleLimitRate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitRate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["threshold"]; ok {
		o.LeafLoadBalancingWanRuleLimitThreshold = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleLimitThreshold = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"load-balancing", "wan", "rule", "limit"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o LoadBalancingWanRuleLimit) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"burst":     types.StringType,
		"period":    types.StringType,
		"rate":      types.StringType,
		"threshold": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWanRuleLimit) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"burst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Burst limit for matching packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Burst limit for matching packets  |

`,
		},

		"period": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time window for rate calculation

|  Format  |  Description  |
|----------|---------------|
|  hour  |  hour  |
|  minute  |  minute  |
|  second  |  second  |

`,
		},

		"rate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of packets used for rate limit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4294967295  |  Number of packets used for rate limit  |

`,
		},

		"threshold": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Threshold behavior for limit

|  Format  |  Description  |
|----------|---------------|
|  above  |  Above limit  |
|  below  |  Below limit  |

`,
		},

		// TagNodes

		// Nodes

	}
}
