// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// LoadBalancingWanRule describes the resource data model.
type LoadBalancingWanRule struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafLoadBalancingWanRuleDescrIPtion        types.String `tfsdk:"description" json:"description,omitempty"`
	LeafLoadBalancingWanRuleExclude            types.String `tfsdk:"exclude" json:"exclude,omitempty"`
	LeafLoadBalancingWanRuleFailover           types.String `tfsdk:"failover" json:"failover,omitempty"`
	LeafLoadBalancingWanRuleInboundInterface   types.String `tfsdk:"inbound_interface" json:"inbound-interface,omitempty"`
	LeafLoadBalancingWanRulePerPacketBalancing types.String `tfsdk:"per_packet_balancing" json:"per-packet-balancing,omitempty"`
	LeafLoadBalancingWanRuleProtocol           types.String `tfsdk:"protocol" json:"protocol,omitempty"`

	// TagNodes
	TagLoadBalancingWanRuleInterface *map[string]LoadBalancingWanRuleInterface `tfsdk:"interface" json:"interface,omitempty"`

	// Nodes
	NodeLoadBalancingWanRuleDestination *LoadBalancingWanRuleDestination `tfsdk:"destination" json:"destination,omitempty"`
	NodeLoadBalancingWanRuleLimit       *LoadBalancingWanRuleLimit       `tfsdk:"limit" json:"limit,omitempty"`
	NodeLoadBalancingWanRuleSource      *LoadBalancingWanRuleSource      `tfsdk:"source" json:"source,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *LoadBalancingWanRule) GetVyosPath() []string {
	return []string{
		"load-balancing",
		"wan",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingWanRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule number (1-9999)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-9999  |  Rule number  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description for this rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description for this rule  |

`,
		},

		"exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Exclude packets matching this rule from WAN load balance

`,
		},

		"failover": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable failover for packets matching this rule from WAN load balance

`,
		},

		"inbound_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Inbound interface name (e.g., "eth0") [REQUIRED]

`,
		},

		"per_packet_balancing": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to match traffic per-packet instead of the default, per-flow

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol to match (protocol name, number, or "all")

|  Format  |  Description  |
|----------|---------------|
|  all  |  All IP protocols  |
|  tcp_udp  |  Both TCP and UDP  |
|  u32:0-255  |  IP protocol number  |
|  <protocol>  |  IP protocol name  |
|  !<protocol>  |  IP protocol name  |

`,
		},

		// TagNodes

		"interface": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: LoadBalancingWanRuleInterface{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Interface name [REQUIRED]

`,
		},

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: LoadBalancingWanRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Destination

`,
		},

		"limit": schema.SingleNestedAttribute{
			Attributes: LoadBalancingWanRuleLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable packet limit for this rule

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: LoadBalancingWanRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Source information

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *LoadBalancingWanRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafLoadBalancingWanRuleDescrIPtion.IsNull() && !o.LeafLoadBalancingWanRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafLoadBalancingWanRuleDescrIPtion.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleExclude.IsNull() && !o.LeafLoadBalancingWanRuleExclude.IsUnknown() {
		jsonData["exclude"] = o.LeafLoadBalancingWanRuleExclude.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleFailover.IsNull() && !o.LeafLoadBalancingWanRuleFailover.IsUnknown() {
		jsonData["failover"] = o.LeafLoadBalancingWanRuleFailover.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleInboundInterface.IsNull() && !o.LeafLoadBalancingWanRuleInboundInterface.IsUnknown() {
		jsonData["inbound-interface"] = o.LeafLoadBalancingWanRuleInboundInterface.ValueString()
	}

	if !o.LeafLoadBalancingWanRulePerPacketBalancing.IsNull() && !o.LeafLoadBalancingWanRulePerPacketBalancing.IsUnknown() {
		jsonData["per-packet-balancing"] = o.LeafLoadBalancingWanRulePerPacketBalancing.ValueString()
	}

	if !o.LeafLoadBalancingWanRuleProtocol.IsNull() && !o.LeafLoadBalancingWanRuleProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafLoadBalancingWanRuleProtocol.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagLoadBalancingWanRuleInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.TagLoadBalancingWanRuleInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interface"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeLoadBalancingWanRuleDestination).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeLoadBalancingWanRuleDestination)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["destination"] = subData
	}

	if !reflect.ValueOf(o.NodeLoadBalancingWanRuleLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeLoadBalancingWanRuleLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["limit"] = subData
	}

	if !reflect.ValueOf(o.NodeLoadBalancingWanRuleSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeLoadBalancingWanRuleSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *LoadBalancingWanRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafLoadBalancingWanRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["exclude"]; ok {
		o.LeafLoadBalancingWanRuleExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["failover"]; ok {
		o.LeafLoadBalancingWanRuleFailover = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleFailover = basetypes.NewStringNull()
	}

	if value, ok := jsonData["inbound-interface"]; ok {
		o.LeafLoadBalancingWanRuleInboundInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleInboundInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["per-packet-balancing"]; ok {
		o.LeafLoadBalancingWanRulePerPacketBalancing = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRulePerPacketBalancing = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafLoadBalancingWanRuleProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafLoadBalancingWanRuleProtocol = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagLoadBalancingWanRuleInterface = &map[string]LoadBalancingWanRuleInterface{}

		err = json.Unmarshal(subJSONStr, o.TagLoadBalancingWanRuleInterface)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["destination"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeLoadBalancingWanRuleDestination = &LoadBalancingWanRuleDestination{}

		err = json.Unmarshal(subJSONStr, o.NodeLoadBalancingWanRuleDestination)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeLoadBalancingWanRuleLimit = &LoadBalancingWanRuleLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeLoadBalancingWanRuleLimit)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeLoadBalancingWanRuleSource = &LoadBalancingWanRuleSource{}

		err = json.Unmarshal(subJSONStr, o.NodeLoadBalancingWanRuleSource)
		if err != nil {
			return err
		}
	}

	return nil
}
