// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesVxlanParametersIP describes the resource data model.
type InterfacesVxlanParametersIP struct {
	// LeafNodes
	LeafInterfacesVxlanParametersIPDf  types.String `tfsdk:"df"`
	LeafInterfacesVxlanParametersIPTos types.String `tfsdk:"tos"`
	LeafInterfacesVxlanParametersIPTTL types.String `tfsdk:"ttl"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesVxlanParametersIP) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "vxlan", "parameters", "ip"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesVxlanParametersIPDf.IsNull() || o.LeafInterfacesVxlanParametersIPDf.IsUnknown()) {
		vyosData["df"] = o.LeafInterfacesVxlanParametersIPDf.ValueString()
	}
	if !(o.LeafInterfacesVxlanParametersIPTos.IsNull() || o.LeafInterfacesVxlanParametersIPTos.IsUnknown()) {
		vyosData["tos"] = o.LeafInterfacesVxlanParametersIPTos.ValueString()
	}
	if !(o.LeafInterfacesVxlanParametersIPTTL.IsNull() || o.LeafInterfacesVxlanParametersIPTTL.IsUnknown()) {
		vyosData["ttl"] = o.LeafInterfacesVxlanParametersIPTTL.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesVxlanParametersIP) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "vxlan", "parameters", "ip"}})

	// Leafs
	if value, ok := vyosData["df"]; ok {
		o.LeafInterfacesVxlanParametersIPDf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPDf = basetypes.NewStringNull()
	}
	if value, ok := vyosData["tos"]; ok {
		o.LeafInterfacesVxlanParametersIPTos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPTos = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ttl"]; ok {
		o.LeafInterfacesVxlanParametersIPTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPTTL = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "vxlan", "parameters", "ip"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesVxlanParametersIP) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"df":  types.StringType,
		"tos": types.StringType,
		"ttl": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesVxlanParametersIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"df": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Usage of the DF (don't Fragment) bit in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  set  |  Always set DF (don't fragment) bit  |
|  unset  |  Always unset DF (don't fragment) bit  |
|  inherit  |  Copy from the original IP header  |

`,

			// Default:          stringdefault.StaticString(`unset`),
			Computed: true,
		},

		"tos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TOS value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-99  |  Type of Service (TOS)  |

`,

			// Default:          stringdefault.StaticString(`inherit`),
			Computed: true,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TTL value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Inherit - copy value from original IP header  |
|  u32:1-255  |  Time to Live  |

`,

			// Default:          stringdefault.StaticString(`16`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
