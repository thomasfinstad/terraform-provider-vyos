// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesVxlanParametersIP describes the resource data model.
type InterfacesVxlanParametersIP struct {
	// LeafNodes
	LeafInterfacesVxlanParametersIPDf  types.String `tfsdk:"df" json:"df,omitempty"`
	LeafInterfacesVxlanParametersIPTos types.String `tfsdk:"tos" json:"tos,omitempty"`
	LeafInterfacesVxlanParametersIPTTL types.String `tfsdk:"ttl" json:"ttl,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesVxlanParametersIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"df": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Usage of the DF (don't Fragment) bit in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  set  |  Always set DF (don't fragment) bit  |
|  unset  |  Always unset DF (don't fragment) bit  |
|  inherit  |  Copy from the original IP header  |

`,

			// Default:          stringdefault.StaticString(`unset`),
			Computed: true,
		},

		"tos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TOS value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0-99  |  Type of Service (TOS)  |

`,

			// Default:          stringdefault.StaticString(`inherit`),
			Computed: true,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies TTL value to use in outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Inherit - copy value from original IP header  |
|  u32:1-255  |  Time to Live  |

`,

			// Default:          stringdefault.StaticString(`16`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesVxlanParametersIP) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesVxlanParametersIPDf.IsNull() && !o.LeafInterfacesVxlanParametersIPDf.IsUnknown() {
		jsonData["df"] = o.LeafInterfacesVxlanParametersIPDf.ValueString()
	}

	if !o.LeafInterfacesVxlanParametersIPTos.IsNull() && !o.LeafInterfacesVxlanParametersIPTos.IsUnknown() {
		jsonData["tos"] = o.LeafInterfacesVxlanParametersIPTos.ValueString()
	}

	if !o.LeafInterfacesVxlanParametersIPTTL.IsNull() && !o.LeafInterfacesVxlanParametersIPTTL.IsUnknown() {
		jsonData["ttl"] = o.LeafInterfacesVxlanParametersIPTTL.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesVxlanParametersIP) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["df"]; ok {
		o.LeafInterfacesVxlanParametersIPDf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPDf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tos"]; ok {
		o.LeafInterfacesVxlanParametersIPTos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPTos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ttl"]; ok {
		o.LeafInterfacesVxlanParametersIPTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVxlanParametersIPTTL = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
