// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesLoopback describes the resource data model.
type InterfacesLoopback struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesLoopbackAddress     types.String `tfsdk:"address"`
	LeafInterfacesLoopbackDescrIPtion types.String `tfsdk:"description"`
	LeafInterfacesLoopbackRedirect    types.String `tfsdk:"redirect"`

	// TagNodes

	// Nodes
	NodeInterfacesLoopbackIP     types.Object `tfsdk:"ip"`
	NodeInterfacesLoopbackMirror types.Object `tfsdk:"mirror"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesLoopback) GetVyosPath() []string {
	return []string{
		"interfaces",
		"loopback",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesLoopback) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "loopback"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesLoopbackAddress.IsNull() || o.LeafInterfacesLoopbackAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesLoopbackAddress.ValueString()
	}
	if !(o.LeafInterfacesLoopbackDescrIPtion.IsNull() || o.LeafInterfacesLoopbackDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesLoopbackDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesLoopbackRedirect.IsNull() || o.LeafInterfacesLoopbackRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesLoopbackRedirect.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesLoopbackIP.IsNull() || o.NodeInterfacesLoopbackIP.IsUnknown()) {
		var subModel InterfacesLoopbackIP
		diags.Append(o.NodeInterfacesLoopbackIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesLoopbackMirror.IsNull() || o.NodeInterfacesLoopbackMirror.IsUnknown()) {
		var subModel InterfacesLoopbackMirror
		diags.Append(o.NodeInterfacesLoopbackMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesLoopback) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "loopback"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesLoopbackAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesLoopbackAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesLoopbackDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesLoopbackDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesLoopbackRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesLoopbackRedirect = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesLoopbackIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesLoopbackIP = data

	} else {
		o.NodeInterfacesLoopbackIP = basetypes.NewObjectNull(InterfacesLoopbackIP{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesLoopbackMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesLoopbackMirror = data

	} else {
		o.NodeInterfacesLoopbackMirror = basetypes.NewObjectNull(InterfacesLoopbackMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "loopback"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesLoopback) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":     types.StringType,
		"description": types.StringType,
		"redirect":    types.StringType,

		// Tags

		// Nodes
		"ip":     types.ObjectType{AttrTypes: InterfacesLoopbackIP{}.AttributeTypes()},
		"mirror": types.ObjectType{AttrTypes: InterfacesLoopbackMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesLoopback) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Loopback Interface

|  Format  |  Description  |
|----------|---------------|
|  lo  |  Loopback interface  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesLoopbackIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesLoopbackMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
