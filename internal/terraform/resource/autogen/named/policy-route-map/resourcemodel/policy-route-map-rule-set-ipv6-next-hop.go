// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRuleSetIPvsixNextHop describes the resource data model.
type PolicyRouteMapRuleSetIPvsixNextHop struct {
	// LeafNodes
	LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal       types.String `tfsdk:"global" json:"global,omitempty"`
	LeafPolicyRouteMapRuleSetIPvsixNextHopLocal        types.String `tfsdk:"local" json:"local,omitempty"`
	LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress  types.String `tfsdk:"peer_address" json:"peer-address,omitempty"`
	LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal types.String `tfsdk:"prefer_global" json:"prefer-global,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleSetIPvsixNextHop) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"global": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Nexthop IPv6 global address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |

`,
		},

		"local": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Nexthop IPv6 local address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address and prefix length  |

`,
		},

		"peer_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use peer address (for BGP only)

`,
		},

		"prefer_global": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Prefer global address as the nexthop

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRuleSetIPvsixNextHop) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal.IsNull() && !o.LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal.IsUnknown() {
		jsonData["global"] = o.LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetIPvsixNextHopLocal.IsNull() && !o.LeafPolicyRouteMapRuleSetIPvsixNextHopLocal.IsUnknown() {
		jsonData["local"] = o.LeafPolicyRouteMapRuleSetIPvsixNextHopLocal.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress.IsNull() && !o.LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress.IsUnknown() {
		jsonData["peer-address"] = o.LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal.IsNull() && !o.LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal.IsUnknown() {
		jsonData["prefer-global"] = o.LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRuleSetIPvsixNextHop) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["global"]; ok {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopGlobal = basetypes.NewStringNull()
	}

	if value, ok := jsonData["local"]; ok {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopLocal = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopLocal = basetypes.NewStringNull()
	}

	if value, ok := jsonData["peer-address"]; ok {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopPeerAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["prefer-global"]; ok {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetIPvsixNextHopPreferGlobal = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
