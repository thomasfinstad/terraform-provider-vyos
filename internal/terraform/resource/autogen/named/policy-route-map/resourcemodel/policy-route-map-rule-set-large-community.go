// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRuleSetLargeCommunity describes the resource data model.
type PolicyRouteMapRuleSetLargeCommunity struct {
	// LeafNodes
	LeafPolicyRouteMapRuleSetLargeCommunityAdd     types.String `tfsdk:"add" json:"add,omitempty"`
	LeafPolicyRouteMapRuleSetLargeCommunityReplace types.String `tfsdk:"replace" json:"replace,omitempty"`
	LeafPolicyRouteMapRuleSetLargeCommunityNone    types.String `tfsdk:"none" json:"none,omitempty"`
	LeafPolicyRouteMapRuleSetLargeCommunityDelete  types.String `tfsdk:"delete" json:"delete,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleSetLargeCommunity) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"add": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add large communities to a prefix ;

|  Format  |  Description  |
|----------|---------------|
|  <GA:LDP1:LDP2>  |  Community in format <0-4294967295:0-4294967295:0-4294967295>  |

`,
		},

		"replace": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set large communities for a prefix

|  Format  |  Description  |
|----------|---------------|
|  <GA:LDP1:LDP2>  |  Community in format <0-4294967295:0-4294967295:0-4294967295>  |

`,
		},

		"none": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Completely remove communities attribute from a prefix

`,
		},

		"delete": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Remove communities defined in a list from a prefix

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Community-list  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRuleSetLargeCommunity) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleSetLargeCommunityAdd.IsNull() && !o.LeafPolicyRouteMapRuleSetLargeCommunityAdd.IsUnknown() {
		jsonData["add"] = o.LeafPolicyRouteMapRuleSetLargeCommunityAdd.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetLargeCommunityReplace.IsNull() && !o.LeafPolicyRouteMapRuleSetLargeCommunityReplace.IsUnknown() {
		jsonData["replace"] = o.LeafPolicyRouteMapRuleSetLargeCommunityReplace.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetLargeCommunityNone.IsNull() && !o.LeafPolicyRouteMapRuleSetLargeCommunityNone.IsUnknown() {
		jsonData["none"] = o.LeafPolicyRouteMapRuleSetLargeCommunityNone.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetLargeCommunityDelete.IsNull() && !o.LeafPolicyRouteMapRuleSetLargeCommunityDelete.IsUnknown() {
		jsonData["delete"] = o.LeafPolicyRouteMapRuleSetLargeCommunityDelete.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRuleSetLargeCommunity) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["add"]; ok {
		o.LeafPolicyRouteMapRuleSetLargeCommunityAdd = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetLargeCommunityAdd = basetypes.NewStringNull()
	}

	if value, ok := jsonData["replace"]; ok {
		o.LeafPolicyRouteMapRuleSetLargeCommunityReplace = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetLargeCommunityReplace = basetypes.NewStringNull()
	}

	if value, ok := jsonData["none"]; ok {
		o.LeafPolicyRouteMapRuleSetLargeCommunityNone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetLargeCommunityNone = basetypes.NewStringNull()
	}

	if value, ok := jsonData["delete"]; ok {
		o.LeafPolicyRouteMapRuleSetLargeCommunityDelete = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetLargeCommunityDelete = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
