// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// PolicyRouteMap describes the resource data model.
type PolicyRouteMap struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPolicyRouteMapDescrIPtion types.String `tfsdk:"description"`

	// TagNodes
	TagPolicyRouteMapRule types.Map `tfsdk:"rule"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyRouteMap) GetVyosPath() []string {
	return []string{
		"policy",
		"route-map",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *PolicyRouteMap) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"policy", "route-map"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafPolicyRouteMapDescrIPtion.IsNull() || o.LeafPolicyRouteMapDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafPolicyRouteMapDescrIPtion.ValueString()
	}

	// Tags
	if !(o.TagPolicyRouteMapRule.IsNull() || o.TagPolicyRouteMapRule.IsUnknown()) {
		subModel := make(map[string]PolicyRouteMapRule)
		diags.Append(o.TagPolicyRouteMapRule.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["rule"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *PolicyRouteMap) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"policy", "route-map"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafPolicyRouteMapDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["rule"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: PolicyRouteMapRule{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagPolicyRouteMapRule = data
	} else {
		o.TagPolicyRouteMapRule = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"policy", "route-map"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o PolicyRouteMap) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,

		// Tags
		"rule": types.MapType{ElemType: types.ObjectType{AttrTypes: PolicyRouteMapRule{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMap) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP route-map

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"rule": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: PolicyRouteMapRule{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Rule for this route-map

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Route-map rule number  |

`,
		},

		// Nodes

	}
}
