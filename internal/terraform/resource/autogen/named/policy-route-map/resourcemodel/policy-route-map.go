// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMap describes the resource data model.
type PolicyRouteMap struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPolicyRouteMapDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes
	TagPolicyRouteMapRule *map[string]PolicyRouteMapRule `tfsdk:"rule" json:"rule,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyRouteMap) GetVyosPath() []string {
	return []string{
		"policy",
		"route-map",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMap) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP route-map

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"rule": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: PolicyRouteMapRule{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Rule for this route-map

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Route-map rule number  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMap) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapDescrIPtion.IsNull() && !o.LeafPolicyRouteMapDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyRouteMapDescrIPtion.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagPolicyRouteMapRule).IsZero() {
		subJSONStr, err := json.Marshal(o.TagPolicyRouteMapRule)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rule"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMap) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyRouteMapDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["rule"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagPolicyRouteMapRule = &map[string]PolicyRouteMapRule{}

		err = json.Unmarshal(subJSONStr, o.TagPolicyRouteMapRule)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
