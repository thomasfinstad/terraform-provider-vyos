// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRuleSetExtcommunity describes the resource data model.
type PolicyRouteMapRuleSetExtcommunity struct {
	// LeafNodes
	LeafPolicyRouteMapRuleSetExtcommunityBandwIDth              types.String `tfsdk:"bandwidth" json:"bandwidth,omitempty"`
	LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive types.String `tfsdk:"bandwidth_non_transitive" json:"bandwidth-non-transitive,omitempty"`
	LeafPolicyRouteMapRuleSetExtcommunityRt                     types.String `tfsdk:"rt" json:"rt,omitempty"`
	LeafPolicyRouteMapRuleSetExtcommunitySoo                    types.String `tfsdk:"soo" json:"soo,omitempty"`
	LeafPolicyRouteMapRuleSetExtcommunityNone                   types.String `tfsdk:"none" json:"none,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleSetExtcommunity) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bandwidth value in Mbps

|  Format  |  Description  |
|----------|---------------|
|  u32:1-25600  |  Bandwidth value in Mbps  |
|  cumulative  |  Cumulative bandwidth of all multipaths (outbound-only)  |
|  num-multipaths  |  Internally computed bandwidth based on number of multipaths (outbound-only)  |

`,
		},

		"bandwidth_non_transitive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `The link bandwidth extended community is encoded as non-transitive

`,
		},

		"rt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set route target value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |

`,
		},

		"soo": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Site of Origin value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |

`,
		},

		"none": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Completely remove communities attribute from a prefix

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRuleSetExtcommunity) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.IsNull() && !o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.IsNull() && !o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.IsUnknown() {
		jsonData["bandwidth-non-transitive"] = o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetExtcommunityRt.IsNull() && !o.LeafPolicyRouteMapRuleSetExtcommunityRt.IsUnknown() {
		jsonData["rt"] = o.LeafPolicyRouteMapRuleSetExtcommunityRt.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetExtcommunitySoo.IsNull() && !o.LeafPolicyRouteMapRuleSetExtcommunitySoo.IsUnknown() {
		jsonData["soo"] = o.LeafPolicyRouteMapRuleSetExtcommunitySoo.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleSetExtcommunityNone.IsNull() && !o.LeafPolicyRouteMapRuleSetExtcommunityNone.IsUnknown() {
		jsonData["none"] = o.LeafPolicyRouteMapRuleSetExtcommunityNone.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRuleSetExtcommunity) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth-non-transitive"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rt"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityRt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityRt = basetypes.NewStringNull()
	}

	if value, ok := jsonData["soo"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunitySoo = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunitySoo = basetypes.NewStringNull()
	}

	if value, ok := jsonData["none"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityNone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityNone = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
