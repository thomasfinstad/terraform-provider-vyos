// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// PolicyRouteMapRuleSetExtcommunity describes the resource data model.
type PolicyRouteMapRuleSetExtcommunity struct {
	// LeafNodes
	LeafPolicyRouteMapRuleSetExtcommunityBandwIDth              types.String `tfsdk:"bandwidth"`
	LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive types.String `tfsdk:"bandwidth_non_transitive"`
	LeafPolicyRouteMapRuleSetExtcommunityRt                     types.String `tfsdk:"rt"`
	LeafPolicyRouteMapRuleSetExtcommunitySoo                    types.String `tfsdk:"soo"`
	LeafPolicyRouteMapRuleSetExtcommunityNone                   types.String `tfsdk:"none"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *PolicyRouteMapRuleSetExtcommunity) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"policy", "route-map", "rule", "set", "extcommunity"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.IsNull() || o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth.ValueString()
	}
	if !(o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.IsNull() || o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.IsUnknown()) {
		vyosData["bandwidth-non-transitive"] = o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive.ValueString()
	}
	if !(o.LeafPolicyRouteMapRuleSetExtcommunityRt.IsNull() || o.LeafPolicyRouteMapRuleSetExtcommunityRt.IsUnknown()) {
		vyosData["rt"] = o.LeafPolicyRouteMapRuleSetExtcommunityRt.ValueString()
	}
	if !(o.LeafPolicyRouteMapRuleSetExtcommunitySoo.IsNull() || o.LeafPolicyRouteMapRuleSetExtcommunitySoo.IsUnknown()) {
		vyosData["soo"] = o.LeafPolicyRouteMapRuleSetExtcommunitySoo.ValueString()
	}
	if !(o.LeafPolicyRouteMapRuleSetExtcommunityNone.IsNull() || o.LeafPolicyRouteMapRuleSetExtcommunityNone.IsUnknown()) {
		vyosData["none"] = o.LeafPolicyRouteMapRuleSetExtcommunityNone.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *PolicyRouteMapRuleSetExtcommunity) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"policy", "route-map", "rule", "set", "extcommunity"}})

	// Leafs
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth-non-transitive"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityBandwIDthNonTransitive = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rt"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityRt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityRt = basetypes.NewStringNull()
	}
	if value, ok := vyosData["soo"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunitySoo = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunitySoo = basetypes.NewStringNull()
	}
	if value, ok := vyosData["none"]; ok {
		o.LeafPolicyRouteMapRuleSetExtcommunityNone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleSetExtcommunityNone = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"policy", "route-map", "rule", "set", "extcommunity"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o PolicyRouteMapRuleSetExtcommunity) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"bandwidth":                types.StringType,
		"bandwidth_non_transitive": types.StringType,
		"rt":                       types.StringType,
		"soo":                      types.StringType,
		"none":                     types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRuleSetExtcommunity) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bandwidth value in Mbps

|  Format  |  Description  |
|----------|---------------|
|  u32:1-25600  |  Bandwidth value in Mbps  |
|  cumulative  |  Cumulative bandwidth of all multipaths (outbound-only)  |
|  num-multipaths  |  Internally computed bandwidth based on number of multipaths (outbound-only)  |

`,
		},

		"bandwidth_non_transitive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `The link bandwidth extended community is encoded as non-transitive

`,
		},

		"rt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set route target value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |

`,
		},

		"soo": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Site of Origin value

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN  |  based on autonomous system number in format <0-65535:0-4294967295>  |
|  IP:NN  |  Based on a router-id IP address in format <IP:0-65535>  |

`,
		},

		"none": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Completely remove communities attribute from a prefix

`,
		},

		// TagNodes

		// Nodes

	}
}
