// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyRouteMapRule describes the resource data model.
type PolicyRouteMapRule struct {
	// LeafNodes
	LeafPolicyRouteMapRuleAction      types.String `tfsdk:"action" json:"action,omitempty"`
	LeafPolicyRouteMapRuleCall        types.String `tfsdk:"call" json:"call,omitempty"`
	LeafPolicyRouteMapRuleContinue    types.String `tfsdk:"continue" json:"continue,omitempty"`
	LeafPolicyRouteMapRuleDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes

	// Nodes
	NodePolicyRouteMapRuleMatch   *PolicyRouteMapRuleMatch   `tfsdk:"match" json:"match,omitempty"`
	NodePolicyRouteMapRuleOnMatch *PolicyRouteMapRuleOnMatch `tfsdk:"on_match" json:"on-match,omitempty"`
	NodePolicyRouteMapRuleSet     *PolicyRouteMapRuleSet     `tfsdk:"set" json:"set,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyRouteMapRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take on entries matching this rule

|  Format  |  Description  |
|----------|---------------|
|  permit  |  Permit matching entries  |
|  deny  |  Deny matching entries  |

`,
		},

		"call": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Call another route-map on match

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Route map name  |

`,
		},

		"continue": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Jump to a different rule in this route-map on a match

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Rule number  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		// Nodes

		"match": schema.SingleNestedAttribute{
			Attributes: PolicyRouteMapRuleMatch{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Route parameters to match

`,
		},

		"on_match": schema.SingleNestedAttribute{
			Attributes: PolicyRouteMapRuleOnMatch{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Exit policy on matches

`,
		},

		"set": schema.SingleNestedAttribute{
			Attributes: PolicyRouteMapRuleSet{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Route parameters

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyRouteMapRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyRouteMapRuleAction.IsNull() && !o.LeafPolicyRouteMapRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafPolicyRouteMapRuleAction.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleCall.IsNull() && !o.LeafPolicyRouteMapRuleCall.IsUnknown() {
		jsonData["call"] = o.LeafPolicyRouteMapRuleCall.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleContinue.IsNull() && !o.LeafPolicyRouteMapRuleContinue.IsUnknown() {
		jsonData["continue"] = o.LeafPolicyRouteMapRuleContinue.ValueString()
	}

	if !o.LeafPolicyRouteMapRuleDescrIPtion.IsNull() && !o.LeafPolicyRouteMapRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyRouteMapRuleDescrIPtion.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodePolicyRouteMapRuleMatch).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRouteMapRuleMatch)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["match"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRouteMapRuleOnMatch).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRouteMapRuleOnMatch)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["on-match"] = subData
	}

	if !reflect.ValueOf(o.NodePolicyRouteMapRuleSet).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePolicyRouteMapRuleSet)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["set"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyRouteMapRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafPolicyRouteMapRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["call"]; ok {
		o.LeafPolicyRouteMapRuleCall = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleCall = basetypes.NewStringNull()
	}

	if value, ok := jsonData["continue"]; ok {
		o.LeafPolicyRouteMapRuleContinue = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleContinue = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyRouteMapRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyRouteMapRuleDescrIPtion = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["match"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRouteMapRuleMatch = &PolicyRouteMapRuleMatch{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRouteMapRuleMatch)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["on-match"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRouteMapRuleOnMatch = &PolicyRouteMapRuleOnMatch{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRouteMapRuleOnMatch)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["set"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePolicyRouteMapRuleSet = &PolicyRouteMapRuleSet{}

		err = json.Unmarshal(subJSONStr, o.NodePolicyRouteMapRuleSet)
		if err != nil {
			return err
		}
	}

	return nil
}
