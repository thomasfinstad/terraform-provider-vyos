// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWireguard describes the resource data model.
type InterfacesWireguard struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesWireguardAddress     types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesWireguardDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesWireguardDisable     types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesWireguardPort        types.String `tfsdk:"port" json:"port,omitempty"`
	LeafInterfacesWireguardMtu         types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesWireguardFwmark      types.String `tfsdk:"fwmark" json:"fwmark,omitempty"`
	LeafInterfacesWireguardPrivateKey  types.String `tfsdk:"private_key" json:"private-key,omitempty"`
	LeafInterfacesWireguardRedirect    types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesWireguardVrf         types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes
	TagInterfacesWireguardPeer *map[string]InterfacesWireguardPeer `tfsdk:"peer" json:"peer,omitempty"`

	// Nodes
	NodeInterfacesWireguardMirror *InterfacesWireguardMirror `tfsdk:"mirror" json:"mirror,omitempty"`
	NodeInterfacesWireguardIP     *InterfacesWireguardIP     `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesWireguardIPvsix *InterfacesWireguardIPvsix `tfsdk:"ipv6" json:"ipv6,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWireguard) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireguard",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireguard) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `WireGuard Interface

|  Format  |  Description  |
|----------|---------------|
|  wgN  |  WireGuard interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1420`),
			Computed: true,
		},

		"fwmark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `A 32-bit fwmark value set on all outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  number  |  value which marks the packet for QoS/shaper  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"private_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Base64 encoded private key

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"peer": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWireguardPeer{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `peer alias

`,
		},

		// Nodes

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWireguard) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWireguardAddress.IsNull() && !o.LeafInterfacesWireguardAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesWireguardAddress.ValueString()
	}

	if !o.LeafInterfacesWireguardDescrIPtion.IsNull() && !o.LeafInterfacesWireguardDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesWireguardDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesWireguardDisable.IsNull() && !o.LeafInterfacesWireguardDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesWireguardDisable.ValueString()
	}

	if !o.LeafInterfacesWireguardPort.IsNull() && !o.LeafInterfacesWireguardPort.IsUnknown() {
		jsonData["port"] = o.LeafInterfacesWireguardPort.ValueString()
	}

	if !o.LeafInterfacesWireguardMtu.IsNull() && !o.LeafInterfacesWireguardMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesWireguardMtu.ValueString()
	}

	if !o.LeafInterfacesWireguardFwmark.IsNull() && !o.LeafInterfacesWireguardFwmark.IsUnknown() {
		jsonData["fwmark"] = o.LeafInterfacesWireguardFwmark.ValueString()
	}

	if !o.LeafInterfacesWireguardPrivateKey.IsNull() && !o.LeafInterfacesWireguardPrivateKey.IsUnknown() {
		jsonData["private-key"] = o.LeafInterfacesWireguardPrivateKey.ValueString()
	}

	if !o.LeafInterfacesWireguardRedirect.IsNull() && !o.LeafInterfacesWireguardRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesWireguardRedirect.ValueString()
	}

	if !o.LeafInterfacesWireguardVrf.IsNull() && !o.LeafInterfacesWireguardVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesWireguardVrf.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagInterfacesWireguardPeer).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesWireguardPeer)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["peer"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWireguardMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWireguardMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWireguardIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWireguardIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWireguardIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWireguardIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWireguard) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesWireguardAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesWireguardDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesWireguardDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafInterfacesWireguardPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesWireguardMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["fwmark"]; ok {
		o.LeafInterfacesWireguardFwmark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardFwmark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["private-key"]; ok {
		o.LeafInterfacesWireguardPrivateKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardPrivateKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesWireguardRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesWireguardVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["peer"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesWireguardPeer = &map[string]InterfacesWireguardPeer{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesWireguardPeer)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWireguardMirror = &InterfacesWireguardMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWireguardMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWireguardIP = &InterfacesWireguardIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWireguardIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWireguardIPvsix = &InterfacesWireguardIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWireguardIPvsix)
		if err != nil {
			return err
		}
	}

	return nil
}
