// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWireguard describes the resource data model.
type InterfacesWireguard struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesWireguardAddress     types.String `tfsdk:"address"`
	LeafInterfacesWireguardDescrIPtion types.String `tfsdk:"description"`
	LeafInterfacesWireguardDisable     types.String `tfsdk:"disable"`
	LeafInterfacesWireguardPort        types.String `tfsdk:"port"`
	LeafInterfacesWireguardMtu         types.String `tfsdk:"mtu"`
	LeafInterfacesWireguardFwmark      types.String `tfsdk:"fwmark"`
	LeafInterfacesWireguardPrivateKey  types.String `tfsdk:"private_key"`
	LeafInterfacesWireguardRedirect    types.String `tfsdk:"redirect"`
	LeafInterfacesWireguardVrf         types.String `tfsdk:"vrf"`

	// TagNodes
	TagInterfacesWireguardPeer types.Map `tfsdk:"peer"`

	// Nodes
	NodeInterfacesWireguardMirror types.Object `tfsdk:"mirror"`
	NodeInterfacesWireguardIP     types.Object `tfsdk:"ip"`
	NodeInterfacesWireguardIPvsix types.Object `tfsdk:"ipv6"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWireguard) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireguard",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWireguard) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireguard"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWireguardAddress.IsNull() || o.LeafInterfacesWireguardAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesWireguardAddress.ValueString()
	}
	if !(o.LeafInterfacesWireguardDescrIPtion.IsNull() || o.LeafInterfacesWireguardDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesWireguardDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesWireguardDisable.IsNull() || o.LeafInterfacesWireguardDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesWireguardDisable.ValueString()
	}
	if !(o.LeafInterfacesWireguardPort.IsNull() || o.LeafInterfacesWireguardPort.IsUnknown()) {
		vyosData["port"] = o.LeafInterfacesWireguardPort.ValueString()
	}
	if !(o.LeafInterfacesWireguardMtu.IsNull() || o.LeafInterfacesWireguardMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesWireguardMtu.ValueString()
	}
	if !(o.LeafInterfacesWireguardFwmark.IsNull() || o.LeafInterfacesWireguardFwmark.IsUnknown()) {
		vyosData["fwmark"] = o.LeafInterfacesWireguardFwmark.ValueString()
	}
	if !(o.LeafInterfacesWireguardPrivateKey.IsNull() || o.LeafInterfacesWireguardPrivateKey.IsUnknown()) {
		vyosData["private-key"] = o.LeafInterfacesWireguardPrivateKey.ValueString()
	}
	if !(o.LeafInterfacesWireguardRedirect.IsNull() || o.LeafInterfacesWireguardRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesWireguardRedirect.ValueString()
	}
	if !(o.LeafInterfacesWireguardVrf.IsNull() || o.LeafInterfacesWireguardVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesWireguardVrf.ValueString()
	}

	// Tags
	if !(o.TagInterfacesWireguardPeer.IsNull() || o.TagInterfacesWireguardPeer.IsUnknown()) {
		subModel := make(map[string]InterfacesWireguardPeer)
		diags.Append(o.TagInterfacesWireguardPeer.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["peer"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesWireguardMirror.IsNull() || o.NodeInterfacesWireguardMirror.IsUnknown()) {
		var subModel InterfacesWireguardMirror
		diags.Append(o.NodeInterfacesWireguardMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWireguardIP.IsNull() || o.NodeInterfacesWireguardIP.IsUnknown()) {
		var subModel InterfacesWireguardIP
		diags.Append(o.NodeInterfacesWireguardIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWireguardIPvsix.IsNull() || o.NodeInterfacesWireguardIPvsix.IsUnknown()) {
		var subModel InterfacesWireguardIPvsix
		diags.Append(o.NodeInterfacesWireguardIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWireguard) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireguard"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesWireguardAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesWireguardDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesWireguardDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["port"]; ok {
		o.LeafInterfacesWireguardPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardPort = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesWireguardMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["fwmark"]; ok {
		o.LeafInterfacesWireguardFwmark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardFwmark = basetypes.NewStringNull()
	}
	if value, ok := vyosData["private-key"]; ok {
		o.LeafInterfacesWireguardPrivateKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardPrivateKey = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesWireguardRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesWireguardVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["peer"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesWireguardPeer{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesWireguardPeer = data
	} else {
		o.TagInterfacesWireguardPeer = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWireguardMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWireguardMirror = data

	} else {
		o.NodeInterfacesWireguardMirror = basetypes.NewObjectNull(InterfacesWireguardMirror{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWireguardIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWireguardIP = data

	} else {
		o.NodeInterfacesWireguardIP = basetypes.NewObjectNull(InterfacesWireguardIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWireguardIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWireguardIPvsix = data

	} else {
		o.NodeInterfacesWireguardIPvsix = basetypes.NewObjectNull(InterfacesWireguardIPvsix{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireguard"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWireguard) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":     types.StringType,
		"description": types.StringType,
		"disable":     types.StringType,
		"port":        types.StringType,
		"mtu":         types.StringType,
		"fwmark":      types.StringType,
		"private_key": types.StringType,
		"redirect":    types.StringType,
		"vrf":         types.StringType,

		// Tags
		"peer": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesWireguardPeer{}.AttributeTypes()}},

		// Nodes
		"mirror": types.ObjectType{AttrTypes: InterfacesWireguardMirror{}.AttributeTypes()},
		"ip":     types.ObjectType{AttrTypes: InterfacesWireguardIP{}.AttributeTypes()},
		"ipv6":   types.ObjectType{AttrTypes: InterfacesWireguardIPvsix{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireguard) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `WireGuard Interface

|  Format  |  Description  |
|----------|---------------|
|  wgN  |  WireGuard interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1420`),
			Computed: true,
		},

		"fwmark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `A 32-bit fwmark value set on all outgoing packets

|  Format  |  Description  |
|----------|---------------|
|  number  |  value which marks the packet for QoS/shaper  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"private_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Base64 encoded private key

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"peer": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWireguardPeer{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `peer alias

`,
		},

		// Nodes

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},
	}
}
