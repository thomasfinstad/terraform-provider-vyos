// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWireguardIPvsix describes the resource data model.
type InterfacesWireguardIPvsix struct {
	// LeafNodes
	LeafInterfacesWireguardIPvsixAdjustMss              types.String `tfsdk:"adjust_mss"`
	LeafInterfacesWireguardIPvsixDisableForwarding      types.String `tfsdk:"disable_forwarding"`
	LeafInterfacesWireguardIPvsixDupAddrDetectTransmits types.String `tfsdk:"dup_addr_detect_transmits"`

	// TagNodes

	// Nodes
	NodeInterfacesWireguardIPvsixAddress types.Object `tfsdk:"address"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWireguardIPvsix) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireguard", "ipv6"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWireguardIPvsixAdjustMss.IsNull() || o.LeafInterfacesWireguardIPvsixAdjustMss.IsUnknown()) {
		vyosData["adjust-mss"] = o.LeafInterfacesWireguardIPvsixAdjustMss.ValueString()
	}
	if !(o.LeafInterfacesWireguardIPvsixDisableForwarding.IsNull() || o.LeafInterfacesWireguardIPvsixDisableForwarding.IsUnknown()) {
		vyosData["disable-forwarding"] = o.LeafInterfacesWireguardIPvsixDisableForwarding.ValueString()
	}
	if !(o.LeafInterfacesWireguardIPvsixDupAddrDetectTransmits.IsNull() || o.LeafInterfacesWireguardIPvsixDupAddrDetectTransmits.IsUnknown()) {
		vyosData["dup-addr-detect-transmits"] = o.LeafInterfacesWireguardIPvsixDupAddrDetectTransmits.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesWireguardIPvsixAddress.IsNull() || o.NodeInterfacesWireguardIPvsixAddress.IsUnknown()) {
		var subModel InterfacesWireguardIPvsixAddress
		diags.Append(o.NodeInterfacesWireguardIPvsixAddress.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["address"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWireguardIPvsix) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireguard", "ipv6"}})

	// Leafs
	if value, ok := vyosData["adjust-mss"]; ok {
		o.LeafInterfacesWireguardIPvsixAdjustMss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardIPvsixAdjustMss = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-forwarding"]; ok {
		o.LeafInterfacesWireguardIPvsixDisableForwarding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardIPvsixDisableForwarding = basetypes.NewStringNull()
	}
	if value, ok := vyosData["dup-addr-detect-transmits"]; ok {
		o.LeafInterfacesWireguardIPvsixDupAddrDetectTransmits = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWireguardIPvsixDupAddrDetectTransmits = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["address"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWireguardIPvsixAddress{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWireguardIPvsixAddress = data

	} else {
		o.NodeInterfacesWireguardIPvsixAddress = basetypes.NewObjectNull(InterfacesWireguardIPvsixAddress{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireguard", "ipv6"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWireguardIPvsix) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"adjust_mss":                types.StringType,
		"disable_forwarding":        types.StringType,
		"dup_addr_detect_transmits": types.StringType,

		// Tags

		// Nodes
		"address": types.ObjectType{AttrTypes: InterfacesWireguardIPvsixAddress{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireguardIPvsix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"adjust_mss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Adjust TCP MSS value

|  Format  |  Description  |
|----------|---------------|
|  clamp-mss-to-pmtu  |  Automatically sets the MSS to the proper value  |
|  u32:536-65535  |  TCP Maximum segment size in bytes  |

`,
		},

		"disable_forwarding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable IP forwarding on this interface

`,
		},

		"dup_addr_detect_transmits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of NS messages to send while performing DAD (default: 1)

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Disable Duplicate Address Dectection (DAD)  |
|  u32:1-n  |  Number of NS messages to send while performing DAD  |

`,
		},

		// TagNodes

		// Nodes

		"address": schema.SingleNestedAttribute{
			Attributes: InterfacesWireguardIPvsixAddress{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 address configuration modes

`,
		},
	}
}
