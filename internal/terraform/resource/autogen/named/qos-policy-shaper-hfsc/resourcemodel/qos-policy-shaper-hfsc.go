// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyShaperHfsc describes the resource data model.
type QosPolicyShaperHfsc struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyShaperHfscDescrIPtion types.String `tfsdk:"description"`
	LeafQosPolicyShaperHfscBandwIDth   types.String `tfsdk:"bandwidth"`

	// TagNodes
	TagQosPolicyShaperHfscClass types.Map `tfsdk:"class"`

	// Nodes
	NodeQosPolicyShaperHfscDefault types.Object `tfsdk:"default"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyShaperHfsc) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"shaper-hfsc",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyShaperHfsc) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyShaperHfscDescrIPtion.IsNull() || o.LeafQosPolicyShaperHfscDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafQosPolicyShaperHfscDescrIPtion.ValueString()
	}
	if !(o.LeafQosPolicyShaperHfscBandwIDth.IsNull() || o.LeafQosPolicyShaperHfscBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafQosPolicyShaperHfscBandwIDth.ValueString()
	}

	// Tags
	if !(o.TagQosPolicyShaperHfscClass.IsNull() || o.TagQosPolicyShaperHfscClass.IsUnknown()) {
		subModel := make(map[string]QosPolicyShaperHfscClass)
		diags.Append(o.TagQosPolicyShaperHfscClass.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["class"] = subData
	}

	// Nodes
	if !(o.NodeQosPolicyShaperHfscDefault.IsNull() || o.NodeQosPolicyShaperHfscDefault.IsUnknown()) {
		var subModel QosPolicyShaperHfscDefault
		diags.Append(o.NodeQosPolicyShaperHfscDefault.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["default"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyShaperHfsc) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafQosPolicyShaperHfscDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafQosPolicyShaperHfscBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscBandwIDth = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["class"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: QosPolicyShaperHfscClass{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagQosPolicyShaperHfscClass = data
	} else {
		o.TagQosPolicyShaperHfscClass = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["default"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyShaperHfscDefault{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyShaperHfscDefault = data

	} else {
		o.NodeQosPolicyShaperHfscDefault = basetypes.NewObjectNull(QosPolicyShaperHfscDefault{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyShaperHfsc) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,
		"bandwidth":   types.StringType,

		// Tags
		"class": types.MapType{ElemType: types.ObjectType{AttrTypes: QosPolicyShaperHfscClass{}.AttributeTypes()}},

		// Nodes
		"default": types.ObjectType{AttrTypes: QosPolicyShaperHfscDefault{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperHfsc) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Hierarchical Fair Service Curve's policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  auto  |  Bandwidth matches interface speed  |
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%%  |  Percentage of interface link speed  |

`,

			// Default:          stringdefault.StaticString(`auto`),
			Computed: true,
		},

		// TagNodes

		"class": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: QosPolicyShaperHfscClass{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Class ID

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4095  |  Class Identifier  |

`,
		},

		// Nodes

		"default": schema.SingleNestedAttribute{
			Attributes: QosPolicyShaperHfscDefault{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Default policy

`,
		},
	}
}
