// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyShaperHfscClassUpperlimit describes the resource data model.
type QosPolicyShaperHfscClassUpperlimit struct {
	// LeafNodes
	LeafQosPolicyShaperHfscClassUpperlimitD    types.String `tfsdk:"d"`
	LeafQosPolicyShaperHfscClassUpperlimitMone types.String `tfsdk:"m1"`
	LeafQosPolicyShaperHfscClassUpperlimitMtwo types.String `tfsdk:"m2"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyShaperHfscClassUpperlimit) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc", "class", "upperlimit"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyShaperHfscClassUpperlimitD.IsNull() || o.LeafQosPolicyShaperHfscClassUpperlimitD.IsUnknown()) {
		vyosData["d"] = o.LeafQosPolicyShaperHfscClassUpperlimitD.ValueString()
	}
	if !(o.LeafQosPolicyShaperHfscClassUpperlimitMone.IsNull() || o.LeafQosPolicyShaperHfscClassUpperlimitMone.IsUnknown()) {
		vyosData["m1"] = o.LeafQosPolicyShaperHfscClassUpperlimitMone.ValueString()
	}
	if !(o.LeafQosPolicyShaperHfscClassUpperlimitMtwo.IsNull() || o.LeafQosPolicyShaperHfscClassUpperlimitMtwo.IsUnknown()) {
		vyosData["m2"] = o.LeafQosPolicyShaperHfscClassUpperlimitMtwo.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyShaperHfscClassUpperlimit) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc", "class", "upperlimit"}})

	// Leafs
	if value, ok := vyosData["d"]; ok {
		o.LeafQosPolicyShaperHfscClassUpperlimitD = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassUpperlimitD = basetypes.NewStringNull()
	}
	if value, ok := vyosData["m1"]; ok {
		o.LeafQosPolicyShaperHfscClassUpperlimitMone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassUpperlimitMone = basetypes.NewStringNull()
	}
	if value, ok := vyosData["m2"]; ok {
		o.LeafQosPolicyShaperHfscClassUpperlimitMtwo = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyShaperHfscClassUpperlimitMtwo = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "shaper-hfsc", "class", "upperlimit"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyShaperHfscClassUpperlimit) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"d":  types.StringType,
		"m1": types.StringType,
		"m2": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyShaperHfscClassUpperlimit) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"d": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Service curve delay

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Time in milliseconds  |

`,
		},

		"m1": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Linkshare m1 parameter for class traffic

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Rate in kbit (kilobit per second)  |
|  <number>%%  |  Percentage of overall rate  |
|  <number>bit  |  bit(1), kbit(10^3), mbit(10^6), gbit, tbit  |
|  <number>ibit  |  kibit(1024), mibit(1024^2), gibit(1024^3), tbit(1024^4)  |
|  <number>ibps  |  kibps(1024&8), mibps(1024^2&8), gibps, tibps - Byte/sec  |
|  <number>bps  |  bps(8),kbps(8&10^3),mbps(8&10^6), gbps, tbps - Byte/sec  |

`,

			// Default:          stringdefault.StaticString(`100%%`),
			Computed: true,
		},

		"m2": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Linkshare m2 parameter for class traffic

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Rate in kbit (kilobit per second)  |
|  <number>%%  |  Percentage of overall rate  |
|  <number>bit  |  bit(1), kbit(10^3), mbit(10^6), gbit, tbit  |
|  <number>ibit  |  kibit(1024), mibit(1024^2), gibit(1024^3), tbit(1024^4)  |
|  <number>ibps  |  kibps(1024&8), mibps(1024^2&8), gibps, tibps - Byte/sec  |
|  <number>bps  |  bps(8),kbps(8&10^3),mbps(8&10^6), gbps, tbps - Byte/sec  |

`,

			// Default:          stringdefault.StaticString(`100%%`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
