// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceSnmpVthreeUser describes the resource data model.
type ServiceSnmpVthreeUser struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceSnmpVthreeUserGroup types.String `tfsdk:"group"`
	LeafServiceSnmpVthreeUserMode  types.String `tfsdk:"mode"`

	// TagNodes

	// Nodes
	NodeServiceSnmpVthreeUserAuth    types.Object `tfsdk:"auth"`
	NodeServiceSnmpVthreeUserPrivacy types.Object `tfsdk:"privacy"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpVthreeUser) GetVyosPath() []string {
	return []string{
		"service",
		"snmp",
		"v3",
		"user",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceSnmpVthreeUser) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "snmp", "v3", "user"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceSnmpVthreeUserGroup.IsNull() || o.LeafServiceSnmpVthreeUserGroup.IsUnknown()) {
		vyosData["group"] = o.LeafServiceSnmpVthreeUserGroup.ValueString()
	}
	if !(o.LeafServiceSnmpVthreeUserMode.IsNull() || o.LeafServiceSnmpVthreeUserMode.IsUnknown()) {
		vyosData["mode"] = o.LeafServiceSnmpVthreeUserMode.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeServiceSnmpVthreeUserAuth.IsNull() || o.NodeServiceSnmpVthreeUserAuth.IsUnknown()) {
		var subModel ServiceSnmpVthreeUserAuth
		diags.Append(o.NodeServiceSnmpVthreeUserAuth.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["auth"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeServiceSnmpVthreeUserPrivacy.IsNull() || o.NodeServiceSnmpVthreeUserPrivacy.IsUnknown()) {
		var subModel ServiceSnmpVthreeUserPrivacy
		diags.Append(o.NodeServiceSnmpVthreeUserPrivacy.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["privacy"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceSnmpVthreeUser) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "snmp", "v3", "user"}})

	// Leafs
	if value, ok := vyosData["group"]; ok {
		o.LeafServiceSnmpVthreeUserGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserGroup = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafServiceSnmpVthreeUserMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserMode = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["auth"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ServiceSnmpVthreeUserAuth{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeServiceSnmpVthreeUserAuth = data

	} else {
		o.NodeServiceSnmpVthreeUserAuth = basetypes.NewObjectNull(ServiceSnmpVthreeUserAuth{}.AttributeTypes())
	}
	if value, ok := vyosData["privacy"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ServiceSnmpVthreeUserPrivacy{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeServiceSnmpVthreeUserPrivacy = data

	} else {
		o.NodeServiceSnmpVthreeUserPrivacy = basetypes.NewObjectNull(ServiceSnmpVthreeUserPrivacy{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "snmp", "v3", "user"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceSnmpVthreeUser) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"group": types.StringType,
		"mode":  types.StringType,

		// Tags

		// Nodes
		"auth":    types.ObjectType{AttrTypes: ServiceSnmpVthreeUserAuth{}.AttributeTypes()},
		"privacy": types.ObjectType{AttrTypes: ServiceSnmpVthreeUserPrivacy{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeUser) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the user with name username

`,
		},

		// LeafNodes

		"group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specifies group for user name

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Define access permission

|  Format  |  Description  |
|----------|---------------|
|  ro  |  Read-Only  |
|  rw  |  read write  |

`,

			// Default:          stringdefault.StaticString(`ro`),
			Computed: true,
		},

		// TagNodes

		// Nodes

		"auth": schema.SingleNestedAttribute{
			Attributes: ServiceSnmpVthreeUserAuth{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Specifies the auth

`,
		},

		"privacy": schema.SingleNestedAttribute{
			Attributes: ServiceSnmpVthreeUserPrivacy{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Defines the privacy

`,
		},
	}
}
