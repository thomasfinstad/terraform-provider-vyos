// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceSnmpVthreeUserAuth describes the resource data model.
type ServiceSnmpVthreeUserAuth struct {
	// LeafNodes
	LeafServiceSnmpVthreeUserAuthEncryptedPassword types.String `tfsdk:"encrypted_password" json:"encrypted-password,omitempty"`
	LeafServiceSnmpVthreeUserAuthPlaintextPassword types.String `tfsdk:"plaintext_password" json:"plaintext-password,omitempty"`
	LeafServiceSnmpVthreeUserAuthType              types.String `tfsdk:"type" json:"type,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeUserAuth) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"encrypted_password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Defines the encrypted key for authentication

`,
		},

		"plaintext_password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Defines the clear text key for authentication

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Define used protocol

|  Format  |  Description  |
|----------|---------------|
|  md5  |  Message Digest 5  |
|  sha  |  Secure Hash Algorithm  |

`,

			// Default:          stringdefault.StaticString(`md5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceSnmpVthreeUserAuth) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceSnmpVthreeUserAuthEncryptedPassword.IsNull() && !o.LeafServiceSnmpVthreeUserAuthEncryptedPassword.IsUnknown() {
		jsonData["encrypted-password"] = o.LeafServiceSnmpVthreeUserAuthEncryptedPassword.ValueString()
	}

	if !o.LeafServiceSnmpVthreeUserAuthPlaintextPassword.IsNull() && !o.LeafServiceSnmpVthreeUserAuthPlaintextPassword.IsUnknown() {
		jsonData["plaintext-password"] = o.LeafServiceSnmpVthreeUserAuthPlaintextPassword.ValueString()
	}

	if !o.LeafServiceSnmpVthreeUserAuthType.IsNull() && !o.LeafServiceSnmpVthreeUserAuthType.IsUnknown() {
		jsonData["type"] = o.LeafServiceSnmpVthreeUserAuthType.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceSnmpVthreeUserAuth) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["encrypted-password"]; ok {
		o.LeafServiceSnmpVthreeUserAuthEncryptedPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserAuthEncryptedPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["plaintext-password"]; ok {
		o.LeafServiceSnmpVthreeUserAuthPlaintextPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserAuthPlaintextPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafServiceSnmpVthreeUserAuthType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeUserAuthType = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
