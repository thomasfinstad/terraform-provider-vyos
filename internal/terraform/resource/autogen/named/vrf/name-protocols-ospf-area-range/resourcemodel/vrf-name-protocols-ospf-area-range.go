// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfAreaRange describes the resource data model.
type VrfNameProtocolsOspfAreaRange struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDVrfName any `tfsdk:"name" vyos:"name,parent-id"`

	ParentIDVrfNameProtocolsOspfArea any `tfsdk:"area" vyos:"area,parent-id"`

	// LeafNodes
	LeafVrfNameProtocolsOspfAreaRangeCost         types.String `tfsdk:"cost" vyos:"cost,omitempty"`
	LeafVrfNameProtocolsOspfAreaRangeNotAdvertise types.String `tfsdk:"not_advertise" vyos:"not-advertise,omitempty"`
	LeafVrfNameProtocolsOspfAreaRangeSubstitute   types.String `tfsdk:"substitute" vyos:"substitute,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VrfNameProtocolsOspfAreaRange) GetVyosPath() []string {
	return []string{
		"vrf",
		"name",
		"protocols",
		"ospf",
		"area",
		"range",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfAreaRange) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Summarize routes matching a prefix (border routers only)

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  Area range prefix  |

`,
		},

		// LeafNodes

		"cost": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Metric for this range

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-16777215  |  Metric for this range  |

`,
		},

		"not_advertise": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not advertise this range

`,
		},

		"substitute": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise area range as another prefix

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  Advertise area range as another prefix  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfAreaRange) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfAreaRangeCost.IsNull() && !o.LeafVrfNameProtocolsOspfAreaRangeCost.IsUnknown() {
		jsonData["cost"] = o.LeafVrfNameProtocolsOspfAreaRangeCost.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaRangeNotAdvertise.IsNull() && !o.LeafVrfNameProtocolsOspfAreaRangeNotAdvertise.IsUnknown() {
		jsonData["not-advertise"] = o.LeafVrfNameProtocolsOspfAreaRangeNotAdvertise.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaRangeSubstitute.IsNull() && !o.LeafVrfNameProtocolsOspfAreaRangeSubstitute.IsUnknown() {
		jsonData["substitute"] = o.LeafVrfNameProtocolsOspfAreaRangeSubstitute.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfAreaRange) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["cost"]; ok {
		o.LeafVrfNameProtocolsOspfAreaRangeCost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaRangeCost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["not-advertise"]; ok {
		o.LeafVrfNameProtocolsOspfAreaRangeNotAdvertise = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaRangeNotAdvertise = basetypes.NewStringNull()
	}

	if value, ok := jsonData["substitute"]; ok {
		o.LeafVrfNameProtocolsOspfAreaRangeSubstitute = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaRangeSubstitute = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
