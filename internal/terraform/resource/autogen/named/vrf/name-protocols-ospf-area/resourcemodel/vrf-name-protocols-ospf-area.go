// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfArea describes the resource data model.
type VrfNameProtocolsOspfArea struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDVrfName any `tfsdk:"name" vyos:"name,parent-id"`

	// LeafNodes
	LeafVrfNameProtocolsOspfAreaAuthentication types.String `tfsdk:"authentication" vyos:"authentication,omitempty"`
	LeafVrfNameProtocolsOspfAreaNetwork        types.String `tfsdk:"network" vyos:"network,omitempty"`
	LeafVrfNameProtocolsOspfAreaShortcut       types.String `tfsdk:"shortcut" vyos:"shortcut,omitempty"`
	LeafVrfNameProtocolsOspfAreaExportList     types.String `tfsdk:"export_list" vyos:"export-list,omitempty"`
	LeafVrfNameProtocolsOspfAreaImportList     types.String `tfsdk:"import_list" vyos:"import-list,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVrfNameProtocolsOspfAreaRange       bool `tfsdk:"range" vyos:"range,child"`
	ExistsTagVrfNameProtocolsOspfAreaVirtualLink bool `tfsdk:"virtual_link" vyos:"virtual-link,child"`

	// Nodes
	NodeVrfNameProtocolsOspfAreaAreaType *VrfNameProtocolsOspfAreaAreaType `tfsdk:"area_type" vyos:"area-type,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VrfNameProtocolsOspfArea) GetVyosPath() []string {
	return []string{
		"vrf",
		"name",
		"protocols",
		"ospf",
		"area",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfArea) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `OSPF area settings

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  OSPF area number in decimal notation  |
    |  ipv4  |  OSPF area number in dotted decimal notation  |

`,
		},

		// LeafNodes

		"authentication": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF area authentication type

    |  Format  |  Description  |
    |----------|---------------|
    |  plaintext-password  |  Use plain-text authentication  |
    |  md5  |  Use MD5 authentication  |

`,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF network

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4net  |  OSPF network  |

`,
		},

		"shortcut": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Area shortcut mode

    |  Format  |  Description  |
    |----------|---------------|
    |  default  |  Set default  |
    |  disable  |  Disable shortcutting mode  |
    |  enable  |  Enable shortcutting mode  |

`,
		},

		"export_list": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set the filter for networks announced to other areas

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Access-list number  |

`,
		},

		"import_list": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set the filter for networks from other areas announced

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Access-list number  |

`,
		},

		// Nodes

		"area_type": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfAreaAreaType{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Area type

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfArea) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfAreaAuthentication.IsNull() && !o.LeafVrfNameProtocolsOspfAreaAuthentication.IsUnknown() {
		jsonData["authentication"] = o.LeafVrfNameProtocolsOspfAreaAuthentication.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaNetwork.IsNull() && !o.LeafVrfNameProtocolsOspfAreaNetwork.IsUnknown() {
		jsonData["network"] = o.LeafVrfNameProtocolsOspfAreaNetwork.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaShortcut.IsNull() && !o.LeafVrfNameProtocolsOspfAreaShortcut.IsUnknown() {
		jsonData["shortcut"] = o.LeafVrfNameProtocolsOspfAreaShortcut.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaExportList.IsNull() && !o.LeafVrfNameProtocolsOspfAreaExportList.IsUnknown() {
		jsonData["export-list"] = o.LeafVrfNameProtocolsOspfAreaExportList.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaImportList.IsNull() && !o.LeafVrfNameProtocolsOspfAreaImportList.IsUnknown() {
		jsonData["import-list"] = o.LeafVrfNameProtocolsOspfAreaImportList.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfAreaAreaType).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfAreaAreaType)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["area-type"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfArea) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["authentication"]; ok {
		o.LeafVrfNameProtocolsOspfAreaAuthentication = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaAuthentication = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafVrfNameProtocolsOspfAreaNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaNetwork = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shortcut"]; ok {
		o.LeafVrfNameProtocolsOspfAreaShortcut = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaShortcut = basetypes.NewStringNull()
	}

	if value, ok := jsonData["export-list"]; ok {
		o.LeafVrfNameProtocolsOspfAreaExportList = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaExportList = basetypes.NewStringNull()
	}

	if value, ok := jsonData["import-list"]; ok {
		o.LeafVrfNameProtocolsOspfAreaImportList = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaImportList = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["area-type"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfAreaAreaType = &VrfNameProtocolsOspfAreaAreaType{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfAreaAreaType)
		if err != nil {
			return err
		}
	}

	return nil
}
