// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsStaticRouteInterface describes the resource data model.
type VrfNameProtocolsStaticRouteInterface struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDVrfName any `tfsdk:"name" vyos:"name,parent-id"`

	ParentIDVrfNameProtocolsStaticRoute any `tfsdk:"route" vyos:"route,parent-id"`

	// LeafNodes
	LeafVrfNameProtocolsStaticRouteInterfaceDisable  types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVrfNameProtocolsStaticRouteInterfaceDistance types.String `tfsdk:"distance" vyos:"distance,omitempty"`
	LeafVrfNameProtocolsStaticRouteInterfaceVrf      types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VrfNameProtocolsStaticRouteInterface) GetVyosPath() []string {
	return []string{
		"vrf",
		"name",
		"protocols",
		"static",
		"route",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsStaticRouteInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Next-hop IPv4 router interface

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Gateway interface name  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"distance": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Distance for this route

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-255  |  Distance for this route  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF to leak route

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Name of VRF to leak to  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsStaticRouteInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsStaticRouteInterfaceDisable.IsNull() && !o.LeafVrfNameProtocolsStaticRouteInterfaceDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVrfNameProtocolsStaticRouteInterfaceDisable.ValueString()
	}

	if !o.LeafVrfNameProtocolsStaticRouteInterfaceDistance.IsNull() && !o.LeafVrfNameProtocolsStaticRouteInterfaceDistance.IsUnknown() {
		jsonData["distance"] = o.LeafVrfNameProtocolsStaticRouteInterfaceDistance.ValueString()
	}

	if !o.LeafVrfNameProtocolsStaticRouteInterfaceVrf.IsNull() && !o.LeafVrfNameProtocolsStaticRouteInterfaceVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafVrfNameProtocolsStaticRouteInterfaceVrf.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsStaticRouteInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVrfNameProtocolsStaticRouteInterfaceDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRouteInterfaceDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["distance"]; ok {
		o.LeafVrfNameProtocolsStaticRouteInterfaceDistance = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRouteInterfaceDistance = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafVrfNameProtocolsStaticRouteInterfaceVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRouteInterfaceVrf = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
