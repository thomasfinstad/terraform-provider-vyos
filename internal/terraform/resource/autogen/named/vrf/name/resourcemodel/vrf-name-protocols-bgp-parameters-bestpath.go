// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VrfNameProtocolsBgpParametersBestpath describes the resource data model.
type VrfNameProtocolsBgpParametersBestpath struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpParametersBestpathBandwIDth       types.String `tfsdk:"bandwidth" vyos:"bandwidth,omitempty"`
	LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID types.Bool   `tfsdk:"compare_routerid" vyos:"compare-routerid,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVrfNameProtocolsBgpParametersBestpathAsPath   *VrfNameProtocolsBgpParametersBestpathAsPath   `tfsdk:"as_path" vyos:"as-path,omitempty"`
	NodeVrfNameProtocolsBgpParametersBestpathMed      *VrfNameProtocolsBgpParametersBestpathMed      `tfsdk:"med" vyos:"med,omitempty"`
	NodeVrfNameProtocolsBgpParametersBestpathPeerType *VrfNameProtocolsBgpParametersBestpathPeerType `tfsdk:"peer_type" vyos:"peer-type,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpParametersBestpath) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link Bandwidth attribute

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  default-weight-for-missing  &emsp; |  Assign low default weight (1) to paths not having link bandwidth  |
    |  ignore  &emsp; |  Ignore link bandwidth (do regular ECMP, not weighted)  |
    |  skip-missing  &emsp; |  Ignore paths without link bandwidth for ECMP (if other paths have it)  |

`,
		},

		"compare_routerid": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Compare the router-id for identical EBGP paths

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

		"as_path": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathAsPath{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `AS-path attribute comparison parameters

`,
		},

		"med": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathMed{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `MED attribute comparison parameters

`,
		},

		"peer_type": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathPeerType{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Peer type

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpParametersBestpath) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpParametersBestpath) UnmarshalJSON(_ []byte) error {
	return nil
}
