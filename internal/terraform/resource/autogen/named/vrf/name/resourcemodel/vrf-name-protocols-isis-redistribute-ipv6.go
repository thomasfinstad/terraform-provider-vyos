// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsIsisRedistributeIPvsix describes the resource data model.
type VrfNameProtocolsIsisRedistributeIPvsix struct {
	// LeafNodes

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVrfNameProtocolsIsisRedistributeIPvsixBgp       *VrfNameProtocolsIsisRedistributeIPvsixBgp       `tfsdk:"bgp" vyos:"bgp,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixConnected *VrfNameProtocolsIsisRedistributeIPvsixConnected `tfsdk:"connected" vyos:"connected,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixKernel    *VrfNameProtocolsIsisRedistributeIPvsixKernel    `tfsdk:"kernel" vyos:"kernel,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixOspfsix   *VrfNameProtocolsIsisRedistributeIPvsixOspfsix   `tfsdk:"ospf6" vyos:"ospf6,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixRIPng     *VrfNameProtocolsIsisRedistributeIPvsixRIPng     `tfsdk:"ripng" vyos:"ripng,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixBabel     *VrfNameProtocolsIsisRedistributeIPvsixBabel     `tfsdk:"babel" vyos:"babel,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvsixStatic    *VrfNameProtocolsIsisRedistributeIPvsixStatic    `tfsdk:"static" vyos:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisRedistributeIPvsix) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// Nodes

		"bgp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixBgp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute BGP routes into IS-IS

`,
		},

		"connected": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixConnected{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute connected routes into IS-IS

`,
		},

		"kernel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixKernel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute kernel routes into IS-IS

`,
		},

		"ospf6": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixOspfsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute OSPFv3 routes into IS-IS

`,
		},

		"ripng": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixRIPng{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute RIPng routes into IS-IS

`,
		},

		"babel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixBabel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Babel routes into IS-IS

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvsixStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute static routes into IS-IS

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsisRedistributeIPvsix) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixBgp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixBgp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bgp"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixConnected).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixConnected)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connected"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixKernel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixKernel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["kernel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixOspfsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixOspfsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospf6"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixRIPng).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixRIPng)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ripng"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixBabel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixBabel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["babel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvsixStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvsixStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsisRedistributeIPvsix) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Nodes
	if value, ok := jsonData["bgp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixBgp = &VrfNameProtocolsIsisRedistributeIPvsixBgp{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixBgp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["connected"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixConnected = &VrfNameProtocolsIsisRedistributeIPvsixConnected{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixConnected)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["kernel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixKernel = &VrfNameProtocolsIsisRedistributeIPvsixKernel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixKernel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospf6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixOspfsix = &VrfNameProtocolsIsisRedistributeIPvsixOspfsix{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixOspfsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ripng"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixRIPng = &VrfNameProtocolsIsisRedistributeIPvsixRIPng{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixRIPng)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["babel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixBabel = &VrfNameProtocolsIsisRedistributeIPvsixBabel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixBabel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvsixStatic = &VrfNameProtocolsIsisRedistributeIPvsixStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvsixStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
