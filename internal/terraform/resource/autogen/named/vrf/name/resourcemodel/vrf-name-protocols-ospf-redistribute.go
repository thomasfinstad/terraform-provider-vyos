// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsOspfRedistribute describes the resource data model.
type VrfNameProtocolsOspfRedistribute struct {
	// LeafNodes

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVrfNameProtocolsOspfRedistributeTable bool `tfsdk:"table" vyos:"table,child"`

	// Nodes
	NodeVrfNameProtocolsOspfRedistributeBgp       *VrfNameProtocolsOspfRedistributeBgp       `tfsdk:"bgp" vyos:"bgp,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeConnected *VrfNameProtocolsOspfRedistributeConnected `tfsdk:"connected" vyos:"connected,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeIsis      *VrfNameProtocolsOspfRedistributeIsis      `tfsdk:"isis" vyos:"isis,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeKernel    *VrfNameProtocolsOspfRedistributeKernel    `tfsdk:"kernel" vyos:"kernel,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeRIP       *VrfNameProtocolsOspfRedistributeRIP       `tfsdk:"rip" vyos:"rip,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeBabel     *VrfNameProtocolsOspfRedistributeBabel     `tfsdk:"babel" vyos:"babel,omitempty"`
	NodeVrfNameProtocolsOspfRedistributeStatic    *VrfNameProtocolsOspfRedistributeStatic    `tfsdk:"static" vyos:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfRedistribute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// Nodes

		"bgp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeBgp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute BGP routes

`,
		},

		"connected": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeConnected{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute connected routes

`,
		},

		"isis": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeIsis{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute IS-IS routes

`,
		},

		"kernel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeKernel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Kernel routes

`,
		},

		"rip": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeRIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute RIP routes

`,
		},

		"babel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeBabel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Babel routes

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistributeStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute statically configured routes

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfRedistribute) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeBgp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeBgp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bgp"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeConnected).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeConnected)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connected"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeIsis).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeIsis)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["isis"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeKernel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeKernel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["kernel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeRIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeRIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rip"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeBabel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeBabel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["babel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfRedistributeStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfRedistributeStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfRedistribute) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Nodes
	if value, ok := jsonData["bgp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeBgp = &VrfNameProtocolsOspfRedistributeBgp{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeBgp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["connected"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeConnected = &VrfNameProtocolsOspfRedistributeConnected{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeConnected)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["isis"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeIsis = &VrfNameProtocolsOspfRedistributeIsis{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeIsis)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["kernel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeKernel = &VrfNameProtocolsOspfRedistributeKernel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeKernel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["rip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeRIP = &VrfNameProtocolsOspfRedistributeRIP{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeRIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["babel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeBabel = &VrfNameProtocolsOspfRedistributeBabel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeBabel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfRedistributeStatic = &VrfNameProtocolsOspfRedistributeStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfRedistributeStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
