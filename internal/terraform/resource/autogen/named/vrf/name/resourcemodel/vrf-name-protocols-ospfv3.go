// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfvthree describes the resource data model.
type VrfNameProtocolsOspfvthree struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfvthreeRouteMap types.String `tfsdk:"route_map" vyos:"route-map,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVrfNameProtocolsOspfvthreeArea      bool `tfsdk:"area" vyos:"area,child"`
	ExistsTagVrfNameProtocolsOspfvthreeInterface bool `tfsdk:"interface" vyos:"interface,child"`

	// Nodes
	NodeVrfNameProtocolsOspfvthreeAutoCost            *VrfNameProtocolsOspfvthreeAutoCost            `tfsdk:"auto_cost" vyos:"auto-cost,omitempty"`
	NodeVrfNameProtocolsOspfvthreeDefaultInformation  *VrfNameProtocolsOspfvthreeDefaultInformation  `tfsdk:"default_information" vyos:"default-information,omitempty"`
	NodeVrfNameProtocolsOspfvthreeDistance            *VrfNameProtocolsOspfvthreeDistance            `tfsdk:"distance" vyos:"distance,omitempty"`
	NodeVrfNameProtocolsOspfvthreeLogAdjacencyChanges *VrfNameProtocolsOspfvthreeLogAdjacencyChanges `tfsdk:"log_adjacency_changes" vyos:"log-adjacency-changes,omitempty"`
	NodeVrfNameProtocolsOspfvthreeParameters          *VrfNameProtocolsOspfvthreeParameters          `tfsdk:"parameters" vyos:"parameters,omitempty"`
	NodeVrfNameProtocolsOspfvthreeRedistribute        *VrfNameProtocolsOspfvthreeRedistribute        `tfsdk:"redistribute" vyos:"redistribute,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfvthree) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Route map name  |

`,
		},

		// Nodes

		"auto_cost": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeAutoCost{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Calculate interface cost according to bandwidth

`,
		},

		"default_information": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeDefaultInformation{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Default route advertisment settings

`,
		},

		"distance": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeDistance{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Administrative distance

`,
		},

		"log_adjacency_changes": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeLogAdjacencyChanges{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Log adjacency state changes

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `OSPFv3 specific parameters

`,
		},

		"redistribute": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeRedistribute{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute information from another routing protocol

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfvthree) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfvthreeRouteMap.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeRouteMap.IsUnknown() {
		jsonData["route-map"] = o.LeafVrfNameProtocolsOspfvthreeRouteMap.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeAutoCost).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeAutoCost)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["auto-cost"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeDefaultInformation).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeDefaultInformation)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["default-information"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeDistance).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeDistance)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["distance"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeLogAdjacencyChanges).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeLogAdjacencyChanges)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["log-adjacency-changes"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeParameters).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeParameters)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["parameters"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeRedistribute).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeRedistribute)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["redistribute"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfvthree) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["route-map"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeRouteMap = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeRouteMap = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["auto-cost"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeAutoCost = &VrfNameProtocolsOspfvthreeAutoCost{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeAutoCost)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["default-information"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeDefaultInformation = &VrfNameProtocolsOspfvthreeDefaultInformation{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeDefaultInformation)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["distance"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeDistance = &VrfNameProtocolsOspfvthreeDistance{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeDistance)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["log-adjacency-changes"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeLogAdjacencyChanges = &VrfNameProtocolsOspfvthreeLogAdjacencyChanges{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeLogAdjacencyChanges)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["parameters"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeParameters = &VrfNameProtocolsOspfvthreeParameters{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeParameters)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["redistribute"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeRedistribute = &VrfNameProtocolsOspfvthreeRedistribute{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeRedistribute)
		if err != nil {
			return err
		}
	}

	return nil
}
