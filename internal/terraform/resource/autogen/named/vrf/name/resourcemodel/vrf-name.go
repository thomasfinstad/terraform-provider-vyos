// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VrfName describes the resource data model.
type VrfName struct {
	SelfIdentifier types.String `tfsdk:"name_id" vyos:",self-id"`

	// LeafNodes
	LeafVrfNameDescrIPtion types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafVrfNameDisable     types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVrfNameTable       types.Number `tfsdk:"table" vyos:"table,omitempty"`
	LeafVrfNameVni         types.Number `tfsdk:"vni" vyos:"vni,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVrfNameIP        *VrfNameIP        `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeVrfNameIPvsix    *VrfNameIPvsix    `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeVrfNameProtocols *VrfNameProtocols `tfsdk:"protocols" vyos:"protocols,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VrfName) GetVyosPath() []string {
	return []string{
		"vrf",

		"name",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"name_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Virtual Routing and Forwarding instance

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  VRF instance name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"table": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Routing table associated with this instance

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 100-65535  &emsp; |  Routing table ID  |

`,
		},

		"vni": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Network Identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-16777214  &emsp; |  VXLAN virtual network identifier  |

`,
		},

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: VrfNameIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: VrfNameIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"protocols": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocols{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Routing protocol parameters

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfName) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfName) UnmarshalJSON(_ []byte) error {
	return nil
}
