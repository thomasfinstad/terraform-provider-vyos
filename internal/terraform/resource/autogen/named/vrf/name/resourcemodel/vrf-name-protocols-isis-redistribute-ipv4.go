// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsIsisRedistributeIPvfour describes the resource data model.
type VrfNameProtocolsIsisRedistributeIPvfour struct {
	// LeafNodes

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVrfNameProtocolsIsisRedistributeIPvfourBgp       *VrfNameProtocolsIsisRedistributeIPvfourBgp       `tfsdk:"bgp" vyos:"bgp,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourConnected *VrfNameProtocolsIsisRedistributeIPvfourConnected `tfsdk:"connected" vyos:"connected,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourKernel    *VrfNameProtocolsIsisRedistributeIPvfourKernel    `tfsdk:"kernel" vyos:"kernel,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourOspf      *VrfNameProtocolsIsisRedistributeIPvfourOspf      `tfsdk:"ospf" vyos:"ospf,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourRIP       *VrfNameProtocolsIsisRedistributeIPvfourRIP       `tfsdk:"rip" vyos:"rip,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourBabel     *VrfNameProtocolsIsisRedistributeIPvfourBabel     `tfsdk:"babel" vyos:"babel,omitempty"`
	NodeVrfNameProtocolsIsisRedistributeIPvfourStatic    *VrfNameProtocolsIsisRedistributeIPvfourStatic    `tfsdk:"static" vyos:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisRedistributeIPvfour) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// Nodes

		"bgp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourBgp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Border Gateway Protocol (BGP)

`,
		},

		"connected": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourConnected{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute connected routes into IS-IS

`,
		},

		"kernel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourKernel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute kernel routes into IS-IS

`,
		},

		"ospf": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourOspf{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute OSPF routes into IS-IS

`,
		},

		"rip": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourRIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute RIP routes into IS-IS

`,
		},

		"babel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourBabel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Babel routes into IS-IS

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistributeIPvfourStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute static routes into IS-IS

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsisRedistributeIPvfour) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourBgp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourBgp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bgp"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourConnected).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourConnected)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connected"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourKernel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourKernel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["kernel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourOspf).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourOspf)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospf"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourRIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourRIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rip"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourBabel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourBabel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["babel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistributeIPvfourStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistributeIPvfourStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsisRedistributeIPvfour) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Nodes
	if value, ok := jsonData["bgp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourBgp = &VrfNameProtocolsIsisRedistributeIPvfourBgp{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourBgp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["connected"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourConnected = &VrfNameProtocolsIsisRedistributeIPvfourConnected{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourConnected)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["kernel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourKernel = &VrfNameProtocolsIsisRedistributeIPvfourKernel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourKernel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospf"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourOspf = &VrfNameProtocolsIsisRedistributeIPvfourOspf{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourOspf)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["rip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourRIP = &VrfNameProtocolsIsisRedistributeIPvfourRIP{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourRIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["babel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourBabel = &VrfNameProtocolsIsisRedistributeIPvfourBabel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourBabel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistributeIPvfourStatic = &VrfNameProtocolsIsisRedistributeIPvfourStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistributeIPvfourStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
