// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VrfNameProtocolsOspf describes the resource data model.
type VrfNameProtocolsOspf struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfDefaultMetric    types.Number `tfsdk:"default_metric" vyos:"default-metric,omitempty"`
	LeafVrfNameProtocolsOspfMaximumPaths     types.Number `tfsdk:"maximum_paths" vyos:"maximum-paths,omitempty"`
	LeafVrfNameProtocolsOspfPassiveInterface types.String `tfsdk:"passive_interface" vyos:"passive-interface,omitempty"`
	LeafVrfNameProtocolsOspfRouteMap         types.String `tfsdk:"route_map" vyos:"route-map,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVrfNameProtocolsOspfAccessList bool `tfsdk:"access_list" vyos:"access-list,ignore,child"`
	ExistsTagVrfNameProtocolsOspfArea       bool `tfsdk:"area" vyos:"area,ignore,child"`
	ExistsTagVrfNameProtocolsOspfInterface  bool `tfsdk:"interface" vyos:"interface,ignore,child"`
	ExistsTagVrfNameProtocolsOspfNeighbor   bool `tfsdk:"neighbor" vyos:"neighbor,ignore,child"`

	// Nodes
	NodeVrfNameProtocolsOspfAutoCost            *VrfNameProtocolsOspfAutoCost            `tfsdk:"auto_cost" vyos:"auto-cost,omitempty"`
	NodeVrfNameProtocolsOspfDefaultInformation  *VrfNameProtocolsOspfDefaultInformation  `tfsdk:"default_information" vyos:"default-information,omitempty"`
	NodeVrfNameProtocolsOspfDistance            *VrfNameProtocolsOspfDistance            `tfsdk:"distance" vyos:"distance,omitempty"`
	NodeVrfNameProtocolsOspfLogAdjacencyChanges *VrfNameProtocolsOspfLogAdjacencyChanges `tfsdk:"log_adjacency_changes" vyos:"log-adjacency-changes,omitempty"`
	NodeVrfNameProtocolsOspfMaxMetric           *VrfNameProtocolsOspfMaxMetric           `tfsdk:"max_metric" vyos:"max-metric,omitempty"`
	NodeVrfNameProtocolsOspfMplsTe              *VrfNameProtocolsOspfMplsTe              `tfsdk:"mpls_te" vyos:"mpls-te,omitempty"`
	NodeVrfNameProtocolsOspfParameters          *VrfNameProtocolsOspfParameters          `tfsdk:"parameters" vyos:"parameters,omitempty"`
	NodeVrfNameProtocolsOspfSegmentRouting      *VrfNameProtocolsOspfSegmentRouting      `tfsdk:"segment_routing" vyos:"segment-routing,omitempty"`
	NodeVrfNameProtocolsOspfRedistribute        *VrfNameProtocolsOspfRedistribute        `tfsdk:"redistribute" vyos:"redistribute,omitempty"`
	NodeVrfNameProtocolsOspfRefresh             *VrfNameProtocolsOspfRefresh             `tfsdk:"refresh" vyos:"refresh,omitempty"`
	NodeVrfNameProtocolsOspfTimers              *VrfNameProtocolsOspfTimers              `tfsdk:"timers" vyos:"timers,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspf) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"default_metric": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Metric of redistributed routes

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 0-16777214  &emsp; |  Metric of redistributed routes  |

`,
		},

		"maximum_paths": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum multiple paths (ECMP)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-64  &emsp; |  Maximum multiple paths (ECMP)  |

`,
		},

		"passive_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Suppress routing updates on an interface

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  default  &emsp; |  Default to suppress routing updates on all interfaces  |

`,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Route map name  |

`,
		},

		// Nodes

		"auto_cost": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfAutoCost{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Calculate interface cost according to bandwidth

`,
		},

		"default_information": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfDefaultInformation{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Default route advertisment settings

`,
		},

		"distance": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfDistance{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Administrative distance

`,
		},

		"log_adjacency_changes": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfLogAdjacencyChanges{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Log adjacency state changes

`,
		},

		"max_metric": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfMaxMetric{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `OSPF maximum and infinite-distance metric

`,
		},

		"mpls_te": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfMplsTe{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `MultiProtocol Label Switching-Traffic Engineering (MPLS-TE) parameters

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `OSPF specific parameters

`,
		},

		"segment_routing": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfSegmentRouting{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Segment-Routing (SPRING) settings

`,
		},

		"redistribute": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRedistribute{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute information from another routing protocol

`,
		},

		"refresh": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfRefresh{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Adjust refresh parameters

`,
		},

		"timers": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfTimers{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Adjust routing timers

`,
		},
	}
}
