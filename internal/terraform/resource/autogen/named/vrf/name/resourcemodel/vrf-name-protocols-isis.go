// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsIsis describes the resource data model.
type VrfNameProtocolsIsis struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisDynamicHostname     types.String `tfsdk:"dynamic_hostname" vyos:"dynamic-hostname,omitempty"`
	LeafVrfNameProtocolsIsisLevel               types.String `tfsdk:"level" vyos:"level,omitempty"`
	LeafVrfNameProtocolsIsisLogAdjacencyChanges types.String `tfsdk:"log_adjacency_changes" vyos:"log-adjacency-changes,omitempty"`
	LeafVrfNameProtocolsIsisLspGenInterval      types.String `tfsdk:"lsp_gen_interval" vyos:"lsp-gen-interval,omitempty"`
	LeafVrfNameProtocolsIsisLspMtu              types.String `tfsdk:"lsp_mtu" vyos:"lsp-mtu,omitempty"`
	LeafVrfNameProtocolsIsisLspRefreshInterval  types.String `tfsdk:"lsp_refresh_interval" vyos:"lsp-refresh-interval,omitempty"`
	LeafVrfNameProtocolsIsisMaxLspLifetime      types.String `tfsdk:"max_lsp_lifetime" vyos:"max-lsp-lifetime,omitempty"`
	LeafVrfNameProtocolsIsisMetricStyle         types.String `tfsdk:"metric_style" vyos:"metric-style,omitempty"`
	LeafVrfNameProtocolsIsisNet                 types.String `tfsdk:"net" vyos:"net,omitempty"`
	LeafVrfNameProtocolsIsisPurgeOriginator     types.String `tfsdk:"purge_originator" vyos:"purge-originator,omitempty"`
	LeafVrfNameProtocolsIsisSetAttachedBit      types.String `tfsdk:"set_attached_bit" vyos:"set-attached-bit,omitempty"`
	LeafVrfNameProtocolsIsisSetOverloadBit      types.String `tfsdk:"set_overload_bit" vyos:"set-overload-bit,omitempty"`
	LeafVrfNameProtocolsIsisSpfInterval         types.String `tfsdk:"spf_interval" vyos:"spf-interval,omitempty"`
	LeafVrfNameProtocolsIsisRouteMap            types.String `tfsdk:"route_map" vyos:"route-map,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVrfNameProtocolsIsisInterface bool `tfsdk:"interface" vyos:"interface,child"`

	// Nodes
	NodeVrfNameProtocolsIsisAreaPassword       *VrfNameProtocolsIsisAreaPassword       `tfsdk:"area_password" vyos:"area-password,omitempty"`
	NodeVrfNameProtocolsIsisDefaultInformation *VrfNameProtocolsIsisDefaultInformation `tfsdk:"default_information" vyos:"default-information,omitempty"`
	NodeVrfNameProtocolsIsisDomainPassword     *VrfNameProtocolsIsisDomainPassword     `tfsdk:"domain_password" vyos:"domain-password,omitempty"`
	NodeVrfNameProtocolsIsisTrafficEngineering *VrfNameProtocolsIsisTrafficEngineering `tfsdk:"traffic_engineering" vyos:"traffic-engineering,omitempty"`
	NodeVrfNameProtocolsIsisSegmentRouting     *VrfNameProtocolsIsisSegmentRouting     `tfsdk:"segment_routing" vyos:"segment-routing,omitempty"`
	NodeVrfNameProtocolsIsisRedistribute       *VrfNameProtocolsIsisRedistribute       `tfsdk:"redistribute" vyos:"redistribute,omitempty"`
	NodeVrfNameProtocolsIsisSpfDelayIetf       *VrfNameProtocolsIsisSpfDelayIetf       `tfsdk:"spf_delay_ietf" vyos:"spf-delay-ietf,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsis) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dynamic_hostname": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Dynamic hostname for IS-IS

`,
		},

		"level": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IS-IS level number

    |  Format  |  Description  |
    |----------|---------------|
    |  level-1  |  Act as a station router  |
    |  level-1-2  |  Act as both a station and an area router  |
    |  level-2  |  Act as an area router  |

`,
		},

		"log_adjacency_changes": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Log adjacency state changes

`,
		},

		"lsp_gen_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval between regenerating same LSP

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-120  |  Minimum interval in seconds  |

`,
		},

		"lsp_mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure the maximum size of generated LSPs

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:128-4352  |  Maximum size of generated LSPs  |

`,

			// Default:          stringdefault.StaticString(`1497`),
			Computed: true,
		},

		"lsp_refresh_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LSP refresh interval

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65235  |  LSP refresh interval in seconds  |

`,
		},

		"max_lsp_lifetime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum LSP lifetime

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:350-65535  |  LSP lifetime in seconds  |

`,
		},

		"metric_style": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use old-style (ISO 10589) or new-style packet formats

    |  Format  |  Description  |
    |----------|---------------|
    |  narrow  |  Use old style of TLVs with narrow metric  |
    |  transition  |  Send and accept both styles of TLVs during transition  |
    |  wide  |  Use new style of TLVs to carry wider metric  |

`,
		},

		"net": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `A Network Entity Title for this process (ISO only)

    |  Format  |  Description  |
    |----------|---------------|
    |  XX.XXXX. ... .XXX.XX  |  Network entity title (NET)  |

`,
		},

		"purge_originator": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use the RFC 6232 purge-originator

`,
		},

		"set_attached_bit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set attached bit to identify as L1/L2 router for inter-area traffic

`,
		},

		"set_overload_bit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set overload bit to avoid any transit traffic

`,
		},

		"spf_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval between SPF calculations

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-120  |  Interval in seconds  |

`,
		},

		"route_map": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify route-map name to use

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Route map name  |

`,
		},

		// Nodes

		"area_password": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisAreaPassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure the authentication password for an area

`,
		},

		"default_information": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisDefaultInformation{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Control distribution of default information

`,
		},

		"domain_password": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisDomainPassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set the authentication password for a routing domain

`,
		},

		"traffic_engineering": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisTrafficEngineering{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Show IS-IS neighbor adjacencies

`,
		},

		"segment_routing": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisSegmentRouting{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Segment-Routing (SPRING) settings

`,
		},

		"redistribute": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisRedistribute{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute information from another routing protocol

`,
		},

		"spf_delay_ietf": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisSpfDelayIetf{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IETF SPF delay algorithm

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsis) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsIsisDynamicHostname.IsNull() && !o.LeafVrfNameProtocolsIsisDynamicHostname.IsUnknown() {
		jsonData["dynamic-hostname"] = o.LeafVrfNameProtocolsIsisDynamicHostname.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisLevel.IsNull() && !o.LeafVrfNameProtocolsIsisLevel.IsUnknown() {
		jsonData["level"] = o.LeafVrfNameProtocolsIsisLevel.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisLogAdjacencyChanges.IsNull() && !o.LeafVrfNameProtocolsIsisLogAdjacencyChanges.IsUnknown() {
		jsonData["log-adjacency-changes"] = o.LeafVrfNameProtocolsIsisLogAdjacencyChanges.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisLspGenInterval.IsNull() && !o.LeafVrfNameProtocolsIsisLspGenInterval.IsUnknown() {
		jsonData["lsp-gen-interval"] = o.LeafVrfNameProtocolsIsisLspGenInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisLspMtu.IsNull() && !o.LeafVrfNameProtocolsIsisLspMtu.IsUnknown() {
		jsonData["lsp-mtu"] = o.LeafVrfNameProtocolsIsisLspMtu.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisLspRefreshInterval.IsNull() && !o.LeafVrfNameProtocolsIsisLspRefreshInterval.IsUnknown() {
		jsonData["lsp-refresh-interval"] = o.LeafVrfNameProtocolsIsisLspRefreshInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisMaxLspLifetime.IsNull() && !o.LeafVrfNameProtocolsIsisMaxLspLifetime.IsUnknown() {
		jsonData["max-lsp-lifetime"] = o.LeafVrfNameProtocolsIsisMaxLspLifetime.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisMetricStyle.IsNull() && !o.LeafVrfNameProtocolsIsisMetricStyle.IsUnknown() {
		jsonData["metric-style"] = o.LeafVrfNameProtocolsIsisMetricStyle.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisNet.IsNull() && !o.LeafVrfNameProtocolsIsisNet.IsUnknown() {
		jsonData["net"] = o.LeafVrfNameProtocolsIsisNet.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisPurgeOriginator.IsNull() && !o.LeafVrfNameProtocolsIsisPurgeOriginator.IsUnknown() {
		jsonData["purge-originator"] = o.LeafVrfNameProtocolsIsisPurgeOriginator.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSetAttachedBit.IsNull() && !o.LeafVrfNameProtocolsIsisSetAttachedBit.IsUnknown() {
		jsonData["set-attached-bit"] = o.LeafVrfNameProtocolsIsisSetAttachedBit.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSetOverloadBit.IsNull() && !o.LeafVrfNameProtocolsIsisSetOverloadBit.IsUnknown() {
		jsonData["set-overload-bit"] = o.LeafVrfNameProtocolsIsisSetOverloadBit.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSpfInterval.IsNull() && !o.LeafVrfNameProtocolsIsisSpfInterval.IsUnknown() {
		jsonData["spf-interval"] = o.LeafVrfNameProtocolsIsisSpfInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisRouteMap.IsNull() && !o.LeafVrfNameProtocolsIsisRouteMap.IsUnknown() {
		jsonData["route-map"] = o.LeafVrfNameProtocolsIsisRouteMap.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisAreaPassword).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisAreaPassword)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["area-password"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisDefaultInformation).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisDefaultInformation)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["default-information"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisDomainPassword).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisDomainPassword)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["domain-password"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisTrafficEngineering).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisTrafficEngineering)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["traffic-engineering"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisSegmentRouting).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisSegmentRouting)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["segment-routing"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisRedistribute).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisRedistribute)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["redistribute"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisSpfDelayIetf).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisSpfDelayIetf)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["spf-delay-ietf"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsis) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["dynamic-hostname"]; ok {
		o.LeafVrfNameProtocolsIsisDynamicHostname = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisDynamicHostname = basetypes.NewStringNull()
	}

	if value, ok := jsonData["level"]; ok {
		o.LeafVrfNameProtocolsIsisLevel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisLevel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["log-adjacency-changes"]; ok {
		o.LeafVrfNameProtocolsIsisLogAdjacencyChanges = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisLogAdjacencyChanges = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lsp-gen-interval"]; ok {
		o.LeafVrfNameProtocolsIsisLspGenInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisLspGenInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lsp-mtu"]; ok {
		o.LeafVrfNameProtocolsIsisLspMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisLspMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lsp-refresh-interval"]; ok {
		o.LeafVrfNameProtocolsIsisLspRefreshInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisLspRefreshInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["max-lsp-lifetime"]; ok {
		o.LeafVrfNameProtocolsIsisMaxLspLifetime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisMaxLspLifetime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["metric-style"]; ok {
		o.LeafVrfNameProtocolsIsisMetricStyle = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisMetricStyle = basetypes.NewStringNull()
	}

	if value, ok := jsonData["net"]; ok {
		o.LeafVrfNameProtocolsIsisNet = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisNet = basetypes.NewStringNull()
	}

	if value, ok := jsonData["purge-originator"]; ok {
		o.LeafVrfNameProtocolsIsisPurgeOriginator = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisPurgeOriginator = basetypes.NewStringNull()
	}

	if value, ok := jsonData["set-attached-bit"]; ok {
		o.LeafVrfNameProtocolsIsisSetAttachedBit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSetAttachedBit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["set-overload-bit"]; ok {
		o.LeafVrfNameProtocolsIsisSetOverloadBit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSetOverloadBit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["spf-interval"]; ok {
		o.LeafVrfNameProtocolsIsisSpfInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["route-map"]; ok {
		o.LeafVrfNameProtocolsIsisRouteMap = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisRouteMap = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["area-password"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisAreaPassword = &VrfNameProtocolsIsisAreaPassword{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisAreaPassword)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["default-information"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisDefaultInformation = &VrfNameProtocolsIsisDefaultInformation{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisDefaultInformation)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["domain-password"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisDomainPassword = &VrfNameProtocolsIsisDomainPassword{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisDomainPassword)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["traffic-engineering"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisTrafficEngineering = &VrfNameProtocolsIsisTrafficEngineering{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisTrafficEngineering)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["segment-routing"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisSegmentRouting = &VrfNameProtocolsIsisSegmentRouting{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisSegmentRouting)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["redistribute"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisRedistribute = &VrfNameProtocolsIsisRedistribute{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisRedistribute)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["spf-delay-ietf"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisSpfDelayIetf = &VrfNameProtocolsIsisSpfDelayIetf{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisSpfDelayIetf)
		if err != nil {
			return err
		}
	}

	return nil
}
