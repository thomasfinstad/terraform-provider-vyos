// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpParametersBestpathAsPath describes the resource data model.
type VrfNameProtocolsBgpParametersBestpathAsPath struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed         types.String `tfsdk:"confed" vyos:"confed,omitempty"`
	LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore         types.String `tfsdk:"ignore" vyos:"ignore,omitempty"`
	LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax types.String `tfsdk:"multipath_relax" vyos:"multipath-relax,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpParametersBestpathAsPath) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"confed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Compare AS-path lengths including confederation sets and sequences

`,
		},

		"ignore": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore AS-path length in selecting a route

`,
		},

		"multipath_relax": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow load sharing across routes that have different AS paths (but same length)

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpParametersBestpathAsPath) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed.IsNull() && !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed.IsUnknown() {
		jsonData["confed"] = o.LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore.IsNull() && !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore.IsUnknown() {
		jsonData["ignore"] = o.LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax.IsNull() && !o.LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax.IsUnknown() {
		jsonData["multipath-relax"] = o.LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpParametersBestpathAsPath) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["confed"]; ok {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathConfed = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ignore"]; ok {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathIgnore = basetypes.NewStringNull()
	}

	if value, ok := jsonData["multipath-relax"]; ok {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpParametersBestpathAsPathMultIPathRelax = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
