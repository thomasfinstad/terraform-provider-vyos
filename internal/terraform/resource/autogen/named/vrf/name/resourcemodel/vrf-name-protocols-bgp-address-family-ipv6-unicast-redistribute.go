// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistribute describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistribute struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable types.String `tfsdk:"table" vyos:"table,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected  *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected  `tfsdk:"connected" vyos:"connected,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel     *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel     `tfsdk:"kernel" vyos:"kernel,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree `tfsdk:"ospfv3" vyos:"ospfv3,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng      *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng      `tfsdk:"ripng" vyos:"ripng,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel      *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel      `tfsdk:"babel" vyos:"babel,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic     *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic     `tfsdk:"static" vyos:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistribute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"table": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redistribute non-main Kernel Routing Table

`,
		},

		// Nodes

		"connected": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute connected routes into BGP

`,
		},

		"kernel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute kernel routes into BGP

`,
		},

		"ospfv3": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute OSPFv3 routes into BGP

`,
		},

		"ripng": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute RIPng routes into BGP

`,
		},

		"babel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Babel routes into BGP

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute static routes into BGP

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistribute) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable.IsUnknown() {
		jsonData["table"] = o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connected"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["kernel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospfv3"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ripng"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["babel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistribute) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["table"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeTable = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["connected"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeConnected)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["kernel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeKernel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospfv3"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeOspfvthree)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ripng"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeRIPng)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["babel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeBabel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicastRedistributeStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
