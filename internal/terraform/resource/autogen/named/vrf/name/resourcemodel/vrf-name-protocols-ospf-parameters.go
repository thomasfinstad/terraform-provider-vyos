// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosResourceDataModel = &VrfNameProtocolsOspfParameters{}

// VrfNameProtocolsOspfParameters describes the resource data model.
type VrfNameProtocolsOspfParameters struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfParametersAbrType                           types.String `tfsdk:"abr_type" vyos:"abr-type,omitempty"`
	LeafVrfNameProtocolsOspfParametersOpaqueLsa                         types.Bool   `tfsdk:"opaque_lsa" vyos:"opaque-lsa,omitempty"`
	LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility types.Bool   `tfsdk:"rfc1583_compatibility" vyos:"rfc1583-compatibility,omitempty"`
	LeafVrfNameProtocolsOspfParametersRouterID                          types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfParameters) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"abr_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF ABR type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  cisco  &emsp; |  Cisco ABR type  |
    |  ibm  &emsp; |  IBM ABR type  |
    |  shortcut  &emsp; |  Shortcut ABR type  |
    |  standard  &emsp; |  Standard ABR type  |

`,

			// Default:          stringdefault.StaticString(`cisco`),
			Computed: true,
		},

		"opaque_lsa": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable the Opaque-LSA capability (rfc2370)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"rfc1583_compatibility": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable RFC1583 criteria for handling AS external routes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Router-ID in IP address format  |

`,
		},

		// Nodes

	}
}
