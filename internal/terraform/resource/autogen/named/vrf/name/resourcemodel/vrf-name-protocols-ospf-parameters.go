// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfParameters describes the resource data model.
type VrfNameProtocolsOspfParameters struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfParametersAbrType                           types.String `tfsdk:"abr_type" vyos:"abr-type,omitempty"`
	LeafVrfNameProtocolsOspfParametersOpaqueLsa                         types.String `tfsdk:"opaque_lsa" vyos:"opaque-lsa,omitempty"`
	LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility types.String `tfsdk:"rfc1583_compatibility" vyos:"rfc1583-compatibility,omitempty"`
	LeafVrfNameProtocolsOspfParametersRouterID                          types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfParameters) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"abr_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OSPF ABR type

    |  Format  |  Description  |
    |----------|---------------|
    |  cisco  |  Cisco ABR type  |
    |  ibm  |  IBM ABR type  |
    |  shortcut  |  Shortcut ABR type  |
    |  standard  |  Standard ABR type  |

`,

			// Default:          stringdefault.StaticString(`cisco`),
			Computed: true,
		},

		"opaque_lsa": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable the Opaque-LSA capability (rfc2370)

`,
		},

		"rfc1583_compatibility": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable RFC1583 criteria for handling AS external routes

`,
		},

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  Router-ID in IP address format  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfParameters) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfParametersAbrType.IsNull() && !o.LeafVrfNameProtocolsOspfParametersAbrType.IsUnknown() {
		jsonData["abr-type"] = o.LeafVrfNameProtocolsOspfParametersAbrType.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfParametersOpaqueLsa.IsNull() && !o.LeafVrfNameProtocolsOspfParametersOpaqueLsa.IsUnknown() {
		jsonData["opaque-lsa"] = o.LeafVrfNameProtocolsOspfParametersOpaqueLsa.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility.IsNull() && !o.LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility.IsUnknown() {
		jsonData["rfc1583-compatibility"] = o.LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfParametersRouterID.IsNull() && !o.LeafVrfNameProtocolsOspfParametersRouterID.IsUnknown() {
		jsonData["router-id"] = o.LeafVrfNameProtocolsOspfParametersRouterID.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfParameters) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["abr-type"]; ok {
		o.LeafVrfNameProtocolsOspfParametersAbrType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfParametersAbrType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["opaque-lsa"]; ok {
		o.LeafVrfNameProtocolsOspfParametersOpaqueLsa = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfParametersOpaqueLsa = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rfc1583-compatibility"]; ok {
		o.LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfParametersRfconefiveeightthreeCompatibility = basetypes.NewStringNull()
	}

	if value, ok := jsonData["router-id"]; ok {
		o.LeafVrfNameProtocolsOspfParametersRouterID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfParametersRouterID = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
