// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDVrfName any `tfsdk:"name" vyos:"name,parent-id"`

	// LeafNodes
	LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd    types.String `tfsdk:"rd" vyos:"rd,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel types.String `tfsdk:"label" vyos:"label,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork) GetVyosPath() []string {
	return []string{
		"vrf",
		"name",
		"protocols",
		"bgp",
		"address-family",
		"ipv6-vpn",
		"network",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Import BGP network/prefix into unicast VPN IPv6 RIB

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv6net  |  Unicast VPN IPv6 BGP network/prefix  |

`,
		},

		// LeafNodes

		"rd": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Route Distinguisher

    |  Format  |  Description  |
    |----------|---------------|
    |  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |

`,
		},

		"label": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `MPLS label value assigned to route

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-1048575  |  MPLS label value  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd.IsUnknown() {
		jsonData["rd"] = o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel.IsUnknown() {
		jsonData["label"] = o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixVpnNetwork) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["rd"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkRd = basetypes.NewStringNull()
	}

	if value, ok := jsonData["label"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvsixVpnNetworkLabel = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
