// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsIsisSegmentRoutingPrefixAbsolute describes the resource data model.
type VrfNameProtocolsIsisSegmentRoutingPrefixAbsolute struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue        types.String `tfsdk:"value" vyos:"value,omitempty"`
	LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull types.String `tfsdk:"explicit_null" vyos:"explicit-null,omitempty"`
	LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag    types.String `tfsdk:"no_php_flag" vyos:"no-php-flag,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisSegmentRoutingPrefixAbsolute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"value": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify the absolute value of prefix segment/label ID

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:16-1048575  |  The absolute segment/label ID value  |

`,
		},

		"explicit_null": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Request upstream neighbor to replace segment/label with explicit null label

`,
		},

		"no_php_flag": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not request penultimate hop popping for segment/label

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsisSegmentRoutingPrefixAbsolute) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue.IsNull() && !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue.IsUnknown() {
		jsonData["value"] = o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull.IsNull() && !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull.IsUnknown() {
		jsonData["explicit-null"] = o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag.IsNull() && !o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag.IsUnknown() {
		jsonData["no-php-flag"] = o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsisSegmentRoutingPrefixAbsolute) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["value"]; ok {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteValue = basetypes.NewStringNull()
	}

	if value, ok := jsonData["explicit-null"]; ok {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteExplicitNull = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-php-flag"]; ok {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSegmentRoutingPrefixAbsoluteNoPhpFlag = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
