// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsBfdPeer describes the resource data model.
type ProtocolsBfdPeer struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsBfdPeerProfile  types.String `tfsdk:"profile" json:"profile,omitempty"`
	LeafProtocolsBfdPeerEchoMode types.String `tfsdk:"echo_mode" json:"echo-mode,omitempty"`
	LeafProtocolsBfdPeerPassive  types.String `tfsdk:"passive" json:"passive,omitempty"`
	LeafProtocolsBfdPeerShutdown types.String `tfsdk:"shutdown" json:"shutdown,omitempty"`
	LeafProtocolsBfdPeerMultihop types.String `tfsdk:"multihop" json:"multihop,omitempty"`
	LeafProtocolsBfdPeerVrf      types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeProtocolsBfdPeerSource   *ProtocolsBfdPeerSource   `tfsdk:"source" json:"source,omitempty"`
	NodeProtocolsBfdPeerInterval *ProtocolsBfdPeerInterval `tfsdk:"interval" json:"interval,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBfdPeer) GetVyosPath() []string {
	return []string{
		"protocols",
		"bfd",
		"peer",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBfdPeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Configures BFD peer to listen and talk to

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  BFD peer IPv4 address  |
|  ipv6  |  BFD peer IPv6 address  |

`,
		},

		// LeafNodes

		"profile": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use settings from BFD profile

|  Format  |  Description  |
|----------|---------------|
|  txt  |  BFD profile name  |

`,
		},

		"echo_mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enables the echo transmission mode

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not attempt to start sessions

`,
		},

		"shutdown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable this peer

`,
		},

		"multihop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow this BFD peer to not be directly connected

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"source": schema.SingleNestedAttribute{
			Attributes: ProtocolsBfdPeerSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Bind listener to specified interface/address, mandatory for IPv6

`,
		},

		"interval": schema.SingleNestedAttribute{
			Attributes: ProtocolsBfdPeerInterval{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure timer intervals

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBfdPeer) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsBfdPeerProfile.IsNull() && !o.LeafProtocolsBfdPeerProfile.IsUnknown() {
		jsonData["profile"] = o.LeafProtocolsBfdPeerProfile.ValueString()
	}

	if !o.LeafProtocolsBfdPeerEchoMode.IsNull() && !o.LeafProtocolsBfdPeerEchoMode.IsUnknown() {
		jsonData["echo-mode"] = o.LeafProtocolsBfdPeerEchoMode.ValueString()
	}

	if !o.LeafProtocolsBfdPeerPassive.IsNull() && !o.LeafProtocolsBfdPeerPassive.IsUnknown() {
		jsonData["passive"] = o.LeafProtocolsBfdPeerPassive.ValueString()
	}

	if !o.LeafProtocolsBfdPeerShutdown.IsNull() && !o.LeafProtocolsBfdPeerShutdown.IsUnknown() {
		jsonData["shutdown"] = o.LeafProtocolsBfdPeerShutdown.ValueString()
	}

	if !o.LeafProtocolsBfdPeerMultihop.IsNull() && !o.LeafProtocolsBfdPeerMultihop.IsUnknown() {
		jsonData["multihop"] = o.LeafProtocolsBfdPeerMultihop.ValueString()
	}

	if !o.LeafProtocolsBfdPeerVrf.IsNull() && !o.LeafProtocolsBfdPeerVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafProtocolsBfdPeerVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsBfdPeerSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBfdPeerSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBfdPeerInterval).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBfdPeerInterval)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interval"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBfdPeer) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["profile"]; ok {
		o.LeafProtocolsBfdPeerProfile = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerProfile = basetypes.NewStringNull()
	}

	if value, ok := jsonData["echo-mode"]; ok {
		o.LeafProtocolsBfdPeerEchoMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerEchoMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafProtocolsBfdPeerPassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerPassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shutdown"]; ok {
		o.LeafProtocolsBfdPeerShutdown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerShutdown = basetypes.NewStringNull()
	}

	if value, ok := jsonData["multihop"]; ok {
		o.LeafProtocolsBfdPeerMultihop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerMultihop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafProtocolsBfdPeerVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBfdPeerVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBfdPeerSource = &ProtocolsBfdPeerSource{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBfdPeerSource)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["interval"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBfdPeerInterval = &ProtocolsBfdPeerInterval{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBfdPeerInterval)
		if err != nil {
			return err
		}
	}

	return nil
}
