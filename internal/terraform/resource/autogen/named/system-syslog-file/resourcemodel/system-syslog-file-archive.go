// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// SystemSyslogFileArchive describes the resource data model.
type SystemSyslogFileArchive struct {
	// LeafNodes
	LeafSystemSyslogFileArchiveFile types.String `tfsdk:"file"`
	LeafSystemSyslogFileArchiveSize types.String `tfsdk:"size"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *SystemSyslogFileArchive) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"system", "syslog", "file", "archive"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafSystemSyslogFileArchiveFile.IsNull() || o.LeafSystemSyslogFileArchiveFile.IsUnknown()) {
		vyosData["file"] = o.LeafSystemSyslogFileArchiveFile.ValueString()
	}
	if !(o.LeafSystemSyslogFileArchiveSize.IsNull() || o.LeafSystemSyslogFileArchiveSize.IsUnknown()) {
		vyosData["size"] = o.LeafSystemSyslogFileArchiveSize.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *SystemSyslogFileArchive) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"system", "syslog", "file", "archive"}})

	// Leafs
	if value, ok := vyosData["file"]; ok {
		o.LeafSystemSyslogFileArchiveFile = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemSyslogFileArchiveFile = basetypes.NewStringNull()
	}
	if value, ok := vyosData["size"]; ok {
		o.LeafSystemSyslogFileArchiveSize = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemSyslogFileArchiveSize = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"system", "syslog", "file", "archive"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o SystemSyslogFileArchive) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"file": types.StringType,
		"size": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogFileArchive) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"file": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of saved files (default is 5)

`,
		},

		"size": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Size of log files (in kbytes, default is 256)

`,
		},

		// TagNodes

		// Nodes

	}
}
