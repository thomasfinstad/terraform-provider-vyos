// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyFqCodel describes the resource data model.
type QosPolicyFqCodel struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyFqCodelDescrIPtion  types.String `tfsdk:"description" json:"description,omitempty"`
	LeafQosPolicyFqCodelCodelQuantum types.String `tfsdk:"codel_quantum" json:"codel-quantum,omitempty"`
	LeafQosPolicyFqCodelFlows        types.String `tfsdk:"flows" json:"flows,omitempty"`
	LeafQosPolicyFqCodelInterval     types.String `tfsdk:"interval" json:"interval,omitempty"`
	LeafQosPolicyFqCodelQueueLimit   types.String `tfsdk:"queue_limit" json:"queue-limit,omitempty"`
	LeafQosPolicyFqCodelTarget       types.String `tfsdk:"target" json:"target,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyFqCodel) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"fq-codel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyFqCodel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Fair Queuing (FQ) with Controlled Delay (CoDel)

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Upper limit of the queue

|  Format  |  Description  |
|----------|---------------|
|  u32:2-10999  |  Queue size in packets  |

`,

			// Default:          stringdefault.StaticString(`10240`),
			Computed: true,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyFqCodel) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyFqCodelDescrIPtion.IsNull() && !o.LeafQosPolicyFqCodelDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyFqCodelDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyFqCodelCodelQuantum.IsNull() && !o.LeafQosPolicyFqCodelCodelQuantum.IsUnknown() {
		jsonData["codel-quantum"] = o.LeafQosPolicyFqCodelCodelQuantum.ValueString()
	}

	if !o.LeafQosPolicyFqCodelFlows.IsNull() && !o.LeafQosPolicyFqCodelFlows.IsUnknown() {
		jsonData["flows"] = o.LeafQosPolicyFqCodelFlows.ValueString()
	}

	if !o.LeafQosPolicyFqCodelInterval.IsNull() && !o.LeafQosPolicyFqCodelInterval.IsUnknown() {
		jsonData["interval"] = o.LeafQosPolicyFqCodelInterval.ValueString()
	}

	if !o.LeafQosPolicyFqCodelQueueLimit.IsNull() && !o.LeafQosPolicyFqCodelQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyFqCodelQueueLimit.ValueString()
	}

	if !o.LeafQosPolicyFqCodelTarget.IsNull() && !o.LeafQosPolicyFqCodelTarget.IsUnknown() {
		jsonData["target"] = o.LeafQosPolicyFqCodelTarget.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyFqCodel) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyFqCodelDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["codel-quantum"]; ok {
		o.LeafQosPolicyFqCodelCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelCodelQuantum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["flows"]; ok {
		o.LeafQosPolicyFqCodelFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelFlows = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafQosPolicyFqCodelInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyFqCodelQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelQueueLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["target"]; ok {
		o.LeafQosPolicyFqCodelTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyFqCodelTarget = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
