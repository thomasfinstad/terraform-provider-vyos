// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernetVifSVifC describes the resource data model.
type InterfacesEthernetVifSVifC struct {
	// LeafNodes
	LeafInterfacesEthernetVifSVifCDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesEthernetVifSVifCAddress           types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesEthernetVifSVifCDisableLinkDetect types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesEthernetVifSVifCDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesEthernetVifSVifCMac               types.String `tfsdk:"mac" json:"mac,omitempty"`
	LeafInterfacesEthernetVifSVifCMtu               types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesEthernetVifSVifCRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesEthernetVifSVifCVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesEthernetVifSVifCDhcpOptions     *InterfacesEthernetVifSVifCDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesEthernetVifSVifCDhcpvsixOptions *InterfacesEthernetVifSVifCDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesEthernetVifSVifCIP              *InterfacesEthernetVifSVifCIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesEthernetVifSVifCIPvsix          *InterfacesEthernetVifSVifCIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesEthernetVifSVifCMirror          *InterfacesEthernetVifSVifCMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVifSVifC) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSVifCDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSVifCDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSVifCIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSVifCIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSVifCMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernetVifSVifC) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetVifSVifCDescrIPtion.IsNull() && !o.LeafInterfacesEthernetVifSVifCDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesEthernetVifSVifCDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCAddress.IsNull() && !o.LeafInterfacesEthernetVifSVifCAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesEthernetVifSVifCAddress.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCDisableLinkDetect.IsNull() && !o.LeafInterfacesEthernetVifSVifCDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesEthernetVifSVifCDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCDisable.IsNull() && !o.LeafInterfacesEthernetVifSVifCDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesEthernetVifSVifCDisable.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCMac.IsNull() && !o.LeafInterfacesEthernetVifSVifCMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesEthernetVifSVifCMac.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCMtu.IsNull() && !o.LeafInterfacesEthernetVifSVifCMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesEthernetVifSVifCMtu.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCRedirect.IsNull() && !o.LeafInterfacesEthernetVifSVifCRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesEthernetVifSVifCRedirect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifSVifCVrf.IsNull() && !o.LeafInterfacesEthernetVifSVifCVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesEthernetVifSVifCVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSVifCDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSVifCDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSVifCDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSVifCDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSVifCIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSVifCIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSVifCIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSVifCIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifSVifCMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifSVifCMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernetVifSVifC) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesEthernetVifSVifCDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesEthernetVifSVifCAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetVifSVifCDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesEthernetVifSVifCDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesEthernetVifSVifCMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesEthernetVifSVifCMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesEthernetVifSVifCRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesEthernetVifSVifCVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSVifCDhcpOptions = &InterfacesEthernetVifSVifCDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSVifCDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSVifCDhcpvsixOptions = &InterfacesEthernetVifSVifCDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSVifCDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSVifCIP = &InterfacesEthernetVifSVifCIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSVifCIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSVifCIPvsix = &InterfacesEthernetVifSVifCIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSVifCIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifSVifCMirror = &InterfacesEthernetVifSVifCMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifSVifCMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
