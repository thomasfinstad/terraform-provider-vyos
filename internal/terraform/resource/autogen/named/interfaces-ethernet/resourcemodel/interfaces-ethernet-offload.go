// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernetOffload describes the resource data model.
type InterfacesEthernetOffload struct {
	// LeafNodes
	LeafInterfacesEthernetOffloadGro types.String `tfsdk:"gro" json:"gro,omitempty"`
	LeafInterfacesEthernetOffloadGso types.String `tfsdk:"gso" json:"gso,omitempty"`
	LeafInterfacesEthernetOffloadLro types.String `tfsdk:"lro" json:"lro,omitempty"`
	LeafInterfacesEthernetOffloadRps types.String `tfsdk:"rps" json:"rps,omitempty"`
	LeafInterfacesEthernetOffloadRfs types.String `tfsdk:"rfs" json:"rfs,omitempty"`
	LeafInterfacesEthernetOffloadSg  types.String `tfsdk:"sg" json:"sg,omitempty"`
	LeafInterfacesEthernetOffloadTso types.String `tfsdk:"tso" json:"tso,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetOffload) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"gro": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Generic Receive Offload

`,
		},

		"gso": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Generic Segmentation Offload

`,
		},

		"lro": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Large Receive Offload

`,
		},

		"rps": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Receive Packet Steering

`,
		},

		"rfs": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Receive Flow Steering

`,
		},

		"sg": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable Scatter-Gather

`,
		},

		"tso": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable TCP Segmentation Offloading

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernetOffload) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetOffloadGro.IsNull() && !o.LeafInterfacesEthernetOffloadGro.IsUnknown() {
		jsonData["gro"] = o.LeafInterfacesEthernetOffloadGro.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadGso.IsNull() && !o.LeafInterfacesEthernetOffloadGso.IsUnknown() {
		jsonData["gso"] = o.LeafInterfacesEthernetOffloadGso.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadLro.IsNull() && !o.LeafInterfacesEthernetOffloadLro.IsUnknown() {
		jsonData["lro"] = o.LeafInterfacesEthernetOffloadLro.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadRps.IsNull() && !o.LeafInterfacesEthernetOffloadRps.IsUnknown() {
		jsonData["rps"] = o.LeafInterfacesEthernetOffloadRps.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadRfs.IsNull() && !o.LeafInterfacesEthernetOffloadRfs.IsUnknown() {
		jsonData["rfs"] = o.LeafInterfacesEthernetOffloadRfs.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadSg.IsNull() && !o.LeafInterfacesEthernetOffloadSg.IsUnknown() {
		jsonData["sg"] = o.LeafInterfacesEthernetOffloadSg.ValueString()
	}

	if !o.LeafInterfacesEthernetOffloadTso.IsNull() && !o.LeafInterfacesEthernetOffloadTso.IsUnknown() {
		jsonData["tso"] = o.LeafInterfacesEthernetOffloadTso.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernetOffload) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["gro"]; ok {
		o.LeafInterfacesEthernetOffloadGro = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadGro = basetypes.NewStringNull()
	}

	if value, ok := jsonData["gso"]; ok {
		o.LeafInterfacesEthernetOffloadGso = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadGso = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lro"]; ok {
		o.LeafInterfacesEthernetOffloadLro = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadLro = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rps"]; ok {
		o.LeafInterfacesEthernetOffloadRps = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadRps = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rfs"]; ok {
		o.LeafInterfacesEthernetOffloadRfs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadRfs = basetypes.NewStringNull()
	}

	if value, ok := jsonData["sg"]; ok {
		o.LeafInterfacesEthernetOffloadSg = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadSg = basetypes.NewStringNull()
	}

	if value, ok := jsonData["tso"]; ok {
		o.LeafInterfacesEthernetOffloadTso = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetOffloadTso = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
