// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesEthernetVifS describes the resource data model.
type InterfacesEthernetVifS struct {
	// LeafNodes
	LeafInterfacesEthernetVifSDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesEthernetVifSAddress           types.String `tfsdk:"address"`
	LeafInterfacesEthernetVifSDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesEthernetVifSDisable           types.String `tfsdk:"disable"`
	LeafInterfacesEthernetVifSProtocol          types.String `tfsdk:"protocol"`
	LeafInterfacesEthernetVifSMac               types.String `tfsdk:"mac"`
	LeafInterfacesEthernetVifSMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesEthernetVifSRedirect          types.String `tfsdk:"redirect"`
	LeafInterfacesEthernetVifSVrf               types.String `tfsdk:"vrf"`

	// TagNodes
	TagInterfacesEthernetVifSVifC types.Map `tfsdk:"vif_c"`

	// Nodes
	NodeInterfacesEthernetVifSDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesEthernetVifSDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesEthernetVifSIP              types.Object `tfsdk:"ip"`
	NodeInterfacesEthernetVifSIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesEthernetVifSMirror          types.Object `tfsdk:"mirror"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesEthernetVifS) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif-s"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesEthernetVifSDescrIPtion.IsNull() || o.LeafInterfacesEthernetVifSDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesEthernetVifSDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSAddress.IsNull() || o.LeafInterfacesEthernetVifSAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesEthernetVifSAddress.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSDisableLinkDetect.IsNull() || o.LeafInterfacesEthernetVifSDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesEthernetVifSDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSDisable.IsNull() || o.LeafInterfacesEthernetVifSDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesEthernetVifSDisable.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSProtocol.IsNull() || o.LeafInterfacesEthernetVifSProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafInterfacesEthernetVifSProtocol.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSMac.IsNull() || o.LeafInterfacesEthernetVifSMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesEthernetVifSMac.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSMtu.IsNull() || o.LeafInterfacesEthernetVifSMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesEthernetVifSMtu.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSRedirect.IsNull() || o.LeafInterfacesEthernetVifSRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesEthernetVifSRedirect.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifSVrf.IsNull() || o.LeafInterfacesEthernetVifSVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesEthernetVifSVrf.ValueString()
	}

	// Tags
	if !(o.TagInterfacesEthernetVifSVifC.IsNull() || o.TagInterfacesEthernetVifSVifC.IsUnknown()) {
		subModel := make(map[string]InterfacesEthernetVifSVifC)
		diags.Append(o.TagInterfacesEthernetVifSVifC.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif-c"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesEthernetVifSDhcpOptions.IsNull() || o.NodeInterfacesEthernetVifSDhcpOptions.IsUnknown()) {
		var subModel InterfacesEthernetVifSDhcpOptions
		diags.Append(o.NodeInterfacesEthernetVifSDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifSDhcpvsixOptions.IsNull() || o.NodeInterfacesEthernetVifSDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesEthernetVifSDhcpvsixOptions
		diags.Append(o.NodeInterfacesEthernetVifSDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifSIP.IsNull() || o.NodeInterfacesEthernetVifSIP.IsUnknown()) {
		var subModel InterfacesEthernetVifSIP
		diags.Append(o.NodeInterfacesEthernetVifSIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifSIPvsix.IsNull() || o.NodeInterfacesEthernetVifSIPvsix.IsUnknown()) {
		var subModel InterfacesEthernetVifSIPvsix
		diags.Append(o.NodeInterfacesEthernetVifSIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifSMirror.IsNull() || o.NodeInterfacesEthernetVifSMirror.IsUnknown()) {
		var subModel InterfacesEthernetVifSMirror
		diags.Append(o.NodeInterfacesEthernetVifSMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesEthernetVifS) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif-s"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesEthernetVifSDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesEthernetVifSAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetVifSDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesEthernetVifSDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafInterfacesEthernetVifSProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSProtocol = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesEthernetVifSMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesEthernetVifSMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesEthernetVifSRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesEthernetVifSVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vif-c"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesEthernetVifSVifC{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesEthernetVifSVifC = data
	} else {
		o.TagInterfacesEthernetVifSVifC = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifSDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifSDhcpOptions = data

	} else {
		o.NodeInterfacesEthernetVifSDhcpOptions = basetypes.NewObjectNull(InterfacesEthernetVifSDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifSDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifSDhcpvsixOptions = data

	} else {
		o.NodeInterfacesEthernetVifSDhcpvsixOptions = basetypes.NewObjectNull(InterfacesEthernetVifSDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifSIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifSIP = data

	} else {
		o.NodeInterfacesEthernetVifSIP = basetypes.NewObjectNull(InterfacesEthernetVifSIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifSIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifSIPvsix = data

	} else {
		o.NodeInterfacesEthernetVifSIPvsix = basetypes.NewObjectNull(InterfacesEthernetVifSIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifSMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifSMirror = data

	} else {
		o.NodeInterfacesEthernetVifSMirror = basetypes.NewObjectNull(InterfacesEthernetVifSMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif-s"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesEthernetVifS) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":         types.StringType,
		"address":             types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"protocol":            types.StringType,
		"mac":                 types.StringType,
		"mtu":                 types.StringType,
		"redirect":            types.StringType,
		"vrf":                 types.StringType,

		// Tags
		"vif_c": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesEthernetVifSVifC{}.AttributeTypes()}},

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesEthernetVifSDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesEthernetVifSDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesEthernetVifSIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesEthernetVifSIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesEthernetVifSMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVifS) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

|  Format  |  Description  |
|----------|---------------|
|  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
|  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |

`,

			// Default:          stringdefault.StaticString(`802.1ad`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"vif_c": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesEthernetVifSVifC{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifSMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
