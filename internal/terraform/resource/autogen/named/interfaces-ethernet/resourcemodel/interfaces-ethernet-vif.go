// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesEthernetVif describes the resource data model.
type InterfacesEthernetVif struct {
	// LeafNodes
	LeafInterfacesEthernetVifDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesEthernetVifAddress           types.String `tfsdk:"address"`
	LeafInterfacesEthernetVifDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesEthernetVifDisable           types.String `tfsdk:"disable"`
	LeafInterfacesEthernetVifEgressQos         types.String `tfsdk:"egress_qos"`
	LeafInterfacesEthernetVifIngressQos        types.String `tfsdk:"ingress_qos"`
	LeafInterfacesEthernetVifMac               types.String `tfsdk:"mac"`
	LeafInterfacesEthernetVifMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesEthernetVifRedirect          types.String `tfsdk:"redirect"`
	LeafInterfacesEthernetVifVrf               types.String `tfsdk:"vrf"`

	// TagNodes

	// Nodes
	NodeInterfacesEthernetVifDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesEthernetVifDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesEthernetVifIP              types.Object `tfsdk:"ip"`
	NodeInterfacesEthernetVifIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesEthernetVifMirror          types.Object `tfsdk:"mirror"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesEthernetVif) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesEthernetVifDescrIPtion.IsNull() || o.LeafInterfacesEthernetVifDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesEthernetVifDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifAddress.IsNull() || o.LeafInterfacesEthernetVifAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesEthernetVifAddress.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifDisableLinkDetect.IsNull() || o.LeafInterfacesEthernetVifDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesEthernetVifDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifDisable.IsNull() || o.LeafInterfacesEthernetVifDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesEthernetVifDisable.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifEgressQos.IsNull() || o.LeafInterfacesEthernetVifEgressQos.IsUnknown()) {
		vyosData["egress-qos"] = o.LeafInterfacesEthernetVifEgressQos.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifIngressQos.IsNull() || o.LeafInterfacesEthernetVifIngressQos.IsUnknown()) {
		vyosData["ingress-qos"] = o.LeafInterfacesEthernetVifIngressQos.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifMac.IsNull() || o.LeafInterfacesEthernetVifMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesEthernetVifMac.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifMtu.IsNull() || o.LeafInterfacesEthernetVifMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesEthernetVifMtu.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifRedirect.IsNull() || o.LeafInterfacesEthernetVifRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesEthernetVifRedirect.ValueString()
	}
	if !(o.LeafInterfacesEthernetVifVrf.IsNull() || o.LeafInterfacesEthernetVifVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesEthernetVifVrf.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesEthernetVifDhcpOptions.IsNull() || o.NodeInterfacesEthernetVifDhcpOptions.IsUnknown()) {
		var subModel InterfacesEthernetVifDhcpOptions
		diags.Append(o.NodeInterfacesEthernetVifDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifDhcpvsixOptions.IsNull() || o.NodeInterfacesEthernetVifDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesEthernetVifDhcpvsixOptions
		diags.Append(o.NodeInterfacesEthernetVifDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifIP.IsNull() || o.NodeInterfacesEthernetVifIP.IsUnknown()) {
		var subModel InterfacesEthernetVifIP
		diags.Append(o.NodeInterfacesEthernetVifIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifIPvsix.IsNull() || o.NodeInterfacesEthernetVifIPvsix.IsUnknown()) {
		var subModel InterfacesEthernetVifIPvsix
		diags.Append(o.NodeInterfacesEthernetVifIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesEthernetVifMirror.IsNull() || o.NodeInterfacesEthernetVifMirror.IsUnknown()) {
		var subModel InterfacesEthernetVifMirror
		diags.Append(o.NodeInterfacesEthernetVifMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesEthernetVif) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesEthernetVifDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesEthernetVifAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetVifDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesEthernetVifDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["egress-qos"]; ok {
		o.LeafInterfacesEthernetVifEgressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifEgressQos = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ingress-qos"]; ok {
		o.LeafInterfacesEthernetVifIngressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifIngressQos = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesEthernetVifMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesEthernetVifMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesEthernetVifRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesEthernetVifVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifDhcpOptions = data

	} else {
		o.NodeInterfacesEthernetVifDhcpOptions = basetypes.NewObjectNull(InterfacesEthernetVifDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifDhcpvsixOptions = data

	} else {
		o.NodeInterfacesEthernetVifDhcpvsixOptions = basetypes.NewObjectNull(InterfacesEthernetVifDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifIP = data

	} else {
		o.NodeInterfacesEthernetVifIP = basetypes.NewObjectNull(InterfacesEthernetVifIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifIPvsix = data

	} else {
		o.NodeInterfacesEthernetVifIPvsix = basetypes.NewObjectNull(InterfacesEthernetVifIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesEthernetVifMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesEthernetVifMirror = data

	} else {
		o.NodeInterfacesEthernetVifMirror = basetypes.NewObjectNull(InterfacesEthernetVifMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "ethernet", "vif"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesEthernetVif) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":         types.StringType,
		"address":             types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"egress_qos":          types.StringType,
		"ingress_qos":         types.StringType,
		"mac":                 types.StringType,
		"mtu":                 types.StringType,
		"redirect":            types.StringType,
		"vrf":                 types.StringType,

		// Tags

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesEthernetVifDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesEthernetVifDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesEthernetVifIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesEthernetVifIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesEthernetVifMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVif) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"egress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"ingress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
