// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernetVif describes the resource data model.
type InterfacesEthernetVif struct {
	// LeafNodes
	LeafInterfacesEthernetVifDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesEthernetVifAddress           types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesEthernetVifDisableLinkDetect types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesEthernetVifDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesEthernetVifEgressQos         types.String `tfsdk:"egress_qos" json:"egress-qos,omitempty"`
	LeafInterfacesEthernetVifIngressQos        types.String `tfsdk:"ingress_qos" json:"ingress-qos,omitempty"`
	LeafInterfacesEthernetVifMac               types.String `tfsdk:"mac" json:"mac,omitempty"`
	LeafInterfacesEthernetVifMtu               types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesEthernetVifRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesEthernetVifVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesEthernetVifDhcpOptions     *InterfacesEthernetVifDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesEthernetVifDhcpvsixOptions *InterfacesEthernetVifDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesEthernetVifIP              *InterfacesEthernetVifIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesEthernetVifIPvsix          *InterfacesEthernetVifIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesEthernetVifMirror          *InterfacesEthernetVifMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVif) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"egress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN egress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"ingress_qos": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VLAN ingress QoS

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Format for qos mapping, e.g.: '0:1 1:6 7:6'  |

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesEthernetVifMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernetVif) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetVifDescrIPtion.IsNull() && !o.LeafInterfacesEthernetVifDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesEthernetVifDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesEthernetVifAddress.IsNull() && !o.LeafInterfacesEthernetVifAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesEthernetVifAddress.ValueString()
	}

	if !o.LeafInterfacesEthernetVifDisableLinkDetect.IsNull() && !o.LeafInterfacesEthernetVifDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesEthernetVifDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifDisable.IsNull() && !o.LeafInterfacesEthernetVifDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesEthernetVifDisable.ValueString()
	}

	if !o.LeafInterfacesEthernetVifEgressQos.IsNull() && !o.LeafInterfacesEthernetVifEgressQos.IsUnknown() {
		jsonData["egress-qos"] = o.LeafInterfacesEthernetVifEgressQos.ValueString()
	}

	if !o.LeafInterfacesEthernetVifIngressQos.IsNull() && !o.LeafInterfacesEthernetVifIngressQos.IsUnknown() {
		jsonData["ingress-qos"] = o.LeafInterfacesEthernetVifIngressQos.ValueString()
	}

	if !o.LeafInterfacesEthernetVifMac.IsNull() && !o.LeafInterfacesEthernetVifMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesEthernetVifMac.ValueString()
	}

	if !o.LeafInterfacesEthernetVifMtu.IsNull() && !o.LeafInterfacesEthernetVifMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesEthernetVifMtu.ValueString()
	}

	if !o.LeafInterfacesEthernetVifRedirect.IsNull() && !o.LeafInterfacesEthernetVifRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesEthernetVifRedirect.ValueString()
	}

	if !o.LeafInterfacesEthernetVifVrf.IsNull() && !o.LeafInterfacesEthernetVifVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesEthernetVifVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesEthernetVifMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesEthernetVifMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernetVif) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesEthernetVifDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesEthernetVifAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesEthernetVifDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesEthernetVifDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["egress-qos"]; ok {
		o.LeafInterfacesEthernetVifEgressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifEgressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ingress-qos"]; ok {
		o.LeafInterfacesEthernetVifIngressQos = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifIngressQos = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesEthernetVifMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesEthernetVifMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesEthernetVifRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesEthernetVifVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifDhcpOptions = &InterfacesEthernetVifDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifDhcpvsixOptions = &InterfacesEthernetVifDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifIP = &InterfacesEthernetVifIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifIPvsix = &InterfacesEthernetVifIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesEthernetVifMirror = &InterfacesEthernetVifMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesEthernetVifMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
