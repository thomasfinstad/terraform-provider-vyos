// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesEthernetVifSVifCDhcpvsixOptionsPd describes the resource data model.
type InterfacesEthernetVifSVifCDhcpvsixOptionsPd struct {
	// LeafNodes
	LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength types.String `tfsdk:"length" json:"length,omitempty"`

	// TagNodes
	TagInterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface *map[string]InterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface `tfsdk:"interface" json:"interface,omitempty"`

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesEthernetVifSVifCDhcpvsixOptionsPd) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Request IPv6 prefix length from peer

|  Format  |  Description  |
|----------|---------------|
|  u32:32-64  |  Length of delegated prefix  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		// TagNodes

		"interface": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Delegate IPv6 prefix from provider to this interface

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesEthernetVifSVifCDhcpvsixOptionsPd) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength.IsNull() && !o.LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength.IsUnknown() {
		jsonData["length"] = o.LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagInterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interface"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesEthernetVifSVifCDhcpvsixOptionsPd) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["length"]; ok {
		o.LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesEthernetVifSVifCDhcpvsixOptionsPdLength = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface = &map[string]InterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesEthernetVifSVifCDhcpvsixOptionsPdInterface)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
