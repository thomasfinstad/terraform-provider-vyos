// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// SystemSyslogHost describes the resource data model.
type SystemSyslogHost struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafSystemSyslogHostPort types.String `tfsdk:"port"`

	// TagNodes
	TagSystemSyslogHostFacility types.Map `tfsdk:"facility"`

	// Nodes
	NodeSystemSyslogHostFormat types.Object `tfsdk:"format"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemSyslogHost) GetVyosPath() []string {
	return []string{
		"system",
		"syslog",
		"host",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *SystemSyslogHost) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"system", "syslog", "host"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafSystemSyslogHostPort.IsNull() || o.LeafSystemSyslogHostPort.IsUnknown()) {
		vyosData["port"] = o.LeafSystemSyslogHostPort.ValueString()
	}

	// Tags
	if !(o.TagSystemSyslogHostFacility.IsNull() || o.TagSystemSyslogHostFacility.IsUnknown()) {
		subModel := make(map[string]SystemSyslogHostFacility)
		diags.Append(o.TagSystemSyslogHostFacility.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["facility"] = subData
	}

	// Nodes
	if !(o.NodeSystemSyslogHostFormat.IsNull() || o.NodeSystemSyslogHostFormat.IsUnknown()) {
		var subModel SystemSyslogHostFormat
		diags.Append(o.NodeSystemSyslogHostFormat.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["format"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *SystemSyslogHost) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"system", "syslog", "host"}})

	// Leafs
	if value, ok := vyosData["port"]; ok {
		o.LeafSystemSyslogHostPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemSyslogHostPort = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["facility"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: SystemSyslogHostFacility{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagSystemSyslogHostFacility = data
	} else {
		o.TagSystemSyslogHostFacility = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["format"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, SystemSyslogHostFormat{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeSystemSyslogHostFormat = data

	} else {
		o.NodeSystemSyslogHostFormat = basetypes.NewObjectNull(SystemSyslogHostFormat{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"system", "syslog", "host"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o SystemSyslogHost) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"port": types.StringType,

		// Tags
		"facility": types.MapType{ElemType: types.ObjectType{AttrTypes: SystemSyslogHostFacility{}.AttributeTypes()}},

		// Nodes
		"format": types.ObjectType{AttrTypes: SystemSyslogHostFormat{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogHost) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Logging to a remote host

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Remote syslog server IPv4 address  |
|  hostname  |  Remote syslog server FQDN  |

`,
		},

		// LeafNodes

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		// TagNodes

		"facility": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: SystemSyslogHostFacility{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Facility for logging

|  Format  |  Description  |
|----------|---------------|
|  all  |  All facilities excluding "mark"  |
|  auth  |  Authentication and authorization  |
|  authpriv  |  Non-system authorization  |
|  cron  |  Cron daemon  |
|  daemon  |  System daemons  |
|  kern  |  Kernel  |
|  lpr  |  Line printer spooler  |
|  mail  |  Mail subsystem  |
|  mark  |  Timestamp  |
|  news  |  USENET subsystem  |
|  protocols  |  depricated will be set to local7  |
|  security  |  depricated will be set to auth  |
|  syslog  |  Authentication and authorization  |
|  user  |  Application processes  |
|  uucp  |  UUCP subsystem  |
|  local0  |  Local facility 0  |
|  local1  |  Local facility 1  |
|  local2  |  Local facility 2  |
|  local3  |  Local facility 3  |
|  local4  |  Local facility 4  |
|  local5  |  Local facility 5  |
|  local6  |  Local facility 6  |
|  local7  |  Local facility 7  |

`,
		},

		// Nodes

		"format": schema.SingleNestedAttribute{
			Attributes: SystemSyslogHostFormat{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Logging format

`,
		},
	}
}
