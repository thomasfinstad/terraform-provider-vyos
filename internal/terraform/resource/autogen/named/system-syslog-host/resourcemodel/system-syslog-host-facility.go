// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// SystemSyslogHostFacility describes the resource data model.
type SystemSyslogHostFacility struct {
	// LeafNodes
	LeafSystemSyslogHostFacilityProtocol types.String `tfsdk:"protocol" json:"protocol,omitempty"`
	LeafSystemSyslogHostFacilityLevel    types.String `tfsdk:"level" json:"level,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogHostFacility) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `syslog communication protocol

|  Format  |  Description  |
|----------|---------------|
|  udp  |  send log messages to remote syslog server over udp  |
|  tcp  |  send log messages to remote syslog server over tcp  |

`,
		},

		"level": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Logging level

|  Format  |  Description  |
|----------|---------------|
|  emerg  |  Emergency messages  |
|  alert  |  Urgent messages  |
|  crit  |  Critical messages  |
|  err  |  Error messages  |
|  warning  |  Warning messages  |
|  notice  |  Messages for further investigation  |
|  info  |  Informational messages  |
|  debug  |  Debug messages  |
|  all  |  Log everything  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *SystemSyslogHostFacility) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafSystemSyslogHostFacilityProtocol.IsNull() && !o.LeafSystemSyslogHostFacilityProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafSystemSyslogHostFacilityProtocol.ValueString()
	}

	if !o.LeafSystemSyslogHostFacilityLevel.IsNull() && !o.LeafSystemSyslogHostFacilityLevel.IsUnknown() {
		jsonData["level"] = o.LeafSystemSyslogHostFacilityLevel.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *SystemSyslogHostFacility) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["protocol"]; ok {
		o.LeafSystemSyslogHostFacilityProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemSyslogHostFacilityProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["level"]; ok {
		o.LeafSystemSyslogHostFacilityLevel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemSyslogHostFacilityLevel = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
