// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyPriorityQueueDefault describes the resource data model.
type QosPolicyPriorityQueueDefault struct {
	// LeafNodes
	LeafQosPolicyPriorityQueueDefaultCodelQuantum types.String `tfsdk:"codel_quantum" json:"codel-quantum,omitempty"`
	LeafQosPolicyPriorityQueueDefaultFlows        types.String `tfsdk:"flows" json:"flows,omitempty"`
	LeafQosPolicyPriorityQueueDefaultInterval     types.String `tfsdk:"interval" json:"interval,omitempty"`
	LeafQosPolicyPriorityQueueDefaultQueueLimit   types.String `tfsdk:"queue_limit" json:"queue-limit,omitempty"`
	LeafQosPolicyPriorityQueueDefaultQueueType    types.String `tfsdk:"queue_type" json:"queue-type,omitempty"`
	LeafQosPolicyPriorityQueueDefaultTarget       types.String `tfsdk:"target" json:"target,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyPriorityQueueDefault) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"queue_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |

`,

			// Default:          stringdefault.StaticString(`drop-tail`),
			Computed: true,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyPriorityQueueDefault) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyPriorityQueueDefaultCodelQuantum.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultCodelQuantum.IsUnknown() {
		jsonData["codel-quantum"] = o.LeafQosPolicyPriorityQueueDefaultCodelQuantum.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueDefaultFlows.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultFlows.IsUnknown() {
		jsonData["flows"] = o.LeafQosPolicyPriorityQueueDefaultFlows.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueDefaultInterval.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultInterval.IsUnknown() {
		jsonData["interval"] = o.LeafQosPolicyPriorityQueueDefaultInterval.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueDefaultQueueLimit.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyPriorityQueueDefaultQueueLimit.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueDefaultQueueType.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultQueueType.IsUnknown() {
		jsonData["queue-type"] = o.LeafQosPolicyPriorityQueueDefaultQueueType.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueDefaultTarget.IsNull() && !o.LeafQosPolicyPriorityQueueDefaultTarget.IsUnknown() {
		jsonData["target"] = o.LeafQosPolicyPriorityQueueDefaultTarget.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyPriorityQueueDefault) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["codel-quantum"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultCodelQuantum = basetypes.NewStringNull()
	}

	if value, ok := jsonData["flows"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultFlows = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultQueueLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-type"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultQueueType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultQueueType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["target"]; ok {
		o.LeafQosPolicyPriorityQueueDefaultTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDefaultTarget = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
