// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyPriorityQueueClassMatchEther describes the resource data model.
type QosPolicyPriorityQueueClassMatchEther struct {
	// LeafNodes
	LeafQosPolicyPriorityQueueClassMatchEtherDestination types.String `tfsdk:"destination" json:"destination,omitempty"`
	LeafQosPolicyPriorityQueueClassMatchEtherProtocol    types.String `tfsdk:"protocol" json:"protocol,omitempty"`
	LeafQosPolicyPriorityQueueClassMatchEtherSource      types.String `tfsdk:"source" json:"source,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyPriorityQueueClassMatchEther) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"destination": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ethernet destination address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ethernet protocol for this match

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Ethernet protocol number  |
|  txt  |  Ethernet protocol name  |
|  all  |  Any protocol  |
|  ip  |  Internet IP (IPv4)  |
|  ipv6  |  Internet IP (IPv6)  |
|  arp  |  Address Resolution Protocol  |
|  atalk  |  Appletalk  |
|  ipx  |  Novell Internet Packet Exchange  |
|  802.1Q  |  802.1Q VLAN tag  |

`,
		},

		"source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ethernet source address for this match

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  MAC address to match  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyPriorityQueueClassMatchEther) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyPriorityQueueClassMatchEtherDestination.IsNull() && !o.LeafQosPolicyPriorityQueueClassMatchEtherDestination.IsUnknown() {
		jsonData["destination"] = o.LeafQosPolicyPriorityQueueClassMatchEtherDestination.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueClassMatchEtherProtocol.IsNull() && !o.LeafQosPolicyPriorityQueueClassMatchEtherProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafQosPolicyPriorityQueueClassMatchEtherProtocol.ValueString()
	}

	if !o.LeafQosPolicyPriorityQueueClassMatchEtherSource.IsNull() && !o.LeafQosPolicyPriorityQueueClassMatchEtherSource.IsUnknown() {
		jsonData["source"] = o.LeafQosPolicyPriorityQueueClassMatchEtherSource.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyPriorityQueueClassMatchEther) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["destination"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchEtherDestination = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchEtherDestination = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchEtherProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchEtherProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchEtherSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchEtherSource = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
