// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyPriorityQueueClassMatchIP describes the resource data model.
type QosPolicyPriorityQueueClassMatchIP struct {
	// LeafNodes
	LeafQosPolicyPriorityQueueClassMatchIPDscp      types.String `tfsdk:"dscp"`
	LeafQosPolicyPriorityQueueClassMatchIPMaxLength types.String `tfsdk:"max_length"`
	LeafQosPolicyPriorityQueueClassMatchIPProtocol  types.String `tfsdk:"protocol"`

	// TagNodes

	// Nodes
	NodeQosPolicyPriorityQueueClassMatchIPDestination types.Object `tfsdk:"destination"`
	NodeQosPolicyPriorityQueueClassMatchIPSource      types.Object `tfsdk:"source"`
	NodeQosPolicyPriorityQueueClassMatchIPTCP         types.Object `tfsdk:"tcp"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyPriorityQueueClassMatchIP) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "priority-queue", "class", "match", "ip"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyPriorityQueueClassMatchIPDscp.IsNull() || o.LeafQosPolicyPriorityQueueClassMatchIPDscp.IsUnknown()) {
		vyosData["dscp"] = o.LeafQosPolicyPriorityQueueClassMatchIPDscp.ValueString()
	}
	if !(o.LeafQosPolicyPriorityQueueClassMatchIPMaxLength.IsNull() || o.LeafQosPolicyPriorityQueueClassMatchIPMaxLength.IsUnknown()) {
		vyosData["max-length"] = o.LeafQosPolicyPriorityQueueClassMatchIPMaxLength.ValueString()
	}
	if !(o.LeafQosPolicyPriorityQueueClassMatchIPProtocol.IsNull() || o.LeafQosPolicyPriorityQueueClassMatchIPProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafQosPolicyPriorityQueueClassMatchIPProtocol.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeQosPolicyPriorityQueueClassMatchIPDestination.IsNull() || o.NodeQosPolicyPriorityQueueClassMatchIPDestination.IsUnknown()) {
		var subModel QosPolicyPriorityQueueClassMatchIPDestination
		diags.Append(o.NodeQosPolicyPriorityQueueClassMatchIPDestination.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["destination"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeQosPolicyPriorityQueueClassMatchIPSource.IsNull() || o.NodeQosPolicyPriorityQueueClassMatchIPSource.IsUnknown()) {
		var subModel QosPolicyPriorityQueueClassMatchIPSource
		diags.Append(o.NodeQosPolicyPriorityQueueClassMatchIPSource.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["source"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeQosPolicyPriorityQueueClassMatchIPTCP.IsNull() || o.NodeQosPolicyPriorityQueueClassMatchIPTCP.IsUnknown()) {
		var subModel QosPolicyPriorityQueueClassMatchIPTCP
		diags.Append(o.NodeQosPolicyPriorityQueueClassMatchIPTCP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["tcp"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyPriorityQueueClassMatchIP) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "priority-queue", "class", "match", "ip"}})

	// Leafs
	if value, ok := vyosData["dscp"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchIPDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchIPDscp = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-length"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchIPMaxLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchIPMaxLength = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafQosPolicyPriorityQueueClassMatchIPProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueClassMatchIPProtocol = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["destination"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyPriorityQueueClassMatchIPDestination{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyPriorityQueueClassMatchIPDestination = data

	} else {
		o.NodeQosPolicyPriorityQueueClassMatchIPDestination = basetypes.NewObjectNull(QosPolicyPriorityQueueClassMatchIPDestination{}.AttributeTypes())
	}
	if value, ok := vyosData["source"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyPriorityQueueClassMatchIPSource{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyPriorityQueueClassMatchIPSource = data

	} else {
		o.NodeQosPolicyPriorityQueueClassMatchIPSource = basetypes.NewObjectNull(QosPolicyPriorityQueueClassMatchIPSource{}.AttributeTypes())
	}
	if value, ok := vyosData["tcp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyPriorityQueueClassMatchIPTCP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyPriorityQueueClassMatchIPTCP = data

	} else {
		o.NodeQosPolicyPriorityQueueClassMatchIPTCP = basetypes.NewObjectNull(QosPolicyPriorityQueueClassMatchIPTCP{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "priority-queue", "class", "match", "ip"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyPriorityQueueClassMatchIP) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"dscp":       types.StringType,
		"max_length": types.StringType,
		"protocol":   types.StringType,

		// Tags

		// Nodes
		"destination": types.ObjectType{AttrTypes: QosPolicyPriorityQueueClassMatchIPDestination{}.AttributeTypes()},
		"source":      types.ObjectType{AttrTypes: QosPolicyPriorityQueueClassMatchIPSource{}.AttributeTypes()},
		"tcp":         types.ObjectType{AttrTypes: QosPolicyPriorityQueueClassMatchIPTCP{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyPriorityQueueClassMatchIP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Match on Differentiated Services Codepoint (DSCP)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-63  |  Differentiated Services Codepoint (DSCP) value   |
|  default  |  match DSCP (000000)  |
|  reliability  |  match DSCP (000001)  |
|  throughput  |  match DSCP (000010)  |
|  lowdelay  |  match DSCP (000100)  |
|  priority  |  match DSCP (001000)  |
|  immediate  |  match DSCP (010000)  |
|  flash  |  match DSCP (011000)  |
|  flash-override  |  match DSCP (100000)  |
|  critical  |  match DSCP (101000)  |
|  internet  |  match DSCP (110000)  |
|  network  |  match DSCP (111000)  |
|  AF11  |  High-throughput data  |
|  AF12  |  High-throughput data  |
|  AF13  |  High-throughput data  |
|  AF21  |  Low-latency data  |
|  AF22  |  Low-latency data  |
|  AF23  |  Low-latency data  |
|  AF31  |  Multimedia streaming  |
|  AF32  |  Multimedia streaming  |
|  AF33  |  Multimedia streaming  |
|  AF41  |  Multimedia conferencing  |
|  AF42  |  Multimedia conferencing  |
|  AF43  |  Multimedia conferencing  |
|  CS1  |  Low-priority data  |
|  CS2  |  OAM  |
|  CS3  |  Broadcast video  |
|  CS4  |  Real-time interactive  |
|  CS5  |  Signaling  |
|  CS6  |  Network control  |
|  CS7  |    |
|  EF  |  Expedited Forwarding  |

`,
		},

		"max_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum packet length

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Maximum packet/payload length  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Protocol name  |

`,
		},

		// TagNodes

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: QosPolicyPriorityQueueClassMatchIPDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on destination port or address

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: QosPolicyPriorityQueueClassMatchIPSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match on source port or address

`,
		},

		"tcp": schema.SingleNestedAttribute{
			Attributes: QosPolicyPriorityQueueClassMatchIPTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP Flags matching

`,
		},
	}
}
