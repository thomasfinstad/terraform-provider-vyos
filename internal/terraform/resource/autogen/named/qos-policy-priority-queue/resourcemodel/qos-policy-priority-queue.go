// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyPriorityQueue describes the resource data model.
type QosPolicyPriorityQueue struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyPriorityQueueDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes
	TagQosPolicyPriorityQueueClass *map[string]QosPolicyPriorityQueueClass `tfsdk:"class" json:"class,omitempty"`

	// Nodes
	NodeQosPolicyPriorityQueueDefault *QosPolicyPriorityQueueDefault `tfsdk:"default" json:"default,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyPriorityQueue) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"priority-queue",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyPriorityQueue) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Priority queuing based policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"class": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: QosPolicyPriorityQueueClass{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Class Handle

|  Format  |  Description  |
|----------|---------------|
|  u32:1-7  |  Priority  |

`,
		},

		// Nodes

		"default": schema.SingleNestedAttribute{
			Attributes: QosPolicyPriorityQueueDefault{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Default policy

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyPriorityQueue) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyPriorityQueueDescrIPtion.IsNull() && !o.LeafQosPolicyPriorityQueueDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyPriorityQueueDescrIPtion.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagQosPolicyPriorityQueueClass).IsZero() {
		subJSONStr, err := json.Marshal(o.TagQosPolicyPriorityQueueClass)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["class"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeQosPolicyPriorityQueueDefault).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeQosPolicyPriorityQueueDefault)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["default"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyPriorityQueue) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyPriorityQueueDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyPriorityQueueDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["class"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagQosPolicyPriorityQueueClass = &map[string]QosPolicyPriorityQueueClass{}

		err = json.Unmarshal(subJSONStr, o.TagQosPolicyPriorityQueueClass)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["default"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeQosPolicyPriorityQueueDefault = &QosPolicyPriorityQueueDefault{}

		err = json.Unmarshal(subJSONStr, o.NodeQosPolicyPriorityQueueDefault)
		if err != nil {
			return err
		}
	}

	return nil
}
