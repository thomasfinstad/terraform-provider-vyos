// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsStaticArpInterface describes the resource data model.
type ProtocolsStaticArpInterface struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes
	TagProtocolsStaticArpInterfaceAddress types.Map `tfsdk:"address"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsStaticArpInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"static",
		"arp",
		"interface",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsStaticArpInterface) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "static", "arp", "interface"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags
	if !(o.TagProtocolsStaticArpInterfaceAddress.IsNull() || o.TagProtocolsStaticArpInterfaceAddress.IsUnknown()) {
		subModel := make(map[string]ProtocolsStaticArpInterfaceAddress)
		diags.Append(o.TagProtocolsStaticArpInterfaceAddress.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["address"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsStaticArpInterface) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "static", "arp", "interface"}})

	// Leafs

	// Tags
	if value, ok := vyosData["address"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ProtocolsStaticArpInterfaceAddress{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagProtocolsStaticArpInterfaceAddress = data
	} else {
		o.TagProtocolsStaticArpInterfaceAddress = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "static", "arp", "interface"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsStaticArpInterface) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags
		"address": types.MapType{ElemType: types.ObjectType{AttrTypes: ProtocolsStaticArpInterfaceAddress{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticArpInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface configuration

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		// LeafNodes

		// TagNodes

		"address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticArpInterfaceAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `IP address for static ARP entry

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 destination address  |

`,
		},

		// Nodes

	}
}
