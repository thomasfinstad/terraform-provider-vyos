// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnOpenconnectAuthenticationRadiusServer describes the resource data model.
type VpnOpenconnectAuthenticationRadiusServer struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafVpnOpenconnectAuthenticationRadiusServerDisable types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafVpnOpenconnectAuthenticationRadiusServerKey     types.String `tfsdk:"key" json:"key,omitempty"`
	LeafVpnOpenconnectAuthenticationRadiusServerPort    types.String `tfsdk:"port" json:"port,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnOpenconnectAuthenticationRadiusServer) GetVyosPath() []string {
	return []string{
		"vpn",
		"openconnect",
		"authentication",
		"radius",
		"server",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnOpenconnectAuthenticationRadiusServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `RADIUS server configuration

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  RADIUS server IPv4 address  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Shared secret key

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,

			// Default:          stringdefault.StaticString(`1812`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnOpenconnectAuthenticationRadiusServer) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnOpenconnectAuthenticationRadiusServerDisable.IsNull() && !o.LeafVpnOpenconnectAuthenticationRadiusServerDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVpnOpenconnectAuthenticationRadiusServerDisable.ValueString()
	}

	if !o.LeafVpnOpenconnectAuthenticationRadiusServerKey.IsNull() && !o.LeafVpnOpenconnectAuthenticationRadiusServerKey.IsUnknown() {
		jsonData["key"] = o.LeafVpnOpenconnectAuthenticationRadiusServerKey.ValueString()
	}

	if !o.LeafVpnOpenconnectAuthenticationRadiusServerPort.IsNull() && !o.LeafVpnOpenconnectAuthenticationRadiusServerPort.IsUnknown() {
		jsonData["port"] = o.LeafVpnOpenconnectAuthenticationRadiusServerPort.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnOpenconnectAuthenticationRadiusServer) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVpnOpenconnectAuthenticationRadiusServerDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationRadiusServerDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["key"]; ok {
		o.LeafVpnOpenconnectAuthenticationRadiusServerKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationRadiusServerKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafVpnOpenconnectAuthenticationRadiusServerPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnOpenconnectAuthenticationRadiusServerPort = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
