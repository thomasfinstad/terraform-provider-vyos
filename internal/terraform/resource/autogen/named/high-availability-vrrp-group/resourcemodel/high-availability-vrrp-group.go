// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// HighAvailabilityVrrpGroup describes the resource data model.
type HighAvailabilityVrrpGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafHighAvailabilityVrrpGroupInterface                          types.String `tfsdk:"interface" json:"interface,omitempty"`
	LeafHighAvailabilityVrrpGroupAdvertiseInterval                  types.String `tfsdk:"advertise_interval" json:"advertise-interval,omitempty"`
	LeafHighAvailabilityVrrpGroupDescrIPtion                        types.String `tfsdk:"description" json:"description,omitempty"`
	LeafHighAvailabilityVrrpGroupDisable                            types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafHighAvailabilityVrrpGroupHelloSourceAddress                 types.String `tfsdk:"hello_source_address" json:"hello-source-address,omitempty"`
	LeafHighAvailabilityVrrpGroupPeerAddress                        types.String `tfsdk:"peer_address" json:"peer-address,omitempty"`
	LeafHighAvailabilityVrrpGroupNoPreempt                          types.String `tfsdk:"no_preempt" json:"no-preempt,omitempty"`
	LeafHighAvailabilityVrrpGroupPreemptDelay                       types.String `tfsdk:"preempt_delay" json:"preempt-delay,omitempty"`
	LeafHighAvailabilityVrrpGroupPriority                           types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility types.String `tfsdk:"rfc3768_compatibility" json:"rfc3768-compatibility,omitempty"`
	LeafHighAvailabilityVrrpGroupExcludedAddress                    types.String `tfsdk:"excluded_address" json:"excluded-address,omitempty"`
	LeafHighAvailabilityVrrpGroupVrID                               types.String `tfsdk:"vrid" json:"vrid,omitempty"`

	// TagNodes
	TagHighAvailabilityVrrpGroupAddress *map[string]HighAvailabilityVrrpGroupAddress `tfsdk:"address" json:"address,omitempty"`

	// Nodes
	NodeHighAvailabilityVrrpGroupGarp             *HighAvailabilityVrrpGroupGarp             `tfsdk:"garp" json:"garp,omitempty"`
	NodeHighAvailabilityVrrpGroupAuthentication   *HighAvailabilityVrrpGroupAuthentication   `tfsdk:"authentication" json:"authentication,omitempty"`
	NodeHighAvailabilityVrrpGroupHealthCheck      *HighAvailabilityVrrpGroupHealthCheck      `tfsdk:"health_check" json:"health-check,omitempty"`
	NodeHighAvailabilityVrrpGroupTrack            *HighAvailabilityVrrpGroupTrack            `tfsdk:"track" json:"track,omitempty"`
	NodeHighAvailabilityVrrpGroupTransitionScrIPt *HighAvailabilityVrrpGroupTransitionScrIPt `tfsdk:"transition_script" json:"transition-script,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *HighAvailabilityVrrpGroup) GetVyosPath() []string {
	return []string{
		"high-availability",
		"vrrp",
		"group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `VRRP group

`,
		},

		// LeafNodes

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface Name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		"advertise_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Advertise interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"hello_source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRRP hello source address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 hello source address  |
|  ipv6  |  IPv6 hello source address  |

`,
		},

		"peer_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Unicast VRRP peer address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 unicast peer address  |
|  ipv6  |  IPv6 unicast peer address  |

`,
		},

		"no_preempt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable master preemption

`,
		},

		"preempt_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Preempt delay (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1000  |  preempt delay  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Router priority  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"rfc3768_compatibility": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use VRRP virtual MAC address as per RFC3768

`,
		},

		"excluded_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual address (If you need additional IPv4 and IPv6 in same group)

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |
|  ipv6  |  IPv6 address  |

`,
		},

		"vrid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual router identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Virtual router identifier  |

`,
		},

		// TagNodes

		"address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: HighAvailabilityVrrpGroupAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		// Nodes

		"garp": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupGarp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Gratuitous ARP parameters

`,
		},

		"authentication": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP authentication

`,
		},

		"health_check": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupHealthCheck{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Health check script

`,
		},

		"track": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupTrack{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Track settings

`,
		},

		"transition_script": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupTransitionScrIPt{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP transition scripts

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *HighAvailabilityVrrpGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafHighAvailabilityVrrpGroupInterface.IsNull() && !o.LeafHighAvailabilityVrrpGroupInterface.IsUnknown() {
		jsonData["interface"] = o.LeafHighAvailabilityVrrpGroupInterface.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.IsNull() && !o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.IsUnknown() {
		jsonData["advertise-interval"] = o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupDescrIPtion.IsNull() && !o.LeafHighAvailabilityVrrpGroupDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafHighAvailabilityVrrpGroupDescrIPtion.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupDisable.IsNull() && !o.LeafHighAvailabilityVrrpGroupDisable.IsUnknown() {
		jsonData["disable"] = o.LeafHighAvailabilityVrrpGroupDisable.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.IsNull() && !o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.IsUnknown() {
		jsonData["hello-source-address"] = o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupPeerAddress.IsNull() && !o.LeafHighAvailabilityVrrpGroupPeerAddress.IsUnknown() {
		jsonData["peer-address"] = o.LeafHighAvailabilityVrrpGroupPeerAddress.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupNoPreempt.IsNull() && !o.LeafHighAvailabilityVrrpGroupNoPreempt.IsUnknown() {
		jsonData["no-preempt"] = o.LeafHighAvailabilityVrrpGroupNoPreempt.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupPreemptDelay.IsNull() && !o.LeafHighAvailabilityVrrpGroupPreemptDelay.IsUnknown() {
		jsonData["preempt-delay"] = o.LeafHighAvailabilityVrrpGroupPreemptDelay.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupPriority.IsNull() && !o.LeafHighAvailabilityVrrpGroupPriority.IsUnknown() {
		jsonData["priority"] = o.LeafHighAvailabilityVrrpGroupPriority.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.IsNull() && !o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.IsUnknown() {
		jsonData["rfc3768-compatibility"] = o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupExcludedAddress.IsNull() && !o.LeafHighAvailabilityVrrpGroupExcludedAddress.IsUnknown() {
		jsonData["excluded-address"] = o.LeafHighAvailabilityVrrpGroupExcludedAddress.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupVrID.IsNull() && !o.LeafHighAvailabilityVrrpGroupVrID.IsUnknown() {
		jsonData["vrid"] = o.LeafHighAvailabilityVrrpGroupVrID.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagHighAvailabilityVrrpGroupAddress).IsZero() {
		subJSONStr, err := json.Marshal(o.TagHighAvailabilityVrrpGroupAddress)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["address"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpGroupGarp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpGroupGarp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["garp"] = subData
	}

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpGroupAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpGroupAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpGroupHealthCheck).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpGroupHealthCheck)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["health-check"] = subData
	}

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpGroupTrack).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpGroupTrack)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["track"] = subData
	}

	if !reflect.ValueOf(o.NodeHighAvailabilityVrrpGroupTransitionScrIPt).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeHighAvailabilityVrrpGroupTransitionScrIPt)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["transition-script"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *HighAvailabilityVrrpGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["interface"]; ok {
		o.LeafHighAvailabilityVrrpGroupInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["advertise-interval"]; ok {
		o.LeafHighAvailabilityVrrpGroupAdvertiseInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupAdvertiseInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafHighAvailabilityVrrpGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafHighAvailabilityVrrpGroupDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-source-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupHelloSourceAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupHelloSourceAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["peer-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupPeerAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPeerAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-preempt"]; ok {
		o.LeafHighAvailabilityVrrpGroupNoPreempt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupNoPreempt = basetypes.NewStringNull()
	}

	if value, ok := jsonData["preempt-delay"]; ok {
		o.LeafHighAvailabilityVrrpGroupPreemptDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPreemptDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafHighAvailabilityVrrpGroupPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rfc3768-compatibility"]; ok {
		o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility = basetypes.NewStringNull()
	}

	if value, ok := jsonData["excluded-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupExcludedAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupExcludedAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrid"]; ok {
		o.LeafHighAvailabilityVrrpGroupVrID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupVrID = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["address"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagHighAvailabilityVrrpGroupAddress = &map[string]HighAvailabilityVrrpGroupAddress{}

		err = json.Unmarshal(subJSONStr, o.TagHighAvailabilityVrrpGroupAddress)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["garp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpGroupGarp = &HighAvailabilityVrrpGroupGarp{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpGroupGarp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpGroupAuthentication = &HighAvailabilityVrrpGroupAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpGroupAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["health-check"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpGroupHealthCheck = &HighAvailabilityVrrpGroupHealthCheck{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpGroupHealthCheck)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["track"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpGroupTrack = &HighAvailabilityVrrpGroupTrack{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpGroupTrack)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["transition-script"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeHighAvailabilityVrrpGroupTransitionScrIPt = &HighAvailabilityVrrpGroupTransitionScrIPt{}

		err = json.Unmarshal(subJSONStr, o.NodeHighAvailabilityVrrpGroupTransitionScrIPt)
		if err != nil {
			return err
		}
	}

	return nil
}
