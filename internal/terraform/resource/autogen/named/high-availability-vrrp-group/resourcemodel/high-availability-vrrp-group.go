// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// HighAvailabilityVrrpGroup describes the resource data model.
type HighAvailabilityVrrpGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafHighAvailabilityVrrpGroupInterface                          types.String `tfsdk:"interface"`
	LeafHighAvailabilityVrrpGroupAdvertiseInterval                  types.String `tfsdk:"advertise_interval"`
	LeafHighAvailabilityVrrpGroupDescrIPtion                        types.String `tfsdk:"description"`
	LeafHighAvailabilityVrrpGroupDisable                            types.String `tfsdk:"disable"`
	LeafHighAvailabilityVrrpGroupHelloSourceAddress                 types.String `tfsdk:"hello_source_address"`
	LeafHighAvailabilityVrrpGroupPeerAddress                        types.String `tfsdk:"peer_address"`
	LeafHighAvailabilityVrrpGroupNoPreempt                          types.String `tfsdk:"no_preempt"`
	LeafHighAvailabilityVrrpGroupPreemptDelay                       types.String `tfsdk:"preempt_delay"`
	LeafHighAvailabilityVrrpGroupPriority                           types.String `tfsdk:"priority"`
	LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility types.String `tfsdk:"rfc3768_compatibility"`
	LeafHighAvailabilityVrrpGroupExcludedAddress                    types.String `tfsdk:"excluded_address"`
	LeafHighAvailabilityVrrpGroupVrID                               types.String `tfsdk:"vrid"`

	// TagNodes
	TagHighAvailabilityVrrpGroupAddress types.Map `tfsdk:"address"`

	// Nodes
	NodeHighAvailabilityVrrpGroupGarp             types.Object `tfsdk:"garp"`
	NodeHighAvailabilityVrrpGroupAuthentication   types.Object `tfsdk:"authentication"`
	NodeHighAvailabilityVrrpGroupHealthCheck      types.Object `tfsdk:"health_check"`
	NodeHighAvailabilityVrrpGroupTrack            types.Object `tfsdk:"track"`
	NodeHighAvailabilityVrrpGroupTransitionScrIPt types.Object `tfsdk:"transition_script"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *HighAvailabilityVrrpGroup) GetVyosPath() []string {
	return []string{
		"high-availability",
		"vrrp",
		"group",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *HighAvailabilityVrrpGroup) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafHighAvailabilityVrrpGroupInterface.IsNull() || o.LeafHighAvailabilityVrrpGroupInterface.IsUnknown()) {
		vyosData["interface"] = o.LeafHighAvailabilityVrrpGroupInterface.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.IsNull() || o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.IsUnknown()) {
		vyosData["advertise-interval"] = o.LeafHighAvailabilityVrrpGroupAdvertiseInterval.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupDescrIPtion.IsNull() || o.LeafHighAvailabilityVrrpGroupDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafHighAvailabilityVrrpGroupDescrIPtion.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupDisable.IsNull() || o.LeafHighAvailabilityVrrpGroupDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafHighAvailabilityVrrpGroupDisable.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.IsNull() || o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.IsUnknown()) {
		vyosData["hello-source-address"] = o.LeafHighAvailabilityVrrpGroupHelloSourceAddress.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupPeerAddress.IsNull() || o.LeafHighAvailabilityVrrpGroupPeerAddress.IsUnknown()) {
		vyosData["peer-address"] = o.LeafHighAvailabilityVrrpGroupPeerAddress.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupNoPreempt.IsNull() || o.LeafHighAvailabilityVrrpGroupNoPreempt.IsUnknown()) {
		vyosData["no-preempt"] = o.LeafHighAvailabilityVrrpGroupNoPreempt.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupPreemptDelay.IsNull() || o.LeafHighAvailabilityVrrpGroupPreemptDelay.IsUnknown()) {
		vyosData["preempt-delay"] = o.LeafHighAvailabilityVrrpGroupPreemptDelay.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupPriority.IsNull() || o.LeafHighAvailabilityVrrpGroupPriority.IsUnknown()) {
		vyosData["priority"] = o.LeafHighAvailabilityVrrpGroupPriority.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.IsNull() || o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.IsUnknown()) {
		vyosData["rfc3768-compatibility"] = o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupExcludedAddress.IsNull() || o.LeafHighAvailabilityVrrpGroupExcludedAddress.IsUnknown()) {
		vyosData["excluded-address"] = o.LeafHighAvailabilityVrrpGroupExcludedAddress.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupVrID.IsNull() || o.LeafHighAvailabilityVrrpGroupVrID.IsUnknown()) {
		vyosData["vrid"] = o.LeafHighAvailabilityVrrpGroupVrID.ValueString()
	}

	// Tags
	if !(o.TagHighAvailabilityVrrpGroupAddress.IsNull() || o.TagHighAvailabilityVrrpGroupAddress.IsUnknown()) {
		subModel := make(map[string]HighAvailabilityVrrpGroupAddress)
		diags.Append(o.TagHighAvailabilityVrrpGroupAddress.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["address"] = subData
	}

	// Nodes
	if !(o.NodeHighAvailabilityVrrpGroupGarp.IsNull() || o.NodeHighAvailabilityVrrpGroupGarp.IsUnknown()) {
		var subModel HighAvailabilityVrrpGroupGarp
		diags.Append(o.NodeHighAvailabilityVrrpGroupGarp.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["garp"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeHighAvailabilityVrrpGroupAuthentication.IsNull() || o.NodeHighAvailabilityVrrpGroupAuthentication.IsUnknown()) {
		var subModel HighAvailabilityVrrpGroupAuthentication
		diags.Append(o.NodeHighAvailabilityVrrpGroupAuthentication.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["authentication"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeHighAvailabilityVrrpGroupHealthCheck.IsNull() || o.NodeHighAvailabilityVrrpGroupHealthCheck.IsUnknown()) {
		var subModel HighAvailabilityVrrpGroupHealthCheck
		diags.Append(o.NodeHighAvailabilityVrrpGroupHealthCheck.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["health-check"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeHighAvailabilityVrrpGroupTrack.IsNull() || o.NodeHighAvailabilityVrrpGroupTrack.IsUnknown()) {
		var subModel HighAvailabilityVrrpGroupTrack
		diags.Append(o.NodeHighAvailabilityVrrpGroupTrack.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["track"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeHighAvailabilityVrrpGroupTransitionScrIPt.IsNull() || o.NodeHighAvailabilityVrrpGroupTransitionScrIPt.IsUnknown()) {
		var subModel HighAvailabilityVrrpGroupTransitionScrIPt
		diags.Append(o.NodeHighAvailabilityVrrpGroupTransitionScrIPt.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["transition-script"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *HighAvailabilityVrrpGroup) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group"}})

	// Leafs
	if value, ok := vyosData["interface"]; ok {
		o.LeafHighAvailabilityVrrpGroupInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupInterface = basetypes.NewStringNull()
	}
	if value, ok := vyosData["advertise-interval"]; ok {
		o.LeafHighAvailabilityVrrpGroupAdvertiseInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupAdvertiseInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafHighAvailabilityVrrpGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafHighAvailabilityVrrpGroupDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-source-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupHelloSourceAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupHelloSourceAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["peer-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupPeerAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPeerAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-preempt"]; ok {
		o.LeafHighAvailabilityVrrpGroupNoPreempt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupNoPreempt = basetypes.NewStringNull()
	}
	if value, ok := vyosData["preempt-delay"]; ok {
		o.LeafHighAvailabilityVrrpGroupPreemptDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPreemptDelay = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafHighAvailabilityVrrpGroupPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupPriority = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rfc3768-compatibility"]; ok {
		o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupRfcthreesevensixeightCompatibility = basetypes.NewStringNull()
	}
	if value, ok := vyosData["excluded-address"]; ok {
		o.LeafHighAvailabilityVrrpGroupExcludedAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupExcludedAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrid"]; ok {
		o.LeafHighAvailabilityVrrpGroupVrID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupVrID = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["address"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupAddress{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagHighAvailabilityVrrpGroupAddress = data
	} else {
		o.TagHighAvailabilityVrrpGroupAddress = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["garp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpGroupGarp{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpGroupGarp = data

	} else {
		o.NodeHighAvailabilityVrrpGroupGarp = basetypes.NewObjectNull(HighAvailabilityVrrpGroupGarp{}.AttributeTypes())
	}
	if value, ok := vyosData["authentication"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpGroupAuthentication{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpGroupAuthentication = data

	} else {
		o.NodeHighAvailabilityVrrpGroupAuthentication = basetypes.NewObjectNull(HighAvailabilityVrrpGroupAuthentication{}.AttributeTypes())
	}
	if value, ok := vyosData["health-check"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpGroupHealthCheck{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpGroupHealthCheck = data

	} else {
		o.NodeHighAvailabilityVrrpGroupHealthCheck = basetypes.NewObjectNull(HighAvailabilityVrrpGroupHealthCheck{}.AttributeTypes())
	}
	if value, ok := vyosData["track"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpGroupTrack{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpGroupTrack = data

	} else {
		o.NodeHighAvailabilityVrrpGroupTrack = basetypes.NewObjectNull(HighAvailabilityVrrpGroupTrack{}.AttributeTypes())
	}
	if value, ok := vyosData["transition-script"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, HighAvailabilityVrrpGroupTransitionScrIPt{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeHighAvailabilityVrrpGroupTransitionScrIPt = data

	} else {
		o.NodeHighAvailabilityVrrpGroupTransitionScrIPt = basetypes.NewObjectNull(HighAvailabilityVrrpGroupTransitionScrIPt{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o HighAvailabilityVrrpGroup) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"interface":             types.StringType,
		"advertise_interval":    types.StringType,
		"description":           types.StringType,
		"disable":               types.StringType,
		"hello_source_address":  types.StringType,
		"peer_address":          types.StringType,
		"no_preempt":            types.StringType,
		"preempt_delay":         types.StringType,
		"priority":              types.StringType,
		"rfc3768_compatibility": types.StringType,
		"excluded_address":      types.StringType,
		"vrid":                  types.StringType,

		// Tags
		"address": types.MapType{ElemType: types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupAddress{}.AttributeTypes()}},

		// Nodes
		"garp":              types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupGarp{}.AttributeTypes()},
		"authentication":    types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupAuthentication{}.AttributeTypes()},
		"health_check":      types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupHealthCheck{}.AttributeTypes()},
		"track":             types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupTrack{}.AttributeTypes()},
		"transition_script": types.ObjectType{AttrTypes: HighAvailabilityVrrpGroupTransitionScrIPt{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `VRRP group

`,
		},

		// LeafNodes

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface Name to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		"advertise_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Advertise interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"hello_source_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRRP hello source address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 hello source address  |
|  ipv6  |  IPv6 hello source address  |

`,
		},

		"peer_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Unicast VRRP peer address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 unicast peer address  |
|  ipv6  |  IPv6 unicast peer address  |

`,
		},

		"no_preempt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable master preemption

`,
		},

		"preempt_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Preempt delay (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1000  |  preempt delay  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Router priority  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"rfc3768_compatibility": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use VRRP virtual MAC address as per RFC3768

`,
		},

		"excluded_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual address (If you need additional IPv4 and IPv6 in same group)

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |
|  ipv6  |  IPv6 address  |

`,
		},

		"vrid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual router identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Virtual router identifier  |

`,
		},

		// TagNodes

		"address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: HighAvailabilityVrrpGroupAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		// Nodes

		"garp": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupGarp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Gratuitous ARP parameters

`,
		},

		"authentication": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP authentication

`,
		},

		"health_check": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupHealthCheck{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Health check script

`,
		},

		"track": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupTrack{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Track settings

`,
		},

		"transition_script": schema.SingleNestedAttribute{
			Attributes: HighAvailabilityVrrpGroupTransitionScrIPt{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VRRP transition scripts

`,
		},
	}
}
