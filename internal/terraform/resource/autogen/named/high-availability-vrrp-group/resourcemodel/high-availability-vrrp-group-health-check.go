// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// HighAvailabilityVrrpGroupHealthCheck describes the resource data model.
type HighAvailabilityVrrpGroupHealthCheck struct {
	// LeafNodes
	LeafHighAvailabilityVrrpGroupHealthCheckFailureCount types.String `tfsdk:"failure_count" json:"failure-count,omitempty"`
	LeafHighAvailabilityVrrpGroupHealthCheckInterval     types.String `tfsdk:"interval" json:"interval,omitempty"`
	LeafHighAvailabilityVrrpGroupHealthCheckScrIPt       types.String `tfsdk:"script" json:"script,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGroupHealthCheck) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"failure_count": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Health check failure count required for transition to fault

`,

			// Default:          stringdefault.StaticString(`3`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Health check execution interval in seconds

`,

			// Default:          stringdefault.StaticString(`60`),
			Computed: true,
		},

		"script": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Health check script file

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *HighAvailabilityVrrpGroupHealthCheck) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafHighAvailabilityVrrpGroupHealthCheckFailureCount.IsNull() && !o.LeafHighAvailabilityVrrpGroupHealthCheckFailureCount.IsUnknown() {
		jsonData["failure-count"] = o.LeafHighAvailabilityVrrpGroupHealthCheckFailureCount.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupHealthCheckInterval.IsNull() && !o.LeafHighAvailabilityVrrpGroupHealthCheckInterval.IsUnknown() {
		jsonData["interval"] = o.LeafHighAvailabilityVrrpGroupHealthCheckInterval.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupHealthCheckScrIPt.IsNull() && !o.LeafHighAvailabilityVrrpGroupHealthCheckScrIPt.IsUnknown() {
		jsonData["script"] = o.LeafHighAvailabilityVrrpGroupHealthCheckScrIPt.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *HighAvailabilityVrrpGroupHealthCheck) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["failure-count"]; ok {
		o.LeafHighAvailabilityVrrpGroupHealthCheckFailureCount = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupHealthCheckFailureCount = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafHighAvailabilityVrrpGroupHealthCheckInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupHealthCheckInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["script"]; ok {
		o.LeafHighAvailabilityVrrpGroupHealthCheckScrIPt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupHealthCheckScrIPt = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
