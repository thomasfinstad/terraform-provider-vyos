// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// HighAvailabilityVrrpGroupGarp describes the resource data model.
type HighAvailabilityVrrpGroupGarp struct {
	// LeafNodes
	LeafHighAvailabilityVrrpGroupGarpInterval            types.String `tfsdk:"interval"`
	LeafHighAvailabilityVrrpGroupGarpMasterDelay         types.String `tfsdk:"master_delay"`
	LeafHighAvailabilityVrrpGroupGarpMasterRefresh       types.String `tfsdk:"master_refresh"`
	LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat types.String `tfsdk:"master_refresh_repeat"`
	LeafHighAvailabilityVrrpGroupGarpMasterRepeat        types.String `tfsdk:"master_repeat"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *HighAvailabilityVrrpGroupGarp) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group", "garp"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafHighAvailabilityVrrpGroupGarpInterval.IsNull() || o.LeafHighAvailabilityVrrpGroupGarpInterval.IsUnknown()) {
		vyosData["interval"] = o.LeafHighAvailabilityVrrpGroupGarpInterval.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.IsNull() || o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.IsUnknown()) {
		vyosData["master-delay"] = o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.IsNull() || o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.IsUnknown()) {
		vyosData["master-refresh"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.IsNull() || o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.IsUnknown()) {
		vyosData["master-refresh-repeat"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.ValueString()
	}
	if !(o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.IsNull() || o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.IsUnknown()) {
		vyosData["master-repeat"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *HighAvailabilityVrrpGroupGarp) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group", "garp"}})

	// Leafs
	if value, ok := vyosData["interval"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["master-delay"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterDelay = basetypes.NewStringNull()
	}
	if value, ok := vyosData["master-refresh"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh = basetypes.NewStringNull()
	}
	if value, ok := vyosData["master-refresh-repeat"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat = basetypes.NewStringNull()
	}
	if value, ok := vyosData["master-repeat"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"high-availability", "vrrp", "group", "garp"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o HighAvailabilityVrrpGroupGarp) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"interval":              types.StringType,
		"master_delay":          types.StringType,
		"master_refresh":        types.StringType,
		"master_refresh_repeat": types.StringType,
		"master_repeat":         types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGroupGarp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between Gratuitous ARP

|  Format  |  Description  |
|----------|---------------|
|  <0.000-1000>  |  Interval in seconds, resolution microseconds  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"master_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay for second set of gratuitous ARPs after transition to master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-1000  |  Delay in seconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum time interval for refreshing gratuitous ARPs while beeing master

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  No refresh  |
|  u32:1-255  |  Interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh_repeat": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time while beeing master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of gratuitous ARP messages  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"master_repeat": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time after transition to master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of gratuitous ARP messages  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
