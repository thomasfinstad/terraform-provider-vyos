// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// HighAvailabilityVrrpGroupGarp describes the resource data model.
type HighAvailabilityVrrpGroupGarp struct {
	// LeafNodes
	LeafHighAvailabilityVrrpGroupGarpInterval            types.String `tfsdk:"interval" json:"interval,omitempty"`
	LeafHighAvailabilityVrrpGroupGarpMasterDelay         types.String `tfsdk:"master_delay" json:"master-delay,omitempty"`
	LeafHighAvailabilityVrrpGroupGarpMasterRefresh       types.String `tfsdk:"master_refresh" json:"master-refresh,omitempty"`
	LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat types.String `tfsdk:"master_refresh_repeat" json:"master-refresh-repeat,omitempty"`
	LeafHighAvailabilityVrrpGroupGarpMasterRepeat        types.String `tfsdk:"master_repeat" json:"master-repeat,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGroupGarp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between Gratuitous ARP

|  Format  |  Description  |
|----------|---------------|
|  <0.000-1000>  |  Interval in seconds, resolution microseconds  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"master_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay for second set of gratuitous ARPs after transition to master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-1000  |  Delay in seconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum time interval for refreshing gratuitous ARPs while beeing master

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  No refresh  |
|  u32:1-255  |  Interval in seconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh_repeat": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time while beeing master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of gratuitous ARP messages  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"master_repeat": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time after transition to master

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of gratuitous ARP messages  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *HighAvailabilityVrrpGroupGarp) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafHighAvailabilityVrrpGroupGarpInterval.IsNull() && !o.LeafHighAvailabilityVrrpGroupGarpInterval.IsUnknown() {
		jsonData["interval"] = o.LeafHighAvailabilityVrrpGroupGarpInterval.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.IsNull() && !o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.IsUnknown() {
		jsonData["master-delay"] = o.LeafHighAvailabilityVrrpGroupGarpMasterDelay.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.IsNull() && !o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.IsUnknown() {
		jsonData["master-refresh"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.IsNull() && !o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.IsUnknown() {
		jsonData["master-refresh-repeat"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat.ValueString()
	}

	if !o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.IsNull() && !o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.IsUnknown() {
		jsonData["master-repeat"] = o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *HighAvailabilityVrrpGroupGarp) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["interval"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["master-delay"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["master-refresh"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefresh = basetypes.NewStringNull()
	}

	if value, ok := jsonData["master-refresh-repeat"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRefreshRepeat = basetypes.NewStringNull()
	}

	if value, ok := jsonData["master-repeat"]; ok {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafHighAvailabilityVrrpGroupGarpMasterRepeat = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
