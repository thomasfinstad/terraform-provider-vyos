// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesMacsec describes the resource data model.
type InterfacesMacsec struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesMacsecAddress         types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesMacsecDescrIPtion     types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesMacsecDisable         types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesMacsecMtu             types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesMacsecSourceInterface types.String `tfsdk:"source_interface" json:"source-interface,omitempty"`
	LeafInterfacesMacsecRedirect        types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesMacsecVrf             types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesMacsecDhcpOptions     *InterfacesMacsecDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesMacsecDhcpvsixOptions *InterfacesMacsecDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesMacsecIP              *InterfacesMacsecIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesMacsecIPvsix          *InterfacesMacsecIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesMacsecMirror          *InterfacesMacsecMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
	NodeInterfacesMacsecSecURIty        *InterfacesMacsecSecURIty        `tfsdk:"security" json:"security,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesMacsec) GetVyosPath() []string {
	return []string{
		"interfaces",
		"macsec",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesMacsec) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `MACsec Interface (802.1ae)

|  Format  |  Description  |
|----------|---------------|
|  macsecN  |  MACsec interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1460`),
			Computed: true,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Physical interface the traffic will go through

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Physical interface used for traffic forwarding  |

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"security": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Security/Encryption Settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesMacsec) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesMacsecAddress.IsNull() && !o.LeafInterfacesMacsecAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesMacsecAddress.ValueString()
	}

	if !o.LeafInterfacesMacsecDescrIPtion.IsNull() && !o.LeafInterfacesMacsecDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesMacsecDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesMacsecDisable.IsNull() && !o.LeafInterfacesMacsecDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesMacsecDisable.ValueString()
	}

	if !o.LeafInterfacesMacsecMtu.IsNull() && !o.LeafInterfacesMacsecMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesMacsecMtu.ValueString()
	}

	if !o.LeafInterfacesMacsecSourceInterface.IsNull() && !o.LeafInterfacesMacsecSourceInterface.IsUnknown() {
		jsonData["source-interface"] = o.LeafInterfacesMacsecSourceInterface.ValueString()
	}

	if !o.LeafInterfacesMacsecRedirect.IsNull() && !o.LeafInterfacesMacsecRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesMacsecRedirect.ValueString()
	}

	if !o.LeafInterfacesMacsecVrf.IsNull() && !o.LeafInterfacesMacsecVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesMacsecVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesMacsecDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesMacsecDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesMacsecIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesMacsecIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesMacsecMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesMacsecSecURIty).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesMacsecSecURIty)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["security"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesMacsec) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesMacsecAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesMacsecDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesMacsecDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesMacsecMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source-interface"]; ok {
		o.LeafInterfacesMacsecSourceInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecSourceInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesMacsecRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesMacsecVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecDhcpOptions = &InterfacesMacsecDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecDhcpvsixOptions = &InterfacesMacsecDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecIP = &InterfacesMacsecIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecIPvsix = &InterfacesMacsecIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecMirror = &InterfacesMacsecMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["security"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesMacsecSecURIty = &InterfacesMacsecSecURIty{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesMacsecSecURIty)
		if err != nil {
			return err
		}
	}

	return nil
}
