// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesMacsecSecURIty describes the resource data model.
type InterfacesMacsecSecURIty struct {
	// LeafNodes
	LeafInterfacesMacsecSecURItyCIPher       types.String `tfsdk:"cipher"`
	LeafInterfacesMacsecSecURItyEncrypt      types.String `tfsdk:"encrypt"`
	LeafInterfacesMacsecSecURItyReplayWindow types.String `tfsdk:"replay_window"`

	// TagNodes

	// Nodes
	NodeInterfacesMacsecSecURItyMka types.Object `tfsdk:"mka"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesMacsecSecURIty) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "macsec", "security"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesMacsecSecURItyCIPher.IsNull() || o.LeafInterfacesMacsecSecURItyCIPher.IsUnknown()) {
		vyosData["cipher"] = o.LeafInterfacesMacsecSecURItyCIPher.ValueString()
	}
	if !(o.LeafInterfacesMacsecSecURItyEncrypt.IsNull() || o.LeafInterfacesMacsecSecURItyEncrypt.IsUnknown()) {
		vyosData["encrypt"] = o.LeafInterfacesMacsecSecURItyEncrypt.ValueString()
	}
	if !(o.LeafInterfacesMacsecSecURItyReplayWindow.IsNull() || o.LeafInterfacesMacsecSecURItyReplayWindow.IsUnknown()) {
		vyosData["replay-window"] = o.LeafInterfacesMacsecSecURItyReplayWindow.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesMacsecSecURItyMka.IsNull() || o.NodeInterfacesMacsecSecURItyMka.IsUnknown()) {
		var subModel InterfacesMacsecSecURItyMka
		diags.Append(o.NodeInterfacesMacsecSecURItyMka.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mka"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesMacsecSecURIty) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "macsec", "security"}})

	// Leafs
	if value, ok := vyosData["cipher"]; ok {
		o.LeafInterfacesMacsecSecURItyCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecSecURItyCIPher = basetypes.NewStringNull()
	}
	if value, ok := vyosData["encrypt"]; ok {
		o.LeafInterfacesMacsecSecURItyEncrypt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecSecURItyEncrypt = basetypes.NewStringNull()
	}
	if value, ok := vyosData["replay-window"]; ok {
		o.LeafInterfacesMacsecSecURItyReplayWindow = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesMacsecSecURItyReplayWindow = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["mka"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesMacsecSecURItyMka{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesMacsecSecURItyMka = data

	} else {
		o.NodeInterfacesMacsecSecURItyMka = basetypes.NewObjectNull(InterfacesMacsecSecURItyMka{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "macsec", "security"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesMacsecSecURIty) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"cipher":        types.StringType,
		"encrypt":       types.StringType,
		"replay_window": types.StringType,

		// Tags

		// Nodes
		"mka": types.ObjectType{AttrTypes: InterfacesMacsecSecURItyMka{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesMacsecSecURIty) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher suite used

|  Format  |  Description  |
|----------|---------------|
|  gcm-aes-128  |  Galois/Counter Mode of AES cipher with 128-bit key  |
|  gcm-aes-256  |  Galois/Counter Mode of AES cipher with 256-bit key  |

`,
		},

		"encrypt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable optional MACsec encryption

`,
		},

		"replay_window": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IEEE 802.1X/MACsec replay protection window

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  No replay window, strict check  |
|  u32:1-4294967295  |  Number of packets that could be misordered  |

`,
		},

		// TagNodes

		// Nodes

		"mka": schema.SingleNestedAttribute{
			Attributes: InterfacesMacsecSecURItyMka{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `MACsec Key Agreement protocol (MKA)

`,
		},
	}
}
