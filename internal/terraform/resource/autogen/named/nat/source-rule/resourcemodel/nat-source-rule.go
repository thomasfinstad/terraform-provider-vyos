// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// NatSourceRule describes the resource data model.
type NatSourceRule struct {
	SelfIdentifier types.Number `tfsdk:"rule_id" vyos:",self-id"`

	// LeafNodes
	LeafNatSourceRuleDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafNatSourceRuleDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafNatSourceRuleExclude           types.Bool   `tfsdk:"exclude" vyos:"exclude,omitempty"`
	LeafNatSourceRuleLog               types.Bool   `tfsdk:"log" vyos:"log,omitempty"`
	LeafNatSourceRulePacketType        types.String `tfsdk:"packet_type" vyos:"packet-type,omitempty"`
	LeafNatSourceRuleProtocol          types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafNatSourceRuleOutboundInterface types.String `tfsdk:"outbound_interface" vyos:"outbound-interface,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeNatSourceRuleDestination *NatSourceRuleDestination `tfsdk:"destination" vyos:"destination,omitempty"`
	NodeNatSourceRuleSource      *NatSourceRuleSource      `tfsdk:"source" vyos:"source,omitempty"`
	NodeNatSourceRuleTranSLAtion *NatSourceRuleTranSLAtion `tfsdk:"translation" vyos:"translation,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *NatSourceRule) GetVyosPath() []string {
	return []string{
		"nat",

		"source",

		"rule",
		o.SelfIdentifier.ValueBigFloat().String(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o NatSourceRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `rule_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"rule_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule number for NAT

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-999999  &emsp; |  Number of NAT rule  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"exclude": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Exclude packets matching this rule from NAT

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"log": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `NAT rule logging

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"packet_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  broadcast  &emsp; |  Match broadcast packet type  |
    |  host  &emsp; |  Match host packet type, addressed to local host  |
    |  multicast  &emsp; |  Match multicast packet type  |
    |  other  &emsp; |  Match packet addressed to another host  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol to NAT

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  all  &emsp; |  All IP protocols  |
    |  ip  &emsp; |  Internet Protocol, pseudo protocol number  |
    |  hopopt  &emsp; |  IPv6 Hop-by-Hop Option [RFC1883]  |
    |  icmp  &emsp; |  internet control message protocol  |
    |  igmp  &emsp; |  Internet Group Management  |
    |  ggp  &emsp; |  gateway-gateway protocol  |
    |  ipencap  &emsp; |  IP encapsulated in IP (officially IP)  |
    |  st  &emsp; |  ST datagram mode  |
    |  tcp  &emsp; |  transmission control protocol  |
    |  egp  &emsp; |  exterior gateway protocol  |
    |  igp  &emsp; |  any private interior gateway (Cisco)  |
    |  pup  &emsp; |  PARC universal packet protocol  |
    |  udp  &emsp; |  user datagram protocol  |
    |  tcp_udp  &emsp; |  Both TCP and UDP  |
    |  hmp  &emsp; |  host monitoring protocol  |
    |  xns-idp  &emsp; |  Xerox NS IDP  |
    |  rdp  &emsp; |  "reliable datagram" protocol  |
    |  iso-tp4  &emsp; |  ISO Transport Protocol class 4 [RFC905]  |
    |  dccp  &emsp; |  Datagram Congestion Control Prot. [RFC4340]  |
    |  xtp  &emsp; |  Xpress Transfer Protocol  |
    |  ddp  &emsp; |  Datagram Delivery Protocol  |
    |  idpr-cmtp  &emsp; |  IDPR Control Message Transport  |
    |  Ipv6  &emsp; |  Internet Protocol, version 6  |
    |  ipv6-route  &emsp; |  Routing Header for IPv6  |
    |  ipv6-frag  &emsp; |  Fragment Header for IPv6  |
    |  idrp  &emsp; |  Inter-Domain Routing Protocol  |
    |  rsvp  &emsp; |  Reservation Protocol  |
    |  gre  &emsp; |  General Routing Encapsulation  |
    |  esp  &emsp; |  Encap Security Payload [RFC2406]  |
    |  ah  &emsp; |  Authentication Header [RFC2402]  |
    |  skip  &emsp; |  SKIP  |
    |  ipv6-icmp  &emsp; |  ICMP for IPv6  |
    |  ipv6-nonxt  &emsp; |  No Next Header for IPv6  |
    |  ipv6-opts  &emsp; |  Destination Options for IPv6  |
    |  rspf  &emsp; |  Radio Shortest Path First (officially CPHB)  |
    |  vmtp  &emsp; |  Versatile Message Transport  |
    |  eigrp  &emsp; |  Enhanced Interior Routing Protocol (Cisco)  |
    |  ospf  &emsp; |  Open Shortest Path First IGP  |
    |  ax.25  &emsp; |  AX.25 frames  |
    |  ipip  &emsp; |  IP-within-IP Encapsulation Protocol  |
    |  etherip  &emsp; |  Ethernet-within-IP Encapsulation [RFC3378]  |
    |  encap  &emsp; |  Yet Another IP encapsulation [RFC1241]  |
    |  99  &emsp; |  Any private encryption scheme  |
    |  pim  &emsp; |  Protocol Independent Multicast  |
    |  ipcomp  &emsp; |  IP Payload Compression Protocol  |
    |  vrrp  &emsp; |  Virtual Router Redundancy Protocol [RFC5798]  |
    |  l2tp  &emsp; |  Layer Two Tunneling Protocol [RFC2661]  |
    |  isis  &emsp; |  IS-IS over IPv4  |
    |  sctp  &emsp; |  Stream Control Transmission Protocol  |
    |  fc  &emsp; |  Fibre Channel  |
    |  mobility-header  &emsp; |  Mobility Support for IPv6 [RFC3775]  |
    |  udplite  &emsp; |  UDP-Lite [RFC3828]  |
    |  mpls-in-ip  &emsp; |  MPLS-in-IP [RFC4023]  |
    |  manet  &emsp; |  MANET Protocols [RFC5498]  |
    |  hip  &emsp; |  Host Identity Protocol  |
    |  shim6  &emsp; |  Shim6 Protocol  |
    |  wesp  &emsp; |  Wrapped Encapsulating Security Payload  |
    |  rohc  &emsp; |  Robust Header Compression  |
    |  number: 0-255  &emsp; |  IP protocol number  |

`,

			// Default:          stringdefault.StaticString(`all`),
			Computed: true,
		},

		"outbound_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Outbound interface of NAT traffic

`,
		},

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT destination parameters

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT source parameters

`,
		},

		"translation": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleTranSLAtion{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Outside NAT IP (source NAT only)

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *NatSourceRule) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *NatSourceRule) UnmarshalJSON(_ []byte) error {
	return nil
}
