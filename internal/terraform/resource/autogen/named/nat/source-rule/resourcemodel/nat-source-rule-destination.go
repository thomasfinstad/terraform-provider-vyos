// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// NatSourceRuleDestination describes the resource data model.
type NatSourceRuleDestination struct {
	// LeafNodes
	LeafNatSourceRuleDestinationAddress types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafNatSourceRuleDestinationPort    types.String `tfsdk:"port" vyos:"port,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeNatSourceRuleDestinationGroup *NatSourceRuleDestinationGroup `tfsdk:"group" vyos:"group,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o NatSourceRuleDestination) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address, subnet, or range

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 address to match  |
    |  ipv4net  |  IPv4 prefix to match  |
    |  ipv4range  |  IPv4 address range to match  |
    |  !ipv4  |  Match everything except the specified address  |
    |  !ipv4net  |  Match everything except the specified prefix  |
    |  !ipv4range  |  Match everything except the specified range  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Named port (any name in /etc/services, e.g., http)  |
    |  u32:1-65535  |  Numeric IP port  |
    |  start-end  |  Numbered port range (e.g. 1001-1005)  |
    |   |   |

`,
		},

		// Nodes

		"group": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleDestinationGroup{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Group

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *NatSourceRuleDestination) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafNatSourceRuleDestinationAddress.IsNull() && !o.LeafNatSourceRuleDestinationAddress.IsUnknown() {
		jsonData["address"] = o.LeafNatSourceRuleDestinationAddress.ValueString()
	}

	if !o.LeafNatSourceRuleDestinationPort.IsNull() && !o.LeafNatSourceRuleDestinationPort.IsUnknown() {
		jsonData["port"] = o.LeafNatSourceRuleDestinationPort.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeNatSourceRuleDestinationGroup).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeNatSourceRuleDestinationGroup)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["group"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *NatSourceRuleDestination) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafNatSourceRuleDestinationAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafNatSourceRuleDestinationPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationPort = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["group"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeNatSourceRuleDestinationGroup = &NatSourceRuleDestinationGroup{}

		err = json.Unmarshal(subJSONStr, o.NodeNatSourceRuleDestinationGroup)
		if err != nil {
			return err
		}
	}

	return nil
}
