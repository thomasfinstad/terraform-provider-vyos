// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceBroadcastRelayID describes the resource data model.
type ServiceBroadcastRelayID struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceBroadcastRelayIDDisable     types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafServiceBroadcastRelayIDAddress     types.String `tfsdk:"address" json:"address,omitempty"`
	LeafServiceBroadcastRelayIDDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafServiceBroadcastRelayIDInterface   types.String `tfsdk:"interface" json:"interface,omitempty"`
	LeafServiceBroadcastRelayIDPort        types.String `tfsdk:"port" json:"port,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceBroadcastRelayID) GetVyosPath() []string {
	return []string{
		"service",
		"broadcast-relay",
		"id",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceBroadcastRelayID) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Unique ID for each UDP port to forward

|  Format  |  Description  |
|----------|---------------|
|  u32:1-99  |  Broadcast relay instance ID  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set source IP of forwarded packets, otherwise original senders address is used

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Optional source address for forwarded packets  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

`,
		},

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface to use

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Interface name  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceBroadcastRelayID) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceBroadcastRelayIDDisable.IsNull() && !o.LeafServiceBroadcastRelayIDDisable.IsUnknown() {
		jsonData["disable"] = o.LeafServiceBroadcastRelayIDDisable.ValueString()
	}

	if !o.LeafServiceBroadcastRelayIDAddress.IsNull() && !o.LeafServiceBroadcastRelayIDAddress.IsUnknown() {
		jsonData["address"] = o.LeafServiceBroadcastRelayIDAddress.ValueString()
	}

	if !o.LeafServiceBroadcastRelayIDDescrIPtion.IsNull() && !o.LeafServiceBroadcastRelayIDDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafServiceBroadcastRelayIDDescrIPtion.ValueString()
	}

	if !o.LeafServiceBroadcastRelayIDInterface.IsNull() && !o.LeafServiceBroadcastRelayIDInterface.IsUnknown() {
		jsonData["interface"] = o.LeafServiceBroadcastRelayIDInterface.ValueString()
	}

	if !o.LeafServiceBroadcastRelayIDPort.IsNull() && !o.LeafServiceBroadcastRelayIDPort.IsUnknown() {
		jsonData["port"] = o.LeafServiceBroadcastRelayIDPort.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceBroadcastRelayID) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafServiceBroadcastRelayIDDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceBroadcastRelayIDDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address"]; ok {
		o.LeafServiceBroadcastRelayIDAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceBroadcastRelayIDAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafServiceBroadcastRelayIDDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceBroadcastRelayIDDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interface"]; ok {
		o.LeafServiceBroadcastRelayIDInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceBroadcastRelayIDInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafServiceBroadcastRelayIDPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceBroadcastRelayIDPort = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
