// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// NatSourceRuleDestinationGroup describes the resource data model.
type NatSourceRuleDestinationGroup struct {
	// LeafNodes
	LeafNatSourceRuleDestinationGroupAddressGroup types.String `tfsdk:"address_group" json:"address-group,omitempty"`
	LeafNatSourceRuleDestinationGroupDomainGroup  types.String `tfsdk:"domain_group" json:"domain-group,omitempty"`
	LeafNatSourceRuleDestinationGroupMacGroup     types.String `tfsdk:"mac_group" json:"mac-group,omitempty"`
	LeafNatSourceRuleDestinationGroupNetworkGroup types.String `tfsdk:"network_group" json:"network-group,omitempty"`
	LeafNatSourceRuleDestinationGroupPortGroup    types.String `tfsdk:"port_group" json:"port-group,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o NatSourceRuleDestinationGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"address_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group of addresses

`,
		},

		"domain_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group of domains

`,
		},

		"mac_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group of MAC addresses

`,
		},

		"network_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group of networks

`,
		},

		"port_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group of ports

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *NatSourceRuleDestinationGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafNatSourceRuleDestinationGroupAddressGroup.IsNull() && !o.LeafNatSourceRuleDestinationGroupAddressGroup.IsUnknown() {
		jsonData["address-group"] = o.LeafNatSourceRuleDestinationGroupAddressGroup.ValueString()
	}

	if !o.LeafNatSourceRuleDestinationGroupDomainGroup.IsNull() && !o.LeafNatSourceRuleDestinationGroupDomainGroup.IsUnknown() {
		jsonData["domain-group"] = o.LeafNatSourceRuleDestinationGroupDomainGroup.ValueString()
	}

	if !o.LeafNatSourceRuleDestinationGroupMacGroup.IsNull() && !o.LeafNatSourceRuleDestinationGroupMacGroup.IsUnknown() {
		jsonData["mac-group"] = o.LeafNatSourceRuleDestinationGroupMacGroup.ValueString()
	}

	if !o.LeafNatSourceRuleDestinationGroupNetworkGroup.IsNull() && !o.LeafNatSourceRuleDestinationGroupNetworkGroup.IsUnknown() {
		jsonData["network-group"] = o.LeafNatSourceRuleDestinationGroupNetworkGroup.ValueString()
	}

	if !o.LeafNatSourceRuleDestinationGroupPortGroup.IsNull() && !o.LeafNatSourceRuleDestinationGroupPortGroup.IsUnknown() {
		jsonData["port-group"] = o.LeafNatSourceRuleDestinationGroupPortGroup.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *NatSourceRuleDestinationGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address-group"]; ok {
		o.LeafNatSourceRuleDestinationGroupAddressGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationGroupAddressGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["domain-group"]; ok {
		o.LeafNatSourceRuleDestinationGroupDomainGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationGroupDomainGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac-group"]; ok {
		o.LeafNatSourceRuleDestinationGroupMacGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationGroupMacGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network-group"]; ok {
		o.LeafNatSourceRuleDestinationGroupNetworkGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationGroupNetworkGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port-group"]; ok {
		o.LeafNatSourceRuleDestinationGroupPortGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDestinationGroupPortGroup = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
