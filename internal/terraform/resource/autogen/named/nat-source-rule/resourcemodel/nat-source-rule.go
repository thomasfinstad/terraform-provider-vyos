// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// NatSourceRule describes the resource data model.
type NatSourceRule struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafNatSourceRuleDescrIPtion       types.String `tfsdk:"description"`
	LeafNatSourceRuleDisable           types.String `tfsdk:"disable"`
	LeafNatSourceRuleExclude           types.String `tfsdk:"exclude"`
	LeafNatSourceRuleLog               types.String `tfsdk:"log"`
	LeafNatSourceRulePacketType        types.String `tfsdk:"packet_type"`
	LeafNatSourceRuleProtocol          types.String `tfsdk:"protocol"`
	LeafNatSourceRuleOutboundInterface types.String `tfsdk:"outbound_interface"`

	// TagNodes

	// Nodes
	NodeNatSourceRuleDestination types.Object `tfsdk:"destination"`
	NodeNatSourceRuleSource      types.Object `tfsdk:"source"`
	NodeNatSourceRuleTranSLAtion types.Object `tfsdk:"translation"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *NatSourceRule) GetVyosPath() []string {
	return []string{
		"nat",
		"source",
		"rule",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *NatSourceRule) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"nat", "source", "rule"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafNatSourceRuleDescrIPtion.IsNull() || o.LeafNatSourceRuleDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafNatSourceRuleDescrIPtion.ValueString()
	}
	if !(o.LeafNatSourceRuleDisable.IsNull() || o.LeafNatSourceRuleDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafNatSourceRuleDisable.ValueString()
	}
	if !(o.LeafNatSourceRuleExclude.IsNull() || o.LeafNatSourceRuleExclude.IsUnknown()) {
		vyosData["exclude"] = o.LeafNatSourceRuleExclude.ValueString()
	}
	if !(o.LeafNatSourceRuleLog.IsNull() || o.LeafNatSourceRuleLog.IsUnknown()) {
		vyosData["log"] = o.LeafNatSourceRuleLog.ValueString()
	}
	if !(o.LeafNatSourceRulePacketType.IsNull() || o.LeafNatSourceRulePacketType.IsUnknown()) {
		vyosData["packet-type"] = o.LeafNatSourceRulePacketType.ValueString()
	}
	if !(o.LeafNatSourceRuleProtocol.IsNull() || o.LeafNatSourceRuleProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafNatSourceRuleProtocol.ValueString()
	}
	if !(o.LeafNatSourceRuleOutboundInterface.IsNull() || o.LeafNatSourceRuleOutboundInterface.IsUnknown()) {
		vyosData["outbound-interface"] = o.LeafNatSourceRuleOutboundInterface.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeNatSourceRuleDestination.IsNull() || o.NodeNatSourceRuleDestination.IsUnknown()) {
		var subModel NatSourceRuleDestination
		diags.Append(o.NodeNatSourceRuleDestination.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["destination"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeNatSourceRuleSource.IsNull() || o.NodeNatSourceRuleSource.IsUnknown()) {
		var subModel NatSourceRuleSource
		diags.Append(o.NodeNatSourceRuleSource.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["source"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeNatSourceRuleTranSLAtion.IsNull() || o.NodeNatSourceRuleTranSLAtion.IsUnknown()) {
		var subModel NatSourceRuleTranSLAtion
		diags.Append(o.NodeNatSourceRuleTranSLAtion.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["translation"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *NatSourceRule) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"nat", "source", "rule"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafNatSourceRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafNatSourceRuleDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["exclude"]; ok {
		o.LeafNatSourceRuleExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleExclude = basetypes.NewStringNull()
	}
	if value, ok := vyosData["log"]; ok {
		o.LeafNatSourceRuleLog = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleLog = basetypes.NewStringNull()
	}
	if value, ok := vyosData["packet-type"]; ok {
		o.LeafNatSourceRulePacketType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRulePacketType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafNatSourceRuleProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleProtocol = basetypes.NewStringNull()
	}
	if value, ok := vyosData["outbound-interface"]; ok {
		o.LeafNatSourceRuleOutboundInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafNatSourceRuleOutboundInterface = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["destination"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, NatSourceRuleDestination{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeNatSourceRuleDestination = data

	} else {
		o.NodeNatSourceRuleDestination = basetypes.NewObjectNull(NatSourceRuleDestination{}.AttributeTypes())
	}
	if value, ok := vyosData["source"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, NatSourceRuleSource{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeNatSourceRuleSource = data

	} else {
		o.NodeNatSourceRuleSource = basetypes.NewObjectNull(NatSourceRuleSource{}.AttributeTypes())
	}
	if value, ok := vyosData["translation"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, NatSourceRuleTranSLAtion{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeNatSourceRuleTranSLAtion = data

	} else {
		o.NodeNatSourceRuleTranSLAtion = basetypes.NewObjectNull(NatSourceRuleTranSLAtion{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"nat", "source", "rule"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o NatSourceRule) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":        types.StringType,
		"disable":            types.StringType,
		"exclude":            types.StringType,
		"log":                types.StringType,
		"packet_type":        types.StringType,
		"protocol":           types.StringType,
		"outbound_interface": types.StringType,

		// Tags

		// Nodes
		"destination": types.ObjectType{AttrTypes: NatSourceRuleDestination{}.AttributeTypes()},
		"source":      types.ObjectType{AttrTypes: NatSourceRuleSource{}.AttributeTypes()},
		"translation": types.ObjectType{AttrTypes: NatSourceRuleTranSLAtion{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o NatSourceRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Rule number for NAT

|  Format  |  Description  |
|----------|---------------|
|  u32:1-999999  |  Number of NAT rule  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Exclude packets matching this rule from NAT

`,
		},

		"log": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `NAT rule logging

`,
		},

		"packet_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Match broadcast packet type  |
|  host  |  Match host packet type, addressed to local host  |
|  multicast  |  Match multicast packet type  |
|  other  |  Match packet addressed to another host  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol to NAT

|  Format  |  Description  |
|----------|---------------|
|  all  |  All IP protocols  |
|  ip  |  Internet Protocol, pseudo protocol number  |
|  hopopt  |  IPv6 Hop-by-Hop Option [RFC1883]  |
|  icmp  |  internet control message protocol  |
|  igmp  |  Internet Group Management  |
|  ggp  |  gateway-gateway protocol  |
|  ipencap  |  IP encapsulated in IP (officially IP)  |
|  st  |  ST datagram mode  |
|  tcp  |  transmission control protocol  |
|  egp  |  exterior gateway protocol  |
|  igp  |  any private interior gateway (Cisco)  |
|  pup  |  PARC universal packet protocol  |
|  udp  |  user datagram protocol  |
|  tcp_udp  |  Both TCP and UDP  |
|  hmp  |  host monitoring protocol  |
|  xns-idp  |  Xerox NS IDP  |
|  rdp  |  "reliable datagram" protocol  |
|  iso-tp4  |  ISO Transport Protocol class 4 [RFC905]  |
|  dccp  |  Datagram Congestion Control Prot. [RFC4340]  |
|  xtp  |  Xpress Transfer Protocol  |
|  ddp  |  Datagram Delivery Protocol  |
|  idpr-cmtp  |  IDPR Control Message Transport  |
|  Ipv6  |  Internet Protocol, version 6  |
|  ipv6-route  |  Routing Header for IPv6  |
|  ipv6-frag  |  Fragment Header for IPv6  |
|  idrp  |  Inter-Domain Routing Protocol  |
|  rsvp  |  Reservation Protocol  |
|  gre  |  General Routing Encapsulation  |
|  esp  |  Encap Security Payload [RFC2406]  |
|  ah  |  Authentication Header [RFC2402]  |
|  skip  |  SKIP  |
|  ipv6-icmp  |  ICMP for IPv6  |
|  ipv6-nonxt  |  No Next Header for IPv6  |
|  ipv6-opts  |  Destination Options for IPv6  |
|  rspf  |  Radio Shortest Path First (officially CPHB)  |
|  vmtp  |  Versatile Message Transport  |
|  eigrp  |  Enhanced Interior Routing Protocol (Cisco)  |
|  ospf  |  Open Shortest Path First IGP  |
|  ax.25  |  AX.25 frames  |
|  ipip  |  IP-within-IP Encapsulation Protocol  |
|  etherip  |  Ethernet-within-IP Encapsulation [RFC3378]  |
|  encap  |  Yet Another IP encapsulation [RFC1241]  |
|  99  |  Any private encryption scheme  |
|  pim  |  Protocol Independent Multicast  |
|  ipcomp  |  IP Payload Compression Protocol  |
|  vrrp  |  Virtual Router Redundancy Protocol [RFC5798]  |
|  l2tp  |  Layer Two Tunneling Protocol [RFC2661]  |
|  isis  |  IS-IS over IPv4  |
|  sctp  |  Stream Control Transmission Protocol  |
|  fc  |  Fibre Channel  |
|  mobility-header  |  Mobility Support for IPv6 [RFC3775]  |
|  udplite  |  UDP-Lite [RFC3828]  |
|  mpls-in-ip  |  MPLS-in-IP [RFC4023]  |
|  manet  |  MANET Protocols [RFC5498]  |
|  hip  |  Host Identity Protocol  |
|  shim6  |  Shim6 Protocol  |
|  wesp  |  Wrapped Encapsulating Security Payload  |
|  rohc  |  Robust Header Compression  |
|  u32:0-255  |  IP protocol number  |

`,

			// Default:          stringdefault.StaticString(`all`),
			Computed: true,
		},

		"outbound_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Outbound interface of NAT traffic

`,
		},

		// TagNodes

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT destination parameters

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT source parameters

`,
		},

		"translation": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleTranSLAtion{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Outside NAT IP (source NAT only)

`,
		},
	}
}
