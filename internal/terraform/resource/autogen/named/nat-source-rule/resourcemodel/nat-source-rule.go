// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/customtypes"
)

// NatSourceRule describes the resource data model.
type NatSourceRule struct {
	// LeafNodes
	NatSourceRuleDescrIPtion       customtypes.CustomStringValue `tfsdk:"description" json:"description,omitempty"`
	NatSourceRuleDisable           customtypes.CustomStringValue `tfsdk:"disable" json:"disable,omitempty"`
	NatSourceRuleExclude           customtypes.CustomStringValue `tfsdk:"exclude" json:"exclude,omitempty"`
	NatSourceRuleLog               customtypes.CustomStringValue `tfsdk:"log" json:"log,omitempty"`
	NatSourceRulePacketType        customtypes.CustomStringValue `tfsdk:"packet_type" json:"packet-type,omitempty"`
	NatSourceRuleProtocol          customtypes.CustomStringValue `tfsdk:"protocol" json:"protocol,omitempty"`
	NatSourceRuleOutboundInterface customtypes.CustomStringValue `tfsdk:"outbound_interface" json:"outbound-interface,omitempty"`

	// TagNodes

	// Nodes
	NatSourceRuleDestination types.Object `tfsdk:"destination" json:"destination,omitempty"`
	NatSourceRuleSource      types.Object `tfsdk:"source" json:"source,omitempty"`
	NatSourceRuleTranSLAtion types.Object `tfsdk:"translation" json:"translation,omitempty"`
}

// ResourceAttributes generates the attributes for the resource at this level
func (o NatSourceRule) ResourceAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
		},

		"disable": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Disable instance

`,
		},

		"exclude": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Exclude packets matching this rule from NAT

`,
		},

		"log": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `NAT rule logging

`,
		},

		"packet_type": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Packet type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Match broadcast packet type  |
|  host  |  Match host packet type, addressed to local host  |
|  multicast  |  Match multicast packet type  |
|  other  |  Match packet addressed to another host  |
`,
		},

		"protocol": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Protocol to NAT

|  Format  |  Description  |
|----------|---------------|
|  all  |  All IP protocols  |
|  ip  |  Internet Protocol, pseudo protocol number  |
|  hopopt  |  IPv6 Hop-by-Hop Option [RFC1883]  |
|  icmp  |  internet control message protocol  |
|  igmp  |  Internet Group Management  |
|  ggp  |  gateway-gateway protocol  |
|  ipencap  |  IP encapsulated in IP (officially IP)  |
|  st  |  ST datagram mode  |
|  tcp  |  transmission control protocol  |
|  egp  |  exterior gateway protocol  |
|  igp  |  any private interior gateway (Cisco)  |
|  pup  |  PARC universal packet protocol  |
|  udp  |  user datagram protocol  |
|  tcp_udp  |  Both TCP and UDP  |
|  hmp  |  host monitoring protocol  |
|  xns-idp  |  Xerox NS IDP  |
|  rdp  |  "reliable datagram" protocol  |
|  iso-tp4  |  ISO Transport Protocol class 4 [RFC905]  |
|  dccp  |  Datagram Congestion Control Prot. [RFC4340]  |
|  xtp  |  Xpress Transfer Protocol  |
|  ddp  |  Datagram Delivery Protocol  |
|  idpr-cmtp  |  IDPR Control Message Transport  |
|  Ipv6  |  Internet Protocol, version 6  |
|  ipv6-route  |  Routing Header for IPv6  |
|  ipv6-frag  |  Fragment Header for IPv6  |
|  idrp  |  Inter-Domain Routing Protocol  |
|  rsvp  |  Reservation Protocol  |
|  gre  |  General Routing Encapsulation  |
|  esp  |  Encap Security Payload [RFC2406]  |
|  ah  |  Authentication Header [RFC2402]  |
|  skip  |  SKIP  |
|  ipv6-icmp  |  ICMP for IPv6  |
|  ipv6-nonxt  |  No Next Header for IPv6  |
|  ipv6-opts  |  Destination Options for IPv6  |
|  rspf  |  Radio Shortest Path First (officially CPHB)  |
|  vmtp  |  Versatile Message Transport  |
|  eigrp  |  Enhanced Interior Routing Protocol (Cisco)  |
|  ospf  |  Open Shortest Path First IGP  |
|  ax.25  |  AX.25 frames  |
|  ipip  |  IP-within-IP Encapsulation Protocol  |
|  etherip  |  Ethernet-within-IP Encapsulation [RFC3378]  |
|  encap  |  Yet Another IP encapsulation [RFC1241]  |
|  99  |  Any private encryption scheme  |
|  pim  |  Protocol Independent Multicast  |
|  ipcomp  |  IP Payload Compression Protocol  |
|  vrrp  |  Virtual Router Redundancy Protocol [RFC5798]  |
|  l2tp  |  Layer Two Tunneling Protocol [RFC2661]  |
|  isis  |  IS-IS over IPv4  |
|  sctp  |  Stream Control Transmission Protocol  |
|  fc  |  Fibre Channel  |
|  mobility-header  |  Mobility Support for IPv6 [RFC3775]  |
|  udplite  |  UDP-Lite [RFC3828]  |
|  mpls-in-ip  |  MPLS-in-IP [RFC4023]  |
|  manet  |  MANET Protocols [RFC5498]  |
|  hip  |  Host Identity Protocol  |
|  shim6  |  Shim6 Protocol  |
|  wesp  |  Wrapped Encapsulating Security Payload  |
|  rohc  |  Robust Header Compression  |
|  u32:0-255  |  IP protocol number  |
`,

			// Default:          stringdefault.StaticString(`all`),
			Computed: true,
		},

		"outbound_interface": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Outbound interface of NAT traffic

`,
		},

		// TagNodes

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleDestination{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT destination parameters

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleSource{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `NAT source parameters

`,
		},

		"translation": schema.SingleNestedAttribute{
			Attributes: NatSourceRuleTranSLAtion{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `Outside NAT IP (source NAT only)

`,
		},
	}
}
