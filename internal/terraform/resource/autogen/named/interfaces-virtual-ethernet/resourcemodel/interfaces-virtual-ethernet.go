// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesVirtualEthernet describes the resource data model.
type InterfacesVirtualEthernet struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesVirtualEthernetAddress     types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesVirtualEthernetDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesVirtualEthernetDisable     types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesVirtualEthernetVrf         types.String `tfsdk:"vrf" json:"vrf,omitempty"`
	LeafInterfacesVirtualEthernetPeerName    types.String `tfsdk:"peer_name" json:"peer-name,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesVirtualEthernetDhcpOptions     *InterfacesVirtualEthernetDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesVirtualEthernetDhcpvsixOptions *InterfacesVirtualEthernetDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesVirtualEthernet) GetVyosPath() []string {
	return []string{
		"interfaces",
		"virtual-ethernet",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesVirtualEthernet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Virtual Ethernet (veth) Interface

|  Format  |  Description  |
|----------|---------------|
|  vethN  |  Virtual Ethernet interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"peer_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual ethernet peer interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of peer interface  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesVirtualEthernetDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesVirtualEthernetDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesVirtualEthernet) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesVirtualEthernetAddress.IsNull() && !o.LeafInterfacesVirtualEthernetAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesVirtualEthernetAddress.ValueString()
	}

	if !o.LeafInterfacesVirtualEthernetDescrIPtion.IsNull() && !o.LeafInterfacesVirtualEthernetDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesVirtualEthernetDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesVirtualEthernetDisable.IsNull() && !o.LeafInterfacesVirtualEthernetDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesVirtualEthernetDisable.ValueString()
	}

	if !o.LeafInterfacesVirtualEthernetVrf.IsNull() && !o.LeafInterfacesVirtualEthernetVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesVirtualEthernetVrf.ValueString()
	}

	if !o.LeafInterfacesVirtualEthernetPeerName.IsNull() && !o.LeafInterfacesVirtualEthernetPeerName.IsUnknown() {
		jsonData["peer-name"] = o.LeafInterfacesVirtualEthernetPeerName.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesVirtualEthernetDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesVirtualEthernetDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesVirtualEthernetDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesVirtualEthernetDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesVirtualEthernet) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesVirtualEthernetAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesVirtualEthernetDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesVirtualEthernetDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesVirtualEthernetVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetVrf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["peer-name"]; ok {
		o.LeafInterfacesVirtualEthernetPeerName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetPeerName = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesVirtualEthernetDhcpOptions = &InterfacesVirtualEthernetDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesVirtualEthernetDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesVirtualEthernetDhcpvsixOptions = &InterfacesVirtualEthernetDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesVirtualEthernetDhcpvsixOptions)
		if err != nil {
			return err
		}
	}

	return nil
}
