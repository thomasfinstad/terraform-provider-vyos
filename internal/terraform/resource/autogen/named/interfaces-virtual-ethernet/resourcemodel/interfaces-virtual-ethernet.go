// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesVirtualEthernet describes the resource data model.
type InterfacesVirtualEthernet struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesVirtualEthernetAddress     types.String `tfsdk:"address"`
	LeafInterfacesVirtualEthernetDescrIPtion types.String `tfsdk:"description"`
	LeafInterfacesVirtualEthernetDisable     types.String `tfsdk:"disable"`
	LeafInterfacesVirtualEthernetVrf         types.String `tfsdk:"vrf"`
	LeafInterfacesVirtualEthernetPeerName    types.String `tfsdk:"peer_name"`

	// TagNodes

	// Nodes
	NodeInterfacesVirtualEthernetDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesVirtualEthernetDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesVirtualEthernet) GetVyosPath() []string {
	return []string{
		"interfaces",
		"virtual-ethernet",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesVirtualEthernet) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "virtual-ethernet"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesVirtualEthernetAddress.IsNull() || o.LeafInterfacesVirtualEthernetAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesVirtualEthernetAddress.ValueString()
	}
	if !(o.LeafInterfacesVirtualEthernetDescrIPtion.IsNull() || o.LeafInterfacesVirtualEthernetDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesVirtualEthernetDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesVirtualEthernetDisable.IsNull() || o.LeafInterfacesVirtualEthernetDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesVirtualEthernetDisable.ValueString()
	}
	if !(o.LeafInterfacesVirtualEthernetVrf.IsNull() || o.LeafInterfacesVirtualEthernetVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesVirtualEthernetVrf.ValueString()
	}
	if !(o.LeafInterfacesVirtualEthernetPeerName.IsNull() || o.LeafInterfacesVirtualEthernetPeerName.IsUnknown()) {
		vyosData["peer-name"] = o.LeafInterfacesVirtualEthernetPeerName.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesVirtualEthernetDhcpOptions.IsNull() || o.NodeInterfacesVirtualEthernetDhcpOptions.IsUnknown()) {
		var subModel InterfacesVirtualEthernetDhcpOptions
		diags.Append(o.NodeInterfacesVirtualEthernetDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesVirtualEthernetDhcpvsixOptions.IsNull() || o.NodeInterfacesVirtualEthernetDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesVirtualEthernetDhcpvsixOptions
		diags.Append(o.NodeInterfacesVirtualEthernetDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesVirtualEthernet) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "virtual-ethernet"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesVirtualEthernetAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesVirtualEthernetDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesVirtualEthernetDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesVirtualEthernetVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetVrf = basetypes.NewStringNull()
	}
	if value, ok := vyosData["peer-name"]; ok {
		o.LeafInterfacesVirtualEthernetPeerName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesVirtualEthernetPeerName = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesVirtualEthernetDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesVirtualEthernetDhcpOptions = data

	} else {
		o.NodeInterfacesVirtualEthernetDhcpOptions = basetypes.NewObjectNull(InterfacesVirtualEthernetDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesVirtualEthernetDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesVirtualEthernetDhcpvsixOptions = data

	} else {
		o.NodeInterfacesVirtualEthernetDhcpvsixOptions = basetypes.NewObjectNull(InterfacesVirtualEthernetDhcpvsixOptions{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "virtual-ethernet"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesVirtualEthernet) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":     types.StringType,
		"description": types.StringType,
		"disable":     types.StringType,
		"vrf":         types.StringType,
		"peer_name":   types.StringType,

		// Tags

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesVirtualEthernetDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesVirtualEthernetDhcpvsixOptions{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesVirtualEthernet) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Virtual Ethernet (veth) Interface

|  Format  |  Description  |
|----------|---------------|
|  vethN  |  Virtual Ethernet interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"peer_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual ethernet peer interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of peer interface  |

`,
		},

		// TagNodes

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesVirtualEthernetDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesVirtualEthernetDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},
	}
}
