// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyCake describes the resource data model.
type QosPolicyCake struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyCakeDescrIPtion types.String `tfsdk:"description"`
	LeafQosPolicyCakeBandwIDth   types.String `tfsdk:"bandwidth"`
	LeafQosPolicyCakeRtt         types.String `tfsdk:"rtt"`

	// TagNodes

	// Nodes
	NodeQosPolicyCakeFlowIsolation types.Object `tfsdk:"flow_isolation"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyCake) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"cake",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyCake) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "cake"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyCakeDescrIPtion.IsNull() || o.LeafQosPolicyCakeDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafQosPolicyCakeDescrIPtion.ValueString()
	}
	if !(o.LeafQosPolicyCakeBandwIDth.IsNull() || o.LeafQosPolicyCakeBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafQosPolicyCakeBandwIDth.ValueString()
	}
	if !(o.LeafQosPolicyCakeRtt.IsNull() || o.LeafQosPolicyCakeRtt.IsUnknown()) {
		vyosData["rtt"] = o.LeafQosPolicyCakeRtt.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeQosPolicyCakeFlowIsolation.IsNull() || o.NodeQosPolicyCakeFlowIsolation.IsUnknown()) {
		var subModel QosPolicyCakeFlowIsolation
		diags.Append(o.NodeQosPolicyCakeFlowIsolation.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["flow-isolation"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyCake) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "cake"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafQosPolicyCakeDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyCakeDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafQosPolicyCakeBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyCakeBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rtt"]; ok {
		o.LeafQosPolicyCakeRtt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyCakeRtt = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["flow-isolation"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, QosPolicyCakeFlowIsolation{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeQosPolicyCakeFlowIsolation = data

	} else {
		o.NodeQosPolicyCakeFlowIsolation = basetypes.NewObjectNull(QosPolicyCakeFlowIsolation{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "cake"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyCake) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,
		"bandwidth":   types.StringType,
		"rtt":         types.StringType,

		// Tags

		// Nodes
		"flow_isolation": types.ObjectType{AttrTypes: QosPolicyCakeFlowIsolation{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyCake) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Common Applications Kept Enhanced (CAKE)

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |

`,
		},

		"rtt": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Round-Trip-Time for Active Queue Management (AQM)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-3600000  |  RTT in ms  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		// TagNodes

		// Nodes

		"flow_isolation": schema.SingleNestedAttribute{
			Attributes: QosPolicyCakeFlowIsolation{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Flow isolation settings

`,
		},
	}
}
