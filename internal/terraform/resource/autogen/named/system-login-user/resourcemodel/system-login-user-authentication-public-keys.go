// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// SystemLoginUserAuthenticationPublicKeys describes the resource data model.
type SystemLoginUserAuthenticationPublicKeys struct {
	// LeafNodes
	LeafSystemLoginUserAuthenticationPublicKeysKey     types.String `tfsdk:"key" json:"key,omitempty"`
	LeafSystemLoginUserAuthenticationPublicKeysOptions types.String `tfsdk:"options" json:"options,omitempty"`
	LeafSystemLoginUserAuthenticationPublicKeysType    types.String `tfsdk:"type" json:"type,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemLoginUserAuthenticationPublicKeys) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Public key value (Base64 encoded)

`,
		},

		"options": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Optional public key options

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `SSH public key type

|  Format  |  Description  |
|----------|---------------|
|  ssh-dss  |  Digital Signature Algorithm (DSA) key support  |
|  ssh-rsa  |  Key pair based on RSA algorithm  |
|  ecdsa-sha2-nistp256  |  Elliptic Curve DSA with NIST P-256 curve  |
|  ecdsa-sha2-nistp384  |  Elliptic Curve DSA with NIST P-384 curve  |
|  ecdsa-sha2-nistp521  |  Elliptic Curve DSA with NIST P-521 curve  |
|  ssh-ed25519  |  Edwards-curve DSA with elliptic curve 25519  |
|  sk-ecdsa-sha2-nistp256@openssh.com  |  Elliptic Curve DSA security key  |
|  sk-ssh-ed25519@openssh.com  |  Elliptic curve 25519 security key  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *SystemLoginUserAuthenticationPublicKeys) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafSystemLoginUserAuthenticationPublicKeysKey.IsNull() && !o.LeafSystemLoginUserAuthenticationPublicKeysKey.IsUnknown() {
		jsonData["key"] = o.LeafSystemLoginUserAuthenticationPublicKeysKey.ValueString()
	}

	if !o.LeafSystemLoginUserAuthenticationPublicKeysOptions.IsNull() && !o.LeafSystemLoginUserAuthenticationPublicKeysOptions.IsUnknown() {
		jsonData["options"] = o.LeafSystemLoginUserAuthenticationPublicKeysOptions.ValueString()
	}

	if !o.LeafSystemLoginUserAuthenticationPublicKeysType.IsNull() && !o.LeafSystemLoginUserAuthenticationPublicKeysType.IsUnknown() {
		jsonData["type"] = o.LeafSystemLoginUserAuthenticationPublicKeysType.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *SystemLoginUserAuthenticationPublicKeys) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["key"]; ok {
		o.LeafSystemLoginUserAuthenticationPublicKeysKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemLoginUserAuthenticationPublicKeysKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["options"]; ok {
		o.LeafSystemLoginUserAuthenticationPublicKeysOptions = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemLoginUserAuthenticationPublicKeysOptions = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafSystemLoginUserAuthenticationPublicKeysType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemLoginUserAuthenticationPublicKeysType = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
