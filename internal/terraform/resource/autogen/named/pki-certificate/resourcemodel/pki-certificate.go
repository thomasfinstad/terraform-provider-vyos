// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PkiCertificate describes the resource data model.
type PkiCertificate struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPkiCertificateCertificate types.String `tfsdk:"certificate" json:"certificate,omitempty"`
	LeafPkiCertificateDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafPkiCertificateRevoke      types.String `tfsdk:"revoke" json:"revoke,omitempty"`

	// TagNodes

	// Nodes
	NodePkiCertificatePrivate *PkiCertificatePrivate `tfsdk:"private" json:"private,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PkiCertificate) GetVyosPath() []string {
	return []string{
		"pki",
		"certificate",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PkiCertificate) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Certificate

`,
		},

		// LeafNodes

		"certificate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Certificate in PEM format

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

`,
		},

		"revoke": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `If CA is present, this certificate will be included in generated CRLs

`,
		},

		// TagNodes

		// Nodes

		"private": schema.SingleNestedAttribute{
			Attributes: PkiCertificatePrivate{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Certificate private key

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PkiCertificate) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPkiCertificateCertificate.IsNull() && !o.LeafPkiCertificateCertificate.IsUnknown() {
		jsonData["certificate"] = o.LeafPkiCertificateCertificate.ValueString()
	}

	if !o.LeafPkiCertificateDescrIPtion.IsNull() && !o.LeafPkiCertificateDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPkiCertificateDescrIPtion.ValueString()
	}

	if !o.LeafPkiCertificateRevoke.IsNull() && !o.LeafPkiCertificateRevoke.IsUnknown() {
		jsonData["revoke"] = o.LeafPkiCertificateRevoke.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodePkiCertificatePrivate).IsZero() {
		subJSONStr, err := json.Marshal(o.NodePkiCertificatePrivate)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["private"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PkiCertificate) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["certificate"]; ok {
		o.LeafPkiCertificateCertificate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCertificateCertificate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPkiCertificateDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCertificateDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["revoke"]; ok {
		o.LeafPkiCertificateRevoke = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPkiCertificateRevoke = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["private"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodePkiCertificatePrivate = &PkiCertificatePrivate{}

		err = json.Unmarshal(subJSONStr, o.NodePkiCertificatePrivate)
		if err != nil {
			return err
		}
	}

	return nil
}
