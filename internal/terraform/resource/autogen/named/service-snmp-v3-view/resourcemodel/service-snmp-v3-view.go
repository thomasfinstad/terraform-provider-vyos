// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ServiceSnmpVthreeView describes the resource data model.
type ServiceSnmpVthreeView struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes

	// TagNodes
	TagServiceSnmpVthreeViewOID *map[string]ServiceSnmpVthreeViewOID `tfsdk:"oid" json:"oid,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpVthreeView) GetVyosPath() []string {
	return []string{
		"service",
		"snmp",
		"v3",
		"view",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeView) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the view with name viewname

`,
		},

		// LeafNodes

		// TagNodes

		"oid": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceSnmpVthreeViewOID{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Specifies the oid

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceSnmpVthreeView) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	if !reflect.ValueOf(o.TagServiceSnmpVthreeViewOID).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceSnmpVthreeViewOID)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["oid"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceSnmpVthreeView) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags
	if value, ok := jsonData["oid"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceSnmpVthreeViewOID = &map[string]ServiceSnmpVthreeViewOID{}

		err = json.Unmarshal(subJSONStr, o.TagServiceSnmpVthreeViewOID)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
