// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesGeneveParameters describes the resource data model.
type InterfacesGeneveParameters struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeInterfacesGeneveParametersIP     types.Object `tfsdk:"ip"`
	NodeInterfacesGeneveParametersIPvsix types.Object `tfsdk:"ipv6"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesGeneveParameters) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "geneve", "parameters"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes
	if !(o.NodeInterfacesGeneveParametersIP.IsNull() || o.NodeInterfacesGeneveParametersIP.IsUnknown()) {
		var subModel InterfacesGeneveParametersIP
		diags.Append(o.NodeInterfacesGeneveParametersIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesGeneveParametersIPvsix.IsNull() || o.NodeInterfacesGeneveParametersIPvsix.IsUnknown()) {
		var subModel InterfacesGeneveParametersIPvsix
		diags.Append(o.NodeInterfacesGeneveParametersIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesGeneveParameters) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "geneve", "parameters"}})

	// Leafs

	// Tags

	// Nodes
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveParametersIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveParametersIP = data

	} else {
		o.NodeInterfacesGeneveParametersIP = basetypes.NewObjectNull(InterfacesGeneveParametersIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveParametersIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveParametersIPvsix = data

	} else {
		o.NodeInterfacesGeneveParametersIPvsix = basetypes.NewObjectNull(InterfacesGeneveParametersIPvsix{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "geneve", "parameters"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesGeneveParameters) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags

		// Nodes
		"ip":   types.ObjectType{AttrTypes: InterfacesGeneveParametersIP{}.AttributeTypes()},
		"ipv6": types.ObjectType{AttrTypes: InterfacesGeneveParametersIPvsix{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesGeneveParameters) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveParametersIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 specific tunnel parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveParametersIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 specific tunnel parameters

`,
		},
	}
}
