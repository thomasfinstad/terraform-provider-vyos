// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesGeneve describes the resource data model.
type InterfacesGeneve struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesGeneveAddress     types.String `tfsdk:"address"`
	LeafInterfacesGeneveDescrIPtion types.String `tfsdk:"description"`
	LeafInterfacesGeneveDisable     types.String `tfsdk:"disable"`
	LeafInterfacesGeneveMac         types.String `tfsdk:"mac"`
	LeafInterfacesGeneveMtu         types.String `tfsdk:"mtu"`
	LeafInterfacesGeneveRedirect    types.String `tfsdk:"redirect"`
	LeafInterfacesGeneveRemote      types.String `tfsdk:"remote"`
	LeafInterfacesGeneveVni         types.String `tfsdk:"vni"`

	// TagNodes

	// Nodes
	NodeInterfacesGeneveIP         types.Object `tfsdk:"ip"`
	NodeInterfacesGeneveIPvsix     types.Object `tfsdk:"ipv6"`
	NodeInterfacesGeneveParameters types.Object `tfsdk:"parameters"`
	NodeInterfacesGeneveMirror     types.Object `tfsdk:"mirror"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesGeneve) GetVyosPath() []string {
	return []string{
		"interfaces",
		"geneve",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesGeneve) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "geneve"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesGeneveAddress.IsNull() || o.LeafInterfacesGeneveAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesGeneveAddress.ValueString()
	}
	if !(o.LeafInterfacesGeneveDescrIPtion.IsNull() || o.LeafInterfacesGeneveDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesGeneveDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesGeneveDisable.IsNull() || o.LeafInterfacesGeneveDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesGeneveDisable.ValueString()
	}
	if !(o.LeafInterfacesGeneveMac.IsNull() || o.LeafInterfacesGeneveMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesGeneveMac.ValueString()
	}
	if !(o.LeafInterfacesGeneveMtu.IsNull() || o.LeafInterfacesGeneveMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesGeneveMtu.ValueString()
	}
	if !(o.LeafInterfacesGeneveRedirect.IsNull() || o.LeafInterfacesGeneveRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesGeneveRedirect.ValueString()
	}
	if !(o.LeafInterfacesGeneveRemote.IsNull() || o.LeafInterfacesGeneveRemote.IsUnknown()) {
		vyosData["remote"] = o.LeafInterfacesGeneveRemote.ValueString()
	}
	if !(o.LeafInterfacesGeneveVni.IsNull() || o.LeafInterfacesGeneveVni.IsUnknown()) {
		vyosData["vni"] = o.LeafInterfacesGeneveVni.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesGeneveIP.IsNull() || o.NodeInterfacesGeneveIP.IsUnknown()) {
		var subModel InterfacesGeneveIP
		diags.Append(o.NodeInterfacesGeneveIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesGeneveIPvsix.IsNull() || o.NodeInterfacesGeneveIPvsix.IsUnknown()) {
		var subModel InterfacesGeneveIPvsix
		diags.Append(o.NodeInterfacesGeneveIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesGeneveParameters.IsNull() || o.NodeInterfacesGeneveParameters.IsUnknown()) {
		var subModel InterfacesGeneveParameters
		diags.Append(o.NodeInterfacesGeneveParameters.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["parameters"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesGeneveMirror.IsNull() || o.NodeInterfacesGeneveMirror.IsUnknown()) {
		var subModel InterfacesGeneveMirror
		diags.Append(o.NodeInterfacesGeneveMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesGeneve) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "geneve"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesGeneveAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesGeneveDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesGeneveDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesGeneveMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesGeneveMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesGeneveRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["remote"]; ok {
		o.LeafInterfacesGeneveRemote = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveRemote = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vni"]; ok {
		o.LeafInterfacesGeneveVni = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesGeneveVni = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveIP = data

	} else {
		o.NodeInterfacesGeneveIP = basetypes.NewObjectNull(InterfacesGeneveIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveIPvsix = data

	} else {
		o.NodeInterfacesGeneveIPvsix = basetypes.NewObjectNull(InterfacesGeneveIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["parameters"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveParameters{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveParameters = data

	} else {
		o.NodeInterfacesGeneveParameters = basetypes.NewObjectNull(InterfacesGeneveParameters{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesGeneveMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesGeneveMirror = data

	} else {
		o.NodeInterfacesGeneveMirror = basetypes.NewObjectNull(InterfacesGeneveMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "geneve"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesGeneve) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":     types.StringType,
		"description": types.StringType,
		"disable":     types.StringType,
		"mac":         types.StringType,
		"mtu":         types.StringType,
		"redirect":    types.StringType,
		"remote":      types.StringType,
		"vni":         types.StringType,

		// Tags

		// Nodes
		"ip":         types.ObjectType{AttrTypes: InterfacesGeneveIP{}.AttributeTypes()},
		"ipv6":       types.ObjectType{AttrTypes: InterfacesGeneveIPvsix{}.AttributeTypes()},
		"parameters": types.ObjectType{AttrTypes: InterfacesGeneveParameters{}.AttributeTypes()},
		"mirror":     types.ObjectType{AttrTypes: InterfacesGeneveMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesGeneve) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Generic Network Virtualization Encapsulation (GENEVE) Interface

|  Format  |  Description  |
|----------|---------------|
|  gnvN  |  GENEVE interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:1450-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"remote": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Tunnel remote address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Tunnel remote IPv4 address  |
|  ipv6  |  Tunnel remote IPv6 address  |

`,
		},

		"vni": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Virtual Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777214  |  VXLAN virtual network identifier  |

`,
		},

		// TagNodes

		// Nodes

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"parameters": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveParameters{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `GENEVE tunnel parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesGeneveMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
