// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesOpenvpnEncryption describes the resource data model.
type InterfacesOpenvpnEncryption struct {
	// LeafNodes
	LeafInterfacesOpenvpnEncryptionCIPher     types.String `tfsdk:"cipher"`
	LeafInterfacesOpenvpnEncryptionNcpCIPhers types.String `tfsdk:"ncp_ciphers"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesOpenvpnEncryption) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "openvpn", "encryption"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesOpenvpnEncryptionCIPher.IsNull() || o.LeafInterfacesOpenvpnEncryptionCIPher.IsUnknown()) {
		vyosData["cipher"] = o.LeafInterfacesOpenvpnEncryptionCIPher.ValueString()
	}
	if !(o.LeafInterfacesOpenvpnEncryptionNcpCIPhers.IsNull() || o.LeafInterfacesOpenvpnEncryptionNcpCIPhers.IsUnknown()) {
		vyosData["ncp-ciphers"] = o.LeafInterfacesOpenvpnEncryptionNcpCIPhers.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesOpenvpnEncryption) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "openvpn", "encryption"}})

	// Leafs
	if value, ok := vyosData["cipher"]; ok {
		o.LeafInterfacesOpenvpnEncryptionCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnEncryptionCIPher = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ncp-ciphers"]; ok {
		o.LeafInterfacesOpenvpnEncryptionNcpCIPhers = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnEncryptionNcpCIPhers = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "openvpn", "encryption"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesOpenvpnEncryption) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"cipher":      types.StringType,
		"ncp_ciphers": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnEncryption) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Standard Data Encryption Algorithm

|  Format  |  Description  |
|----------|---------------|
|  none  |  Disable encryption  |
|  des  |  DES algorithm  |
|  3des  |  DES algorithm with triple encryption  |
|  bf128  |  Blowfish algorithm with 128-bit key  |
|  bf256  |  Blowfish algorithm with 256-bit key  |
|  aes128  |  AES algorithm with 128-bit key CBC  |
|  aes128gcm  |  AES algorithm with 128-bit key GCM  |
|  aes192  |  AES algorithm with 192-bit key CBC  |
|  aes192gcm  |  AES algorithm with 192-bit key GCM  |
|  aes256  |  AES algorithm with 256-bit key CBC  |
|  aes256gcm  |  AES algorithm with 256-bit key GCM  |

`,
		},

		"ncp_ciphers": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher negotiation list for use in server or client mode

|  Format  |  Description  |
|----------|---------------|
|  none  |  Disable encryption  |
|  des  |  DES algorithm  |
|  3des  |  DES algorithm with triple encryption  |
|  aes128  |  AES algorithm with 128-bit key CBC  |
|  aes128gcm  |  AES algorithm with 128-bit key GCM  |
|  aes192  |  AES algorithm with 192-bit key CBC  |
|  aes192gcm  |  AES algorithm with 192-bit key GCM  |
|  aes256  |  AES algorithm with 256-bit key CBC  |
|  aes256gcm  |  AES algorithm with 256-bit key GCM  |

`,
		},

		// TagNodes

		// Nodes

	}
}
