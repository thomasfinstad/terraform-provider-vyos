// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesOpenvpnServerMfaTotp describes the resource data model.
type InterfacesOpenvpnServerMfaTotp struct {
	// LeafNodes
	LeafInterfacesOpenvpnServerMfaTotpSlop      types.String `tfsdk:"slop" json:"slop,omitempty"`
	LeafInterfacesOpenvpnServerMfaTotpDrift     types.String `tfsdk:"drift" json:"drift,omitempty"`
	LeafInterfacesOpenvpnServerMfaTotpStep      types.String `tfsdk:"step" json:"step,omitempty"`
	LeafInterfacesOpenvpnServerMfaTotpDigits    types.String `tfsdk:"digits" json:"digits,omitempty"`
	LeafInterfacesOpenvpnServerMfaTotpChallenge types.String `tfsdk:"challenge" json:"challenge,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnServerMfaTotp) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"slop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum allowed clock slop in seconds

|  Format  |  Description  |
|----------|---------------|
|  1-65535  |  Seconds  |

`,

			// Default:          stringdefault.StaticString(`180`),
			Computed: true,
		},

		"drift": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time drift in seconds

|  Format  |  Description  |
|----------|---------------|
|  1-65535  |  Seconds  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"step": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Step value for totp in seconds

|  Format  |  Description  |
|----------|---------------|
|  1-65535  |  Seconds  |

`,

			// Default:          stringdefault.StaticString(`30`),
			Computed: true,
		},

		"digits": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of digits to use for totp hash

|  Format  |  Description  |
|----------|---------------|
|  1-65535  |  Seconds  |

`,

			// Default:          stringdefault.StaticString(`6`),
			Computed: true,
		},

		"challenge": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Expect password as result of a challenge response protocol

|  Format  |  Description  |
|----------|---------------|
|  disable  |  Disable challenge-response  |
|  enable  |  Enable chalenge-response  |

`,

			// Default:          stringdefault.StaticString(`enable`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpnServerMfaTotp) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesOpenvpnServerMfaTotpSlop.IsNull() && !o.LeafInterfacesOpenvpnServerMfaTotpSlop.IsUnknown() {
		jsonData["slop"] = o.LeafInterfacesOpenvpnServerMfaTotpSlop.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerMfaTotpDrift.IsNull() && !o.LeafInterfacesOpenvpnServerMfaTotpDrift.IsUnknown() {
		jsonData["drift"] = o.LeafInterfacesOpenvpnServerMfaTotpDrift.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerMfaTotpStep.IsNull() && !o.LeafInterfacesOpenvpnServerMfaTotpStep.IsUnknown() {
		jsonData["step"] = o.LeafInterfacesOpenvpnServerMfaTotpStep.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerMfaTotpDigits.IsNull() && !o.LeafInterfacesOpenvpnServerMfaTotpDigits.IsUnknown() {
		jsonData["digits"] = o.LeafInterfacesOpenvpnServerMfaTotpDigits.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerMfaTotpChallenge.IsNull() && !o.LeafInterfacesOpenvpnServerMfaTotpChallenge.IsUnknown() {
		jsonData["challenge"] = o.LeafInterfacesOpenvpnServerMfaTotpChallenge.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpnServerMfaTotp) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["slop"]; ok {
		o.LeafInterfacesOpenvpnServerMfaTotpSlop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerMfaTotpSlop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["drift"]; ok {
		o.LeafInterfacesOpenvpnServerMfaTotpDrift = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerMfaTotpDrift = basetypes.NewStringNull()
	}

	if value, ok := jsonData["step"]; ok {
		o.LeafInterfacesOpenvpnServerMfaTotpStep = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerMfaTotpStep = basetypes.NewStringNull()
	}

	if value, ok := jsonData["digits"]; ok {
		o.LeafInterfacesOpenvpnServerMfaTotpDigits = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerMfaTotpDigits = basetypes.NewStringNull()
	}

	if value, ok := jsonData["challenge"]; ok {
		o.LeafInterfacesOpenvpnServerMfaTotpChallenge = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerMfaTotpChallenge = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
