// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/customtypes"
)

// InterfacesOpenvpnServer describes the resource data model.
type InterfacesOpenvpnServer struct {
	// LeafNodes
	InterfacesOpenvpnServerDomainName                customtypes.CustomStringValue `tfsdk:"domain_name" json:"domain-name,omitempty"`
	InterfacesOpenvpnServerMaxConnections            customtypes.CustomStringValue `tfsdk:"max_connections" json:"max-connections,omitempty"`
	InterfacesOpenvpnServerNameServer                customtypes.CustomStringValue `tfsdk:"name_server" json:"name-server,omitempty"`
	InterfacesOpenvpnServerRejectUnconfiguredClients customtypes.CustomStringValue `tfsdk:"reject_unconfigured_clients" json:"reject-unconfigured-clients,omitempty"`
	InterfacesOpenvpnServerSubnet                    customtypes.CustomStringValue `tfsdk:"subnet" json:"subnet,omitempty"`
	InterfacesOpenvpnServerTopology                  customtypes.CustomStringValue `tfsdk:"topology" json:"topology,omitempty"`

	// TagNodes
	InterfacesOpenvpnServerClient    types.Map `tfsdk:"client" json:"client,omitempty"`
	InterfacesOpenvpnServerPushRoute types.Map `tfsdk:"push_route" json:"push-route,omitempty"`

	// Nodes
	InterfacesOpenvpnServerClientIPPool     types.Object `tfsdk:"client_ip_pool" json:"client-ip-pool,omitempty"`
	InterfacesOpenvpnServerClientIPvsixPool types.Object `tfsdk:"client_ipv6_pool" json:"client-ipv6-pool,omitempty"`
	InterfacesOpenvpnServerMfa              types.Object `tfsdk:"mfa" json:"mfa,omitempty"`
}

// ResourceAttributes generates the attributes for the resource at this level
func (o InterfacesOpenvpnServer) ResourceAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"domain_name": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `DNS suffix to be pushed to all clients

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Domain Name Server suffix  |
`,
		},

		"max_connections": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Number of maximum client connections

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4096  |  Number of concurrent clients  |
`,
		},

		"name_server": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Domain Name Server (DNS) IPv4 address  |
|  ipv6  |  Domain Name Server (DNS) IPv6 address  |
`,
		},

		"reject_unconfigured_clients": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Reject connections from clients that are not explicitly configured

`,
		},

		"subnet": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Server-mode subnet (from which client IPs are allocated)

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 network and prefix length  |
|  ipv6net  |  IPv6 network and prefix length  |
`,
		},

		"topology": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Topology for clients

|  Format  |  Description  |
|----------|---------------|
|  net30  |  net30 topology  |
|  point-to-point  |  Point-to-point topology  |
|  subnet  |  Subnet topology  |
`,

			// Default:          stringdefault.StaticString(`net30`),
			Computed: true,
		},

		// TagNodes

		"client": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesOpenvpnServerClient{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Client-specific settings

|  Format  |  Description  |
|----------|---------------|
|  name  |  Client common-name in the certificate  |
`,
		},

		"push_route": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesOpenvpnServerPushRoute{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Route to be pushed to all clients

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 network and prefix length  |
|  ipv6net  |  IPv6 network and prefix length  |
`,
		},

		// Nodes

		"client_ip_pool": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnServerClientIPPool{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `Pool of client IPv4 addresses

`,
		},

		"client_ipv6_pool": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnServerClientIPvsixPool{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `Pool of client IPv6 addresses

`,
		},

		"mfa": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnServerMfa{}.ResourceAttributes(),
			Optional:   true,
			MarkdownDescription: `multi-factor authentication

`,
		},
	}
}
