// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesOpenvpn describes the resource data model.
type InterfacesOpenvpn struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesOpenvpnDescrIPtion       types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesOpenvpnDeviceType        types.String `tfsdk:"device_type" json:"device-type,omitempty"`
	LeafInterfacesOpenvpnDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesOpenvpnHash              types.String `tfsdk:"hash" json:"hash,omitempty"`
	LeafInterfacesOpenvpnLocalHost         types.String `tfsdk:"local_host" json:"local-host,omitempty"`
	LeafInterfacesOpenvpnLocalPort         types.String `tfsdk:"local_port" json:"local-port,omitempty"`
	LeafInterfacesOpenvpnMode              types.String `tfsdk:"mode" json:"mode,omitempty"`
	LeafInterfacesOpenvpnOpenvpnOption     types.String `tfsdk:"openvpn_option" json:"openvpn-option,omitempty"`
	LeafInterfacesOpenvpnPersistentTunnel  types.String `tfsdk:"persistent_tunnel" json:"persistent-tunnel,omitempty"`
	LeafInterfacesOpenvpnProtocol          types.String `tfsdk:"protocol" json:"protocol,omitempty"`
	LeafInterfacesOpenvpnRemoteAddress     types.String `tfsdk:"remote_address" json:"remote-address,omitempty"`
	LeafInterfacesOpenvpnRemoteHost        types.String `tfsdk:"remote_host" json:"remote-host,omitempty"`
	LeafInterfacesOpenvpnRemotePort        types.String `tfsdk:"remote_port" json:"remote-port,omitempty"`
	LeafInterfacesOpenvpnSharedSecretKey   types.String `tfsdk:"shared_secret_key" json:"shared-secret-key,omitempty"`
	LeafInterfacesOpenvpnUseLzoCompression types.String `tfsdk:"use_lzo_compression" json:"use-lzo-compression,omitempty"`
	LeafInterfacesOpenvpnRedirect          types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesOpenvpnVrf               types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes
	TagInterfacesOpenvpnLocalAddress *map[string]InterfacesOpenvpnLocalAddress `tfsdk:"local_address" json:"local-address,omitempty"`

	// Nodes
	NodeInterfacesOpenvpnAuthentication      *InterfacesOpenvpnAuthentication      `tfsdk:"authentication" json:"authentication,omitempty"`
	NodeInterfacesOpenvpnEncryption          *InterfacesOpenvpnEncryption          `tfsdk:"encryption" json:"encryption,omitempty"`
	NodeInterfacesOpenvpnIP                  *InterfacesOpenvpnIP                  `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesOpenvpnIPvsix              *InterfacesOpenvpnIPvsix              `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesOpenvpnMirror              *InterfacesOpenvpnMirror              `tfsdk:"mirror" json:"mirror,omitempty"`
	NodeInterfacesOpenvpnKeepAlive           *InterfacesOpenvpnKeepAlive           `tfsdk:"keep_alive" json:"keep-alive,omitempty"`
	NodeInterfacesOpenvpnReplaceDefaultRoute *InterfacesOpenvpnReplaceDefaultRoute `tfsdk:"replace_default_route" json:"replace-default-route,omitempty"`
	NodeInterfacesOpenvpnServer              *InterfacesOpenvpnServer              `tfsdk:"server" json:"server,omitempty"`
	NodeInterfacesOpenvpnTLS                 *InterfacesOpenvpnTLS                 `tfsdk:"tls" json:"tls,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesOpenvpn) GetVyosPath() []string {
	return []string{
		"interfaces",
		"openvpn",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpn) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `OpenVPN Tunnel Interface

|  Format  |  Description  |
|----------|---------------|
|  vtunN  |  OpenVPN interface name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"device_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN interface device-type

|  Format  |  Description  |
|----------|---------------|
|  tun  |  TUN device, required for OSI layer 3  |
|  tap  |  TAP device, required for OSI layer 2  |

`,

			// Default:          stringdefault.StaticString(`tun`),
			Computed: true,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"hash": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hashing Algorithm

|  Format  |  Description  |
|----------|---------------|
|  md5  |  MD5 algorithm  |
|  sha1  |  SHA-1 algorithm  |
|  sha256  |  SHA-256 algorithm  |
|  sha384  |  SHA-384 algorithm  |
|  sha512  |  SHA-512 algorithm  |

`,
		},

		"local_host": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local IP address to accept connections (all if not set)

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Local IPv4 address  |
|  ipv6  |  Local IPv6 address  |

`,
		},

		"local_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local port number to accept connections

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN mode of operation

|  Format  |  Description  |
|----------|---------------|
|  site-to-site  |  Site-to-site mode  |
|  client  |  Client in client-server mode  |
|  server  |  Server in client-server mode  |

`,
		},

		"openvpn_option": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Additional OpenVPN options. You must use the syntax of openvpn.conf in this text-field. Using this without proper knowledge may result in a crashed OpenVPN server. Check system log to look for errors.

`,
		},

		"persistent_tunnel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not close and reopen interface (TUN/TAP device) on client restarts

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `OpenVPN communication protocol

|  Format  |  Description  |
|----------|---------------|
|  udp  |  UDP  |
|  tcp-passive  |  TCP and accepts connections passively  |
|  tcp-active  |  TCP and initiates connections actively  |

`,

			// Default:          stringdefault.StaticString(`udp`),
			Computed: true,
		},

		"remote_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address of remote end of tunnel

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Remote end IPv4 address  |
|  ipv6  |  Remote end IPv6 address  |

`,
		},

		"remote_host": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Remote host to connect to (dynamic if not set)

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of remote host  |
|  ipv6  |  IPv6 address of remote host  |
|  txt  |  Hostname of remote host  |

`,
		},

		"remote_port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Remote port number to connect to

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Numeric IP port  |

`,
		},

		"shared_secret_key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Secret key shared with remote end of tunnel

`,
		},

		"use_lzo_compression": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use fast LZO compression on this TUN/TAP interface

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"local_address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesOpenvpnLocalAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Local IP address of tunnel (IPv4 or IPv6)

`,
		},

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication settings

`,
		},

		"encryption": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnEncryption{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Data Encryption settings

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"keep_alive": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnKeepAlive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Keepalive helper options

`,
		},

		"replace_default_route": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnReplaceDefaultRoute{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `OpenVPN tunnel to be used as the default route

`,
		},

		"server": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnServer{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Server-mode options

`,
		},

		"tls": schema.SingleNestedAttribute{
			Attributes: InterfacesOpenvpnTLS{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Transport Layer Security (TLS) options

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpn) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesOpenvpnDescrIPtion.IsNull() && !o.LeafInterfacesOpenvpnDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesOpenvpnDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesOpenvpnDeviceType.IsNull() && !o.LeafInterfacesOpenvpnDeviceType.IsUnknown() {
		jsonData["device-type"] = o.LeafInterfacesOpenvpnDeviceType.ValueString()
	}

	if !o.LeafInterfacesOpenvpnDisable.IsNull() && !o.LeafInterfacesOpenvpnDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesOpenvpnDisable.ValueString()
	}

	if !o.LeafInterfacesOpenvpnHash.IsNull() && !o.LeafInterfacesOpenvpnHash.IsUnknown() {
		jsonData["hash"] = o.LeafInterfacesOpenvpnHash.ValueString()
	}

	if !o.LeafInterfacesOpenvpnLocalHost.IsNull() && !o.LeafInterfacesOpenvpnLocalHost.IsUnknown() {
		jsonData["local-host"] = o.LeafInterfacesOpenvpnLocalHost.ValueString()
	}

	if !o.LeafInterfacesOpenvpnLocalPort.IsNull() && !o.LeafInterfacesOpenvpnLocalPort.IsUnknown() {
		jsonData["local-port"] = o.LeafInterfacesOpenvpnLocalPort.ValueString()
	}

	if !o.LeafInterfacesOpenvpnMode.IsNull() && !o.LeafInterfacesOpenvpnMode.IsUnknown() {
		jsonData["mode"] = o.LeafInterfacesOpenvpnMode.ValueString()
	}

	if !o.LeafInterfacesOpenvpnOpenvpnOption.IsNull() && !o.LeafInterfacesOpenvpnOpenvpnOption.IsUnknown() {
		jsonData["openvpn-option"] = o.LeafInterfacesOpenvpnOpenvpnOption.ValueString()
	}

	if !o.LeafInterfacesOpenvpnPersistentTunnel.IsNull() && !o.LeafInterfacesOpenvpnPersistentTunnel.IsUnknown() {
		jsonData["persistent-tunnel"] = o.LeafInterfacesOpenvpnPersistentTunnel.ValueString()
	}

	if !o.LeafInterfacesOpenvpnProtocol.IsNull() && !o.LeafInterfacesOpenvpnProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafInterfacesOpenvpnProtocol.ValueString()
	}

	if !o.LeafInterfacesOpenvpnRemoteAddress.IsNull() && !o.LeafInterfacesOpenvpnRemoteAddress.IsUnknown() {
		jsonData["remote-address"] = o.LeafInterfacesOpenvpnRemoteAddress.ValueString()
	}

	if !o.LeafInterfacesOpenvpnRemoteHost.IsNull() && !o.LeafInterfacesOpenvpnRemoteHost.IsUnknown() {
		jsonData["remote-host"] = o.LeafInterfacesOpenvpnRemoteHost.ValueString()
	}

	if !o.LeafInterfacesOpenvpnRemotePort.IsNull() && !o.LeafInterfacesOpenvpnRemotePort.IsUnknown() {
		jsonData["remote-port"] = o.LeafInterfacesOpenvpnRemotePort.ValueString()
	}

	if !o.LeafInterfacesOpenvpnSharedSecretKey.IsNull() && !o.LeafInterfacesOpenvpnSharedSecretKey.IsUnknown() {
		jsonData["shared-secret-key"] = o.LeafInterfacesOpenvpnSharedSecretKey.ValueString()
	}

	if !o.LeafInterfacesOpenvpnUseLzoCompression.IsNull() && !o.LeafInterfacesOpenvpnUseLzoCompression.IsUnknown() {
		jsonData["use-lzo-compression"] = o.LeafInterfacesOpenvpnUseLzoCompression.ValueString()
	}

	if !o.LeafInterfacesOpenvpnRedirect.IsNull() && !o.LeafInterfacesOpenvpnRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesOpenvpnRedirect.ValueString()
	}

	if !o.LeafInterfacesOpenvpnVrf.IsNull() && !o.LeafInterfacesOpenvpnVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesOpenvpnVrf.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagInterfacesOpenvpnLocalAddress).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesOpenvpnLocalAddress)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-address"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnEncryption).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnEncryption)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["encryption"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnKeepAlive).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnKeepAlive)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["keep-alive"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnReplaceDefaultRoute).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnReplaceDefaultRoute)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["replace-default-route"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnServer).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnServer)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["server"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesOpenvpnTLS).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesOpenvpnTLS)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["tls"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpn) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesOpenvpnDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["device-type"]; ok {
		o.LeafInterfacesOpenvpnDeviceType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnDeviceType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesOpenvpnDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hash"]; ok {
		o.LeafInterfacesOpenvpnHash = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnHash = basetypes.NewStringNull()
	}

	if value, ok := jsonData["local-host"]; ok {
		o.LeafInterfacesOpenvpnLocalHost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnLocalHost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["local-port"]; ok {
		o.LeafInterfacesOpenvpnLocalPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnLocalPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafInterfacesOpenvpnMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["openvpn-option"]; ok {
		o.LeafInterfacesOpenvpnOpenvpnOption = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnOpenvpnOption = basetypes.NewStringNull()
	}

	if value, ok := jsonData["persistent-tunnel"]; ok {
		o.LeafInterfacesOpenvpnPersistentTunnel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnPersistentTunnel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafInterfacesOpenvpnProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-address"]; ok {
		o.LeafInterfacesOpenvpnRemoteAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnRemoteAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-host"]; ok {
		o.LeafInterfacesOpenvpnRemoteHost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnRemoteHost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-port"]; ok {
		o.LeafInterfacesOpenvpnRemotePort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnRemotePort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shared-secret-key"]; ok {
		o.LeafInterfacesOpenvpnSharedSecretKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnSharedSecretKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["use-lzo-compression"]; ok {
		o.LeafInterfacesOpenvpnUseLzoCompression = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnUseLzoCompression = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesOpenvpnRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesOpenvpnVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["local-address"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesOpenvpnLocalAddress = &map[string]InterfacesOpenvpnLocalAddress{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesOpenvpnLocalAddress)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnAuthentication = &InterfacesOpenvpnAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["encryption"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnEncryption = &InterfacesOpenvpnEncryption{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnEncryption)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnIP = &InterfacesOpenvpnIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnIPvsix = &InterfacesOpenvpnIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnMirror = &InterfacesOpenvpnMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["keep-alive"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnKeepAlive = &InterfacesOpenvpnKeepAlive{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnKeepAlive)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["replace-default-route"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnReplaceDefaultRoute = &InterfacesOpenvpnReplaceDefaultRoute{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnReplaceDefaultRoute)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["server"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnServer = &InterfacesOpenvpnServer{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnServer)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["tls"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesOpenvpnTLS = &InterfacesOpenvpnTLS{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesOpenvpnTLS)
		if err != nil {
			return err
		}
	}

	return nil
}
