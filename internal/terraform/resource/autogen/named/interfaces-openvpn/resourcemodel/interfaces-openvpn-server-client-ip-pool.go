// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesOpenvpnServerClientIPPool describes the resource data model.
type InterfacesOpenvpnServerClientIPPool struct {
	// LeafNodes
	LeafInterfacesOpenvpnServerClientIPPoolDisable    types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesOpenvpnServerClientIPPoolStart      types.String `tfsdk:"start" json:"start,omitempty"`
	LeafInterfacesOpenvpnServerClientIPPoolStop       types.String `tfsdk:"stop" json:"stop,omitempty"`
	LeafInterfacesOpenvpnServerClientIPPoolSubnetMask types.String `tfsdk:"subnet_mask" json:"subnet-mask,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesOpenvpnServerClientIPPool) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"start": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `First IP address in the pool

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |

`,
		},

		"stop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Last IP address in the pool

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address  |

`,
		},

		"subnet_mask": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Subnet mask pushed to dynamic clients. If not set the server subnet mask will be used. Only used with topology subnet or device type tap. Not used with bridged interfaces.

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 subnet mask  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesOpenvpnServerClientIPPool) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesOpenvpnServerClientIPPoolDisable.IsNull() && !o.LeafInterfacesOpenvpnServerClientIPPoolDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesOpenvpnServerClientIPPoolDisable.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientIPPoolStart.IsNull() && !o.LeafInterfacesOpenvpnServerClientIPPoolStart.IsUnknown() {
		jsonData["start"] = o.LeafInterfacesOpenvpnServerClientIPPoolStart.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientIPPoolStop.IsNull() && !o.LeafInterfacesOpenvpnServerClientIPPoolStop.IsUnknown() {
		jsonData["stop"] = o.LeafInterfacesOpenvpnServerClientIPPoolStop.ValueString()
	}

	if !o.LeafInterfacesOpenvpnServerClientIPPoolSubnetMask.IsNull() && !o.LeafInterfacesOpenvpnServerClientIPPoolSubnetMask.IsUnknown() {
		jsonData["subnet-mask"] = o.LeafInterfacesOpenvpnServerClientIPPoolSubnetMask.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesOpenvpnServerClientIPPool) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesOpenvpnServerClientIPPoolDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientIPPoolDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["start"]; ok {
		o.LeafInterfacesOpenvpnServerClientIPPoolStart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientIPPoolStart = basetypes.NewStringNull()
	}

	if value, ok := jsonData["stop"]; ok {
		o.LeafInterfacesOpenvpnServerClientIPPoolStop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientIPPoolStop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["subnet-mask"]; ok {
		o.LeafInterfacesOpenvpnServerClientIPPoolSubnetMask = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesOpenvpnServerClientIPPoolSubnetMask = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
