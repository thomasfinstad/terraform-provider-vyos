// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceWebproxyURLFilteringSquIDguardSourceGroup describes the resource data model.
type ServiceWebproxyURLFilteringSquIDguardSourceGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress        types.String `tfsdk:"address"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion    types.String `tfsdk:"description"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain         types.String `tfsdk:"domain"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch   types.String `tfsdk:"ldap_ip_search"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch types.String `tfsdk:"ldap_user_search"`
	LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser           types.String `tfsdk:"user"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) GetVyosPath() []string {
	return []string{
		"service",
		"webproxy",
		"url-filtering",
		"squidguard",
		"source-group",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "webproxy", "url-filtering", "squidguard", "source-group"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.IsUnknown()) {
		vyosData["address"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress.ValueString()
	}
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion.ValueString()
	}
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.IsUnknown()) {
		vyosData["domain"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain.ValueString()
	}
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.IsUnknown()) {
		vyosData["ldap-ip-search"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch.ValueString()
	}
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.IsUnknown()) {
		vyosData["ldap-user-search"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch.ValueString()
	}
	if !(o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.IsNull() || o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.IsUnknown()) {
		vyosData["user"] = o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceWebproxyURLFilteringSquIDguardSourceGroup) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "webproxy", "url-filtering", "squidguard", "source-group"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["domain"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupDomain = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ldap-ip-search"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapIPSearch = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ldap-user-search"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupLdapUserSearch = basetypes.NewStringNull()
	}
	if value, ok := vyosData["user"]; ok {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceWebproxyURLFilteringSquIDguardSourceGroupUser = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "webproxy", "url-filtering", "squidguard", "source-group"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceWebproxyURLFilteringSquIDguardSourceGroup) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":          types.StringType,
		"description":      types.StringType,
		"domain":           types.StringType,
		"ldap_ip_search":   types.StringType,
		"ldap_user_search": types.StringType,
		"user":             types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceWebproxyURLFilteringSquIDguardSourceGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Source group name

|  Format  |  Description  |
|----------|---------------|
|  name  |  Name of source group  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Address for source-group

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |
|  ipv4range  |  IPv4 address range to match  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description for source-group

`,
		},

		"domain": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain for source-group

|  Format  |  Description  |
|----------|---------------|
|  domain  |  Domain name for the source-group  |

`,
		},

		"ldap_ip_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP search expression for an IP address list

`,
		},

		"ldap_user_search": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `LDAP search expression for a user group

`,
		},

		"user": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `List of user names

`,
		},

		// TagNodes

		// Nodes

	}
}
