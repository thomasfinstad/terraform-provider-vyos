// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallIPvsixNameRule describes the resource data model.
type FirewallIPvsixNameRule struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDFirewallIPvsixName any `tfsdk:"ipv6_name" vyos:"ipv6-name,parent-id"`

	// LeafNodes
	LeafFirewallIPvsixNameRuleAction              types.String `tfsdk:"action" vyos:"action,omitempty"`
	LeafFirewallIPvsixNameRuleDescrIPtion         types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafFirewallIPvsixNameRuleDisable             types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafFirewallIPvsixNameRuleLog                 types.String `tfsdk:"log" vyos:"log,omitempty"`
	LeafFirewallIPvsixNameRuleLogLevel            types.String `tfsdk:"log_level" vyos:"log-level,omitempty"`
	LeafFirewallIPvsixNameRuleProtocol            types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafFirewallIPvsixNameRuleDscp                types.String `tfsdk:"dscp" vyos:"dscp,omitempty"`
	LeafFirewallIPvsixNameRuleDscpExclude         types.String `tfsdk:"dscp_exclude" vyos:"dscp-exclude,omitempty"`
	LeafFirewallIPvsixNameRulePacketLength        types.String `tfsdk:"packet_length" vyos:"packet-length,omitempty"`
	LeafFirewallIPvsixNameRulePacketLengthExclude types.String `tfsdk:"packet_length_exclude" vyos:"packet-length-exclude,omitempty"`
	LeafFirewallIPvsixNameRulePacketType          types.String `tfsdk:"packet_type" vyos:"packet-type,omitempty"`
	LeafFirewallIPvsixNameRuleConnectionMark      types.String `tfsdk:"connection_mark" vyos:"connection-mark,omitempty"`
	LeafFirewallIPvsixNameRuleJumpTarget          types.String `tfsdk:"jump_target" vyos:"jump-target,omitempty"`
	LeafFirewallIPvsixNameRuleQueue               types.String `tfsdk:"queue" vyos:"queue,omitempty"`
	LeafFirewallIPvsixNameRuleQueueOptions        types.String `tfsdk:"queue_options" vyos:"queue-options,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeFirewallIPvsixNameRuleDestination       *FirewallIPvsixNameRuleDestination       `tfsdk:"destination" vyos:"destination,omitempty"`
	NodeFirewallIPvsixNameRuleSource            *FirewallIPvsixNameRuleSource            `tfsdk:"source" vyos:"source,omitempty"`
	NodeFirewallIPvsixNameRuleFragment          *FirewallIPvsixNameRuleFragment          `tfsdk:"fragment" vyos:"fragment,omitempty"`
	NodeFirewallIPvsixNameRuleInboundInterface  *FirewallIPvsixNameRuleInboundInterface  `tfsdk:"inbound_interface" vyos:"inbound-interface,omitempty"`
	NodeFirewallIPvsixNameRuleOutboundInterface *FirewallIPvsixNameRuleOutboundInterface `tfsdk:"outbound_interface" vyos:"outbound-interface,omitempty"`
	NodeFirewallIPvsixNameRuleIPsec             *FirewallIPvsixNameRuleIPsec             `tfsdk:"ipsec" vyos:"ipsec,omitempty"`
	NodeFirewallIPvsixNameRuleLimit             *FirewallIPvsixNameRuleLimit             `tfsdk:"limit" vyos:"limit,omitempty"`
	NodeFirewallIPvsixNameRuleConnectionStatus  *FirewallIPvsixNameRuleConnectionStatus  `tfsdk:"connection_status" vyos:"connection-status,omitempty"`
	NodeFirewallIPvsixNameRuleRecent            *FirewallIPvsixNameRuleRecent            `tfsdk:"recent" vyos:"recent,omitempty"`
	NodeFirewallIPvsixNameRuleState             *FirewallIPvsixNameRuleState             `tfsdk:"state" vyos:"state,omitempty"`
	NodeFirewallIPvsixNameRuleTCP               *FirewallIPvsixNameRuleTCP               `tfsdk:"tcp" vyos:"tcp,omitempty"`
	NodeFirewallIPvsixNameRuleTime              *FirewallIPvsixNameRuleTime              `tfsdk:"time" vyos:"time,omitempty"`
	NodeFirewallIPvsixNameRuleHopLimit          *FirewallIPvsixNameRuleHopLimit          `tfsdk:"hop_limit" vyos:"hop-limit,omitempty"`
	NodeFirewallIPvsixNameRuleIcmpvsix          *FirewallIPvsixNameRuleIcmpvsix          `tfsdk:"icmpv6" vyos:"icmpv6,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *FirewallIPvsixNameRule) GetVyosPath() []string {
	return []string{
		"firewall",
		"ipv6-name",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallIPvsixNameRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Firewall rule number (IPv6)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-999999  |  Number for this Firewall rule  |

`,
		},

		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rule action

    |  Format  |  Description  |
    |----------|---------------|
    |  accept  |  Accept matching entries  |
    |  jump  |  Jump to another chain  |
    |  reject  |  Reject matching entries  |
    |  return  |  Return from the current chain and continue at the next rule of the                       last chain  |
    |  drop  |  Drop matching entries  |
    |  queue  |  Enqueue packet to userspace  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to disable firewall rule

`,
		},

		"log": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Option to log packets matching rule

    |  Format  |  Description  |
    |----------|---------------|
    |  enable  |  Enable log  |
    |  disable  |  Disable log  |

`,
		},

		"log_level": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set log-level. Log must be enable.

    |  Format  |  Description  |
    |----------|---------------|
    |  emerg  |  Emerg log level  |
    |  alert  |  Alert log level  |
    |  crit  |  Critical log level  |
    |  err  |  Error log level  |
    |  warn  |  Warning log level  |
    |  notice  |  Notice log level  |
    |  info  |  Info log level  |
    |  debug  |  Debug log level  |

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol to match (protocol name, number, or "all")

    |  Format  |  Description  |
    |----------|---------------|
    |  all  |  All IP protocols  |
    |  tcp_udp  |  Both TCP and UDP  |
    |  u32:0-255  |  IP protocol number  |
    |  <protocol>  |  IP protocol name  |
    |  !<protocol>  |  IP protocol name  |

`,
		},

		"dscp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DSCP value

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-63  |  DSCP value to match  |
    |  <start-end>  |  DSCP range to match  |

`,
		},

		"dscp_exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DSCP value not to match

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-63  |  DSCP value not to match  |
    |  <start-end>  |  DSCP range not to match  |

`,
		},

		"packet_length": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Payload size in bytes, including header and data to match

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Packet length to match  |
    |  <start-end>  |  Packet length range to match  |

`,
		},

		"packet_length_exclude": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Payload size in bytes, including header and data not to match

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Packet length not to match  |
    |  <start-end>  |  Packet length range not to match  |

`,
		},

		"packet_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Packet type

    |  Format  |  Description  |
    |----------|---------------|
    |  broadcast  |  Match broadcast packet type  |
    |  host  |  Match host packet type, addressed to local host  |
    |  multicast  |  Match multicast packet type  |
    |  other  |  Match packet addressed to another host  |

`,
		},

		"connection_mark": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection mark

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-2147483647  |  Connection-mark to match  |

`,
		},

		"jump_target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set jump target. Action jump must be defined to use this setting

`,
		},

		"queue": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue target to use. Action queue must be defined to use this setting

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0-65535  |  Queue target  |

`,
		},

		"queue_options": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Options used for queue target. Action queue must be defined to use this
                    setting

    |  Format  |  Description  |
    |----------|---------------|
    |  bypass  |  Let packets go through if userspace application cannot back off  |
    |  fanout  |  Distribute packets between several queues  |

`,
		},

		// Nodes

		"destination": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleDestination{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Destination parameters

`,
		},

		"source": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleSource{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Source parameters

`,
		},

		"fragment": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleFragment{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IP fragment match

`,
		},

		"inbound_interface": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleInboundInterface{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match inbound-interface

`,
		},

		"outbound_interface": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleOutboundInterface{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match outbound-interface

`,
		},

		"ipsec": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleIPsec{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Inbound IPsec packets

`,
		},

		"limit": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Rate limit using a token bucket filter

`,
		},

		"connection_status": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleConnectionStatus{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Connection status

`,
		},

		"recent": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleRecent{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Parameters for matching recently seen sources

`,
		},

		"state": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleState{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Session state

`,
		},

		"tcp": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleTCP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP flags to match

`,
		},

		"time": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleTime{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Time to match rule

`,
		},

		"hop_limit": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleHopLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Hop limit

`,
		},

		"icmpv6": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleIcmpvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `ICMPv6 type and code information

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallIPvsixNameRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallIPvsixNameRuleAction.IsNull() && !o.LeafFirewallIPvsixNameRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafFirewallIPvsixNameRuleAction.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleDescrIPtion.IsNull() && !o.LeafFirewallIPvsixNameRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafFirewallIPvsixNameRuleDescrIPtion.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleDisable.IsNull() && !o.LeafFirewallIPvsixNameRuleDisable.IsUnknown() {
		jsonData["disable"] = o.LeafFirewallIPvsixNameRuleDisable.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleLog.IsNull() && !o.LeafFirewallIPvsixNameRuleLog.IsUnknown() {
		jsonData["log"] = o.LeafFirewallIPvsixNameRuleLog.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleLogLevel.IsNull() && !o.LeafFirewallIPvsixNameRuleLogLevel.IsUnknown() {
		jsonData["log-level"] = o.LeafFirewallIPvsixNameRuleLogLevel.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleProtocol.IsNull() && !o.LeafFirewallIPvsixNameRuleProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafFirewallIPvsixNameRuleProtocol.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleDscp.IsNull() && !o.LeafFirewallIPvsixNameRuleDscp.IsUnknown() {
		jsonData["dscp"] = o.LeafFirewallIPvsixNameRuleDscp.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleDscpExclude.IsNull() && !o.LeafFirewallIPvsixNameRuleDscpExclude.IsUnknown() {
		jsonData["dscp-exclude"] = o.LeafFirewallIPvsixNameRuleDscpExclude.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRulePacketLength.IsNull() && !o.LeafFirewallIPvsixNameRulePacketLength.IsUnknown() {
		jsonData["packet-length"] = o.LeafFirewallIPvsixNameRulePacketLength.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRulePacketLengthExclude.IsNull() && !o.LeafFirewallIPvsixNameRulePacketLengthExclude.IsUnknown() {
		jsonData["packet-length-exclude"] = o.LeafFirewallIPvsixNameRulePacketLengthExclude.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRulePacketType.IsNull() && !o.LeafFirewallIPvsixNameRulePacketType.IsUnknown() {
		jsonData["packet-type"] = o.LeafFirewallIPvsixNameRulePacketType.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleConnectionMark.IsNull() && !o.LeafFirewallIPvsixNameRuleConnectionMark.IsUnknown() {
		jsonData["connection-mark"] = o.LeafFirewallIPvsixNameRuleConnectionMark.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleJumpTarget.IsNull() && !o.LeafFirewallIPvsixNameRuleJumpTarget.IsUnknown() {
		jsonData["jump-target"] = o.LeafFirewallIPvsixNameRuleJumpTarget.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleQueue.IsNull() && !o.LeafFirewallIPvsixNameRuleQueue.IsUnknown() {
		jsonData["queue"] = o.LeafFirewallIPvsixNameRuleQueue.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleQueueOptions.IsNull() && !o.LeafFirewallIPvsixNameRuleQueueOptions.IsUnknown() {
		jsonData["queue-options"] = o.LeafFirewallIPvsixNameRuleQueueOptions.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleDestination).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleDestination)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["destination"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleSource).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleSource)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["source"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleFragment).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleFragment)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["fragment"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleInboundInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleInboundInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["inbound-interface"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleOutboundInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleOutboundInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["outbound-interface"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleIPsec).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleIPsec)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipsec"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["limit"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleConnectionStatus).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleConnectionStatus)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connection-status"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleRecent).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleRecent)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["recent"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleState).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleState)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["state"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleTCP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleTCP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["tcp"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleTime).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleTime)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["time"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleHopLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleHopLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["hop-limit"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleIcmpvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleIcmpvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["icmpv6"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallIPvsixNameRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafFirewallIPvsixNameRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafFirewallIPvsixNameRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafFirewallIPvsixNameRuleDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["log"]; ok {
		o.LeafFirewallIPvsixNameRuleLog = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleLog = basetypes.NewStringNull()
	}

	if value, ok := jsonData["log-level"]; ok {
		o.LeafFirewallIPvsixNameRuleLogLevel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleLogLevel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafFirewallIPvsixNameRuleProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dscp"]; ok {
		o.LeafFirewallIPvsixNameRuleDscp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleDscp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dscp-exclude"]; ok {
		o.LeafFirewallIPvsixNameRuleDscpExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleDscpExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-length"]; ok {
		o.LeafFirewallIPvsixNameRulePacketLength = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRulePacketLength = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-length-exclude"]; ok {
		o.LeafFirewallIPvsixNameRulePacketLengthExclude = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRulePacketLengthExclude = basetypes.NewStringNull()
	}

	if value, ok := jsonData["packet-type"]; ok {
		o.LeafFirewallIPvsixNameRulePacketType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRulePacketType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["connection-mark"]; ok {
		o.LeafFirewallIPvsixNameRuleConnectionMark = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleConnectionMark = basetypes.NewStringNull()
	}

	if value, ok := jsonData["jump-target"]; ok {
		o.LeafFirewallIPvsixNameRuleJumpTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleJumpTarget = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue"]; ok {
		o.LeafFirewallIPvsixNameRuleQueue = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleQueue = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-options"]; ok {
		o.LeafFirewallIPvsixNameRuleQueueOptions = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleQueueOptions = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["destination"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleDestination = &FirewallIPvsixNameRuleDestination{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleDestination)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["source"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleSource = &FirewallIPvsixNameRuleSource{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleSource)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["fragment"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleFragment = &FirewallIPvsixNameRuleFragment{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleFragment)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["inbound-interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleInboundInterface = &FirewallIPvsixNameRuleInboundInterface{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleInboundInterface)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["outbound-interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleOutboundInterface = &FirewallIPvsixNameRuleOutboundInterface{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleOutboundInterface)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipsec"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleIPsec = &FirewallIPvsixNameRuleIPsec{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleIPsec)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleLimit = &FirewallIPvsixNameRuleLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleLimit)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["connection-status"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleConnectionStatus = &FirewallIPvsixNameRuleConnectionStatus{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleConnectionStatus)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["recent"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleRecent = &FirewallIPvsixNameRuleRecent{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleRecent)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["state"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleState = &FirewallIPvsixNameRuleState{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleState)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["tcp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleTCP = &FirewallIPvsixNameRuleTCP{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleTCP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["time"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleTime = &FirewallIPvsixNameRuleTime{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleTime)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["hop-limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleHopLimit = &FirewallIPvsixNameRuleHopLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleHopLimit)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["icmpv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleIcmpvsix = &FirewallIPvsixNameRuleIcmpvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleIcmpvsix)
		if err != nil {
			return err
		}
	}

	return nil
}
