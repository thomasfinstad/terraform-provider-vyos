// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallNameRuleSource describes the resource data model.
type FirewallNameRuleSource struct {
	// LeafNodes
	LeafFirewallNameRuleSourceAddress     types.String `tfsdk:"address" vyos:"address,omitempty"`
	LeafFirewallNameRuleSourceFqdn        types.String `tfsdk:"fqdn" vyos:"fqdn,omitempty"`
	LeafFirewallNameRuleSourcePort        types.String `tfsdk:"port" vyos:"port,omitempty"`
	LeafFirewallNameRuleSourceAddressMask types.String `tfsdk:"address_mask" vyos:"address-mask,omitempty"`
	LeafFirewallNameRuleSourceMacAddress  types.String `tfsdk:"mac_address" vyos:"mac-address,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeFirewallNameRuleSourceGeoIP *FirewallNameRuleSourceGeoIP `tfsdk:"geoip" vyos:"geoip,omitempty"`
	NodeFirewallNameRuleSourceGroup *FirewallNameRuleSourceGroup `tfsdk:"group" vyos:"group,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallNameRuleSource) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address, subnet, or range

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 address to match  |
    |  ipv4net  |  IPv4 prefix to match  |
    |  ipv4range  |  IPv4 address range to match  |
    |  !ipv4  |  Match everything except the specified address  |
    |  !ipv4net  |  Match everything except the specified prefix  |
    |  !ipv4range  |  Match everything except the specified range  |

`,
		},

		"fqdn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Fully qualified domain name

    |  Format  |  Description  |
    |----------|---------------|
    |  <fqdn>  |  Fully qualified domain name  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Named port (any name in /etc/services, e.g., http)  |
    |  u32:1-65535  |  Numbered port  |
    |  <start-end>  |  Numbered port range (e.g. 1001-1005)  |
    |     |  \n\n Multiple destination ports can be specified as a                           comma-separated list.\n For example: 'telnet,http,123,1001-1005'  |

`,
		},

		"address_mask": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP mask

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  IPv4 mask to apply  |

`,
		},

		"mac_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `MAC address

    |  Format  |  Description  |
    |----------|---------------|
    |  macaddr  |  MAC address to match  |
    |  !macaddr  |  Match everything except the specified MAC address  |

`,
		},

		// Nodes

		"geoip": schema.SingleNestedAttribute{
			Attributes: FirewallNameRuleSourceGeoIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `GeoIP options - Data provided by DB-IP.com

`,
		},

		"group": schema.SingleNestedAttribute{
			Attributes: FirewallNameRuleSourceGroup{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Group

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallNameRuleSource) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallNameRuleSourceAddress.IsNull() && !o.LeafFirewallNameRuleSourceAddress.IsUnknown() {
		jsonData["address"] = o.LeafFirewallNameRuleSourceAddress.ValueString()
	}

	if !o.LeafFirewallNameRuleSourceFqdn.IsNull() && !o.LeafFirewallNameRuleSourceFqdn.IsUnknown() {
		jsonData["fqdn"] = o.LeafFirewallNameRuleSourceFqdn.ValueString()
	}

	if !o.LeafFirewallNameRuleSourcePort.IsNull() && !o.LeafFirewallNameRuleSourcePort.IsUnknown() {
		jsonData["port"] = o.LeafFirewallNameRuleSourcePort.ValueString()
	}

	if !o.LeafFirewallNameRuleSourceAddressMask.IsNull() && !o.LeafFirewallNameRuleSourceAddressMask.IsUnknown() {
		jsonData["address-mask"] = o.LeafFirewallNameRuleSourceAddressMask.ValueString()
	}

	if !o.LeafFirewallNameRuleSourceMacAddress.IsNull() && !o.LeafFirewallNameRuleSourceMacAddress.IsUnknown() {
		jsonData["mac-address"] = o.LeafFirewallNameRuleSourceMacAddress.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeFirewallNameRuleSourceGeoIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallNameRuleSourceGeoIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["geoip"] = subData
	}

	if !reflect.ValueOf(o.NodeFirewallNameRuleSourceGroup).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallNameRuleSourceGroup)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["group"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallNameRuleSource) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafFirewallNameRuleSourceAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleSourceAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["fqdn"]; ok {
		o.LeafFirewallNameRuleSourceFqdn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleSourceFqdn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafFirewallNameRuleSourcePort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleSourcePort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["address-mask"]; ok {
		o.LeafFirewallNameRuleSourceAddressMask = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleSourceAddressMask = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac-address"]; ok {
		o.LeafFirewallNameRuleSourceMacAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleSourceMacAddress = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["geoip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallNameRuleSourceGeoIP = &FirewallNameRuleSourceGeoIP{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallNameRuleSourceGeoIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["group"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallNameRuleSourceGroup = &FirewallNameRuleSourceGroup{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallNameRuleSourceGroup)
		if err != nil {
			return err
		}
	}

	return nil
}
