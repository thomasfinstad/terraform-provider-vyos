// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallZone describes the resource data model.
type FirewallZone struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafFirewallZoneDescrIPtion      types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafFirewallZoneEnableDefaultLog types.String `tfsdk:"enable_default_log" vyos:"enable-default-log,omitempty"`
	LeafFirewallZoneDefaultAction    types.String `tfsdk:"default_action" vyos:"default-action,omitempty"`
	LeafFirewallZoneInterface        types.String `tfsdk:"interface" vyos:"interface,omitempty"`
	LeafFirewallZoneLocalZone        types.String `tfsdk:"local_zone" vyos:"local-zone,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagFirewallZoneFrom bool `tfsdk:"from" vyos:"from,child"`

	// Nodes
	NodeFirewallZoneIntraZoneFiltering *FirewallZoneIntraZoneFiltering `tfsdk:"intra_zone_filtering" vyos:"intra-zone-filtering,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *FirewallZone) GetVyosPath() []string {
	return []string{
		"firewall",
		"zone",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallZone) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Zone-policy

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Zone name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"enable_default_log": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Log packets hitting default-action

`,
		},

		"default_action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Default-action for traffic coming into this zone

    |  Format  |  Description  |
    |----------|---------------|
    |  drop  |  Drop silently  |
    |  reject  |  Drop and notify source  |

`,

			// Default:          stringdefault.StaticString(`drop`),
			Computed: true,
		},

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface associated with zone

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Interface associated with zone  |

`,
		},

		"local_zone": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Zone to be local-zone

`,
		},

		// Nodes

		"intra_zone_filtering": schema.SingleNestedAttribute{
			Attributes: FirewallZoneIntraZoneFiltering{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Intra-zone filtering

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallZone) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallZoneDescrIPtion.IsNull() && !o.LeafFirewallZoneDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafFirewallZoneDescrIPtion.ValueString()
	}

	if !o.LeafFirewallZoneEnableDefaultLog.IsNull() && !o.LeafFirewallZoneEnableDefaultLog.IsUnknown() {
		jsonData["enable-default-log"] = o.LeafFirewallZoneEnableDefaultLog.ValueString()
	}

	if !o.LeafFirewallZoneDefaultAction.IsNull() && !o.LeafFirewallZoneDefaultAction.IsUnknown() {
		jsonData["default-action"] = o.LeafFirewallZoneDefaultAction.ValueString()
	}

	if !o.LeafFirewallZoneInterface.IsNull() && !o.LeafFirewallZoneInterface.IsUnknown() {
		jsonData["interface"] = o.LeafFirewallZoneInterface.ValueString()
	}

	if !o.LeafFirewallZoneLocalZone.IsNull() && !o.LeafFirewallZoneLocalZone.IsUnknown() {
		jsonData["local-zone"] = o.LeafFirewallZoneLocalZone.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeFirewallZoneIntraZoneFiltering).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallZoneIntraZoneFiltering)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["intra-zone-filtering"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallZone) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafFirewallZoneDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallZoneDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["enable-default-log"]; ok {
		o.LeafFirewallZoneEnableDefaultLog = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallZoneEnableDefaultLog = basetypes.NewStringNull()
	}

	if value, ok := jsonData["default-action"]; ok {
		o.LeafFirewallZoneDefaultAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallZoneDefaultAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interface"]; ok {
		o.LeafFirewallZoneInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallZoneInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["local-zone"]; ok {
		o.LeafFirewallZoneLocalZone = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallZoneLocalZone = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["intra-zone-filtering"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallZoneIntraZoneFiltering = &FirewallZoneIntraZoneFiltering{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallZoneIntraZoneFiltering)
		if err != nil {
			return err
		}
	}

	return nil
}
