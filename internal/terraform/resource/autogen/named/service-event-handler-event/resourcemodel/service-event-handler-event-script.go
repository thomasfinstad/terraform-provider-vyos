// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceEventHandlerEventScrIPt describes the resource data model.
type ServiceEventHandlerEventScrIPt struct {
	// LeafNodes
	LeafServiceEventHandlerEventScrIPtArguments types.String `tfsdk:"arguments"`
	LeafServiceEventHandlerEventScrIPtPath      types.String `tfsdk:"path"`

	// TagNodes
	TagServiceEventHandlerEventScrIPtEnvironment types.Map `tfsdk:"environment"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceEventHandlerEventScrIPt) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "event-handler", "event", "script"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceEventHandlerEventScrIPtArguments.IsNull() || o.LeafServiceEventHandlerEventScrIPtArguments.IsUnknown()) {
		vyosData["arguments"] = o.LeafServiceEventHandlerEventScrIPtArguments.ValueString()
	}
	if !(o.LeafServiceEventHandlerEventScrIPtPath.IsNull() || o.LeafServiceEventHandlerEventScrIPtPath.IsUnknown()) {
		vyosData["path"] = o.LeafServiceEventHandlerEventScrIPtPath.ValueString()
	}

	// Tags
	if !(o.TagServiceEventHandlerEventScrIPtEnvironment.IsNull() || o.TagServiceEventHandlerEventScrIPtEnvironment.IsUnknown()) {
		subModel := make(map[string]ServiceEventHandlerEventScrIPtEnvironment)
		diags.Append(o.TagServiceEventHandlerEventScrIPtEnvironment.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["environment"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceEventHandlerEventScrIPt) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "event-handler", "event", "script"}})

	// Leafs
	if value, ok := vyosData["arguments"]; ok {
		o.LeafServiceEventHandlerEventScrIPtArguments = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceEventHandlerEventScrIPtArguments = basetypes.NewStringNull()
	}
	if value, ok := vyosData["path"]; ok {
		o.LeafServiceEventHandlerEventScrIPtPath = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceEventHandlerEventScrIPtPath = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["environment"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceEventHandlerEventScrIPtEnvironment{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceEventHandlerEventScrIPtEnvironment = data
	} else {
		o.TagServiceEventHandlerEventScrIPtEnvironment = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "event-handler", "event", "script"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceEventHandlerEventScrIPt) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"arguments": types.StringType,
		"path":      types.StringType,

		// Tags
		"environment": types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceEventHandlerEventScrIPtEnvironment{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceEventHandlerEventScrIPt) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"arguments": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Script arguments

`,
		},

		"path": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Path to the script

`,
		},

		// TagNodes

		"environment": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceEventHandlerEventScrIPtEnvironment{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Script environment arguments

`,
		},

		// Nodes

	}
}
