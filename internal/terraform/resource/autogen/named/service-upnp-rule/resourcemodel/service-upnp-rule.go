// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceUpnpRule describes the resource data model.
type ServiceUpnpRule struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceUpnpRuleDisable           types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafServiceUpnpRuleExternalPortRange types.String `tfsdk:"external_port_range" json:"external-port-range,omitempty"`
	LeafServiceUpnpRuleInternalPortRange types.String `tfsdk:"internal_port_range" json:"internal-port-range,omitempty"`
	LeafServiceUpnpRuleIP                types.String `tfsdk:"ip" json:"ip,omitempty"`
	LeafServiceUpnpRuleAction            types.String `tfsdk:"action" json:"action,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceUpnpRule) GetVyosPath() []string {
	return []string{
		"service",
		"upnp",
		"rule",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceUpnpRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `UPnP Rule

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule number  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"external_port_range": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port range (REQUIRE)

|  Format  |  Description  |
|----------|---------------|
|  <port>  |  single port  |
|  <portN>-<portM>  |  Port range (use '-' as delimiter)  |

`,
		},

		"internal_port_range": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Port range (REQUIRE)

|  Format  |  Description  |
|----------|---------------|
|  <port>  |  single port  |
|  <portN>-<portM>  |  Port range (use '-' as delimiter)  |

`,
		},

		"ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `The IP to which this rule applies (REQUIRE)

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  The IPv4 address to which this rule applies  |
|  ipv4net  |  The IPv4 to which this rule applies  |

`,
		},

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Actions against the rule (REQUIRE)

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceUpnpRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceUpnpRuleDisable.IsNull() && !o.LeafServiceUpnpRuleDisable.IsUnknown() {
		jsonData["disable"] = o.LeafServiceUpnpRuleDisable.ValueString()
	}

	if !o.LeafServiceUpnpRuleExternalPortRange.IsNull() && !o.LeafServiceUpnpRuleExternalPortRange.IsUnknown() {
		jsonData["external-port-range"] = o.LeafServiceUpnpRuleExternalPortRange.ValueString()
	}

	if !o.LeafServiceUpnpRuleInternalPortRange.IsNull() && !o.LeafServiceUpnpRuleInternalPortRange.IsUnknown() {
		jsonData["internal-port-range"] = o.LeafServiceUpnpRuleInternalPortRange.ValueString()
	}

	if !o.LeafServiceUpnpRuleIP.IsNull() && !o.LeafServiceUpnpRuleIP.IsUnknown() {
		jsonData["ip"] = o.LeafServiceUpnpRuleIP.ValueString()
	}

	if !o.LeafServiceUpnpRuleAction.IsNull() && !o.LeafServiceUpnpRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafServiceUpnpRuleAction.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceUpnpRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafServiceUpnpRuleDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceUpnpRuleDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["external-port-range"]; ok {
		o.LeafServiceUpnpRuleExternalPortRange = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceUpnpRuleExternalPortRange = basetypes.NewStringNull()
	}

	if value, ok := jsonData["internal-port-range"]; ok {
		o.LeafServiceUpnpRuleInternalPortRange = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceUpnpRuleInternalPortRange = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ip"]; ok {
		o.LeafServiceUpnpRuleIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceUpnpRuleIP = basetypes.NewStringNull()
	}

	if value, ok := jsonData["action"]; ok {
		o.LeafServiceUpnpRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceUpnpRuleAction = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
