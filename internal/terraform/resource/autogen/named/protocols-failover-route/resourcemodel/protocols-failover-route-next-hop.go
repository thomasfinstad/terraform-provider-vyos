// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsFailoverRouteNextHop describes the resource data model.
type ProtocolsFailoverRouteNextHop struct {
	// LeafNodes
	LeafProtocolsFailoverRouteNextHopInterface types.String `tfsdk:"interface" json:"interface,omitempty"`
	LeafProtocolsFailoverRouteNextHopMetric    types.String `tfsdk:"metric" json:"metric,omitempty"`

	// TagNodes

	// Nodes
	NodeProtocolsFailoverRouteNextHopCheck *ProtocolsFailoverRouteNextHopCheck `tfsdk:"check" json:"check,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsFailoverRouteNextHop) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Gateway interface name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |

`,
		},

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Route metric for this gateway

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Route metric  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// TagNodes

		// Nodes

		"check": schema.SingleNestedAttribute{
			Attributes: ProtocolsFailoverRouteNextHopCheck{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Check target options

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsFailoverRouteNextHop) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsFailoverRouteNextHopInterface.IsNull() && !o.LeafProtocolsFailoverRouteNextHopInterface.IsUnknown() {
		jsonData["interface"] = o.LeafProtocolsFailoverRouteNextHopInterface.ValueString()
	}

	if !o.LeafProtocolsFailoverRouteNextHopMetric.IsNull() && !o.LeafProtocolsFailoverRouteNextHopMetric.IsUnknown() {
		jsonData["metric"] = o.LeafProtocolsFailoverRouteNextHopMetric.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsFailoverRouteNextHopCheck).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsFailoverRouteNextHopCheck)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["check"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsFailoverRouteNextHop) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["interface"]; ok {
		o.LeafProtocolsFailoverRouteNextHopInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsFailoverRouteNextHopInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["metric"]; ok {
		o.LeafProtocolsFailoverRouteNextHopMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsFailoverRouteNextHopMetric = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["check"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsFailoverRouteNextHopCheck = &ProtocolsFailoverRouteNextHopCheck{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsFailoverRouteNextHopCheck)
		if err != nil {
			return err
		}
	}

	return nil
}
