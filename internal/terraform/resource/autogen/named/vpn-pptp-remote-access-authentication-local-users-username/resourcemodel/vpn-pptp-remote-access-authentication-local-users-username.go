// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnPptpRemoteAccessAuthenticationLocalUsersUsername describes the resource data model.
type VpnPptpRemoteAccessAuthenticationLocalUsersUsername struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable  types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword types.String `tfsdk:"password" json:"password,omitempty"`
	LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP types.String `tfsdk:"static_ip" json:"static-ip,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnPptpRemoteAccessAuthenticationLocalUsersUsername) GetVyosPath() []string {
	return []string{
		"vpn",
		"pptp",
		"remote-access",
		"authentication",
		"local-users",
		"username",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnPptpRemoteAccessAuthenticationLocalUsersUsername) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `User name for authentication

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Password for authentication

`,
		},

		"static_ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Static client IP address

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnPptpRemoteAccessAuthenticationLocalUsersUsername) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable.IsNull() && !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable.ValueString()
	}

	if !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword.IsNull() && !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword.IsUnknown() {
		jsonData["password"] = o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword.ValueString()
	}

	if !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP.IsNull() && !o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP.IsUnknown() {
		jsonData["static-ip"] = o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnPptpRemoteAccessAuthenticationLocalUsersUsername) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernamePassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["static-ip"]; ok {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnPptpRemoteAccessAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
