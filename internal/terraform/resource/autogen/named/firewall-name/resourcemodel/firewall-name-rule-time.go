// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallNameRuleTime describes the resource data model.
type FirewallNameRuleTime struct {
	// LeafNodes
	LeafFirewallNameRuleTimeStartdate types.String `tfsdk:"startdate" json:"startdate,omitempty"`
	LeafFirewallNameRuleTimeStarttime types.String `tfsdk:"starttime" json:"starttime,omitempty"`
	LeafFirewallNameRuleTimeStopdate  types.String `tfsdk:"stopdate" json:"stopdate,omitempty"`
	LeafFirewallNameRuleTimeStoptime  types.String `tfsdk:"stoptime" json:"stoptime,omitempty"`
	LeafFirewallNameRuleTimeWeekdays  types.String `tfsdk:"weekdays" json:"weekdays,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallNameRuleTime) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"startdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to start matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter date using following notation - YYYY-MM-DD  |

`,
		},

		"starttime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to start matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter time using using 24 hour notation - hh:mm:ss  |

`,
		},

		"stopdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to stop matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter date using following notation - YYYY-MM-DD  |

`,
		},

		"stoptime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to stop matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter time using using 24 hour notation - hh:mm:ss  |

`,
		},

		"weekdays": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Comma separated weekdays to match rule on

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of day (Monday, Tuesday, Wednesday, Thursdays, Friday,                           Saturday, Sunday)  |
|  u32:0-6  |  Day number (0 = Sunday ... 6 = Saturday)  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallNameRuleTime) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallNameRuleTimeStartdate.IsNull() && !o.LeafFirewallNameRuleTimeStartdate.IsUnknown() {
		jsonData["startdate"] = o.LeafFirewallNameRuleTimeStartdate.ValueString()
	}

	if !o.LeafFirewallNameRuleTimeStarttime.IsNull() && !o.LeafFirewallNameRuleTimeStarttime.IsUnknown() {
		jsonData["starttime"] = o.LeafFirewallNameRuleTimeStarttime.ValueString()
	}

	if !o.LeafFirewallNameRuleTimeStopdate.IsNull() && !o.LeafFirewallNameRuleTimeStopdate.IsUnknown() {
		jsonData["stopdate"] = o.LeafFirewallNameRuleTimeStopdate.ValueString()
	}

	if !o.LeafFirewallNameRuleTimeStoptime.IsNull() && !o.LeafFirewallNameRuleTimeStoptime.IsUnknown() {
		jsonData["stoptime"] = o.LeafFirewallNameRuleTimeStoptime.ValueString()
	}

	if !o.LeafFirewallNameRuleTimeWeekdays.IsNull() && !o.LeafFirewallNameRuleTimeWeekdays.IsUnknown() {
		jsonData["weekdays"] = o.LeafFirewallNameRuleTimeWeekdays.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallNameRuleTime) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["startdate"]; ok {
		o.LeafFirewallNameRuleTimeStartdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTimeStartdate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["starttime"]; ok {
		o.LeafFirewallNameRuleTimeStarttime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTimeStarttime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["stopdate"]; ok {
		o.LeafFirewallNameRuleTimeStopdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTimeStopdate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["stoptime"]; ok {
		o.LeafFirewallNameRuleTimeStoptime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTimeStoptime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["weekdays"]; ok {
		o.LeafFirewallNameRuleTimeWeekdays = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTimeWeekdays = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
