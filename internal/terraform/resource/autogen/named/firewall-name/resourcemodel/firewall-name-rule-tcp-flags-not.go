// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallNameRuleTCPFlagsNot describes the resource data model.
type FirewallNameRuleTCPFlagsNot struct {
	// LeafNodes
	LeafFirewallNameRuleTCPFlagsNotSyn types.String `tfsdk:"syn" json:"syn,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotAck types.String `tfsdk:"ack" json:"ack,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotFin types.String `tfsdk:"fin" json:"fin,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotRst types.String `tfsdk:"rst" json:"rst,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotUrg types.String `tfsdk:"urg" json:"urg,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotPsh types.String `tfsdk:"psh" json:"psh,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotEcn types.String `tfsdk:"ecn" json:"ecn,omitempty"`
	LeafFirewallNameRuleTCPFlagsNotCwr types.String `tfsdk:"cwr" json:"cwr,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallNameRuleTCPFlagsNot) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"syn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Synchronise flag

`,
		},

		"ack": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acknowledge flag

`,
		},

		"fin": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Finish flag

`,
		},

		"rst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Reset flag

`,
		},

		"urg": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Urgent flag

`,
		},

		"psh": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Push flag

`,
		},

		"ecn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Explicit Congestion Notification flag

`,
		},

		"cwr": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Congestion Window Reduced flag

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallNameRuleTCPFlagsNot) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallNameRuleTCPFlagsNotSyn.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotSyn.IsUnknown() {
		jsonData["syn"] = o.LeafFirewallNameRuleTCPFlagsNotSyn.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotAck.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotAck.IsUnknown() {
		jsonData["ack"] = o.LeafFirewallNameRuleTCPFlagsNotAck.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotFin.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotFin.IsUnknown() {
		jsonData["fin"] = o.LeafFirewallNameRuleTCPFlagsNotFin.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotRst.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotRst.IsUnknown() {
		jsonData["rst"] = o.LeafFirewallNameRuleTCPFlagsNotRst.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotUrg.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotUrg.IsUnknown() {
		jsonData["urg"] = o.LeafFirewallNameRuleTCPFlagsNotUrg.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotPsh.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotPsh.IsUnknown() {
		jsonData["psh"] = o.LeafFirewallNameRuleTCPFlagsNotPsh.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotEcn.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotEcn.IsUnknown() {
		jsonData["ecn"] = o.LeafFirewallNameRuleTCPFlagsNotEcn.ValueString()
	}

	if !o.LeafFirewallNameRuleTCPFlagsNotCwr.IsNull() && !o.LeafFirewallNameRuleTCPFlagsNotCwr.IsUnknown() {
		jsonData["cwr"] = o.LeafFirewallNameRuleTCPFlagsNotCwr.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallNameRuleTCPFlagsNot) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["syn"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotSyn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotSyn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ack"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotAck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotAck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["fin"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotFin = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotFin = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rst"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotRst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotRst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["urg"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotUrg = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotUrg = basetypes.NewStringNull()
	}

	if value, ok := jsonData["psh"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotPsh = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotPsh = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ecn"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotEcn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotEcn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cwr"]; ok {
		o.LeafFirewallNameRuleTCPFlagsNotCwr = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallNameRuleTCPFlagsNotCwr = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
