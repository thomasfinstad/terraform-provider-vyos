// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsBgpNeighbor describes the resource data model.
type ProtocolsBgpNeighbor struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsBgpNeighborAdvertisementInterval        types.String `tfsdk:"advertisement_interval" json:"advertisement-interval,omitempty"`
	LeafProtocolsBgpNeighborDescrIPtion                  types.String `tfsdk:"description" json:"description,omitempty"`
	LeafProtocolsBgpNeighborDisableCapabilityNegotiation types.String `tfsdk:"disable_capability_negotiation" json:"disable-capability-negotiation,omitempty"`
	LeafProtocolsBgpNeighborDisableConnectedCheck        types.String `tfsdk:"disable_connected_check" json:"disable-connected-check,omitempty"`
	LeafProtocolsBgpNeighborEbgpMultihop                 types.String `tfsdk:"ebgp_multihop" json:"ebgp-multihop,omitempty"`
	LeafProtocolsBgpNeighborGracefulRestart              types.String `tfsdk:"graceful_restart" json:"graceful-restart,omitempty"`
	LeafProtocolsBgpNeighborOverrIDeCapability           types.String `tfsdk:"override_capability" json:"override-capability,omitempty"`
	LeafProtocolsBgpNeighborPassive                      types.String `tfsdk:"passive" json:"passive,omitempty"`
	LeafProtocolsBgpNeighborPassword                     types.String `tfsdk:"password" json:"password,omitempty"`
	LeafProtocolsBgpNeighborPeerGroup                    types.String `tfsdk:"peer_group" json:"peer-group,omitempty"`
	LeafProtocolsBgpNeighborPort                         types.String `tfsdk:"port" json:"port,omitempty"`
	LeafProtocolsBgpNeighborRemoteAs                     types.String `tfsdk:"remote_as" json:"remote-as,omitempty"`
	LeafProtocolsBgpNeighborShutdown                     types.String `tfsdk:"shutdown" json:"shutdown,omitempty"`
	LeafProtocolsBgpNeighborSolo                         types.String `tfsdk:"solo" json:"solo,omitempty"`
	LeafProtocolsBgpNeighborStrictCapabilityMatch        types.String `tfsdk:"strict_capability_match" json:"strict-capability-match,omitempty"`
	LeafProtocolsBgpNeighborUpdateSource                 types.String `tfsdk:"update_source" json:"update-source,omitempty"`

	// TagNodes
	TagProtocolsBgpNeighborLocalAs   *map[string]ProtocolsBgpNeighborLocalAs   `tfsdk:"local_as" json:"local-as,omitempty"`
	TagProtocolsBgpNeighborLocalRole *map[string]ProtocolsBgpNeighborLocalRole `tfsdk:"local_role" json:"local-role,omitempty"`

	// Nodes
	NodeProtocolsBgpNeighborAddressFamily *ProtocolsBgpNeighborAddressFamily `tfsdk:"address_family" json:"address-family,omitempty"`
	NodeProtocolsBgpNeighborBfd           *ProtocolsBgpNeighborBfd           `tfsdk:"bfd" json:"bfd,omitempty"`
	NodeProtocolsBgpNeighborCapability    *ProtocolsBgpNeighborCapability    `tfsdk:"capability" json:"capability,omitempty"`
	NodeProtocolsBgpNeighborInterface     *ProtocolsBgpNeighborInterface     `tfsdk:"interface" json:"interface,omitempty"`
	NodeProtocolsBgpNeighborTimers        *ProtocolsBgpNeighborTimers        `tfsdk:"timers" json:"timers,omitempty"`
	NodeProtocolsBgpNeighborTTLSecURIty   *ProtocolsBgpNeighborTTLSecURIty   `tfsdk:"ttl_security" json:"ttl-security,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsBgpNeighbor) GetVyosPath() []string {
	return []string{
		"protocols",
		"bgp",
		"neighbor",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsBgpNeighbor) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `BGP neighbor

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  BGP neighbor IP address  |
|  ipv6  |  BGP neighbor IPv6 address  |
|  txt  |  Interface name  |

`,
		},

		// LeafNodes

		"advertisement_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval for sending routing updates

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600  |  Advertisement interval in seconds  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_capability_negotiation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable capability negotiation with this neighbor

`,
		},

		"disable_connected_check": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable check to see if eBGP peer address is a connected route

`,
		},

		"ebgp_multihop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow this EBGP neighbor to not be on a directly connected network

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of hops  |

`,
		},

		"graceful_restart": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP graceful restart functionality

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable BGP graceful restart at peer level  |
|  disable  |  Disable BGP graceful restart at peer level  |
|  restart-helper  |  Enable BGP graceful restart helper only functionality  |

`,
		},

		"override_capability": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore capability negotiation with specified neighbor

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not initiate a session with this neighbor

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP MD5 password

`,
		},

		"peer_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor BGP port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor BGP port number  |

`,
		},

		"remote_as": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |

`,
		},

		"shutdown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively shutdown this neighbor

`,
		},

		"solo": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not send back prefixes learned from the neighbor

`,
		},

		"strict_capability_match": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable strict capability negotiation

`,
		},

		"update_source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP of routing updates

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of route source  |
|  ipv6  |  IPv6 address of route source  |
|  txt  |  Interface as route source  |

`,
		},

		// TagNodes

		"local_as": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsBgpNeighborLocalAs{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Specify alternate ASN for this BGP process

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number (ASN)  |

`,
		},

		"local_role": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsBgpNeighborLocalRole{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Local role for BGP neighbor (RFC9234)

|  Format  |  Description  |
|----------|---------------|
|  customer  |  Using Transit  |
|  peer  |  Public/Private Peering  |
|  provider  |  Providing Transit  |
|  rs-client  |  RS Client  |
|  rs-server  |  Route Server  |

`,
		},

		// Nodes

		"address_family": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborAddressFamily{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Address-family parameters

`,
		},

		"bfd": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD) support

`,
		},

		"capability": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborCapability{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertise capabilities to this peer-group

`,
		},

		"interface": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborInterface{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Interface parameters

`,
		},

		"timers": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborTimers{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Neighbor timers

`,
		},

		"ttl_security": schema.SingleNestedAttribute{
			Attributes: ProtocolsBgpNeighborTTLSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Ttl security mechanism

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsBgpNeighbor) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsBgpNeighborAdvertisementInterval.IsNull() && !o.LeafProtocolsBgpNeighborAdvertisementInterval.IsUnknown() {
		jsonData["advertisement-interval"] = o.LeafProtocolsBgpNeighborAdvertisementInterval.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborDescrIPtion.IsNull() && !o.LeafProtocolsBgpNeighborDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafProtocolsBgpNeighborDescrIPtion.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborDisableCapabilityNegotiation.IsNull() && !o.LeafProtocolsBgpNeighborDisableCapabilityNegotiation.IsUnknown() {
		jsonData["disable-capability-negotiation"] = o.LeafProtocolsBgpNeighborDisableCapabilityNegotiation.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborDisableConnectedCheck.IsNull() && !o.LeafProtocolsBgpNeighborDisableConnectedCheck.IsUnknown() {
		jsonData["disable-connected-check"] = o.LeafProtocolsBgpNeighborDisableConnectedCheck.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborEbgpMultihop.IsNull() && !o.LeafProtocolsBgpNeighborEbgpMultihop.IsUnknown() {
		jsonData["ebgp-multihop"] = o.LeafProtocolsBgpNeighborEbgpMultihop.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborGracefulRestart.IsNull() && !o.LeafProtocolsBgpNeighborGracefulRestart.IsUnknown() {
		jsonData["graceful-restart"] = o.LeafProtocolsBgpNeighborGracefulRestart.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborOverrIDeCapability.IsNull() && !o.LeafProtocolsBgpNeighborOverrIDeCapability.IsUnknown() {
		jsonData["override-capability"] = o.LeafProtocolsBgpNeighborOverrIDeCapability.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborPassive.IsNull() && !o.LeafProtocolsBgpNeighborPassive.IsUnknown() {
		jsonData["passive"] = o.LeafProtocolsBgpNeighborPassive.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborPassword.IsNull() && !o.LeafProtocolsBgpNeighborPassword.IsUnknown() {
		jsonData["password"] = o.LeafProtocolsBgpNeighborPassword.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborPeerGroup.IsNull() && !o.LeafProtocolsBgpNeighborPeerGroup.IsUnknown() {
		jsonData["peer-group"] = o.LeafProtocolsBgpNeighborPeerGroup.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborPort.IsNull() && !o.LeafProtocolsBgpNeighborPort.IsUnknown() {
		jsonData["port"] = o.LeafProtocolsBgpNeighborPort.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborRemoteAs.IsNull() && !o.LeafProtocolsBgpNeighborRemoteAs.IsUnknown() {
		jsonData["remote-as"] = o.LeafProtocolsBgpNeighborRemoteAs.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborShutdown.IsNull() && !o.LeafProtocolsBgpNeighborShutdown.IsUnknown() {
		jsonData["shutdown"] = o.LeafProtocolsBgpNeighborShutdown.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborSolo.IsNull() && !o.LeafProtocolsBgpNeighborSolo.IsUnknown() {
		jsonData["solo"] = o.LeafProtocolsBgpNeighborSolo.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborStrictCapabilityMatch.IsNull() && !o.LeafProtocolsBgpNeighborStrictCapabilityMatch.IsUnknown() {
		jsonData["strict-capability-match"] = o.LeafProtocolsBgpNeighborStrictCapabilityMatch.ValueString()
	}

	if !o.LeafProtocolsBgpNeighborUpdateSource.IsNull() && !o.LeafProtocolsBgpNeighborUpdateSource.IsUnknown() {
		jsonData["update-source"] = o.LeafProtocolsBgpNeighborUpdateSource.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagProtocolsBgpNeighborLocalAs).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsBgpNeighborLocalAs)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-as"] = subData
	}

	if !reflect.ValueOf(o.TagProtocolsBgpNeighborLocalRole).IsZero() {
		subJSONStr, err := json.Marshal(o.TagProtocolsBgpNeighborLocalRole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-role"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborAddressFamily).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborAddressFamily)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["address-family"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborCapability).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborCapability)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["capability"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interface"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborTimers).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborTimers)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["timers"] = subData
	}

	if !reflect.ValueOf(o.NodeProtocolsBgpNeighborTTLSecURIty).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeProtocolsBgpNeighborTTLSecURIty)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ttl-security"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsBgpNeighbor) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["advertisement-interval"]; ok {
		o.LeafProtocolsBgpNeighborAdvertisementInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborAdvertisementInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafProtocolsBgpNeighborDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-capability-negotiation"]; ok {
		o.LeafProtocolsBgpNeighborDisableCapabilityNegotiation = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborDisableCapabilityNegotiation = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-connected-check"]; ok {
		o.LeafProtocolsBgpNeighborDisableConnectedCheck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborDisableConnectedCheck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ebgp-multihop"]; ok {
		o.LeafProtocolsBgpNeighborEbgpMultihop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborEbgpMultihop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["graceful-restart"]; ok {
		o.LeafProtocolsBgpNeighborGracefulRestart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborGracefulRestart = basetypes.NewStringNull()
	}

	if value, ok := jsonData["override-capability"]; ok {
		o.LeafProtocolsBgpNeighborOverrIDeCapability = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborOverrIDeCapability = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafProtocolsBgpNeighborPassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborPassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafProtocolsBgpNeighborPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["peer-group"]; ok {
		o.LeafProtocolsBgpNeighborPeerGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborPeerGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafProtocolsBgpNeighborPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-as"]; ok {
		o.LeafProtocolsBgpNeighborRemoteAs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborRemoteAs = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shutdown"]; ok {
		o.LeafProtocolsBgpNeighborShutdown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborShutdown = basetypes.NewStringNull()
	}

	if value, ok := jsonData["solo"]; ok {
		o.LeafProtocolsBgpNeighborSolo = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborSolo = basetypes.NewStringNull()
	}

	if value, ok := jsonData["strict-capability-match"]; ok {
		o.LeafProtocolsBgpNeighborStrictCapabilityMatch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborStrictCapabilityMatch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["update-source"]; ok {
		o.LeafProtocolsBgpNeighborUpdateSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsBgpNeighborUpdateSource = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["local-as"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsBgpNeighborLocalAs = &map[string]ProtocolsBgpNeighborLocalAs{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsBgpNeighborLocalAs)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["local-role"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagProtocolsBgpNeighborLocalRole = &map[string]ProtocolsBgpNeighborLocalRole{}

		err = json.Unmarshal(subJSONStr, o.TagProtocolsBgpNeighborLocalRole)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["address-family"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborAddressFamily = &ProtocolsBgpNeighborAddressFamily{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborAddressFamily)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborBfd = &ProtocolsBgpNeighborBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["capability"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborCapability = &ProtocolsBgpNeighborCapability{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborCapability)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborInterface = &ProtocolsBgpNeighborInterface{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborInterface)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["timers"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborTimers = &ProtocolsBgpNeighborTimers{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborTimers)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ttl-security"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeProtocolsBgpNeighborTTLSecURIty = &ProtocolsBgpNeighborTTLSecURIty{}

		err = json.Unmarshal(subJSONStr, o.NodeProtocolsBgpNeighborTTLSecURIty)
		if err != nil {
			return err
		}
	}

	return nil
}
