// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ProtocolsIgmpProxyInterface describes the resource data model.
type ProtocolsIgmpProxyInterface struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsIgmpProxyInterfaceAltSubnet types.String `tfsdk:"alt_subnet" json:"alt-subnet,omitempty"`
	LeafProtocolsIgmpProxyInterfaceRole      types.String `tfsdk:"role" json:"role,omitempty"`
	LeafProtocolsIgmpProxyInterfaceThreshold types.String `tfsdk:"threshold" json:"threshold,omitempty"`
	LeafProtocolsIgmpProxyInterfaceWhitelist types.String `tfsdk:"whitelist" json:"whitelist,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsIgmpProxyInterface) GetVyosPath() []string {
	return []string{
		"protocols",
		"igmp-proxy",
		"interface",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsIgmpProxyInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Interface for IGMP proxy

`,
		},

		// LeafNodes

		"alt_subnet": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Unicast source networks allowed for multicast traffic to be proxyed

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 network  |

`,
		},

		"role": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IGMP interface role

|  Format  |  Description  |
|----------|---------------|
|  upstream  |  Upstream interface (only 1 allowed)  |
|  downstream  |  Downstream interface(s)  |
|  disabled  |  Disabled interface  |

`,

			// Default:          stringdefault.StaticString(`downstream`),
			Computed: true,
		},

		"threshold": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `TTL threshold

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  TTL threshold for the interfaces  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"whitelist": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Group to whitelist

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 network  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ProtocolsIgmpProxyInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafProtocolsIgmpProxyInterfaceAltSubnet.IsNull() && !o.LeafProtocolsIgmpProxyInterfaceAltSubnet.IsUnknown() {
		jsonData["alt-subnet"] = o.LeafProtocolsIgmpProxyInterfaceAltSubnet.ValueString()
	}

	if !o.LeafProtocolsIgmpProxyInterfaceRole.IsNull() && !o.LeafProtocolsIgmpProxyInterfaceRole.IsUnknown() {
		jsonData["role"] = o.LeafProtocolsIgmpProxyInterfaceRole.ValueString()
	}

	if !o.LeafProtocolsIgmpProxyInterfaceThreshold.IsNull() && !o.LeafProtocolsIgmpProxyInterfaceThreshold.IsUnknown() {
		jsonData["threshold"] = o.LeafProtocolsIgmpProxyInterfaceThreshold.ValueString()
	}

	if !o.LeafProtocolsIgmpProxyInterfaceWhitelist.IsNull() && !o.LeafProtocolsIgmpProxyInterfaceWhitelist.IsUnknown() {
		jsonData["whitelist"] = o.LeafProtocolsIgmpProxyInterfaceWhitelist.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ProtocolsIgmpProxyInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["alt-subnet"]; ok {
		o.LeafProtocolsIgmpProxyInterfaceAltSubnet = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpProxyInterfaceAltSubnet = basetypes.NewStringNull()
	}

	if value, ok := jsonData["role"]; ok {
		o.LeafProtocolsIgmpProxyInterfaceRole = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpProxyInterfaceRole = basetypes.NewStringNull()
	}

	if value, ok := jsonData["threshold"]; ok {
		o.LeafProtocolsIgmpProxyInterfaceThreshold = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpProxyInterfaceThreshold = basetypes.NewStringNull()
	}

	if value, ok := jsonData["whitelist"]; ok {
		o.LeafProtocolsIgmpProxyInterfaceWhitelist = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsIgmpProxyInterfaceWhitelist = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
