// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyRandomDetectPrecedence describes the resource data model.
type QosPolicyRandomDetectPrecedence struct {
	// LeafNodes
	LeafQosPolicyRandomDetectPrecedenceQueueLimit       types.String `tfsdk:"queue_limit" json:"queue-limit,omitempty"`
	LeafQosPolicyRandomDetectPrecedenceAveragePacket    types.String `tfsdk:"average_packet" json:"average-packet,omitempty"`
	LeafQosPolicyRandomDetectPrecedenceMarkProbability  types.String `tfsdk:"mark_probability" json:"mark-probability,omitempty"`
	LeafQosPolicyRandomDetectPrecedenceMaximumThreshold types.String `tfsdk:"maximum_threshold" json:"maximum-threshold,omitempty"`
	LeafQosPolicyRandomDetectPrecedenceMinimumThreshold types.String `tfsdk:"minimum_threshold" json:"minimum-threshold,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyRandomDetectPrecedence) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"average_packet": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Average packet size (bytes)

|  Format  |  Description  |
|----------|---------------|
|  u32:16-10240  |  Average packet size in bytes  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"mark_probability": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Mark probability for this precedence

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Numeric value (1/N)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"maximum_threshold": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum threshold for random detection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4096  |  Maximum Threshold in packets  |

`,

			// Default:          stringdefault.StaticString(`18`),
			Computed: true,
		},

		"minimum_threshold": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum  threshold for random detection

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4096  |  Maximum Threshold in packets  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyRandomDetectPrecedence) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyRandomDetectPrecedenceQueueLimit.IsNull() && !o.LeafQosPolicyRandomDetectPrecedenceQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyRandomDetectPrecedenceQueueLimit.ValueString()
	}

	if !o.LeafQosPolicyRandomDetectPrecedenceAveragePacket.IsNull() && !o.LeafQosPolicyRandomDetectPrecedenceAveragePacket.IsUnknown() {
		jsonData["average-packet"] = o.LeafQosPolicyRandomDetectPrecedenceAveragePacket.ValueString()
	}

	if !o.LeafQosPolicyRandomDetectPrecedenceMarkProbability.IsNull() && !o.LeafQosPolicyRandomDetectPrecedenceMarkProbability.IsUnknown() {
		jsonData["mark-probability"] = o.LeafQosPolicyRandomDetectPrecedenceMarkProbability.ValueString()
	}

	if !o.LeafQosPolicyRandomDetectPrecedenceMaximumThreshold.IsNull() && !o.LeafQosPolicyRandomDetectPrecedenceMaximumThreshold.IsUnknown() {
		jsonData["maximum-threshold"] = o.LeafQosPolicyRandomDetectPrecedenceMaximumThreshold.ValueString()
	}

	if !o.LeafQosPolicyRandomDetectPrecedenceMinimumThreshold.IsNull() && !o.LeafQosPolicyRandomDetectPrecedenceMinimumThreshold.IsUnknown() {
		jsonData["minimum-threshold"] = o.LeafQosPolicyRandomDetectPrecedenceMinimumThreshold.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyRandomDetectPrecedence) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyRandomDetectPrecedenceQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRandomDetectPrecedenceQueueLimit = basetypes.NewStringNull()
	}

	if value, ok := jsonData["average-packet"]; ok {
		o.LeafQosPolicyRandomDetectPrecedenceAveragePacket = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRandomDetectPrecedenceAveragePacket = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mark-probability"]; ok {
		o.LeafQosPolicyRandomDetectPrecedenceMarkProbability = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRandomDetectPrecedenceMarkProbability = basetypes.NewStringNull()
	}

	if value, ok := jsonData["maximum-threshold"]; ok {
		o.LeafQosPolicyRandomDetectPrecedenceMaximumThreshold = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRandomDetectPrecedenceMaximumThreshold = basetypes.NewStringNull()
	}

	if value, ok := jsonData["minimum-threshold"]; ok {
		o.LeafQosPolicyRandomDetectPrecedenceMinimumThreshold = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRandomDetectPrecedenceMinimumThreshold = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
