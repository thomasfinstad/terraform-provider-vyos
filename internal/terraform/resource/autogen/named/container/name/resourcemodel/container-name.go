// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ContainerName describes the resource data model.
type ContainerName struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafContainerNameAllowHostNetworks types.String `tfsdk:"allow_host_networks" vyos:"allow-host-networks,omitempty"`
	LeafContainerNameCapAdd            types.String `tfsdk:"cap_add" vyos:"cap-add,omitempty"`
	LeafContainerNameDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafContainerNameDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafContainerNameEntrypoint        types.String `tfsdk:"entrypoint" vyos:"entrypoint,omitempty"`
	LeafContainerNameHostName          types.String `tfsdk:"host_name" vyos:"host-name,omitempty"`
	LeafContainerNameImage             types.String `tfsdk:"image" vyos:"image,omitempty"`
	LeafContainerNameCommand           types.String `tfsdk:"command" vyos:"command,omitempty"`
	LeafContainerNameArguments         types.String `tfsdk:"arguments" vyos:"arguments,omitempty"`
	LeafContainerNameMemory            types.String `tfsdk:"memory" vyos:"memory,omitempty"`
	LeafContainerNameSharedMemory      types.String `tfsdk:"shared_memory" vyos:"shared-memory,omitempty"`
	LeafContainerNameRestart           types.String `tfsdk:"restart" vyos:"restart,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagContainerNameDevice      bool `tfsdk:"device" vyos:"device,child"`
	ExistsTagContainerNameEnvironment bool `tfsdk:"environment" vyos:"environment,child"`
	ExistsTagContainerNameNetwork     bool `tfsdk:"network" vyos:"network,child"`
	ExistsTagContainerNamePort        bool `tfsdk:"port" vyos:"port,child"`
	ExistsTagContainerNameVolume      bool `tfsdk:"volume" vyos:"volume,child"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ContainerName) GetVyosPath() []string {
	return []string{
		"container",
		"name",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ContainerName) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Container name

`,
		},

		// LeafNodes

		"allow_host_networks": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow host networks in container

`,
		},

		"cap_add": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Container capabilities/permissions

    |  Format  |  Description  |
    |----------|---------------|
    |  net-admin  |  Network operations (interface, firewall, routing tables)  |
    |  net-bind-service  |  Bind a socket to privileged ports (port numbers less than 1024)  |
    |  net-raw  |  Permission to create raw network sockets  |
    |  setpcap  |  Capability sets (from bounded or inherited set)  |
    |  sys-admin  |  Administation operations (quotactl, mount, sethostname, setdomainame)  |
    |  sys-time  |  Permission to set system clock  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"entrypoint": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override the default ENTRYPOINT from the image

`,
		},

		"host_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Container host name

`,
		},

		"image": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Image name in the hub-registry

`,
		},

		"command": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override the default CMD from the image

`,
		},

		"arguments": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `The command's arguments for this container

`,
		},

		"memory": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Memory (RAM) available to this container

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Unlimited  |
    |  u32:1-16384  |  Container memory in megabytes (MB)  |

`,

			// Default:          stringdefault.StaticString(`512`),
			Computed: true,
		},

		"shared_memory": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Shared memory available to this container

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:0  |  Unlimited  |
    |  u32:1-8192  |  Container memory in megabytes (MB)  |

`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		"restart": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Restart options for container

    |  Format  |  Description  |
    |----------|---------------|
    |  no  |  Do not restart containers on exit  |
    |  on-failure  |  Restart containers when they exit with a non-zero exit code, retrying indefinitely  |
    |  always  |  Restart containers when they exit, regardless of status, retrying indefinitely  |

`,

			// Default:          stringdefault.StaticString(`on-failure`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ContainerName) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafContainerNameAllowHostNetworks.IsNull() && !o.LeafContainerNameAllowHostNetworks.IsUnknown() {
		jsonData["allow-host-networks"] = o.LeafContainerNameAllowHostNetworks.ValueString()
	}

	if !o.LeafContainerNameCapAdd.IsNull() && !o.LeafContainerNameCapAdd.IsUnknown() {
		jsonData["cap-add"] = o.LeafContainerNameCapAdd.ValueString()
	}

	if !o.LeafContainerNameDescrIPtion.IsNull() && !o.LeafContainerNameDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafContainerNameDescrIPtion.ValueString()
	}

	if !o.LeafContainerNameDisable.IsNull() && !o.LeafContainerNameDisable.IsUnknown() {
		jsonData["disable"] = o.LeafContainerNameDisable.ValueString()
	}

	if !o.LeafContainerNameEntrypoint.IsNull() && !o.LeafContainerNameEntrypoint.IsUnknown() {
		jsonData["entrypoint"] = o.LeafContainerNameEntrypoint.ValueString()
	}

	if !o.LeafContainerNameHostName.IsNull() && !o.LeafContainerNameHostName.IsUnknown() {
		jsonData["host-name"] = o.LeafContainerNameHostName.ValueString()
	}

	if !o.LeafContainerNameImage.IsNull() && !o.LeafContainerNameImage.IsUnknown() {
		jsonData["image"] = o.LeafContainerNameImage.ValueString()
	}

	if !o.LeafContainerNameCommand.IsNull() && !o.LeafContainerNameCommand.IsUnknown() {
		jsonData["command"] = o.LeafContainerNameCommand.ValueString()
	}

	if !o.LeafContainerNameArguments.IsNull() && !o.LeafContainerNameArguments.IsUnknown() {
		jsonData["arguments"] = o.LeafContainerNameArguments.ValueString()
	}

	if !o.LeafContainerNameMemory.IsNull() && !o.LeafContainerNameMemory.IsUnknown() {
		jsonData["memory"] = o.LeafContainerNameMemory.ValueString()
	}

	if !o.LeafContainerNameSharedMemory.IsNull() && !o.LeafContainerNameSharedMemory.IsUnknown() {
		jsonData["shared-memory"] = o.LeafContainerNameSharedMemory.ValueString()
	}

	if !o.LeafContainerNameRestart.IsNull() && !o.LeafContainerNameRestart.IsUnknown() {
		jsonData["restart"] = o.LeafContainerNameRestart.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ContainerName) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["allow-host-networks"]; ok {
		o.LeafContainerNameAllowHostNetworks = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameAllowHostNetworks = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cap-add"]; ok {
		o.LeafContainerNameCapAdd = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameCapAdd = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafContainerNameDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafContainerNameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["entrypoint"]; ok {
		o.LeafContainerNameEntrypoint = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameEntrypoint = basetypes.NewStringNull()
	}

	if value, ok := jsonData["host-name"]; ok {
		o.LeafContainerNameHostName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameHostName = basetypes.NewStringNull()
	}

	if value, ok := jsonData["image"]; ok {
		o.LeafContainerNameImage = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameImage = basetypes.NewStringNull()
	}

	if value, ok := jsonData["command"]; ok {
		o.LeafContainerNameCommand = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameCommand = basetypes.NewStringNull()
	}

	if value, ok := jsonData["arguments"]; ok {
		o.LeafContainerNameArguments = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameArguments = basetypes.NewStringNull()
	}

	if value, ok := jsonData["memory"]; ok {
		o.LeafContainerNameMemory = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameMemory = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shared-memory"]; ok {
		o.LeafContainerNameSharedMemory = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameSharedMemory = basetypes.NewStringNull()
	}

	if value, ok := jsonData["restart"]; ok {
		o.LeafContainerNameRestart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameRestart = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
