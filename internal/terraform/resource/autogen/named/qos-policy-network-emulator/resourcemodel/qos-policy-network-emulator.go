// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// QosPolicyNetworkEmulator describes the resource data model.
type QosPolicyNetworkEmulator struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyNetworkEmulatorDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafQosPolicyNetworkEmulatorBandwIDth   types.String `tfsdk:"bandwidth" json:"bandwidth,omitempty"`
	LeafQosPolicyNetworkEmulatorDelay       types.String `tfsdk:"delay" json:"delay,omitempty"`
	LeafQosPolicyNetworkEmulatorCorruption  types.String `tfsdk:"corruption" json:"corruption,omitempty"`
	LeafQosPolicyNetworkEmulatorDuplicate   types.String `tfsdk:"duplicate" json:"duplicate,omitempty"`
	LeafQosPolicyNetworkEmulatorLoss        types.String `tfsdk:"loss" json:"loss,omitempty"`
	LeafQosPolicyNetworkEmulatorReordering  types.String `tfsdk:"reordering" json:"reordering,omitempty"`
	LeafQosPolicyNetworkEmulatorQueueLimit  types.String `tfsdk:"queue_limit" json:"queue-limit,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyNetworkEmulator) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"network-emulator",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyNetworkEmulator) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Network emulator policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |

`,
		},

		"delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Adds delay to packets outgoing to chosen network interface

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Time in milliseconds  |

`,
		},

		"corruption": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Introducing error in a random position for chosen percent of packets

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"duplicate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cosen percent of packets is duplicated before queuing them

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"loss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add independent loss probability to the packets outgoing to chosen network interface

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"reordering": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Emulated packet reordering percentage

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *QosPolicyNetworkEmulator) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafQosPolicyNetworkEmulatorDescrIPtion.IsNull() && !o.LeafQosPolicyNetworkEmulatorDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafQosPolicyNetworkEmulatorDescrIPtion.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorBandwIDth.IsNull() && !o.LeafQosPolicyNetworkEmulatorBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafQosPolicyNetworkEmulatorBandwIDth.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorDelay.IsNull() && !o.LeafQosPolicyNetworkEmulatorDelay.IsUnknown() {
		jsonData["delay"] = o.LeafQosPolicyNetworkEmulatorDelay.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorCorruption.IsNull() && !o.LeafQosPolicyNetworkEmulatorCorruption.IsUnknown() {
		jsonData["corruption"] = o.LeafQosPolicyNetworkEmulatorCorruption.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorDuplicate.IsNull() && !o.LeafQosPolicyNetworkEmulatorDuplicate.IsUnknown() {
		jsonData["duplicate"] = o.LeafQosPolicyNetworkEmulatorDuplicate.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorLoss.IsNull() && !o.LeafQosPolicyNetworkEmulatorLoss.IsUnknown() {
		jsonData["loss"] = o.LeafQosPolicyNetworkEmulatorLoss.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorReordering.IsNull() && !o.LeafQosPolicyNetworkEmulatorReordering.IsUnknown() {
		jsonData["reordering"] = o.LeafQosPolicyNetworkEmulatorReordering.ValueString()
	}

	if !o.LeafQosPolicyNetworkEmulatorQueueLimit.IsNull() && !o.LeafQosPolicyNetworkEmulatorQueueLimit.IsUnknown() {
		jsonData["queue-limit"] = o.LeafQosPolicyNetworkEmulatorQueueLimit.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *QosPolicyNetworkEmulator) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafQosPolicyNetworkEmulatorDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafQosPolicyNetworkEmulatorBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["delay"]; ok {
		o.LeafQosPolicyNetworkEmulatorDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["corruption"]; ok {
		o.LeafQosPolicyNetworkEmulatorCorruption = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorCorruption = basetypes.NewStringNull()
	}

	if value, ok := jsonData["duplicate"]; ok {
		o.LeafQosPolicyNetworkEmulatorDuplicate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDuplicate = basetypes.NewStringNull()
	}

	if value, ok := jsonData["loss"]; ok {
		o.LeafQosPolicyNetworkEmulatorLoss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorLoss = basetypes.NewStringNull()
	}

	if value, ok := jsonData["reordering"]; ok {
		o.LeafQosPolicyNetworkEmulatorReordering = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorReordering = basetypes.NewStringNull()
	}

	if value, ok := jsonData["queue-limit"]; ok {
		o.LeafQosPolicyNetworkEmulatorQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorQueueLimit = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
