// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyNetworkEmulator describes the resource data model.
type QosPolicyNetworkEmulator struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafQosPolicyNetworkEmulatorDescrIPtion types.String `tfsdk:"description"`
	LeafQosPolicyNetworkEmulatorBandwIDth   types.String `tfsdk:"bandwidth"`
	LeafQosPolicyNetworkEmulatorDelay       types.String `tfsdk:"delay"`
	LeafQosPolicyNetworkEmulatorCorruption  types.String `tfsdk:"corruption"`
	LeafQosPolicyNetworkEmulatorDuplicate   types.String `tfsdk:"duplicate"`
	LeafQosPolicyNetworkEmulatorLoss        types.String `tfsdk:"loss"`
	LeafQosPolicyNetworkEmulatorReordering  types.String `tfsdk:"reordering"`
	LeafQosPolicyNetworkEmulatorQueueLimit  types.String `tfsdk:"queue_limit"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *QosPolicyNetworkEmulator) GetVyosPath() []string {
	return []string{
		"qos",
		"policy",
		"network-emulator",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyNetworkEmulator) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "network-emulator"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyNetworkEmulatorDescrIPtion.IsNull() || o.LeafQosPolicyNetworkEmulatorDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafQosPolicyNetworkEmulatorDescrIPtion.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorBandwIDth.IsNull() || o.LeafQosPolicyNetworkEmulatorBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafQosPolicyNetworkEmulatorBandwIDth.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorDelay.IsNull() || o.LeafQosPolicyNetworkEmulatorDelay.IsUnknown()) {
		vyosData["delay"] = o.LeafQosPolicyNetworkEmulatorDelay.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorCorruption.IsNull() || o.LeafQosPolicyNetworkEmulatorCorruption.IsUnknown()) {
		vyosData["corruption"] = o.LeafQosPolicyNetworkEmulatorCorruption.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorDuplicate.IsNull() || o.LeafQosPolicyNetworkEmulatorDuplicate.IsUnknown()) {
		vyosData["duplicate"] = o.LeafQosPolicyNetworkEmulatorDuplicate.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorLoss.IsNull() || o.LeafQosPolicyNetworkEmulatorLoss.IsUnknown()) {
		vyosData["loss"] = o.LeafQosPolicyNetworkEmulatorLoss.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorReordering.IsNull() || o.LeafQosPolicyNetworkEmulatorReordering.IsUnknown()) {
		vyosData["reordering"] = o.LeafQosPolicyNetworkEmulatorReordering.ValueString()
	}
	if !(o.LeafQosPolicyNetworkEmulatorQueueLimit.IsNull() || o.LeafQosPolicyNetworkEmulatorQueueLimit.IsUnknown()) {
		vyosData["queue-limit"] = o.LeafQosPolicyNetworkEmulatorQueueLimit.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyNetworkEmulator) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "network-emulator"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafQosPolicyNetworkEmulatorDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafQosPolicyNetworkEmulatorBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["delay"]; ok {
		o.LeafQosPolicyNetworkEmulatorDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDelay = basetypes.NewStringNull()
	}
	if value, ok := vyosData["corruption"]; ok {
		o.LeafQosPolicyNetworkEmulatorCorruption = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorCorruption = basetypes.NewStringNull()
	}
	if value, ok := vyosData["duplicate"]; ok {
		o.LeafQosPolicyNetworkEmulatorDuplicate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorDuplicate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["loss"]; ok {
		o.LeafQosPolicyNetworkEmulatorLoss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorLoss = basetypes.NewStringNull()
	}
	if value, ok := vyosData["reordering"]; ok {
		o.LeafQosPolicyNetworkEmulatorReordering = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorReordering = basetypes.NewStringNull()
	}
	if value, ok := vyosData["queue-limit"]; ok {
		o.LeafQosPolicyNetworkEmulatorQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyNetworkEmulatorQueueLimit = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "network-emulator"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyNetworkEmulator) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,
		"bandwidth":   types.StringType,
		"delay":       types.StringType,
		"corruption":  types.StringType,
		"duplicate":   types.StringType,
		"loss":        types.StringType,
		"reordering":  types.StringType,
		"queue_limit": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyNetworkEmulator) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Network emulator policy

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Policy name  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Available bandwidth for this policy

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Bits per second  |
|  <number>bit  |  Bits per second  |
|  <number>kbit  |  Kilobits per second  |
|  <number>mbit  |  Megabits per second  |
|  <number>gbit  |  Gigabits per second  |
|  <number>tbit  |  Terabits per second  |
|  <number>%  |  Percentage of interface link speed  |

`,
		},

		"delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Adds delay to packets outgoing to chosen network interface

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Time in milliseconds  |

`,
		},

		"corruption": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Introducing error in a random position for chosen percent of packets

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"duplicate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cosen percent of packets is duplicated before queuing them

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"loss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add independent loss probability to the packets outgoing to chosen network interface

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"reordering": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Emulated packet reordering percentage

|  Format  |  Description  |
|----------|---------------|
|  <number>  |  Percentage of packets affected  |

`,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		// TagNodes

		// Nodes

	}
}
