// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceSnmpVthreeGroup describes the resource data model.
type ServiceSnmpVthreeGroup struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafServiceSnmpVthreeGroupMode     types.String `tfsdk:"mode" json:"mode,omitempty"`
	LeafServiceSnmpVthreeGroupSeclevel types.String `tfsdk:"seclevel" json:"seclevel,omitempty"`
	LeafServiceSnmpVthreeGroupView     types.String `tfsdk:"view" json:"view,omitempty"`

	// TagNodes

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSnmpVthreeGroup) GetVyosPath() []string {
	return []string{
		"service",
		"snmp",
		"v3",
		"group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSnmpVthreeGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Specifies the group with name groupname

`,
		},

		// LeafNodes

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Define access permission

|  Format  |  Description  |
|----------|---------------|
|  ro  |  Read-Only  |
|  rw  |  read write  |

`,

			// Default:          stringdefault.StaticString(`ro`),
			Computed: true,
		},

		"seclevel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Security levels

|  Format  |  Description  |
|----------|---------------|
|  noauth  |  Messages not authenticated and not encrypted (noAuthNoPriv)  |
|  auth  |  Messages are authenticated but not encrypted (authNoPriv)  |
|  priv  |  Messages are authenticated and encrypted (authPriv)  |

`,

			// Default:          stringdefault.StaticString(`auth`),
			Computed: true,
		},

		"view": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Defines the name of view

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceSnmpVthreeGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceSnmpVthreeGroupMode.IsNull() && !o.LeafServiceSnmpVthreeGroupMode.IsUnknown() {
		jsonData["mode"] = o.LeafServiceSnmpVthreeGroupMode.ValueString()
	}

	if !o.LeafServiceSnmpVthreeGroupSeclevel.IsNull() && !o.LeafServiceSnmpVthreeGroupSeclevel.IsUnknown() {
		jsonData["seclevel"] = o.LeafServiceSnmpVthreeGroupSeclevel.ValueString()
	}

	if !o.LeafServiceSnmpVthreeGroupView.IsNull() && !o.LeafServiceSnmpVthreeGroupView.IsUnknown() {
		jsonData["view"] = o.LeafServiceSnmpVthreeGroupView.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceSnmpVthreeGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["mode"]; ok {
		o.LeafServiceSnmpVthreeGroupMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeGroupMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["seclevel"]; ok {
		o.LeafServiceSnmpVthreeGroupSeclevel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeGroupSeclevel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["view"]; ok {
		o.LeafServiceSnmpVthreeGroupView = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceSnmpVthreeGroupView = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
