// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyAsPathListRule describes the resource data model.
type PolicyAsPathListRule struct {
	// LeafNodes
	LeafPolicyAsPathListRuleAction      types.String `tfsdk:"action" json:"action,omitempty"`
	LeafPolicyAsPathListRuleDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`
	LeafPolicyAsPathListRuleRegex       types.String `tfsdk:"regex" json:"regex,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyAsPathListRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take on entries matching this rule

|  Format  |  Description  |
|----------|---------------|
|  permit  |  Permit matching entries  |
|  deny  |  Deny matching entries  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"regex": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Regular expression to match against an AS path

|  Format  |  Description  |
|----------|---------------|
|  txt  |  AS path regular expression (ex: "64501 64502")  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyAsPathListRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyAsPathListRuleAction.IsNull() && !o.LeafPolicyAsPathListRuleAction.IsUnknown() {
		jsonData["action"] = o.LeafPolicyAsPathListRuleAction.ValueString()
	}

	if !o.LeafPolicyAsPathListRuleDescrIPtion.IsNull() && !o.LeafPolicyAsPathListRuleDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyAsPathListRuleDescrIPtion.ValueString()
	}

	if !o.LeafPolicyAsPathListRuleRegex.IsNull() && !o.LeafPolicyAsPathListRuleRegex.IsUnknown() {
		jsonData["regex"] = o.LeafPolicyAsPathListRuleRegex.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyAsPathListRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["action"]; ok {
		o.LeafPolicyAsPathListRuleAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAsPathListRuleAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyAsPathListRuleDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAsPathListRuleDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["regex"]; ok {
		o.LeafPolicyAsPathListRuleRegex = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyAsPathListRuleRegex = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
