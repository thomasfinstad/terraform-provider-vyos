// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ProtocolsStaticRoute describes the resource data model.
type ProtocolsStaticRoute struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafProtocolsStaticRouteDhcpInterface types.String `tfsdk:"dhcp_interface"`
	LeafProtocolsStaticRouteDescrIPtion   types.String `tfsdk:"description"`

	// TagNodes
	TagProtocolsStaticRouteInterface types.Map `tfsdk:"interface"`
	TagProtocolsStaticRouteNextHop   types.Map `tfsdk:"next_hop"`

	// Nodes
	NodeProtocolsStaticRouteBlackhole types.Object `tfsdk:"blackhole"`
	NodeProtocolsStaticRouteReject    types.Object `tfsdk:"reject"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsStaticRoute) GetVyosPath() []string {
	return []string{
		"protocols",
		"static",
		"route",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *ProtocolsStaticRoute) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"protocols", "static", "route"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafProtocolsStaticRouteDhcpInterface.IsNull() || o.LeafProtocolsStaticRouteDhcpInterface.IsUnknown()) {
		vyosData["dhcp-interface"] = o.LeafProtocolsStaticRouteDhcpInterface.ValueString()
	}
	if !(o.LeafProtocolsStaticRouteDescrIPtion.IsNull() || o.LeafProtocolsStaticRouteDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafProtocolsStaticRouteDescrIPtion.ValueString()
	}

	// Tags
	if !(o.TagProtocolsStaticRouteInterface.IsNull() || o.TagProtocolsStaticRouteInterface.IsUnknown()) {
		subModel := make(map[string]ProtocolsStaticRouteInterface)
		diags.Append(o.TagProtocolsStaticRouteInterface.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["interface"] = subData
	}
	if !(o.TagProtocolsStaticRouteNextHop.IsNull() || o.TagProtocolsStaticRouteNextHop.IsUnknown()) {
		subModel := make(map[string]ProtocolsStaticRouteNextHop)
		diags.Append(o.TagProtocolsStaticRouteNextHop.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["next-hop"] = subData
	}

	// Nodes
	if !(o.NodeProtocolsStaticRouteBlackhole.IsNull() || o.NodeProtocolsStaticRouteBlackhole.IsUnknown()) {
		var subModel ProtocolsStaticRouteBlackhole
		diags.Append(o.NodeProtocolsStaticRouteBlackhole.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["blackhole"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeProtocolsStaticRouteReject.IsNull() || o.NodeProtocolsStaticRouteReject.IsUnknown()) {
		var subModel ProtocolsStaticRouteReject
		diags.Append(o.NodeProtocolsStaticRouteReject.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["reject"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ProtocolsStaticRoute) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"protocols", "static", "route"}})

	// Leafs
	if value, ok := vyosData["dhcp-interface"]; ok {
		o.LeafProtocolsStaticRouteDhcpInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticRouteDhcpInterface = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafProtocolsStaticRouteDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafProtocolsStaticRouteDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["interface"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ProtocolsStaticRouteInterface{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagProtocolsStaticRouteInterface = data
	} else {
		o.TagProtocolsStaticRouteInterface = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["next-hop"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ProtocolsStaticRouteNextHop{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagProtocolsStaticRouteNextHop = data
	} else {
		o.TagProtocolsStaticRouteNextHop = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["blackhole"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsStaticRouteBlackhole{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsStaticRouteBlackhole = data

	} else {
		o.NodeProtocolsStaticRouteBlackhole = basetypes.NewObjectNull(ProtocolsStaticRouteBlackhole{}.AttributeTypes())
	}
	if value, ok := vyosData["reject"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, ProtocolsStaticRouteReject{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeProtocolsStaticRouteReject = data

	} else {
		o.NodeProtocolsStaticRouteReject = basetypes.NewObjectNull(ProtocolsStaticRouteReject{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"protocols", "static", "route"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ProtocolsStaticRoute) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"dhcp_interface": types.StringType,
		"description":    types.StringType,

		// Tags
		"interface": types.MapType{ElemType: types.ObjectType{AttrTypes: ProtocolsStaticRouteInterface{}.AttributeTypes()}},
		"next_hop":  types.MapType{ElemType: types.ObjectType{AttrTypes: ProtocolsStaticRouteNextHop{}.AttributeTypes()}},

		// Nodes
		"blackhole": types.ObjectType{AttrTypes: ProtocolsStaticRouteBlackhole{}.AttributeTypes()},
		"reject":    types.ObjectType{AttrTypes: ProtocolsStaticRouteReject{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsStaticRoute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Static IPv4 route

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 static route  |

`,
		},

		// LeafNodes

		"dhcp_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DHCP interface supplying next-hop IP address

|  Format  |  Description  |
|----------|---------------|
|  txt  |  DHCP interface name  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"interface": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticRouteInterface{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Next-hop IPv4 router interface

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Gateway interface name  |

`,
		},

		"next_hop": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ProtocolsStaticRouteNextHop{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Next-hop IPv4 router address

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Next-hop router address  |

`,
		},

		// Nodes

		"blackhole": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticRouteBlackhole{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Silently discard pkts when matched

`,
		},

		"reject": schema.SingleNestedAttribute{
			Attributes: ProtocolsStaticRouteReject{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Emit an ICMP unreachable when matched

`,
		},
	}
}
