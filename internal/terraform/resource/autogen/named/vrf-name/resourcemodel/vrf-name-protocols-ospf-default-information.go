// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsOspfDefaultInformation describes the resource data model.
type VrfNameProtocolsOspfDefaultInformation struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsOspfDefaultInformationOriginate types.Object `tfsdk:"originate"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsOspfDefaultInformation) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "default-information"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes
	if !(o.NodeVrfNameProtocolsOspfDefaultInformationOriginate.IsNull() || o.NodeVrfNameProtocolsOspfDefaultInformationOriginate.IsUnknown()) {
		var subModel VrfNameProtocolsOspfDefaultInformationOriginate
		diags.Append(o.NodeVrfNameProtocolsOspfDefaultInformationOriginate.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["originate"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsOspfDefaultInformation) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "default-information"}})

	// Leafs

	// Tags

	// Nodes
	if value, ok := vyosData["originate"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsOspfDefaultInformationOriginate{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsOspfDefaultInformationOriginate = data

	} else {
		o.NodeVrfNameProtocolsOspfDefaultInformationOriginate = basetypes.NewObjectNull(VrfNameProtocolsOspfDefaultInformationOriginate{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "default-information"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsOspfDefaultInformation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags

		// Nodes
		"originate": types.ObjectType{AttrTypes: VrfNameProtocolsOspfDefaultInformationOriginate{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfDefaultInformation) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"originate": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfDefaultInformationOriginate{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Distribute a default route

`,
		},
	}
}
