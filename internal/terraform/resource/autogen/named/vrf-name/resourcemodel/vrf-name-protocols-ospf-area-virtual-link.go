// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfAreaVirtualLink describes the resource data model.
type VrfNameProtocolsOspfAreaVirtualLink struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval       types.String `tfsdk:"dead_interval" json:"dead-interval,omitempty"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval      types.String `tfsdk:"hello_interval" json:"hello-interval,omitempty"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval types.String `tfsdk:"retransmit_interval" json:"retransmit-interval,omitempty"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay      types.String `tfsdk:"transmit_delay" json:"transmit-delay,omitempty"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication *VrfNameProtocolsOspfAreaVirtualLinkAuthentication `tfsdk:"authentication" json:"authentication,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfAreaVirtualLink) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dead_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`40`),
			Computed: true,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"retransmit_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"transmit_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfAreaVirtualLink) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.IsNull() && !o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.IsUnknown() {
		jsonData["dead-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.IsNull() && !o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.IsNull() && !o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.IsUnknown() {
		jsonData["retransmit-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.IsNull() && !o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.IsUnknown() {
		jsonData["transmit-delay"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfAreaVirtualLink) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["dead-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["retransmit-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["transmit-delay"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication = &VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication)
		if err != nil {
			return err
		}
	}

	return nil
}
