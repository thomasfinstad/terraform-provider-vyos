// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsOspfAreaVirtualLink describes the resource data model.
type VrfNameProtocolsOspfAreaVirtualLink struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval       types.String `tfsdk:"dead_interval"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval      types.String `tfsdk:"hello_interval"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval types.String `tfsdk:"retransmit_interval"`
	LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay      types.String `tfsdk:"transmit_delay"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication types.Object `tfsdk:"authentication"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsOspfAreaVirtualLink) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "area", "virtual-link"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.IsNull() || o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.IsUnknown()) {
		vyosData["dead-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.IsNull() || o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.IsUnknown()) {
		vyosData["hello-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.IsNull() || o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.IsUnknown()) {
		vyosData["retransmit-interval"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.IsNull() || o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.IsUnknown()) {
		vyosData["transmit-delay"] = o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication.IsNull() || o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication.IsUnknown()) {
		var subModel VrfNameProtocolsOspfAreaVirtualLinkAuthentication
		diags.Append(o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["authentication"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsOspfAreaVirtualLink) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "area", "virtual-link"}})

	// Leafs
	if value, ok := vyosData["dead-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkDeadInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkHelloInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["retransmit-interval"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkRetransmitInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["transmit-delay"]; ok {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfAreaVirtualLinkTransmitDelay = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["authentication"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication = data

	} else {
		o.NodeVrfNameProtocolsOspfAreaVirtualLinkAuthentication = basetypes.NewObjectNull(VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "area", "virtual-link"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsOspfAreaVirtualLink) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"dead_interval":       types.StringType,
		"hello_interval":      types.StringType,
		"retransmit_interval": types.StringType,
		"transmit_delay":      types.StringType,

		// Tags

		// Nodes
		"authentication": types.ObjectType{AttrTypes: VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfAreaVirtualLink) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"dead_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`40`),
			Computed: true,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"retransmit_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"transmit_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfAreaVirtualLinkAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},
	}
}
