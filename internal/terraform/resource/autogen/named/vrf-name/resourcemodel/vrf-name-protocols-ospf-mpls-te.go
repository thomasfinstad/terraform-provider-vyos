// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfMplsTe describes the resource data model.
type VrfNameProtocolsOspfMplsTe struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfMplsTeEnable        types.String `tfsdk:"enable" json:"enable,omitempty"`
	LeafVrfNameProtocolsOspfMplsTeRouterAddress types.String `tfsdk:"router_address" json:"router-address,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfMplsTe) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"enable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable MPLS-TE functionality

`,
		},

		"router_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Stable IP address of the advertising router

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Stable IP address of the advertising router  |

`,

			// Default:          stringdefault.StaticString(`0.0.0.0`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfMplsTe) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfMplsTeEnable.IsNull() && !o.LeafVrfNameProtocolsOspfMplsTeEnable.IsUnknown() {
		jsonData["enable"] = o.LeafVrfNameProtocolsOspfMplsTeEnable.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfMplsTeRouterAddress.IsNull() && !o.LeafVrfNameProtocolsOspfMplsTeRouterAddress.IsUnknown() {
		jsonData["router-address"] = o.LeafVrfNameProtocolsOspfMplsTeRouterAddress.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfMplsTe) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["enable"]; ok {
		o.LeafVrfNameProtocolsOspfMplsTeEnable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfMplsTeEnable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["router-address"]; ok {
		o.LeafVrfNameProtocolsOspfMplsTeRouterAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfMplsTeRouterAddress = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
