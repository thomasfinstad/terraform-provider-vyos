// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfTimersThroTTLeSpf describes the resource data model.
type VrfNameProtocolsOspfTimersThroTTLeSpf struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay           types.String `tfsdk:"delay" json:"delay,omitempty"`
	LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime types.String `tfsdk:"initial_holdtime" json:"initial-holdtime,omitempty"`
	LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime     types.String `tfsdk:"max_holdtime" json:"max-holdtime,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfTimersThroTTLeSpf) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay from the first change received to SPF calculation

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`200`),
			Computed: true,
		},

		"initial_holdtime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Initial hold time between consecutive SPF calculations

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Initial hold time in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`1000`),
			Computed: true,
		},

		"max_holdtime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum hold time

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600000  |  Max hold time in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`10000`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfTimersThroTTLeSpf) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay.IsNull() && !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay.IsUnknown() {
		jsonData["delay"] = o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime.IsNull() && !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime.IsUnknown() {
		jsonData["initial-holdtime"] = o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime.IsNull() && !o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime.IsUnknown() {
		jsonData["max-holdtime"] = o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfTimersThroTTLeSpf) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["delay"]; ok {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["initial-holdtime"]; ok {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfInitialHoldtime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["max-holdtime"]; ok {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfTimersThroTTLeSpfMaxHoldtime = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
