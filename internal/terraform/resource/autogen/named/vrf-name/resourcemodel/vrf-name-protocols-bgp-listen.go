// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsBgpListen describes the resource data model.
type VrfNameProtocolsBgpListen struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpListenLimit types.String `tfsdk:"limit"`

	// TagNodes
	TagVrfNameProtocolsBgpListenRange types.Map `tfsdk:"range"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsBgpListen) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "listen"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsBgpListenLimit.IsNull() || o.LeafVrfNameProtocolsBgpListenLimit.IsUnknown()) {
		vyosData["limit"] = o.LeafVrfNameProtocolsBgpListenLimit.ValueString()
	}

	// Tags
	if !(o.TagVrfNameProtocolsBgpListenRange.IsNull() || o.TagVrfNameProtocolsBgpListenRange.IsUnknown()) {
		subModel := make(map[string]VrfNameProtocolsBgpListenRange)
		diags.Append(o.TagVrfNameProtocolsBgpListenRange.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["range"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsBgpListen) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "listen"}})

	// Leafs
	if value, ok := vyosData["limit"]; ok {
		o.LeafVrfNameProtocolsBgpListenLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpListenLimit = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["range"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: VrfNameProtocolsBgpListenRange{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagVrfNameProtocolsBgpListenRange = data
	} else {
		o.TagVrfNameProtocolsBgpListenRange = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "listen"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsBgpListen) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"limit": types.StringType,

		// Tags
		"range": types.MapType{ElemType: types.ObjectType{AttrTypes: VrfNameProtocolsBgpListenRange{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpListen) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum number of dynamic neighbors that can be created

|  Format  |  Description  |
|----------|---------------|
|  u32:1-5000  |  BGP neighbor limit  |

`,
		},

		// TagNodes

		"range": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpListenRange{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `BGP dynamic neighbors listen range

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 dynamic neighbors listen range  |
|  ipv6net  |  IPv6 dynamic neighbors listen range  |

`,
		},

		// Nodes

	}
}
