// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsBgpAddressFamilyIPvsixMulticast describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyIPvsixMulticast struct {
	// LeafNodes

	// TagNodes
	TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress *map[string]VrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress `tfsdk:"aggregate_address" json:"aggregate-address,omitempty"`
	TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork          *map[string]VrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork          `tfsdk:"network" json:"network,omitempty"`

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance *VrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance `tfsdk:"distance" json:"distance,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyIPvsixMulticast) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"aggregate_address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  BGP aggregate network/prefix  |

`,
		},

		"network": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Import BGP network/prefix into multicast IPv6 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  Multicast IPv6 BGP network/prefix  |

`,
		},

		// Nodes

		"distance": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Administrative distances for BGP routes

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixMulticast) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["aggregate-address"] = subData
	}

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["network"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["distance"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyIPvsixMulticast) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags
	if value, ok := jsonData["aggregate-address"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress = &map[string]VrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastAggregateAddress)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["network"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork = &map[string]VrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpAddressFamilyIPvsixMulticastNetwork)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["distance"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance = &VrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticastDistance)
		if err != nil {
			return err
		}
	}

	return nil
}
