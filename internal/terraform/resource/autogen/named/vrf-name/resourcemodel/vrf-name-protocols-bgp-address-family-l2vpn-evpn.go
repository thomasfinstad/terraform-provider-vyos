// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni    types.String `tfsdk:"advertise_all_vni"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw types.String `tfsdk:"advertise_default_gw"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP     types.String `tfsdk:"advertise_svi_ip"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd                 types.String `tfsdk:"rd"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP       types.String `tfsdk:"advertise_pip"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive       types.String `tfsdk:"rt_auto_derive"`

	// TagNodes
	TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni types.Map `tfsdk:"vni"`

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise   types.Object `tfsdk:"advertise"`
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget types.Object `tfsdk:"route_target"`
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding    types.Object `tfsdk:"flooding"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "address-family", "l2vpn-evpn"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.IsUnknown()) {
		vyosData["advertise-all-vni"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.IsUnknown()) {
		vyosData["advertise-default-gw"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.IsUnknown()) {
		vyosData["advertise-svi-ip"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.IsUnknown()) {
		vyosData["rd"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.IsUnknown()) {
		vyosData["advertise-pip"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.IsNull() || o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.IsUnknown()) {
		vyosData["rt-auto-derive"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.ValueString()
	}

	// Tags
	if !(o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni.IsNull() || o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni.IsUnknown()) {
		subModel := make(map[string]VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni)
		diags.Append(o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vni"] = subData
	}

	// Nodes
	if !(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise.IsNull() || o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise.IsUnknown()) {
		var subModel VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise
		diags.Append(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["advertise"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget.IsNull() || o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget.IsUnknown()) {
		var subModel VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget
		diags.Append(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["route-target"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding.IsNull() || o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding.IsUnknown()) {
		var subModel VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding
		diags.Append(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["flooding"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "address-family", "l2vpn-evpn"}})

	// Leafs
	if value, ok := vyosData["advertise-all-vni"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni = basetypes.NewStringNull()
	}
	if value, ok := vyosData["advertise-default-gw"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw = basetypes.NewStringNull()
	}
	if value, ok := vyosData["advertise-svi-ip"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rd"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd = basetypes.NewStringNull()
	}
	if value, ok := vyosData["advertise-pip"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP = basetypes.NewStringNull()
	}
	if value, ok := vyosData["rt-auto-derive"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vni"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni = data
	} else {
		o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["advertise"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise = data

	} else {
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise = basetypes.NewObjectNull(VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}.AttributeTypes())
	}
	if value, ok := vyosData["route-target"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget = data

	} else {
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget = basetypes.NewObjectNull(VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}.AttributeTypes())
	}
	if value, ok := vyosData["flooding"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding = data

	} else {
		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding = basetypes.NewObjectNull(VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "address-family", "l2vpn-evpn"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"advertise_all_vni":    types.StringType,
		"advertise_default_gw": types.StringType,
		"advertise_svi_ip":     types.StringType,
		"rd":                   types.StringType,
		"advertise_pip":        types.StringType,
		"rt_auto_derive":       types.StringType,

		// Tags
		"vni": types.MapType{ElemType: types.ObjectType{AttrTypes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni{}.AttributeTypes()}},

		// Nodes
		"advertise":    types.ObjectType{AttrTypes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}.AttributeTypes()},
		"route_target": types.ObjectType{AttrTypes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}.AttributeTypes()},
		"flooding":     types.ObjectType{AttrTypes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"advertise_all_vni": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise All local VNIs

`,
		},

		"advertise_default_gw": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise All default g/w mac-ip routes in EVPN

`,
		},

		"advertise_svi_ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise svi mac-ip routes in EVPN

`,
		},

		"rd": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |

`,
		},

		"advertise_pip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `EVPN system primary IP

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |

`,
		},

		"rt_auto_derive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Auto derivation of Route Target (RFC8365)

`,
		},

		// TagNodes

		"vni": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `VXLAN Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16777215  |  VNI number  |

`,
		},

		// Nodes

		"advertise": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertise prefix routes

`,
		},

		"route_target": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Route Target

`,
		},

		"flooding": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Specify handling for BUM packets

`,
		},
	}
}
