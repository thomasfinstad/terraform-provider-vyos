// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni    types.String `tfsdk:"advertise_all_vni" json:"advertise-all-vni,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw types.String `tfsdk:"advertise_default_gw" json:"advertise-default-gw,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP     types.String `tfsdk:"advertise_svi_ip" json:"advertise-svi-ip,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd                 types.String `tfsdk:"rd" json:"rd,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP       types.String `tfsdk:"advertise_pip" json:"advertise-pip,omitempty"`
	LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive       types.String `tfsdk:"rt_auto_derive" json:"rt-auto-derive,omitempty"`

	// TagNodes
	TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni *map[string]VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni `tfsdk:"vni" json:"vni,omitempty"`

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise   *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise   `tfsdk:"advertise" json:"advertise,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget `tfsdk:"route_target" json:"route-target,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding    *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding    `tfsdk:"flooding" json:"flooding,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"advertise_all_vni": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise All local VNIs

`,
		},

		"advertise_default_gw": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise All default g/w mac-ip routes in EVPN

`,
		},

		"advertise_svi_ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Advertise svi mac-ip routes in EVPN

`,
		},

		"rd": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Route Distinguisher

|  Format  |  Description  |
|----------|---------------|
|  ASN:NN_OR_IP-ADDRESS:NN  |  Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)  |

`,
		},

		"advertise_pip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `EVPN system primary IP

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IP address  |

`,
		},

		"rt_auto_derive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Auto derivation of Route Target (RFC8365)

`,
		},

		// TagNodes

		"vni": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `VXLAN Network Identifier

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16777215  |  VNI number  |

`,
		},

		// Nodes

		"advertise": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertise prefix routes

`,
		},

		"route_target": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Route Target

`,
		},

		"flooding": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Specify handling for BUM packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.IsUnknown() {
		jsonData["advertise-all-vni"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.IsUnknown() {
		jsonData["advertise-default-gw"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.IsUnknown() {
		jsonData["advertise-svi-ip"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.IsUnknown() {
		jsonData["rd"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.IsUnknown() {
		jsonData["advertise-pip"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.IsUnknown() {
		jsonData["rt-auto-derive"] = o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["vni"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["advertise"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["route-target"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["flooding"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["advertise-all-vni"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseAllVni = basetypes.NewStringNull()
	}

	if value, ok := jsonData["advertise-default-gw"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseDefaultGw = basetypes.NewStringNull()
	}

	if value, ok := jsonData["advertise-svi-ip"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertiseSviIP = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rd"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRd = basetypes.NewStringNull()
	}

	if value, ok := jsonData["advertise-pip"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertisePIP = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rt-auto-derive"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRtAutoDerive = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["vni"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni = &map[string]VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnVni)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["advertise"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise = &VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnAdvertise)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["route-target"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget = &VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnRouteTarget)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["flooding"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding = &VrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpnFlooding)
		if err != nil {
			return err
		}
	}

	return nil
}
