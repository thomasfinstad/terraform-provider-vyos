// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistribute describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistribute struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable types.String `tfsdk:"table" json:"table,omitempty"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected `tfsdk:"connected" json:"connected,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis      *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis      `tfsdk:"isis" json:"isis,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel    *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel    `tfsdk:"kernel" json:"kernel,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf      *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf      `tfsdk:"ospf" json:"ospf,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP       *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP       `tfsdk:"rip" json:"rip,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel     *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel     `tfsdk:"babel" json:"babel,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic    *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic    `tfsdk:"static" json:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistribute) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"table": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redistribute non-main Kernel Routing Table

`,
		},

		// TagNodes

		// Nodes

		"connected": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute connected routes into BGP

`,
		},

		"isis": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute IS-IS routes into BGP

`,
		},

		"kernel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute kernel routes into BGP

`,
		},

		"ospf": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute OSPF routes into BGP

`,
		},

		"rip": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute RIP routes into BGP

`,
		},

		"babel": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute Babel routes into BGP

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Redistribute static routes into BGP

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistribute) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable.IsNull() && !o.LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable.IsUnknown() {
		jsonData["table"] = o.LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["connected"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["isis"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["kernel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospf"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rip"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["babel"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistribute) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["table"]; ok {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeTable = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["connected"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeConnected)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["isis"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeIsis)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["kernel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeKernel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospf"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeOspf)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["rip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeRIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["babel"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeBabel)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicastRedistributeStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
