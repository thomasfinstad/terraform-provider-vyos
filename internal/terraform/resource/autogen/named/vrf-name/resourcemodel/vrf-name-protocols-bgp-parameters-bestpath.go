// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsBgpParametersBestpath describes the resource data model.
type VrfNameProtocolsBgpParametersBestpath struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpParametersBestpathBandwIDth       types.String `tfsdk:"bandwidth"`
	LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID types.String `tfsdk:"compare_routerid"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsBgpParametersBestpathAsPath   types.Object `tfsdk:"as_path"`
	NodeVrfNameProtocolsBgpParametersBestpathMed      types.Object `tfsdk:"med"`
	NodeVrfNameProtocolsBgpParametersBestpathPeerType types.Object `tfsdk:"peer_type"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsBgpParametersBestpath) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "parameters", "bestpath"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsBgpParametersBestpathBandwIDth.IsNull() || o.LeafVrfNameProtocolsBgpParametersBestpathBandwIDth.IsUnknown()) {
		vyosData["bandwidth"] = o.LeafVrfNameProtocolsBgpParametersBestpathBandwIDth.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID.IsNull() || o.LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID.IsUnknown()) {
		vyosData["compare-routerid"] = o.LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeVrfNameProtocolsBgpParametersBestpathAsPath.IsNull() || o.NodeVrfNameProtocolsBgpParametersBestpathAsPath.IsUnknown()) {
		var subModel VrfNameProtocolsBgpParametersBestpathAsPath
		diags.Append(o.NodeVrfNameProtocolsBgpParametersBestpathAsPath.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["as-path"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsBgpParametersBestpathMed.IsNull() || o.NodeVrfNameProtocolsBgpParametersBestpathMed.IsUnknown()) {
		var subModel VrfNameProtocolsBgpParametersBestpathMed
		diags.Append(o.NodeVrfNameProtocolsBgpParametersBestpathMed.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["med"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsBgpParametersBestpathPeerType.IsNull() || o.NodeVrfNameProtocolsBgpParametersBestpathPeerType.IsUnknown()) {
		var subModel VrfNameProtocolsBgpParametersBestpathPeerType
		diags.Append(o.NodeVrfNameProtocolsBgpParametersBestpathPeerType.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["peer-type"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsBgpParametersBestpath) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "parameters", "bestpath"}})

	// Leafs
	if value, ok := vyosData["bandwidth"]; ok {
		o.LeafVrfNameProtocolsBgpParametersBestpathBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpParametersBestpathBandwIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["compare-routerid"]; ok {
		o.LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpParametersBestpathCompareRouterID = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["as-path"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpParametersBestpathAsPath{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpParametersBestpathAsPath = data

	} else {
		o.NodeVrfNameProtocolsBgpParametersBestpathAsPath = basetypes.NewObjectNull(VrfNameProtocolsBgpParametersBestpathAsPath{}.AttributeTypes())
	}
	if value, ok := vyosData["med"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpParametersBestpathMed{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpParametersBestpathMed = data

	} else {
		o.NodeVrfNameProtocolsBgpParametersBestpathMed = basetypes.NewObjectNull(VrfNameProtocolsBgpParametersBestpathMed{}.AttributeTypes())
	}
	if value, ok := vyosData["peer-type"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgpParametersBestpathPeerType{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgpParametersBestpathPeerType = data

	} else {
		o.NodeVrfNameProtocolsBgpParametersBestpathPeerType = basetypes.NewObjectNull(VrfNameProtocolsBgpParametersBestpathPeerType{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "parameters", "bestpath"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsBgpParametersBestpath) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"bandwidth":        types.StringType,
		"compare_routerid": types.StringType,

		// Tags

		// Nodes
		"as_path":   types.ObjectType{AttrTypes: VrfNameProtocolsBgpParametersBestpathAsPath{}.AttributeTypes()},
		"med":       types.ObjectType{AttrTypes: VrfNameProtocolsBgpParametersBestpathMed{}.AttributeTypes()},
		"peer_type": types.ObjectType{AttrTypes: VrfNameProtocolsBgpParametersBestpathPeerType{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpParametersBestpath) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link Bandwidth attribute

|  Format  |  Description  |
|----------|---------------|
|  default-weight-for-missing  |  Assign low default weight (1) to paths not having link bandwidth  |
|  ignore  |  Ignore link bandwidth (do regular ECMP, not weighted)  |
|  skip-missing  |  Ignore paths without link bandwidth for ECMP (if other paths have it)  |

`,
		},

		"compare_routerid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Compare the router-id for identical EBGP paths

`,
		},

		// TagNodes

		// Nodes

		"as_path": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathAsPath{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `AS-path attribute comparison parameters

`,
		},

		"med": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathMed{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `MED attribute comparison parameters

`,
		},

		"peer_type": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpParametersBestpathPeerType{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Peer type

`,
		},
	}
}
