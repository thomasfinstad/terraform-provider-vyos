// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsStaticRoutesixInterface describes the resource data model.
type VrfNameProtocolsStaticRoutesixInterface struct {
	// LeafNodes
	LeafVrfNameProtocolsStaticRoutesixInterfaceDisable  types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafVrfNameProtocolsStaticRoutesixInterfaceDistance types.String `tfsdk:"distance" json:"distance,omitempty"`
	LeafVrfNameProtocolsStaticRoutesixInterfaceVrf      types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsStaticRoutesixInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"distance": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Distance for this route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for this route  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF to leak route

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of VRF to leak to  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsStaticRoutesixInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsStaticRoutesixInterfaceDisable.IsNull() && !o.LeafVrfNameProtocolsStaticRoutesixInterfaceDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVrfNameProtocolsStaticRoutesixInterfaceDisable.ValueString()
	}

	if !o.LeafVrfNameProtocolsStaticRoutesixInterfaceDistance.IsNull() && !o.LeafVrfNameProtocolsStaticRoutesixInterfaceDistance.IsUnknown() {
		jsonData["distance"] = o.LeafVrfNameProtocolsStaticRoutesixInterfaceDistance.ValueString()
	}

	if !o.LeafVrfNameProtocolsStaticRoutesixInterfaceVrf.IsNull() && !o.LeafVrfNameProtocolsStaticRoutesixInterfaceVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafVrfNameProtocolsStaticRoutesixInterfaceVrf.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsStaticRoutesixInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["distance"]; ok {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceDistance = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceDistance = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsStaticRoutesixInterfaceVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
