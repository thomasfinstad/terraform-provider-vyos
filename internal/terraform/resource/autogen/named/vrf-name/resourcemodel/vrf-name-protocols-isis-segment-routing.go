// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsIsisSegmentRouting describes the resource data model.
type VrfNameProtocolsIsisSegmentRouting struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth types.String `tfsdk:"maximum_label_depth"`

	// TagNodes
	TagVrfNameProtocolsIsisSegmentRoutingPrefix types.Map `tfsdk:"prefix"`

	// Nodes
	NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock types.Object `tfsdk:"global_block"`
	NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock  types.Object `tfsdk:"local_block"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsIsisSegmentRouting) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "segment-routing"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth.IsNull() || o.LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth.IsUnknown()) {
		vyosData["maximum-label-depth"] = o.LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth.ValueString()
	}

	// Tags
	if !(o.TagVrfNameProtocolsIsisSegmentRoutingPrefix.IsNull() || o.TagVrfNameProtocolsIsisSegmentRoutingPrefix.IsUnknown()) {
		subModel := make(map[string]VrfNameProtocolsIsisSegmentRoutingPrefix)
		diags.Append(o.TagVrfNameProtocolsIsisSegmentRoutingPrefix.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["prefix"] = subData
	}

	// Nodes
	if !(o.NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock.IsNull() || o.NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock.IsUnknown()) {
		var subModel VrfNameProtocolsIsisSegmentRoutingGlobalBlock
		diags.Append(o.NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["global-block"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock.IsNull() || o.NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock.IsUnknown()) {
		var subModel VrfNameProtocolsIsisSegmentRoutingLocalBlock
		diags.Append(o.NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["local-block"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsIsisSegmentRouting) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "segment-routing"}})

	// Leafs
	if value, ok := vyosData["maximum-label-depth"]; ok {
		o.LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSegmentRoutingMaximumLabelDepth = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["prefix"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: VrfNameProtocolsIsisSegmentRoutingPrefix{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagVrfNameProtocolsIsisSegmentRoutingPrefix = data
	} else {
		o.TagVrfNameProtocolsIsisSegmentRoutingPrefix = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["global-block"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsisSegmentRoutingGlobalBlock{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock = data

	} else {
		o.NodeVrfNameProtocolsIsisSegmentRoutingGlobalBlock = basetypes.NewObjectNull(VrfNameProtocolsIsisSegmentRoutingGlobalBlock{}.AttributeTypes())
	}
	if value, ok := vyosData["local-block"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsisSegmentRoutingLocalBlock{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock = data

	} else {
		o.NodeVrfNameProtocolsIsisSegmentRoutingLocalBlock = basetypes.NewObjectNull(VrfNameProtocolsIsisSegmentRoutingLocalBlock{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "segment-routing"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsIsisSegmentRouting) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"maximum_label_depth": types.StringType,

		// Tags
		"prefix": types.MapType{ElemType: types.ObjectType{AttrTypes: VrfNameProtocolsIsisSegmentRoutingPrefix{}.AttributeTypes()}},

		// Nodes
		"global_block": types.ObjectType{AttrTypes: VrfNameProtocolsIsisSegmentRoutingGlobalBlock{}.AttributeTypes()},
		"local_block":  types.ObjectType{AttrTypes: VrfNameProtocolsIsisSegmentRoutingLocalBlock{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisSegmentRouting) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"maximum_label_depth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum MPLS labels allowed for this router

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16  |  MPLS label depth  |

`,
		},

		// TagNodes

		"prefix": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsIsisSegmentRoutingPrefix{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Static IPv4/IPv6 prefix segment/label mapping

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 prefix segment  |
|  ipv6net  |  IPv6 prefix segment  |

`,
		},

		// Nodes

		"global_block": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisSegmentRoutingGlobalBlock{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Segment Routing Global Block label range

`,
		},

		"local_block": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisSegmentRoutingLocalBlock{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Segment Routing Local Block label range

`,
		},
	}
}
