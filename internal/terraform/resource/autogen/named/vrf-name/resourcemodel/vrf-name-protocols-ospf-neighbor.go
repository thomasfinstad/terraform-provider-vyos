// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsOspfNeighbor describes the resource data model.
type VrfNameProtocolsOspfNeighbor struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfNeighborPollInterval types.String `tfsdk:"poll_interval"`
	LeafVrfNameProtocolsOspfNeighborPriority     types.String `tfsdk:"priority"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsOspfNeighbor) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "neighbor"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsOspfNeighborPollInterval.IsNull() || o.LeafVrfNameProtocolsOspfNeighborPollInterval.IsUnknown()) {
		vyosData["poll-interval"] = o.LeafVrfNameProtocolsOspfNeighborPollInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsOspfNeighborPriority.IsNull() || o.LeafVrfNameProtocolsOspfNeighborPriority.IsUnknown()) {
		vyosData["priority"] = o.LeafVrfNameProtocolsOspfNeighborPriority.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsOspfNeighbor) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "neighbor"}})

	// Leafs
	if value, ok := vyosData["poll-interval"]; ok {
		o.LeafVrfNameProtocolsOspfNeighborPollInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfNeighborPollInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafVrfNameProtocolsOspfNeighborPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfNeighborPriority = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "ospf", "neighbor"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsOspfNeighbor) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"poll_interval": types.StringType,
		"priority":      types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfNeighbor) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"poll_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Dead neighbor polling interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Seconds between dead neighbor polling interval  |

`,

			// Default:          stringdefault.StaticString(`60`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor priority in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Neighbor priority  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
