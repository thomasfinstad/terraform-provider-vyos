// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfNeighbor describes the resource data model.
type VrfNameProtocolsOspfNeighbor struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfNeighborPollInterval types.String `tfsdk:"poll_interval" json:"poll-interval,omitempty"`
	LeafVrfNameProtocolsOspfNeighborPriority     types.String `tfsdk:"priority" json:"priority,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfNeighbor) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"poll_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Dead neighbor polling interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Seconds between dead neighbor polling interval  |

`,

			// Default:          stringdefault.StaticString(`60`),
			Computed: true,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor priority in seconds

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Neighbor priority  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfNeighbor) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfNeighborPollInterval.IsNull() && !o.LeafVrfNameProtocolsOspfNeighborPollInterval.IsUnknown() {
		jsonData["poll-interval"] = o.LeafVrfNameProtocolsOspfNeighborPollInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfNeighborPriority.IsNull() && !o.LeafVrfNameProtocolsOspfNeighborPriority.IsUnknown() {
		jsonData["priority"] = o.LeafVrfNameProtocolsOspfNeighborPriority.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfNeighbor) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["poll-interval"]; ok {
		o.LeafVrfNameProtocolsOspfNeighborPollInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfNeighborPollInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafVrfNameProtocolsOspfNeighborPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfNeighborPriority = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
