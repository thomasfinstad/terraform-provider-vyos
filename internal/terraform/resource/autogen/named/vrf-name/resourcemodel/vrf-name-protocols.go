// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocols describes the resource data model.
type VrfNameProtocols struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsBgp        types.Object `tfsdk:"bgp"`
	NodeVrfNameProtocolsEigrp      types.Object `tfsdk:"eigrp"`
	NodeVrfNameProtocolsIsis       types.Object `tfsdk:"isis"`
	NodeVrfNameProtocolsOspf       types.Object `tfsdk:"ospf"`
	NodeVrfNameProtocolsOspfvthree types.Object `tfsdk:"ospfv3"`
	NodeVrfNameProtocolsStatic     types.Object `tfsdk:"static"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocols) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes
	if !(o.NodeVrfNameProtocolsBgp.IsNull() || o.NodeVrfNameProtocolsBgp.IsUnknown()) {
		var subModel VrfNameProtocolsBgp
		diags.Append(o.NodeVrfNameProtocolsBgp.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["bgp"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsEigrp.IsNull() || o.NodeVrfNameProtocolsEigrp.IsUnknown()) {
		var subModel VrfNameProtocolsEigrp
		diags.Append(o.NodeVrfNameProtocolsEigrp.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["eigrp"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsIsis.IsNull() || o.NodeVrfNameProtocolsIsis.IsUnknown()) {
		var subModel VrfNameProtocolsIsis
		diags.Append(o.NodeVrfNameProtocolsIsis.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["isis"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsOspf.IsNull() || o.NodeVrfNameProtocolsOspf.IsUnknown()) {
		var subModel VrfNameProtocolsOspf
		diags.Append(o.NodeVrfNameProtocolsOspf.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ospf"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsOspfvthree.IsNull() || o.NodeVrfNameProtocolsOspfvthree.IsUnknown()) {
		var subModel VrfNameProtocolsOspfvthree
		diags.Append(o.NodeVrfNameProtocolsOspfvthree.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ospfv3"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsStatic.IsNull() || o.NodeVrfNameProtocolsStatic.IsUnknown()) {
		var subModel VrfNameProtocolsStatic
		diags.Append(o.NodeVrfNameProtocolsStatic.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["static"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocols) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols"}})

	// Leafs

	// Tags

	// Nodes
	if value, ok := vyosData["bgp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsBgp{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsBgp = data

	} else {
		o.NodeVrfNameProtocolsBgp = basetypes.NewObjectNull(VrfNameProtocolsBgp{}.AttributeTypes())
	}
	if value, ok := vyosData["eigrp"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsEigrp{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsEigrp = data

	} else {
		o.NodeVrfNameProtocolsEigrp = basetypes.NewObjectNull(VrfNameProtocolsEigrp{}.AttributeTypes())
	}
	if value, ok := vyosData["isis"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsis{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsis = data

	} else {
		o.NodeVrfNameProtocolsIsis = basetypes.NewObjectNull(VrfNameProtocolsIsis{}.AttributeTypes())
	}
	if value, ok := vyosData["ospf"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsOspf{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsOspf = data

	} else {
		o.NodeVrfNameProtocolsOspf = basetypes.NewObjectNull(VrfNameProtocolsOspf{}.AttributeTypes())
	}
	if value, ok := vyosData["ospfv3"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsOspfvthree{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsOspfvthree = data

	} else {
		o.NodeVrfNameProtocolsOspfvthree = basetypes.NewObjectNull(VrfNameProtocolsOspfvthree{}.AttributeTypes())
	}
	if value, ok := vyosData["static"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsStatic{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsStatic = data

	} else {
		o.NodeVrfNameProtocolsStatic = basetypes.NewObjectNull(VrfNameProtocolsStatic{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocols) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags

		// Nodes
		"bgp":    types.ObjectType{AttrTypes: VrfNameProtocolsBgp{}.AttributeTypes()},
		"eigrp":  types.ObjectType{AttrTypes: VrfNameProtocolsEigrp{}.AttributeTypes()},
		"isis":   types.ObjectType{AttrTypes: VrfNameProtocolsIsis{}.AttributeTypes()},
		"ospf":   types.ObjectType{AttrTypes: VrfNameProtocolsOspf{}.AttributeTypes()},
		"ospfv3": types.ObjectType{AttrTypes: VrfNameProtocolsOspfvthree{}.AttributeTypes()},
		"static": types.ObjectType{AttrTypes: VrfNameProtocolsStatic{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocols) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"bgp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Border Gateway Protocol (BGP)

`,
		},

		"eigrp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsEigrp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enhanced Interior Gateway Routing Protocol (EIGRP)

`,
		},

		"isis": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsis{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Intermediate System to Intermediate System (IS-IS)

`,
		},

		"ospf": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspf{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Open Shortest Path First (OSPF)

`,
		},

		"ospfv3": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthree{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Open Shortest Path First (OSPF) for IPv6

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Static Routing

`,
		},
	}
}
