// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocols describes the resource data model.
type VrfNameProtocols struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsBgp        *VrfNameProtocolsBgp        `tfsdk:"bgp" json:"bgp,omitempty"`
	NodeVrfNameProtocolsEigrp      *VrfNameProtocolsEigrp      `tfsdk:"eigrp" json:"eigrp,omitempty"`
	NodeVrfNameProtocolsIsis       *VrfNameProtocolsIsis       `tfsdk:"isis" json:"isis,omitempty"`
	NodeVrfNameProtocolsOspf       *VrfNameProtocolsOspf       `tfsdk:"ospf" json:"ospf,omitempty"`
	NodeVrfNameProtocolsOspfvthree *VrfNameProtocolsOspfvthree `tfsdk:"ospfv3" json:"ospfv3,omitempty"`
	NodeVrfNameProtocolsStatic     *VrfNameProtocolsStatic     `tfsdk:"static" json:"static,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocols) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"bgp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Border Gateway Protocol (BGP)

`,
		},

		"eigrp": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsEigrp{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enhanced Interior Gateway Routing Protocol (EIGRP)

`,
		},

		"isis": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsis{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Intermediate System to Intermediate System (IS-IS)

`,
		},

		"ospf": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspf{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Open Shortest Path First (OSPF)

`,
		},

		"ospfv3": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthree{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Open Shortest Path First (OSPF) for IPv6

`,
		},

		"static": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsStatic{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Static Routing

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocols) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bgp"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsEigrp).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsEigrp)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["eigrp"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsis).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsis)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["isis"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspf).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspf)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospf"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthree).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthree)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ospfv3"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsStatic).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsStatic)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["static"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocols) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags

	// Nodes
	if value, ok := jsonData["bgp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgp = &VrfNameProtocolsBgp{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["eigrp"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsEigrp = &VrfNameProtocolsEigrp{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsEigrp)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["isis"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsis = &VrfNameProtocolsIsis{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsis)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospf"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspf = &VrfNameProtocolsOspf{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspf)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ospfv3"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthree = &VrfNameProtocolsOspfvthree{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthree)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["static"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsStatic = &VrfNameProtocolsStatic{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsStatic)
		if err != nil {
			return err
		}
	}

	return nil
}
