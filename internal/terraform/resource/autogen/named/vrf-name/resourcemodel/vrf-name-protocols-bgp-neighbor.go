// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsBgpNeighbor describes the resource data model.
type VrfNameProtocolsBgpNeighbor struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpNeighborAdvertisementInterval        types.String `tfsdk:"advertisement_interval" json:"advertisement-interval,omitempty"`
	LeafVrfNameProtocolsBgpNeighborDescrIPtion                  types.String `tfsdk:"description" json:"description,omitempty"`
	LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation types.String `tfsdk:"disable_capability_negotiation" json:"disable-capability-negotiation,omitempty"`
	LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck        types.String `tfsdk:"disable_connected_check" json:"disable-connected-check,omitempty"`
	LeafVrfNameProtocolsBgpNeighborEbgpMultihop                 types.String `tfsdk:"ebgp_multihop" json:"ebgp-multihop,omitempty"`
	LeafVrfNameProtocolsBgpNeighborGracefulRestart              types.String `tfsdk:"graceful_restart" json:"graceful-restart,omitempty"`
	LeafVrfNameProtocolsBgpNeighborOverrIDeCapability           types.String `tfsdk:"override_capability" json:"override-capability,omitempty"`
	LeafVrfNameProtocolsBgpNeighborPassive                      types.String `tfsdk:"passive" json:"passive,omitempty"`
	LeafVrfNameProtocolsBgpNeighborPassword                     types.String `tfsdk:"password" json:"password,omitempty"`
	LeafVrfNameProtocolsBgpNeighborPeerGroup                    types.String `tfsdk:"peer_group" json:"peer-group,omitempty"`
	LeafVrfNameProtocolsBgpNeighborPort                         types.String `tfsdk:"port" json:"port,omitempty"`
	LeafVrfNameProtocolsBgpNeighborRemoteAs                     types.String `tfsdk:"remote_as" json:"remote-as,omitempty"`
	LeafVrfNameProtocolsBgpNeighborShutdown                     types.String `tfsdk:"shutdown" json:"shutdown,omitempty"`
	LeafVrfNameProtocolsBgpNeighborSolo                         types.String `tfsdk:"solo" json:"solo,omitempty"`
	LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch        types.String `tfsdk:"strict_capability_match" json:"strict-capability-match,omitempty"`
	LeafVrfNameProtocolsBgpNeighborUpdateSource                 types.String `tfsdk:"update_source" json:"update-source,omitempty"`

	// TagNodes
	TagVrfNameProtocolsBgpNeighborLocalAs   *map[string]VrfNameProtocolsBgpNeighborLocalAs   `tfsdk:"local_as" json:"local-as,omitempty"`
	TagVrfNameProtocolsBgpNeighborLocalRole *map[string]VrfNameProtocolsBgpNeighborLocalRole `tfsdk:"local_role" json:"local-role,omitempty"`

	// Nodes
	NodeVrfNameProtocolsBgpNeighborAddressFamily *VrfNameProtocolsBgpNeighborAddressFamily `tfsdk:"address_family" json:"address-family,omitempty"`
	NodeVrfNameProtocolsBgpNeighborBfd           *VrfNameProtocolsBgpNeighborBfd           `tfsdk:"bfd" json:"bfd,omitempty"`
	NodeVrfNameProtocolsBgpNeighborCapability    *VrfNameProtocolsBgpNeighborCapability    `tfsdk:"capability" json:"capability,omitempty"`
	NodeVrfNameProtocolsBgpNeighborInterface     *VrfNameProtocolsBgpNeighborInterface     `tfsdk:"interface" json:"interface,omitempty"`
	NodeVrfNameProtocolsBgpNeighborTimers        *VrfNameProtocolsBgpNeighborTimers        `tfsdk:"timers" json:"timers,omitempty"`
	NodeVrfNameProtocolsBgpNeighborTTLSecURIty   *VrfNameProtocolsBgpNeighborTTLSecURIty   `tfsdk:"ttl_security" json:"ttl-security,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpNeighbor) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"advertisement_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Minimum interval for sending routing updates

|  Format  |  Description  |
|----------|---------------|
|  u32:0-600  |  Advertisement interval in seconds  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_capability_negotiation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable capability negotiation with this neighbor

`,
		},

		"disable_connected_check": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable check to see if eBGP peer address is a connected route

`,
		},

		"ebgp_multihop": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Allow this EBGP neighbor to not be on a directly connected network

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Number of hops  |

`,
		},

		"graceful_restart": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP graceful restart functionality

|  Format  |  Description  |
|----------|---------------|
|  enable  |  Enable BGP graceful restart at peer level  |
|  disable  |  Disable BGP graceful restart at peer level  |
|  restart-helper  |  Enable BGP graceful restart helper only functionality  |

`,
		},

		"override_capability": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore capability negotiation with specified neighbor

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not initiate a session with this neighbor

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP MD5 password

`,
		},

		"peer_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Peer group for this peer

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Peer-group name  |

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor BGP port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor BGP port number  |

`,
		},

		"remote_as": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor BGP AS number

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Neighbor AS number  |
|  external  |  Any AS different from the local AS  |
|  internal  |  Neighbor AS number  |

`,
		},

		"shutdown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively shutdown this neighbor

`,
		},

		"solo": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not send back prefixes learned from the neighbor

`,
		},

		"strict_capability_match": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable strict capability negotiation

`,
		},

		"update_source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source IP of routing updates

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address of route source  |
|  ipv6  |  IPv6 address of route source  |
|  txt  |  Interface as route source  |

`,
		},

		// TagNodes

		"local_as": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpNeighborLocalAs{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Specify alternate ASN for this BGP process

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967294  |  Autonomous System Number (ASN)  |

`,
		},

		"local_role": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpNeighborLocalRole{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Local role for BGP neighbor (RFC9234)

|  Format  |  Description  |
|----------|---------------|
|  customer  |  Using Transit  |
|  peer  |  Public/Private Peering  |
|  provider  |  Providing Transit  |
|  rs-client  |  RS Client  |
|  rs-server  |  Route Server  |

`,
		},

		// Nodes

		"address_family": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborAddressFamily{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Address-family parameters

`,
		},

		"bfd": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD) support

`,
		},

		"capability": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborCapability{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Advertise capabilities to this peer-group

`,
		},

		"interface": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborInterface{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Interface parameters

`,
		},

		"timers": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborTimers{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Neighbor timers

`,
		},

		"ttl_security": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpNeighborTTLSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Ttl security mechanism

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpNeighbor) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsBgpNeighborAdvertisementInterval.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborAdvertisementInterval.IsUnknown() {
		jsonData["advertisement-interval"] = o.LeafVrfNameProtocolsBgpNeighborAdvertisementInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborDescrIPtion.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafVrfNameProtocolsBgpNeighborDescrIPtion.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation.IsUnknown() {
		jsonData["disable-capability-negotiation"] = o.LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck.IsUnknown() {
		jsonData["disable-connected-check"] = o.LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborEbgpMultihop.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborEbgpMultihop.IsUnknown() {
		jsonData["ebgp-multihop"] = o.LeafVrfNameProtocolsBgpNeighborEbgpMultihop.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborGracefulRestart.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborGracefulRestart.IsUnknown() {
		jsonData["graceful-restart"] = o.LeafVrfNameProtocolsBgpNeighborGracefulRestart.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborOverrIDeCapability.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborOverrIDeCapability.IsUnknown() {
		jsonData["override-capability"] = o.LeafVrfNameProtocolsBgpNeighborOverrIDeCapability.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborPassive.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborPassive.IsUnknown() {
		jsonData["passive"] = o.LeafVrfNameProtocolsBgpNeighborPassive.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborPassword.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborPassword.IsUnknown() {
		jsonData["password"] = o.LeafVrfNameProtocolsBgpNeighborPassword.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborPeerGroup.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborPeerGroup.IsUnknown() {
		jsonData["peer-group"] = o.LeafVrfNameProtocolsBgpNeighborPeerGroup.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborPort.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborPort.IsUnknown() {
		jsonData["port"] = o.LeafVrfNameProtocolsBgpNeighborPort.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborRemoteAs.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborRemoteAs.IsUnknown() {
		jsonData["remote-as"] = o.LeafVrfNameProtocolsBgpNeighborRemoteAs.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborShutdown.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborShutdown.IsUnknown() {
		jsonData["shutdown"] = o.LeafVrfNameProtocolsBgpNeighborShutdown.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborSolo.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborSolo.IsUnknown() {
		jsonData["solo"] = o.LeafVrfNameProtocolsBgpNeighborSolo.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch.IsUnknown() {
		jsonData["strict-capability-match"] = o.LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch.ValueString()
	}

	if !o.LeafVrfNameProtocolsBgpNeighborUpdateSource.IsNull() && !o.LeafVrfNameProtocolsBgpNeighborUpdateSource.IsUnknown() {
		jsonData["update-source"] = o.LeafVrfNameProtocolsBgpNeighborUpdateSource.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpNeighborLocalAs).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpNeighborLocalAs)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-as"] = subData
	}

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpNeighborLocalRole).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpNeighborLocalRole)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local-role"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborAddressFamily).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborAddressFamily)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["address-family"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborCapability).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborCapability)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["capability"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborInterface).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborInterface)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["interface"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborTimers).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborTimers)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["timers"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpNeighborTTLSecURIty).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpNeighborTTLSecURIty)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ttl-security"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpNeighbor) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["advertisement-interval"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborAdvertisementInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborAdvertisementInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-capability-negotiation"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborDisableCapabilityNegotiation = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-connected-check"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborDisableConnectedCheck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ebgp-multihop"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborEbgpMultihop = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborEbgpMultihop = basetypes.NewStringNull()
	}

	if value, ok := jsonData["graceful-restart"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborGracefulRestart = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborGracefulRestart = basetypes.NewStringNull()
	}

	if value, ok := jsonData["override-capability"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborOverrIDeCapability = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborOverrIDeCapability = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborPassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborPassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborPassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborPassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["peer-group"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborPeerGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborPeerGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-as"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborRemoteAs = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborRemoteAs = basetypes.NewStringNull()
	}

	if value, ok := jsonData["shutdown"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborShutdown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborShutdown = basetypes.NewStringNull()
	}

	if value, ok := jsonData["solo"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborSolo = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborSolo = basetypes.NewStringNull()
	}

	if value, ok := jsonData["strict-capability-match"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborStrictCapabilityMatch = basetypes.NewStringNull()
	}

	if value, ok := jsonData["update-source"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborUpdateSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborUpdateSource = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["local-as"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpNeighborLocalAs = &map[string]VrfNameProtocolsBgpNeighborLocalAs{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpNeighborLocalAs)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["local-role"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpNeighborLocalRole = &map[string]VrfNameProtocolsBgpNeighborLocalRole{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpNeighborLocalRole)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["address-family"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborAddressFamily = &VrfNameProtocolsBgpNeighborAddressFamily{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborAddressFamily)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborBfd = &VrfNameProtocolsBgpNeighborBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["capability"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborCapability = &VrfNameProtocolsBgpNeighborCapability{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborCapability)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["interface"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborInterface = &VrfNameProtocolsBgpNeighborInterface{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborInterface)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["timers"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborTimers = &VrfNameProtocolsBgpNeighborTimers{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborTimers)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ttl-security"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpNeighborTTLSecURIty = &VrfNameProtocolsBgpNeighborTTLSecURIty{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpNeighborTTLSecURIty)
		if err != nil {
			return err
		}
	}

	return nil
}
