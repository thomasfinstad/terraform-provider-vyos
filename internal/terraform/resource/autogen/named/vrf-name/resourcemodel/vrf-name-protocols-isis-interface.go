// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsIsisInterface describes the resource data model.
type VrfNameProtocolsIsisInterface struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisInterfaceCircuitType         types.String `tfsdk:"circuit_type"`
	LeafVrfNameProtocolsIsisInterfaceHelloPadding        types.String `tfsdk:"hello_padding"`
	LeafVrfNameProtocolsIsisInterfaceHelloInterval       types.String `tfsdk:"hello_interval"`
	LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier     types.String `tfsdk:"hello_multiplier"`
	LeafVrfNameProtocolsIsisInterfaceMetric              types.String `tfsdk:"metric"`
	LeafVrfNameProtocolsIsisInterfacePassive             types.String `tfsdk:"passive"`
	LeafVrfNameProtocolsIsisInterfacePriority            types.String `tfsdk:"priority"`
	LeafVrfNameProtocolsIsisInterfacePsnpInterval        types.String `tfsdk:"psnp_interval"`
	LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake types.String `tfsdk:"no_three_way_handshake"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsIsisInterfaceBfd      types.Object `tfsdk:"bfd"`
	NodeVrfNameProtocolsIsisInterfaceNetwork  types.Object `tfsdk:"network"`
	NodeVrfNameProtocolsIsisInterfacePassword types.Object `tfsdk:"password"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsIsisInterface) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "interface"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsIsisInterfaceCircuitType.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceCircuitType.IsUnknown()) {
		vyosData["circuit-type"] = o.LeafVrfNameProtocolsIsisInterfaceCircuitType.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.IsUnknown()) {
		vyosData["hello-padding"] = o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.IsUnknown()) {
		vyosData["hello-interval"] = o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.IsUnknown()) {
		vyosData["hello-multiplier"] = o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfaceMetric.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceMetric.IsUnknown()) {
		vyosData["metric"] = o.LeafVrfNameProtocolsIsisInterfaceMetric.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfacePassive.IsNull() || o.LeafVrfNameProtocolsIsisInterfacePassive.IsUnknown()) {
		vyosData["passive"] = o.LeafVrfNameProtocolsIsisInterfacePassive.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfacePriority.IsNull() || o.LeafVrfNameProtocolsIsisInterfacePriority.IsUnknown()) {
		vyosData["priority"] = o.LeafVrfNameProtocolsIsisInterfacePriority.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.IsNull() || o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.IsUnknown()) {
		vyosData["psnp-interval"] = o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.ValueString()
	}
	if !(o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.IsNull() || o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.IsUnknown()) {
		vyosData["no-three-way-handshake"] = o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeVrfNameProtocolsIsisInterfaceBfd.IsNull() || o.NodeVrfNameProtocolsIsisInterfaceBfd.IsUnknown()) {
		var subModel VrfNameProtocolsIsisInterfaceBfd
		diags.Append(o.NodeVrfNameProtocolsIsisInterfaceBfd.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["bfd"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsIsisInterfaceNetwork.IsNull() || o.NodeVrfNameProtocolsIsisInterfaceNetwork.IsUnknown()) {
		var subModel VrfNameProtocolsIsisInterfaceNetwork
		diags.Append(o.NodeVrfNameProtocolsIsisInterfaceNetwork.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["network"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeVrfNameProtocolsIsisInterfacePassword.IsNull() || o.NodeVrfNameProtocolsIsisInterfacePassword.IsUnknown()) {
		var subModel VrfNameProtocolsIsisInterfacePassword
		diags.Append(o.NodeVrfNameProtocolsIsisInterfacePassword.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["password"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsIsisInterface) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "interface"}})

	// Leafs
	if value, ok := vyosData["circuit-type"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceCircuitType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceCircuitType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-padding"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloPadding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloPadding = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hello-multiplier"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}
	if value, ok := vyosData["metric"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceMetric = basetypes.NewStringNull()
	}
	if value, ok := vyosData["passive"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePassive = basetypes.NewStringNull()
	}
	if value, ok := vyosData["priority"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePriority = basetypes.NewStringNull()
	}
	if value, ok := vyosData["psnp-interval"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePsnpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePsnpInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-three-way-handshake"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["bfd"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsisInterfaceBfd{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsisInterfaceBfd = data

	} else {
		o.NodeVrfNameProtocolsIsisInterfaceBfd = basetypes.NewObjectNull(VrfNameProtocolsIsisInterfaceBfd{}.AttributeTypes())
	}
	if value, ok := vyosData["network"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsisInterfaceNetwork{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsisInterfaceNetwork = data

	} else {
		o.NodeVrfNameProtocolsIsisInterfaceNetwork = basetypes.NewObjectNull(VrfNameProtocolsIsisInterfaceNetwork{}.AttributeTypes())
	}
	if value, ok := vyosData["password"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, VrfNameProtocolsIsisInterfacePassword{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeVrfNameProtocolsIsisInterfacePassword = data

	} else {
		o.NodeVrfNameProtocolsIsisInterfacePassword = basetypes.NewObjectNull(VrfNameProtocolsIsisInterfacePassword{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "isis", "interface"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsIsisInterface) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"circuit_type":           types.StringType,
		"hello_padding":          types.StringType,
		"hello_interval":         types.StringType,
		"hello_multiplier":       types.StringType,
		"metric":                 types.StringType,
		"passive":                types.StringType,
		"priority":               types.StringType,
		"psnp_interval":          types.StringType,
		"no_three_way_handshake": types.StringType,

		// Tags

		// Nodes
		"bfd":      types.ObjectType{AttrTypes: VrfNameProtocolsIsisInterfaceBfd{}.AttributeTypes()},
		"network":  types.ObjectType{AttrTypes: VrfNameProtocolsIsisInterfaceNetwork{}.AttributeTypes()},
		"password": types.ObjectType{AttrTypes: VrfNameProtocolsIsisInterfacePassword{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"circuit_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure circuit type for interface

|  Format  |  Description  |
|----------|---------------|
|  level-1  |  Level-1 only adjacencies are formed  |
|  level-1-2  |  Level-1-2 adjacencies are formed  |
|  level-2-only  |  Level-2 only adjacencies are formed  |

`,
		},

		"hello_padding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add padding to IS-IS hello packets

`,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Set Hello interval  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-100  |  Set multiplier for Hello holding time  |

`,
		},

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure passive mode for interface

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set priority for Designated Router election

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  Priority value  |

`,
		},

		"psnp_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set PSNP interval

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  PSNP interval in seconds  |

`,
		},

		"no_three_way_handshake": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable three-way handshake

`,
		},

		// TagNodes

		// Nodes

		"bfd": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"network": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfaceNetwork{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set network type

`,
		},

		"password": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfacePassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure the authentication password for a circuit

`,
		},
	}
}
