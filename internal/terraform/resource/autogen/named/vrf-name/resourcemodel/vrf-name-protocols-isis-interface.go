// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsIsisInterface describes the resource data model.
type VrfNameProtocolsIsisInterface struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisInterfaceCircuitType         types.String `tfsdk:"circuit_type" json:"circuit-type,omitempty"`
	LeafVrfNameProtocolsIsisInterfaceHelloPadding        types.String `tfsdk:"hello_padding" json:"hello-padding,omitempty"`
	LeafVrfNameProtocolsIsisInterfaceHelloInterval       types.String `tfsdk:"hello_interval" json:"hello-interval,omitempty"`
	LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier     types.String `tfsdk:"hello_multiplier" json:"hello-multiplier,omitempty"`
	LeafVrfNameProtocolsIsisInterfaceMetric              types.String `tfsdk:"metric" json:"metric,omitempty"`
	LeafVrfNameProtocolsIsisInterfacePassive             types.String `tfsdk:"passive" json:"passive,omitempty"`
	LeafVrfNameProtocolsIsisInterfacePriority            types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafVrfNameProtocolsIsisInterfacePsnpInterval        types.String `tfsdk:"psnp_interval" json:"psnp-interval,omitempty"`
	LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake types.String `tfsdk:"no_three_way_handshake" json:"no-three-way-handshake,omitempty"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsIsisInterfaceBfd      *VrfNameProtocolsIsisInterfaceBfd      `tfsdk:"bfd" json:"bfd,omitempty"`
	NodeVrfNameProtocolsIsisInterfaceNetwork  *VrfNameProtocolsIsisInterfaceNetwork  `tfsdk:"network" json:"network,omitempty"`
	NodeVrfNameProtocolsIsisInterfacePassword *VrfNameProtocolsIsisInterfacePassword `tfsdk:"password" json:"password,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"circuit_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure circuit type for interface

|  Format  |  Description  |
|----------|---------------|
|  level-1  |  Level-1 only adjacencies are formed  |
|  level-1-2  |  Level-1-2 adjacencies are formed  |
|  level-2-only  |  Level-2 only adjacencies are formed  |

`,
		},

		"hello_padding": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Add padding to IS-IS hello packets

`,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:1-600  |  Set Hello interval  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set Hello interval

|  Format  |  Description  |
|----------|---------------|
|  u32:2-100  |  Set multiplier for Hello holding time  |

`,
		},

		"metric": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set default metric for circuit

|  Format  |  Description  |
|----------|---------------|
|  u32:0-16777215  |  Default metric value  |

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure passive mode for interface

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set priority for Designated Router election

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  Priority value  |

`,
		},

		"psnp_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set PSNP interval

|  Format  |  Description  |
|----------|---------------|
|  u32:0-127  |  PSNP interval in seconds  |

`,
		},

		"no_three_way_handshake": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable three-way handshake

`,
		},

		// TagNodes

		// Nodes

		"bfd": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"network": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfaceNetwork{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Set network type

`,
		},

		"password": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsIsisInterfacePassword{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Configure the authentication password for a circuit

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsisInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsIsisInterfaceCircuitType.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceCircuitType.IsUnknown() {
		jsonData["circuit-type"] = o.LeafVrfNameProtocolsIsisInterfaceCircuitType.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.IsUnknown() {
		jsonData["hello-padding"] = o.LeafVrfNameProtocolsIsisInterfaceHelloPadding.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafVrfNameProtocolsIsisInterfaceHelloInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.IsUnknown() {
		jsonData["hello-multiplier"] = o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfaceMetric.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceMetric.IsUnknown() {
		jsonData["metric"] = o.LeafVrfNameProtocolsIsisInterfaceMetric.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfacePassive.IsNull() && !o.LeafVrfNameProtocolsIsisInterfacePassive.IsUnknown() {
		jsonData["passive"] = o.LeafVrfNameProtocolsIsisInterfacePassive.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfacePriority.IsNull() && !o.LeafVrfNameProtocolsIsisInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafVrfNameProtocolsIsisInterfacePriority.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.IsNull() && !o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.IsUnknown() {
		jsonData["psnp-interval"] = o.LeafVrfNameProtocolsIsisInterfacePsnpInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.IsNull() && !o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.IsUnknown() {
		jsonData["no-three-way-handshake"] = o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisInterfaceBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisInterfaceBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisInterfaceNetwork).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisInterfaceNetwork)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["network"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsIsisInterfacePassword).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsIsisInterfacePassword)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["password"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsisInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["circuit-type"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceCircuitType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceCircuitType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-padding"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloPadding = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloPadding = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-multiplier"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}

	if value, ok := jsonData["metric"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceMetric = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceMetric = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePassive = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["psnp-interval"]; ok {
		o.LeafVrfNameProtocolsIsisInterfacePsnpInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfacePsnpInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-three-way-handshake"]; ok {
		o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisInterfaceNoThreeWayHandshake = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisInterfaceBfd = &VrfNameProtocolsIsisInterfaceBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisInterfaceBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["network"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisInterfaceNetwork = &VrfNameProtocolsIsisInterfaceNetwork{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisInterfaceNetwork)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["password"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsIsisInterfacePassword = &VrfNameProtocolsIsisInterfacePassword{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsIsisInterfacePassword)
		if err != nil {
			return err
		}
	}

	return nil
}
