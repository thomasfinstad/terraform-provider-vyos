// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsBgpAddressFamily describes the resource data model.
type VrfNameProtocolsBgpAddressFamily struct {
	// LeafNodes

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicast        *VrfNameProtocolsBgpAddressFamilyIPvfourUnicast        `tfsdk:"ipv4_unicast" json:"ipv4-unicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticast      *VrfNameProtocolsBgpAddressFamilyIPvfourMulticast      `tfsdk:"ipv4_multicast" json:"ipv4-multicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast *VrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast `tfsdk:"ipv4_labeled_unicast" json:"ipv4-labeled-unicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourFlowspec       *VrfNameProtocolsBgpAddressFamilyIPvfourFlowspec       `tfsdk:"ipv4_flowspec" json:"ipv4-flowspec,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourVpn            *VrfNameProtocolsBgpAddressFamilyIPvfourVpn            `tfsdk:"ipv4_vpn" json:"ipv4-vpn,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicast         *VrfNameProtocolsBgpAddressFamilyIPvsixUnicast         `tfsdk:"ipv6_unicast" json:"ipv6-unicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticast       *VrfNameProtocolsBgpAddressFamilyIPvsixMulticast       `tfsdk:"ipv6_multicast" json:"ipv6-multicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast  *VrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast  `tfsdk:"ipv6_labeled_unicast" json:"ipv6-labeled-unicast,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixFlowspec        *VrfNameProtocolsBgpAddressFamilyIPvsixFlowspec        `tfsdk:"ipv6_flowspec" json:"ipv6-flowspec,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyIPvsixVpn             *VrfNameProtocolsBgpAddressFamilyIPvsixVpn             `tfsdk:"ipv6_vpn" json:"ipv6-vpn,omitempty"`
	NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpn           *VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn           `tfsdk:"l2vpn_evpn" json:"l2vpn-evpn,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamily) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		// Nodes

		"ipv4_unicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 BGP settings

`,
		},

		"ipv4_multicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourMulticast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Multicast IPv4 BGP settings

`,
		},

		"ipv4_labeled_unicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Labeled Unicast IPv4 BGP settings

`,
		},

		"ipv4_flowspec": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourFlowspec{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Flowspec IPv4 BGP settings

`,
		},

		"ipv4_vpn": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourVpn{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Unicast VPN IPv4 BGP settings

`,
		},

		"ipv6_unicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 BGP settings

`,
		},

		"ipv6_multicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixMulticast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Multicast IPv6 BGP settings

`,
		},

		"ipv6_labeled_unicast": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Labeled Unicast IPv6 BGP settings

`,
		},

		"ipv6_flowspec": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixFlowspec{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Flowspec IPv6 BGP settings

`,
		},

		"ipv6_vpn": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvsixVpn{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Unicast VPN IPv6 BGP settings

`,
		},

		"l2vpn_evpn": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `L2VPN EVPN BGP settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamily) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv4-unicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv4-multicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv4-labeled-unicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourFlowspec).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourFlowspec)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv4-flowspec"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourVpn).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourVpn)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv4-vpn"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6-unicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6-multicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6-labeled-unicast"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixFlowspec).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixFlowspec)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6-flowspec"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixVpn).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixVpn)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6-vpn"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpn).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpn)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["l2vpn-evpn"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamily) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags

	// Nodes
	if value, ok := jsonData["ipv4-unicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicast = &VrfNameProtocolsBgpAddressFamilyIPvfourUnicast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourUnicast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv4-multicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticast = &VrfNameProtocolsBgpAddressFamilyIPvfourMulticast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv4-labeled-unicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast = &VrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourLabeledUnicast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv4-flowspec"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourFlowspec = &VrfNameProtocolsBgpAddressFamilyIPvfourFlowspec{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourFlowspec)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv4-vpn"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourVpn = &VrfNameProtocolsBgpAddressFamilyIPvfourVpn{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourVpn)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6-unicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicast = &VrfNameProtocolsBgpAddressFamilyIPvsixUnicast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixUnicast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6-multicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticast = &VrfNameProtocolsBgpAddressFamilyIPvsixMulticast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixMulticast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6-labeled-unicast"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast = &VrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixLabeledUnicast)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6-flowspec"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixFlowspec = &VrfNameProtocolsBgpAddressFamilyIPvsixFlowspec{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixFlowspec)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6-vpn"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixVpn = &VrfNameProtocolsBgpAddressFamilyIPvsixVpn{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvsixVpn)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["l2vpn-evpn"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpn = &VrfNameProtocolsBgpAddressFamilyLtwovpnEvpn{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyLtwovpnEvpn)
		if err != nil {
			return err
		}
	}

	return nil
}
