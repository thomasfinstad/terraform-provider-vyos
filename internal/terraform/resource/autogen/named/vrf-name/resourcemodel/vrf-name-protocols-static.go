// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsStatic describes the resource data model.
type VrfNameProtocolsStatic struct {
	// LeafNodes

	// TagNodes
	TagVrfNameProtocolsStaticRoute    *map[string]VrfNameProtocolsStaticRoute    `tfsdk:"route" json:"route,omitempty"`
	TagVrfNameProtocolsStaticRoutesix *map[string]VrfNameProtocolsStaticRoutesix `tfsdk:"route6" json:"route6,omitempty"`

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsStatic) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"route": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsStaticRoute{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Static IPv4 route

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 static route  |

`,
		},

		"route6": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsStaticRoutesix{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Static IPv6 route

|  Format  |  Description  |
|----------|---------------|
|  ipv6net  |  IPv6 static route  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsStatic) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	if !reflect.ValueOf(o.TagVrfNameProtocolsStaticRoute).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsStaticRoute)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["route"] = subData
	}

	if !reflect.ValueOf(o.TagVrfNameProtocolsStaticRoutesix).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsStaticRoutesix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["route6"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsStatic) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags
	if value, ok := jsonData["route"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsStaticRoute = &map[string]VrfNameProtocolsStaticRoute{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsStaticRoute)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["route6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsStaticRoutesix = &map[string]VrfNameProtocolsStaticRoutesix{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsStaticRoutesix)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
