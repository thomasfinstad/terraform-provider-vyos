// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// VrfNameProtocolsBgpAddressFamilyIPvfourMulticast describes the resource data model.
type VrfNameProtocolsBgpAddressFamilyIPvfourMulticast struct {
	// LeafNodes

	// TagNodes
	TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress *map[string]VrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress `tfsdk:"aggregate_address" json:"aggregate-address,omitempty"`
	TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork          *map[string]VrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork          `tfsdk:"network" json:"network,omitempty"`

	// Nodes
	NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance *VrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance `tfsdk:"distance" json:"distance,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpAddressFamilyIPvfourMulticast) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"aggregate_address": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `BGP aggregate network/prefix

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  BGP aggregate network/prefix  |

`,
		},

		"network": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Import BGP network/prefix into multicast IPv4 RIB

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  Multicast IPv4 BGP network/prefix  |

`,
		},

		// Nodes

		"distance": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Administrative distances for BGP routes

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsBgpAddressFamilyIPvfourMulticast) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["aggregate-address"] = subData
	}

	if !reflect.ValueOf(o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork).IsZero() {
		subJSONStr, err := json.Marshal(o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["network"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["distance"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsBgpAddressFamilyIPvfourMulticast) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags
	if value, ok := jsonData["aggregate-address"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress = &map[string]VrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastAggregateAddress)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["network"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork = &map[string]VrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork{}

		err = json.Unmarshal(subJSONStr, o.TagVrfNameProtocolsBgpAddressFamilyIPvfourMulticastNetwork)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["distance"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance = &VrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsBgpAddressFamilyIPvfourMulticastDistance)
		if err != nil {
			return err
		}
	}

	return nil
}
