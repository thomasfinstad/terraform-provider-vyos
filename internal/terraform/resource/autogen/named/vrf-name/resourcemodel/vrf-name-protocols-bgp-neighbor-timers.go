// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// VrfNameProtocolsBgpNeighborTimers describes the resource data model.
type VrfNameProtocolsBgpNeighborTimers struct {
	// LeafNodes
	LeafVrfNameProtocolsBgpNeighborTimersConnect   types.String `tfsdk:"connect"`
	LeafVrfNameProtocolsBgpNeighborTimersHoldtime  types.String `tfsdk:"holdtime"`
	LeafVrfNameProtocolsBgpNeighborTimersKeepalive types.String `tfsdk:"keepalive"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *VrfNameProtocolsBgpNeighborTimers) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "neighbor", "timers"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafVrfNameProtocolsBgpNeighborTimersConnect.IsNull() || o.LeafVrfNameProtocolsBgpNeighborTimersConnect.IsUnknown()) {
		vyosData["connect"] = o.LeafVrfNameProtocolsBgpNeighborTimersConnect.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpNeighborTimersHoldtime.IsNull() || o.LeafVrfNameProtocolsBgpNeighborTimersHoldtime.IsUnknown()) {
		vyosData["holdtime"] = o.LeafVrfNameProtocolsBgpNeighborTimersHoldtime.ValueString()
	}
	if !(o.LeafVrfNameProtocolsBgpNeighborTimersKeepalive.IsNull() || o.LeafVrfNameProtocolsBgpNeighborTimersKeepalive.IsUnknown()) {
		vyosData["keepalive"] = o.LeafVrfNameProtocolsBgpNeighborTimersKeepalive.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *VrfNameProtocolsBgpNeighborTimers) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "neighbor", "timers"}})

	// Leafs
	if value, ok := vyosData["connect"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborTimersConnect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborTimersConnect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["holdtime"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborTimersHoldtime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborTimersHoldtime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["keepalive"]; ok {
		o.LeafVrfNameProtocolsBgpNeighborTimersKeepalive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsBgpNeighborTimersKeepalive = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"vrf", "name", "protocols", "bgp", "neighbor", "timers"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o VrfNameProtocolsBgpNeighborTimers) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"connect":   types.StringType,
		"holdtime":  types.StringType,
		"keepalive": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsBgpNeighborTimers) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"connect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP connect timer for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Connect timer in seconds  |
|  0  |  Disable connect timer  |

`,
		},

		"holdtime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP hold timer for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hold timer in seconds  |
|  0  |  Hold timer disabled  |

`,
		},

		"keepalive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `BGP keepalive interval for this neighbor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Keepalive interval in seconds  |

`,
		},

		// TagNodes

		// Nodes

	}
}
