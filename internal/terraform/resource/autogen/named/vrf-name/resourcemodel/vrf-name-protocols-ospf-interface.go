// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfInterface describes the resource data model.
type VrfNameProtocolsOspfInterface struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfInterfaceArea               types.String `tfsdk:"area" json:"area,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceDeadInterval       types.String `tfsdk:"dead_interval" json:"dead-interval,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceHelloInterval      types.String `tfsdk:"hello_interval" json:"hello-interval,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceRetransmitInterval types.String `tfsdk:"retransmit_interval" json:"retransmit-interval,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceTransmitDelay      types.String `tfsdk:"transmit_delay" json:"transmit-delay,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceCost               types.String `tfsdk:"cost" json:"cost,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceMtuIgnore          types.String `tfsdk:"mtu_ignore" json:"mtu-ignore,omitempty"`
	LeafVrfNameProtocolsOspfInterfacePriority           types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceBandwIDth          types.String `tfsdk:"bandwidth" json:"bandwidth,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier    types.String `tfsdk:"hello_multiplier" json:"hello-multiplier,omitempty"`
	LeafVrfNameProtocolsOspfInterfaceNetwork            types.String `tfsdk:"network" json:"network,omitempty"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsOspfInterfaceAuthentication *VrfNameProtocolsOspfInterfaceAuthentication `tfsdk:"authentication" json:"authentication,omitempty"`
	NodeVrfNameProtocolsOspfInterfaceBfd            *VrfNameProtocolsOspfInterfaceBfd            `tfsdk:"bfd" json:"bfd,omitempty"`
	NodeVrfNameProtocolsOspfInterfacePassive        *VrfNameProtocolsOspfInterfacePassive        `tfsdk:"passive" json:"passive,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"area": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable OSPF on this interface

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area ID as decimal notation  |
|  ipv4  |  OSPF area ID in IP address notation  |

`,
		},

		"dead_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`40`),
			Computed: true,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"retransmit_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"transmit_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"cost": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  OSPF interface cost  |

`,
		},

		"mtu_ignore": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  OSPF router priority cost  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"bandwidth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface bandwidth (Mbit/s)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-100000  |  Bandwidth in Megabit/sec (for calculating OSPF cost)  |

`,
		},

		"hello_multiplier": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Hello multiplier factor

|  Format  |  Description  |
|----------|---------------|
|  u32:1-10  |  Number of Hellos to send each second  |

`,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Network type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Broadcast network type  |
|  non-broadcast  |  Non-broadcast network type  |
|  point-to-multipoint  |  Point-to-multipoint network type  |
|  point-to-point  |  Point-to-point network type  |

`,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfInterfaceAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication

`,
		},

		"bfd": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},

		"passive": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfInterfacePassive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Suppress routing updates on an interface

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfInterfaceArea.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceArea.IsUnknown() {
		jsonData["area"] = o.LeafVrfNameProtocolsOspfInterfaceArea.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceDeadInterval.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceDeadInterval.IsUnknown() {
		jsonData["dead-interval"] = o.LeafVrfNameProtocolsOspfInterfaceDeadInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceHelloInterval.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafVrfNameProtocolsOspfInterfaceHelloInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceRetransmitInterval.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceRetransmitInterval.IsUnknown() {
		jsonData["retransmit-interval"] = o.LeafVrfNameProtocolsOspfInterfaceRetransmitInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceTransmitDelay.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceTransmitDelay.IsUnknown() {
		jsonData["transmit-delay"] = o.LeafVrfNameProtocolsOspfInterfaceTransmitDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceCost.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceCost.IsUnknown() {
		jsonData["cost"] = o.LeafVrfNameProtocolsOspfInterfaceCost.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceMtuIgnore.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceMtuIgnore.IsUnknown() {
		jsonData["mtu-ignore"] = o.LeafVrfNameProtocolsOspfInterfaceMtuIgnore.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfacePriority.IsNull() && !o.LeafVrfNameProtocolsOspfInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafVrfNameProtocolsOspfInterfacePriority.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceBandwIDth.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceBandwIDth.IsUnknown() {
		jsonData["bandwidth"] = o.LeafVrfNameProtocolsOspfInterfaceBandwIDth.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier.IsUnknown() {
		jsonData["hello-multiplier"] = o.LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfInterfaceNetwork.IsNull() && !o.LeafVrfNameProtocolsOspfInterfaceNetwork.IsUnknown() {
		jsonData["network"] = o.LeafVrfNameProtocolsOspfInterfaceNetwork.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfInterfaceAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfInterfaceAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfInterfaceBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfInterfaceBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfInterfacePassive).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfInterfacePassive)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["passive"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["area"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceArea = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceArea = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dead-interval"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceDeadInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceDeadInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["retransmit-interval"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceRetransmitInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceRetransmitInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["transmit-delay"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceTransmitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceTransmitDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cost"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceCost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceCost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu-ignore"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceMtuIgnore = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceMtuIgnore = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafVrfNameProtocolsOspfInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["bandwidth"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceBandwIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceBandwIDth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-multiplier"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceHelloMultIPlier = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafVrfNameProtocolsOspfInterfaceNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfInterfaceNetwork = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfInterfaceAuthentication = &VrfNameProtocolsOspfInterfaceAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfInterfaceAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfInterfaceBfd = &VrfNameProtocolsOspfInterfaceBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfInterfaceBfd)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["passive"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfInterfacePassive = &VrfNameProtocolsOspfInterfacePassive{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfInterfacePassive)
		if err != nil {
			return err
		}
	}

	return nil
}
