// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsIsisSpfDelayIetf describes the resource data model.
type VrfNameProtocolsIsisSpfDelayIetf struct {
	// LeafNodes
	LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay   types.String `tfsdk:"init_delay" json:"init-delay,omitempty"`
	LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay  types.String `tfsdk:"short_delay" json:"short-delay,omitempty"`
	LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay   types.String `tfsdk:"long_delay" json:"long-delay,omitempty"`
	LeafVrfNameProtocolsIsisSpfDelayIetfHolddown    types.String `tfsdk:"holddown" json:"holddown,omitempty"`
	LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn types.String `tfsdk:"time_to_learn" json:"time-to-learn,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsIsisSpfDelayIetf) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"init_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay used while in QUIET state

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in QUIET state (in ms)  |

`,
		},

		"short_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay used while in SHORT_WAIT state

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in SHORT_WAIT state (in ms)  |

`,
		},

		"long_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay used while in LONG_WAIT

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Delay used while in LONG_WAIT state in ms  |

`,
		},

		"holddown": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time with no received IGP events before considering IGP stable

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Time with no received IGP events before considering IGP stable in ms  |

`,
		},

		"time_to_learn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum duration needed to learn all the events related to a single failure

|  Format  |  Description  |
|----------|---------------|
|  u32:0-60000  |  Maximum duration needed to learn all the events related to a single failure in ms  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsIsisSpfDelayIetf) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay.IsNull() && !o.LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay.IsUnknown() {
		jsonData["init-delay"] = o.LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay.IsNull() && !o.LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay.IsUnknown() {
		jsonData["short-delay"] = o.LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay.IsNull() && !o.LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay.IsUnknown() {
		jsonData["long-delay"] = o.LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSpfDelayIetfHolddown.IsNull() && !o.LeafVrfNameProtocolsIsisSpfDelayIetfHolddown.IsUnknown() {
		jsonData["holddown"] = o.LeafVrfNameProtocolsIsisSpfDelayIetfHolddown.ValueString()
	}

	if !o.LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn.IsNull() && !o.LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn.IsUnknown() {
		jsonData["time-to-learn"] = o.LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsIsisSpfDelayIetf) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["init-delay"]; ok {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfInitDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["short-delay"]; ok {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfShortDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["long-delay"]; ok {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfLongDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["holddown"]; ok {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfHolddown = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfHolddown = basetypes.NewStringNull()
	}

	if value, ok := jsonData["time-to-learn"]; ok {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsIsisSpfDelayIetfTimeToLearn = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
