// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VrfNameProtocolsOspfvthreeInterface describes the resource data model.
type VrfNameProtocolsOspfvthreeInterface struct {
	// LeafNodes
	LeafVrfNameProtocolsOspfvthreeInterfaceArea               types.String `tfsdk:"area" json:"area,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval       types.String `tfsdk:"dead_interval" json:"dead-interval,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval      types.String `tfsdk:"hello_interval" json:"hello-interval,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval types.String `tfsdk:"retransmit_interval" json:"retransmit-interval,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay      types.String `tfsdk:"transmit_delay" json:"transmit-delay,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceCost               types.String `tfsdk:"cost" json:"cost,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore          types.String `tfsdk:"mtu_ignore" json:"mtu-ignore,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfacePriority           types.String `tfsdk:"priority" json:"priority,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu              types.String `tfsdk:"ifmtu" json:"ifmtu,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID         types.String `tfsdk:"instance_id" json:"instance-id,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfaceNetwork            types.String `tfsdk:"network" json:"network,omitempty"`
	LeafVrfNameProtocolsOspfvthreeInterfacePassive            types.String `tfsdk:"passive" json:"passive,omitempty"`

	// TagNodes

	// Nodes
	NodeVrfNameProtocolsOspfvthreeInterfaceBfd *VrfNameProtocolsOspfvthreeInterfaceBfd `tfsdk:"bfd" json:"bfd,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VrfNameProtocolsOspfvthreeInterface) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"area": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable OSPF on this interface

|  Format  |  Description  |
|----------|---------------|
|  u32  |  OSPF area ID as decimal notation  |
|  ipv4  |  OSPF area ID in IP address notation  |

`,
		},

		"dead_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval after which a neighbor is declared dead

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Neighbor dead interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`40`),
			Computed: true,
		},

		"hello_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between hello packets

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Hello interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`10`),
			Computed: true,
		},

		"retransmit_interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between retransmitting lost link state advertisements

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Retransmit interval (seconds)  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"transmit_delay": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Link state transmit delay

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Link state transmit delay (seconds)  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"cost": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface cost

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  OSPF interface cost  |

`,
		},

		"mtu_ignore": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable Maximum Transmission Unit (MTU) mismatch detection

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Router priority

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  OSPF router priority cost  |

`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"ifmtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface MTU

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Interface MTU  |

`,
		},

		"instance_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Instance ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  Instance Id  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"network": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Network type

|  Format  |  Description  |
|----------|---------------|
|  broadcast  |  Broadcast network type  |
|  point-to-point  |  Point-to-point network type  |

`,
		},

		"passive": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Configure passive mode for interface

`,
		},

		// TagNodes

		// Nodes

		"bfd": schema.SingleNestedAttribute{
			Attributes: VrfNameProtocolsOspfvthreeInterfaceBfd{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Enable Bidirectional Forwarding Detection (BFD)

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VrfNameProtocolsOspfvthreeInterface) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceArea.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceArea.IsUnknown() {
		jsonData["area"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceArea.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval.IsUnknown() {
		jsonData["dead-interval"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval.IsUnknown() {
		jsonData["hello-interval"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval.IsUnknown() {
		jsonData["retransmit-interval"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay.IsUnknown() {
		jsonData["transmit-delay"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceCost.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceCost.IsUnknown() {
		jsonData["cost"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceCost.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore.IsUnknown() {
		jsonData["mtu-ignore"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfacePriority.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfacePriority.IsUnknown() {
		jsonData["priority"] = o.LeafVrfNameProtocolsOspfvthreeInterfacePriority.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu.IsUnknown() {
		jsonData["ifmtu"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID.IsUnknown() {
		jsonData["instance-id"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfaceNetwork.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfaceNetwork.IsUnknown() {
		jsonData["network"] = o.LeafVrfNameProtocolsOspfvthreeInterfaceNetwork.ValueString()
	}

	if !o.LeafVrfNameProtocolsOspfvthreeInterfacePassive.IsNull() && !o.LeafVrfNameProtocolsOspfvthreeInterfacePassive.IsUnknown() {
		jsonData["passive"] = o.LeafVrfNameProtocolsOspfvthreeInterfacePassive.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeVrfNameProtocolsOspfvthreeInterfaceBfd).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVrfNameProtocolsOspfvthreeInterfaceBfd)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["bfd"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VrfNameProtocolsOspfvthreeInterface) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["area"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceArea = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceArea = basetypes.NewStringNull()
	}

	if value, ok := jsonData["dead-interval"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceDeadInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hello-interval"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceHelloInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["retransmit-interval"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceRetransmitInterval = basetypes.NewStringNull()
	}

	if value, ok := jsonData["transmit-delay"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceTransmitDelay = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cost"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceCost = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceCost = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu-ignore"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceMtuIgnore = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfacePriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfacePriority = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ifmtu"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceIfmtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["instance-id"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceInstanceID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["network"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceNetwork = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfaceNetwork = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passive"]; ok {
		o.LeafVrfNameProtocolsOspfvthreeInterfacePassive = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVrfNameProtocolsOspfvthreeInterfacePassive = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["bfd"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVrfNameProtocolsOspfvthreeInterfaceBfd = &VrfNameProtocolsOspfvthreeInterfaceBfd{}

		err = json.Unmarshal(subJSONStr, o.NodeVrfNameProtocolsOspfvthreeInterfaceBfd)
		if err != nil {
			return err
		}
	}

	return nil
}
