// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// QosPolicyRoundRobinDefault describes the resource data model.
type QosPolicyRoundRobinDefault struct {
	// LeafNodes
	LeafQosPolicyRoundRobinDefaultCodelQuantum types.String `tfsdk:"codel_quantum"`
	LeafQosPolicyRoundRobinDefaultFlows        types.String `tfsdk:"flows"`
	LeafQosPolicyRoundRobinDefaultInterval     types.String `tfsdk:"interval"`
	LeafQosPolicyRoundRobinDefaultQueueLimit   types.String `tfsdk:"queue_limit"`
	LeafQosPolicyRoundRobinDefaultQueueType    types.String `tfsdk:"queue_type"`
	LeafQosPolicyRoundRobinDefaultTarget       types.String `tfsdk:"target"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *QosPolicyRoundRobinDefault) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"qos", "policy", "round-robin", "default"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafQosPolicyRoundRobinDefaultCodelQuantum.IsNull() || o.LeafQosPolicyRoundRobinDefaultCodelQuantum.IsUnknown()) {
		vyosData["codel-quantum"] = o.LeafQosPolicyRoundRobinDefaultCodelQuantum.ValueString()
	}
	if !(o.LeafQosPolicyRoundRobinDefaultFlows.IsNull() || o.LeafQosPolicyRoundRobinDefaultFlows.IsUnknown()) {
		vyosData["flows"] = o.LeafQosPolicyRoundRobinDefaultFlows.ValueString()
	}
	if !(o.LeafQosPolicyRoundRobinDefaultInterval.IsNull() || o.LeafQosPolicyRoundRobinDefaultInterval.IsUnknown()) {
		vyosData["interval"] = o.LeafQosPolicyRoundRobinDefaultInterval.ValueString()
	}
	if !(o.LeafQosPolicyRoundRobinDefaultQueueLimit.IsNull() || o.LeafQosPolicyRoundRobinDefaultQueueLimit.IsUnknown()) {
		vyosData["queue-limit"] = o.LeafQosPolicyRoundRobinDefaultQueueLimit.ValueString()
	}
	if !(o.LeafQosPolicyRoundRobinDefaultQueueType.IsNull() || o.LeafQosPolicyRoundRobinDefaultQueueType.IsUnknown()) {
		vyosData["queue-type"] = o.LeafQosPolicyRoundRobinDefaultQueueType.ValueString()
	}
	if !(o.LeafQosPolicyRoundRobinDefaultTarget.IsNull() || o.LeafQosPolicyRoundRobinDefaultTarget.IsUnknown()) {
		vyosData["target"] = o.LeafQosPolicyRoundRobinDefaultTarget.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *QosPolicyRoundRobinDefault) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"qos", "policy", "round-robin", "default"}})

	// Leafs
	if value, ok := vyosData["codel-quantum"]; ok {
		o.LeafQosPolicyRoundRobinDefaultCodelQuantum = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultCodelQuantum = basetypes.NewStringNull()
	}
	if value, ok := vyosData["flows"]; ok {
		o.LeafQosPolicyRoundRobinDefaultFlows = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultFlows = basetypes.NewStringNull()
	}
	if value, ok := vyosData["interval"]; ok {
		o.LeafQosPolicyRoundRobinDefaultInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultInterval = basetypes.NewStringNull()
	}
	if value, ok := vyosData["queue-limit"]; ok {
		o.LeafQosPolicyRoundRobinDefaultQueueLimit = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultQueueLimit = basetypes.NewStringNull()
	}
	if value, ok := vyosData["queue-type"]; ok {
		o.LeafQosPolicyRoundRobinDefaultQueueType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultQueueType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["target"]; ok {
		o.LeafQosPolicyRoundRobinDefaultTarget = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafQosPolicyRoundRobinDefaultTarget = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"qos", "policy", "round-robin", "default"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o QosPolicyRoundRobinDefault) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"codel_quantum": types.StringType,
		"flows":         types.StringType,
		"interval":      types.StringType,
		"queue_limit":   types.StringType,
		"queue_type":    types.StringType,
		"target":        types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o QosPolicyRoundRobinDefault) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"codel_quantum": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Deficit in the fair queuing algorithm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-1048576  |  Number of bytes used as 'deficit'  |

`,

			// Default:          stringdefault.StaticString(`1514`),
			Computed: true,
		},

		"flows": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of flows into which the incoming packets are classified

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65536  |  Number of flows  |

`,

			// Default:          stringdefault.StaticString(`1024`),
			Computed: true,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval used to measure the delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Interval in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"queue_limit": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum queue size

|  Format  |  Description  |
|----------|---------------|
|  u32:1-4294967295  |  Queue size in packets  |

`,
		},

		"queue_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Queue type for default traffic

|  Format  |  Description  |
|----------|---------------|
|  drop-tail  |  First-In-First-Out (FIFO)  |
|  fair-queue  |  Stochastic Fair Queue (SFQ)  |
|  fq-codel  |  Fair Queue Codel  |
|  priority  |  Priority queuing  |
|  random-detect  |  Random Early Detection (RED)  |

`,

			// Default:          stringdefault.StaticString(`fair-queue`),
			Computed: true,
		},

		"target": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acceptable minimum standing/persistent queue delay

|  Format  |  Description  |
|----------|---------------|
|  u32  |  Queue delay in milliseconds  |

`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
