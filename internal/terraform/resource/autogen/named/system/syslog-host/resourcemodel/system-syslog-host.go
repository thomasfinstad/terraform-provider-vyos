// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// SystemSyslogHost describes the resource data model.
type SystemSyslogHost struct {
	SelfIdentifier types.String `tfsdk:"host_id" vyos:",self-id"`

	// LeafNodes
	LeafSystemSyslogHostPort types.Number `tfsdk:"port" vyos:"port,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagSystemSyslogHostFacility bool `tfsdk:"facility" vyos:"facility,child"`

	// Nodes
	NodeSystemSyslogHostFormat *SystemSyslogHostFormat `tfsdk:"format" vyos:"format,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemSyslogHost) GetVyosPath() []string {
	return []string{
		"system",

		"syslog",

		"host",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogHost) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"host_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Logging to a remote host

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Remote syslog server IPv4 address  |
    |  hostname  &emsp; |  Remote syslog server FQDN  |

`,
		},

		// LeafNodes

		"port": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Port number used by connection

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  number: 1-65535  &emsp; |  Numeric IP port  |

`,
		},

		// Nodes

		"format": schema.SingleNestedAttribute{
			Attributes: SystemSyslogHostFormat{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Logging format

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *SystemSyslogHost) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *SystemSyslogHost) UnmarshalJSON(_ []byte) error {
	return nil
}
