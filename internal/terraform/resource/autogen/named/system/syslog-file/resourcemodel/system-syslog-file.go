// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// SystemSyslogFile describes the resource data model.
type SystemSyslogFile struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagSystemSyslogFileFacility bool `tfsdk:"facility" vyos:"facility,child"`

	// Nodes
	NodeSystemSyslogFileArchive *SystemSyslogFileArchive `tfsdk:"archive" vyos:"archive,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemSyslogFile) GetVyosPath() []string {
	return []string{
		"system",
		"syslog",
		"file",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemSyslogFile) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Logging to a file

`,
		},

		// LeafNodes

		// Nodes

		"archive": schema.SingleNestedAttribute{
			Attributes: SystemSyslogFileArchive{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Log file size and rotation characteristics

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *SystemSyslogFile) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Nodes

	if !reflect.ValueOf(o.NodeSystemSyslogFileArchive).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeSystemSyslogFileArchive)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["archive"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *SystemSyslogFile) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Nodes
	if value, ok := jsonData["archive"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeSystemSyslogFileArchive = &SystemSyslogFileArchive{}

		err = json.Unmarshal(subJSONStr, o.NodeSystemSyslogFileArchive)
		if err != nil {
			return err
		}
	}

	return nil
}
