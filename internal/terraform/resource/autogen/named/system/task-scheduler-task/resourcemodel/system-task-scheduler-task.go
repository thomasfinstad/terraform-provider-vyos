// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// SystemTaskSchedulerTask describes the resource data model.
type SystemTaskSchedulerTask struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafSystemTaskSchedulerTaskCrontabSpec types.String `tfsdk:"crontab_spec" vyos:"crontab-spec,omitempty"`
	LeafSystemTaskSchedulerTaskInterval    types.String `tfsdk:"interval" vyos:"interval,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeSystemTaskSchedulerTaskExecutable *SystemTaskSchedulerTaskExecutable `tfsdk:"executable" vyos:"executable,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *SystemTaskSchedulerTask) GetVyosPath() []string {
	return []string{
		"system",
		"task-scheduler",
		"task",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o SystemTaskSchedulerTask) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Scheduled task

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Task name  |

`,
		},

		// LeafNodes

		"crontab_spec": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `UNIX crontab time specification string

`,
		},

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Execution interval

    |  Format  |  Description  |
    |----------|---------------|
    |  <minutes>  |  Execution interval in minutes  |
    |  <minutes>m  |  Execution interval in minutes  |
    |  <hours>h  |  Execution interval in hours  |
    |  <days>d  |  Execution interval in days  |

`,
		},

		// Nodes

		"executable": schema.SingleNestedAttribute{
			Attributes: SystemTaskSchedulerTaskExecutable{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Executable path and arguments

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *SystemTaskSchedulerTask) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafSystemTaskSchedulerTaskCrontabSpec.IsNull() && !o.LeafSystemTaskSchedulerTaskCrontabSpec.IsUnknown() {
		jsonData["crontab-spec"] = o.LeafSystemTaskSchedulerTaskCrontabSpec.ValueString()
	}

	if !o.LeafSystemTaskSchedulerTaskInterval.IsNull() && !o.LeafSystemTaskSchedulerTaskInterval.IsUnknown() {
		jsonData["interval"] = o.LeafSystemTaskSchedulerTaskInterval.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeSystemTaskSchedulerTaskExecutable).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeSystemTaskSchedulerTaskExecutable)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["executable"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *SystemTaskSchedulerTask) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["crontab-spec"]; ok {
		o.LeafSystemTaskSchedulerTaskCrontabSpec = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemTaskSchedulerTaskCrontabSpec = basetypes.NewStringNull()
	}

	if value, ok := jsonData["interval"]; ok {
		o.LeafSystemTaskSchedulerTaskInterval = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafSystemTaskSchedulerTaskInterval = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["executable"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeSystemTaskSchedulerTaskExecutable = &SystemTaskSchedulerTaskExecutable{}

		err = json.Unmarshal(subJSONStr, o.NodeSystemTaskSchedulerTaskExecutable)
		if err != nil {
			return err
		}
	}

	return nil
}
