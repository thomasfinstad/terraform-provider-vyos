// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesBondingDhcpOptions describes the resource data model.
type InterfacesBondingDhcpOptions struct {
	// LeafNodes
	LeafInterfacesBondingDhcpOptionsClientID             types.String `tfsdk:"client_id"`
	LeafInterfacesBondingDhcpOptionsHostName             types.String `tfsdk:"host_name"`
	LeafInterfacesBondingDhcpOptionsMtu                  types.String `tfsdk:"mtu"`
	LeafInterfacesBondingDhcpOptionsVendorClassID        types.String `tfsdk:"vendor_class_id"`
	LeafInterfacesBondingDhcpOptionsNoDefaultRoute       types.String `tfsdk:"no_default_route"`
	LeafInterfacesBondingDhcpOptionsDefaultRouteDistance types.String `tfsdk:"default_route_distance"`
	LeafInterfacesBondingDhcpOptionsReject               types.String `tfsdk:"reject"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesBondingDhcpOptions) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "bonding", "dhcp-options"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesBondingDhcpOptionsClientID.IsNull() || o.LeafInterfacesBondingDhcpOptionsClientID.IsUnknown()) {
		vyosData["client-id"] = o.LeafInterfacesBondingDhcpOptionsClientID.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsHostName.IsNull() || o.LeafInterfacesBondingDhcpOptionsHostName.IsUnknown()) {
		vyosData["host-name"] = o.LeafInterfacesBondingDhcpOptionsHostName.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsMtu.IsNull() || o.LeafInterfacesBondingDhcpOptionsMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesBondingDhcpOptionsMtu.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsVendorClassID.IsNull() || o.LeafInterfacesBondingDhcpOptionsVendorClassID.IsUnknown()) {
		vyosData["vendor-class-id"] = o.LeafInterfacesBondingDhcpOptionsVendorClassID.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsNoDefaultRoute.IsNull() || o.LeafInterfacesBondingDhcpOptionsNoDefaultRoute.IsUnknown()) {
		vyosData["no-default-route"] = o.LeafInterfacesBondingDhcpOptionsNoDefaultRoute.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsDefaultRouteDistance.IsNull() || o.LeafInterfacesBondingDhcpOptionsDefaultRouteDistance.IsUnknown()) {
		vyosData["default-route-distance"] = o.LeafInterfacesBondingDhcpOptionsDefaultRouteDistance.ValueString()
	}
	if !(o.LeafInterfacesBondingDhcpOptionsReject.IsNull() || o.LeafInterfacesBondingDhcpOptionsReject.IsUnknown()) {
		vyosData["reject"] = o.LeafInterfacesBondingDhcpOptionsReject.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesBondingDhcpOptions) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "bonding", "dhcp-options"}})

	// Leafs
	if value, ok := vyosData["client-id"]; ok {
		o.LeafInterfacesBondingDhcpOptionsClientID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsClientID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["host-name"]; ok {
		o.LeafInterfacesBondingDhcpOptionsHostName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsHostName = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesBondingDhcpOptionsMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vendor-class-id"]; ok {
		o.LeafInterfacesBondingDhcpOptionsVendorClassID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsVendorClassID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-default-route"]; ok {
		o.LeafInterfacesBondingDhcpOptionsNoDefaultRoute = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsNoDefaultRoute = basetypes.NewStringNull()
	}
	if value, ok := vyosData["default-route-distance"]; ok {
		o.LeafInterfacesBondingDhcpOptionsDefaultRouteDistance = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsDefaultRouteDistance = basetypes.NewStringNull()
	}
	if value, ok := vyosData["reject"]; ok {
		o.LeafInterfacesBondingDhcpOptionsReject = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesBondingDhcpOptionsReject = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "bonding", "dhcp-options"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesBondingDhcpOptions) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"client_id":              types.StringType,
		"host_name":              types.StringType,
		"mtu":                    types.StringType,
		"vendor_class_id":        types.StringType,
		"no_default_route":       types.StringType,
		"default_route_distance": types.StringType,
		"reject":                 types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBondingDhcpOptions) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"client_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Identifier used by client to identify itself to the DHCP server

`,
		},

		"host_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override system host-name sent to DHCP server

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Use MTU value from DHCP server - ignore interface setting

`,
		},

		"vendor_class_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Identify the vendor client type to the DHCP server

`,
		},

		"no_default_route": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not install default route to system

`,
		},

		"default_route_distance": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |

`,

			// Default:          stringdefault.StaticString(`210`),
			Computed: true,
		},

		"reject": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP addresses or subnets from which to reject DHCP leases

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  IPv4 address to match  |
|  ipv4net  |  IPv4 prefix to match  |

`,
		},

		// TagNodes

		// Nodes

	}
}
