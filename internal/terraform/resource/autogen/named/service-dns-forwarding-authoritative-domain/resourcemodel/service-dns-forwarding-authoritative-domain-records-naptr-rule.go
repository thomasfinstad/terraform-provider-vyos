// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule struct {
	// LeafNodes
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder            types.String `tfsdk:"order" json:"order,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference       types.String `tfsdk:"preference" json:"preference,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv        types.String `tfsdk:"lookup_srv" json:"lookup-srv,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA          types.String `tfsdk:"lookup_a" json:"lookup-a,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI       types.String `tfsdk:"resolve_uri" json:"resolve-uri,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific types.String `tfsdk:"protocol_specific" json:"protocol-specific,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService          types.String `tfsdk:"service" json:"service,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp           types.String `tfsdk:"regexp" json:"regexp,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement      types.String `tfsdk:"replacement" json:"replacement,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"order": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rule order

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule order (lower order is evaluated first)  |

`,
		},

		"preference": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rule preference

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule preference  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"lookup_srv": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `"S" flag

`,
		},

		"lookup_a": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `"A" flag

`,
		},

		"resolve_uri": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `"U" flag

`,
		},

		"protocol_specific": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `"P" flag

`,
		},

		"service": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Service type

`,
		},

		"regexp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Regular expression

`,
		},

		"replacement": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Replacement DNS name

|  Format  |  Description  |
|----------|---------------|
|  name.example.com  |  An absolute DNS name  |

`,
		},

		// TagNodes

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder.IsUnknown() {
		jsonData["order"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference.IsUnknown() {
		jsonData["preference"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv.IsUnknown() {
		jsonData["lookup-srv"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA.IsUnknown() {
		jsonData["lookup-a"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI.IsUnknown() {
		jsonData["resolve-uri"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific.IsUnknown() {
		jsonData["protocol-specific"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService.IsUnknown() {
		jsonData["service"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp.IsUnknown() {
		jsonData["regexp"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement.IsUnknown() {
		jsonData["replacement"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["order"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleOrder = basetypes.NewStringNull()
	}

	if value, ok := jsonData["preference"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRulePreference = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lookup-srv"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupSrv = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lookup-a"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleLookupA = basetypes.NewStringNull()
	}

	if value, ok := jsonData["resolve-uri"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleResolveURI = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol-specific"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleProtocolSpecific = basetypes.NewStringNull()
	}

	if value, ok := jsonData["service"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleService = basetypes.NewStringNull()
	}

	if value, ok := jsonData["regexp"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleRegexp = basetypes.NewStringNull()
	}

	if value, ok := jsonData["replacement"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrRuleReplacement = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	return nil
}
