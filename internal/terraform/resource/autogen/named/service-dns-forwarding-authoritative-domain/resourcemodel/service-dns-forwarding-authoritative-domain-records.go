// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceDNSForwardingAuthoritativeDomainRecords describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecords struct {
	// LeafNodes

	// TagNodes
	TagServiceDNSForwardingAuthoritativeDomainRecordsA     types.Map `tfsdk:"a"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa  types.Map `tfsdk:"aaaa"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsCname types.Map `tfsdk:"cname"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsMx    types.Map `tfsdk:"mx"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsPtr   types.Map `tfsdk:"ptr"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsTxt   types.Map `tfsdk:"txt"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsSpf   types.Map `tfsdk:"spf"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsSrv   types.Map `tfsdk:"srv"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr types.Map `tfsdk:"naptr"`

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceDNSForwardingAuthoritativeDomainRecords) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records"}})

	vyosData := make(map[string]interface{})

	// Leafs

	// Tags
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsA.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsA.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsA)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsA.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["a"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsAaaa)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["aaaa"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsCname)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["cname"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsMx)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["mx"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsPtr)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["ptr"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsTxt)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["txt"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSpf)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["spf"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSrv)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["srv"] = subData
	}
	if !(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr.IsNull() || o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr.IsUnknown()) {
		subModel := make(map[string]ServiceDNSForwardingAuthoritativeDomainRecordsNaptr)
		diags.Append(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["naptr"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceDNSForwardingAuthoritativeDomainRecords) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records"}})

	// Leafs

	// Tags
	if value, ok := vyosData["a"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsA{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsA = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsA = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["aaaa"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsAaaa{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["cname"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsCname{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["mx"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsMx{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["ptr"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsPtr{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["txt"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsTxt{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["spf"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsSpf{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["srv"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsSrv{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["naptr"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsNaptr{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr = data
	} else {
		o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecords) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs

		// Tags
		"a":     types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsA{}.AttributeTypes()}},
		"aaaa":  types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsAaaa{}.AttributeTypes()}},
		"cname": types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsCname{}.AttributeTypes()}},
		"mx":    types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsMx{}.AttributeTypes()}},
		"ptr":   types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsPtr{}.AttributeTypes()}},
		"txt":   types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsTxt{}.AttributeTypes()}},
		"spf":   types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsSpf{}.AttributeTypes()}},
		"srv":   types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsSrv{}.AttributeTypes()}},
		"naptr": types.MapType{ElemType: types.ObjectType{AttrTypes: ServiceDNSForwardingAuthoritativeDomainRecordsNaptr{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecords) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"a": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsA{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"A" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |

`,
		},

		"aaaa": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsAaaa{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"AAAA" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |

`,
		},

		"cname": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsCname{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"CNAME" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"mx": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsMx{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"MX" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"ptr": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsPtr{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"PTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"txt": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsTxt{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"TXT" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"spf": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsSpf{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"SPF" record (type=SPF)

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"srv": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsSrv{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"SRV" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"naptr": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsNaptr{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"NAPTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		// Nodes

	}
}
