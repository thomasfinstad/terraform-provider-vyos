// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

// ServiceDNSForwardingAuthoritativeDomainRecords describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecords struct {
	// LeafNodes

	// TagNodes
	TagServiceDNSForwardingAuthoritativeDomainRecordsA     *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsA     `tfsdk:"a" json:"a,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa  *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsAaaa  `tfsdk:"aaaa" json:"aaaa,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsCname *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsCname `tfsdk:"cname" json:"cname,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsMx    *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsMx    `tfsdk:"mx" json:"mx,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsPtr   *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsPtr   `tfsdk:"ptr" json:"ptr,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsTxt   *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsTxt   `tfsdk:"txt" json:"txt,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsSpf   *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSpf   `tfsdk:"spf" json:"spf,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsSrv   *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSrv   `tfsdk:"srv" json:"srv,omitempty"`
	TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsNaptr `tfsdk:"naptr" json:"naptr,omitempty"`

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecords) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		// TagNodes

		"a": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsA{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"A" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |

`,
		},

		"aaaa": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsAaaa{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"AAAA" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |
|  any  |  Wildcard record (any subdomain)  |

`,
		},

		"cname": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsCname{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"CNAME" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"mx": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsMx{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"MX" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"ptr": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsPtr{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"PTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"txt": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsTxt{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"TXT" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"spf": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsSpf{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"SPF" record (type=SPF)

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"srv": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsSrv{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"SRV" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		"naptr": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsNaptr{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `"NAPTR" record

|  Format  |  Description  |
|----------|---------------|
|  text  |  A DNS name relative to the root record  |
|  @  |  Root record  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingAuthoritativeDomainRecords) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	// Tags

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsA).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsA)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["a"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["aaaa"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["cname"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mx"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ptr"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["txt"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["spf"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["srv"] = subData
	}

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["naptr"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingAuthoritativeDomainRecords) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	// Tags
	if value, ok := jsonData["a"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsA = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsA{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsA)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["aaaa"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsAaaa{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsAaaa)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["cname"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsCname{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsCname)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mx"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsMx{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsMx)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ptr"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsPtr{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsPtr)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["txt"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsTxt{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsTxt)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["spf"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSpf{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsSpf)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["srv"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsSrv{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsSrv)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["naptr"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsNaptr{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptr)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
