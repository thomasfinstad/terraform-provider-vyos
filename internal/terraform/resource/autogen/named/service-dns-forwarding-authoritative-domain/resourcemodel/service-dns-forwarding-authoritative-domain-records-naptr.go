// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// ServiceDNSForwardingAuthoritativeDomainRecordsNaptr describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecordsNaptr struct {
	// LeafNodes
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL     types.String `tfsdk:"ttl" json:"ttl,omitempty"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable types.String `tfsdk:"disable" json:"disable,omitempty"`

	// TagNodes
	TagServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule *map[string]ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule `tfsdk:"rule" json:"rule,omitempty"`

	// Nodes
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecordsNaptr) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		// TagNodes

		"rule": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `NAPTR rule

|  Format  |  Description  |
|----------|---------------|
|  u32:0-65535  |  Rule number  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsNaptr) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL.IsUnknown() {
		jsonData["ttl"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL.ValueString()
	}

	if !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable.IsNull() && !o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable.IsUnknown() {
		jsonData["disable"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule).IsZero() {
		subJSONStr, err := json.Marshal(o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rule"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsNaptr) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["ttl"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrTTL = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsNaptrDisable = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["rule"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule = &map[string]ServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule{}

		err = json.Unmarshal(subJSONStr, o.TagServiceDNSForwardingAuthoritativeDomainRecordsNaptrRule)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
