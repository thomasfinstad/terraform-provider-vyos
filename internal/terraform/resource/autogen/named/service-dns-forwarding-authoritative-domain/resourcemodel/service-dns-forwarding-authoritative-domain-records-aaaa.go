// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ServiceDNSForwardingAuthoritativeDomainRecordsAaaa describes the resource data model.
type ServiceDNSForwardingAuthoritativeDomainRecordsAaaa struct {
	// LeafNodes
	LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress types.String `tfsdk:"address"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL     types.String `tfsdk:"ttl"`
	LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable types.String `tfsdk:"disable"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsAaaa) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records", "aaaa"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress.IsNull() || o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress.IsUnknown()) {
		vyosData["address"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress.ValueString()
	}
	if !(o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL.IsNull() || o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL.IsUnknown()) {
		vyosData["ttl"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL.ValueString()
	}
	if !(o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable.IsNull() || o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ServiceDNSForwardingAuthoritativeDomainRecordsAaaa) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records", "aaaa"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ttl"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaTTL = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafServiceDNSForwardingAuthoritativeDomainRecordsAaaaDisable = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"service", "dns", "forwarding", "authoritative-domain", "records", "aaaa"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecordsAaaa) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address": types.StringType,
		"ttl":     types.StringType,
		"disable": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDNSForwardingAuthoritativeDomainRecordsAaaa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv6 address

|  Format  |  Description  |
|----------|---------------|
|  ipv6  |  IPv6 address  |

`,
		},

		"ttl": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time-to-live (TTL)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-2147483647  |  TTL in seconds  |

`,

			// Default:          stringdefault.StaticString(`300`),
			Computed: true,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		// TagNodes

		// Nodes

	}
}
