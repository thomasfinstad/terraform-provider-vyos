// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// PolicyPrefixList describes the resource data model.
type PolicyPrefixList struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPolicyPrefixListDescrIPtion types.String `tfsdk:"description"`

	// TagNodes
	TagPolicyPrefixListRule types.Map `tfsdk:"rule"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyPrefixList) GetVyosPath() []string {
	return []string{
		"policy",
		"prefix-list",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *PolicyPrefixList) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"policy", "prefix-list"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafPolicyPrefixListDescrIPtion.IsNull() || o.LeafPolicyPrefixListDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafPolicyPrefixListDescrIPtion.ValueString()
	}

	// Tags
	if !(o.TagPolicyPrefixListRule.IsNull() || o.TagPolicyPrefixListRule.IsUnknown()) {
		subModel := make(map[string]PolicyPrefixListRule)
		diags.Append(o.TagPolicyPrefixListRule.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["rule"] = subData
	}

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *PolicyPrefixList) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"policy", "prefix-list"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafPolicyPrefixListDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["rule"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: PolicyPrefixListRule{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagPolicyPrefixListRule = data
	} else {
		o.TagPolicyPrefixListRule = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"policy", "prefix-list"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o PolicyPrefixList) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description": types.StringType,

		// Tags
		"rule": types.MapType{ElemType: types.ObjectType{AttrTypes: PolicyPrefixListRule{}.AttributeTypes()}},

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyPrefixList) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP prefix-list filter

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"rule": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: PolicyPrefixListRule{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Rule for this prefix-list

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Prefix-list rule number  |

`,
		},

		// Nodes

	}
}
