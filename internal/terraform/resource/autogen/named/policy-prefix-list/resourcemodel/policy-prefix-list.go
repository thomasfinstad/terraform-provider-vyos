// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// PolicyPrefixList describes the resource data model.
type PolicyPrefixList struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafPolicyPrefixListDescrIPtion types.String `tfsdk:"description" json:"description,omitempty"`

	// TagNodes
	TagPolicyPrefixListRule *map[string]PolicyPrefixListRule `tfsdk:"rule" json:"rule,omitempty"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *PolicyPrefixList) GetVyosPath() []string {
	return []string{
		"policy",
		"prefix-list",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o PolicyPrefixList) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP prefix-list filter

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of IPv4 prefix-list  |

`,
		},

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		// TagNodes

		"rule": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: PolicyPrefixListRule{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Rule for this prefix-list

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Prefix-list rule number  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *PolicyPrefixList) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafPolicyPrefixListDescrIPtion.IsNull() && !o.LeafPolicyPrefixListDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafPolicyPrefixListDescrIPtion.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagPolicyPrefixListRule).IsZero() {
		subJSONStr, err := json.Marshal(o.TagPolicyPrefixListRule)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rule"] = subData
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *PolicyPrefixList) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["description"]; ok {
		o.LeafPolicyPrefixListDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafPolicyPrefixListDescrIPtion = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["rule"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagPolicyPrefixListRule = &map[string]PolicyPrefixListRule{}

		err = json.Unmarshal(subJSONStr, o.TagPolicyPrefixListRule)
		if err != nil {
			return err
		}
	}

	// Nodes

	return nil
}
