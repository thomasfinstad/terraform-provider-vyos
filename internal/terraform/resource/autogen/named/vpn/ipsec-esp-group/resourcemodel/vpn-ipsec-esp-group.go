// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VpnIPsecEspGroup describes the resource data model.
type VpnIPsecEspGroup struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafVpnIPsecEspGroupCompression types.Bool   `tfsdk:"compression" vyos:"compression,omitempty"`
	LeafVpnIPsecEspGroupLifetime    types.Number `tfsdk:"lifetime" vyos:"lifetime,omitempty"`
	LeafVpnIPsecEspGroupLifeBytes   types.Number `tfsdk:"life_bytes" vyos:"life-bytes,omitempty"`
	LeafVpnIPsecEspGroupLifePackets types.Number `tfsdk:"life_packets" vyos:"life-packets,omitempty"`
	LeafVpnIPsecEspGroupMode        types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafVpnIPsecEspGroupPfs         types.String `tfsdk:"pfs" vyos:"pfs,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVpnIPsecEspGroupProposal bool `tfsdk:"proposal" vyos:"proposal,child"`

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecEspGroup) GetVyosPath() []string {
	return []string{
		"vpn",

		"ipsec",

		"esp-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecEspGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Encapsulating Security Payload (ESP) group name

`,
		},

		// LeafNodes

		"compression": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Enable ESP compression

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"lifetime": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Security Association time to expire

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:30-86400  |  SA lifetime in seconds  |

`,

			// Default:          stringdefault.StaticString(`3600`),
			Computed: true,
		},

		"life_bytes": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Security Association byte count to expire

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1024-26843545600000  |  SA life in bytes  |

`,
		},

		"life_packets": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Security Association packet count to expire

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1000-26843545600000  |  SA life in packets  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ESP mode

    |  Format  |  Description  |
    |----------|---------------|
    |  tunnel  |  Tunnel mode  |
    |  transport  |  Transport mode  |

`,

			// Default:          stringdefault.StaticString(`tunnel`),
			Computed: true,
		},

		"pfs": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ESP Perfect Forward Secrecy

    |  Format  |  Description  |
    |----------|---------------|
    |  enable  |  Inherit Diffie-Hellman group from the IKE group  |
    |  dh-group1  |  Use Diffie-Hellman group 1 (modp768)  |
    |  dh-group2  |  Use Diffie-Hellman group 2 (modp1024)  |
    |  dh-group5  |  Use Diffie-Hellman group 5 (modp1536)  |
    |  dh-group14  |  Use Diffie-Hellman group 14 (modp2048)  |
    |  dh-group15  |  Use Diffie-Hellman group 15 (modp3072)  |
    |  dh-group16  |  Use Diffie-Hellman group 16 (modp4096)  |
    |  dh-group17  |  Use Diffie-Hellman group 17 (modp6144)  |
    |  dh-group18  |  Use Diffie-Hellman group 18 (modp8192)  |
    |  dh-group19  |  Use Diffie-Hellman group 19 (ecp256)  |
    |  dh-group20  |  Use Diffie-Hellman group 20 (ecp384)  |
    |  dh-group21  |  Use Diffie-Hellman group 21 (ecp521)  |
    |  dh-group22  |  Use Diffie-Hellman group 22 (modp1024s160)  |
    |  dh-group23  |  Use Diffie-Hellman group 23 (modp2048s224)  |
    |  dh-group24  |  Use Diffie-Hellman group 24 (modp2048s256)  |
    |  dh-group25  |  Use Diffie-Hellman group 25 (ecp192)  |
    |  dh-group26  |  Use Diffie-Hellman group 26 (ecp224)  |
    |  dh-group27  |  Use Diffie-Hellman group 27 (ecp224bp)  |
    |  dh-group28  |  Use Diffie-Hellman group 28 (ecp256bp)  |
    |  dh-group29  |  Use Diffie-Hellman group 29 (ecp384bp)  |
    |  dh-group30  |  Use Diffie-Hellman group 30 (ecp512bp)  |
    |  dh-group31  |  Use Diffie-Hellman group 31 (curve25519)  |
    |  dh-group32  |  Use Diffie-Hellman group 32 (curve448)  |
    |  disable  |  Disable PFS  |

`,

			// Default:          stringdefault.StaticString(`enable`),
			Computed: true,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecEspGroup) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecEspGroup) UnmarshalJSON(_ []byte) error {
	return nil
}
