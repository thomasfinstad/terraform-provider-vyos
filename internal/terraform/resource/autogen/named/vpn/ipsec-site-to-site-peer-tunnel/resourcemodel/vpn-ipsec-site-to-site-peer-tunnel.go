// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecSiteToSitePeerTunnel describes the resource data model.
type VpnIPsecSiteToSitePeerTunnel struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	ParentIDVpnIPsecSiteToSitePeer any `tfsdk:"peer" vyos:"peer,parent-id"`

	// LeafNodes
	LeafVpnIPsecSiteToSitePeerTunnelDisable  types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVpnIPsecSiteToSitePeerTunnelEspGroup types.String `tfsdk:"esp_group" vyos:"esp-group,omitempty"`
	LeafVpnIPsecSiteToSitePeerTunnelProtocol types.String `tfsdk:"protocol" vyos:"protocol,omitempty"`
	LeafVpnIPsecSiteToSitePeerTunnelPriority types.String `tfsdk:"priority" vyos:"priority,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVpnIPsecSiteToSitePeerTunnelLocal  *VpnIPsecSiteToSitePeerTunnelLocal  `tfsdk:"local" vyos:"local,omitempty"`
	NodeVpnIPsecSiteToSitePeerTunnelRemote *VpnIPsecSiteToSitePeerTunnelRemote `tfsdk:"remote" vyos:"remote,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecSiteToSitePeerTunnel) GetVyosPath() []string {
	return []string{
		"vpn",
		"ipsec",
		"site-to-site",
		"peer",
		"tunnel",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeerTunnel) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Peer tunnel

    |  Format  |  Description  |
    |----------|---------------|
    |  u32  |  Peer tunnel  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"esp_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Protocol name  |

`,
		},

		"priority": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Priority for IPsec policy (lowest value more preferable)

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-100  |  Priority for IPsec policy (lowest value more preferable)  |

`,
		},

		// Nodes

		"local": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerTunnelLocal{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Local parameters for interesting traffic

`,
		},

		"remote": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerTunnelRemote{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match remote addresses

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecSiteToSitePeerTunnel) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnIPsecSiteToSitePeerTunnelDisable.IsNull() && !o.LeafVpnIPsecSiteToSitePeerTunnelDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVpnIPsecSiteToSitePeerTunnelDisable.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.IsNull() && !o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.IsUnknown() {
		jsonData["esp-group"] = o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.IsNull() && !o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.IsUnknown() {
		jsonData["protocol"] = o.LeafVpnIPsecSiteToSitePeerTunnelProtocol.ValueString()
	}

	if !o.LeafVpnIPsecSiteToSitePeerTunnelPriority.IsNull() && !o.LeafVpnIPsecSiteToSitePeerTunnelPriority.IsUnknown() {
		jsonData["priority"] = o.LeafVpnIPsecSiteToSitePeerTunnelPriority.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVpnIPsecSiteToSitePeerTunnelLocal).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnIPsecSiteToSitePeerTunnelLocal)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["local"] = subData
	}

	if !reflect.ValueOf(o.NodeVpnIPsecSiteToSitePeerTunnelRemote).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnIPsecSiteToSitePeerTunnelRemote)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["remote"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecSiteToSitePeerTunnel) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["esp-group"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelEspGroup = basetypes.NewStringNull()
	}

	if value, ok := jsonData["protocol"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelProtocol = basetypes.NewStringNull()
	}

	if value, ok := jsonData["priority"]; ok {
		o.LeafVpnIPsecSiteToSitePeerTunnelPriority = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecSiteToSitePeerTunnelPriority = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["local"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnIPsecSiteToSitePeerTunnelLocal = &VpnIPsecSiteToSitePeerTunnelLocal{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnIPsecSiteToSitePeerTunnelLocal)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["remote"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnIPsecSiteToSitePeerTunnelRemote = &VpnIPsecSiteToSitePeerTunnelRemote{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnIPsecSiteToSitePeerTunnelRemote)
		if err != nil {
			return err
		}
	}

	return nil
}
