// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecRemoteAccessRadiusServer describes the resource data model.
type VpnIPsecRemoteAccessRadiusServer struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafVpnIPsecRemoteAccessRadiusServerDisable           types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVpnIPsecRemoteAccessRadiusServerKey               types.String `tfsdk:"key" vyos:"key,omitempty"`
	LeafVpnIPsecRemoteAccessRadiusServerPort              types.String `tfsdk:"port" vyos:"port,omitempty"`
	LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting types.String `tfsdk:"disable_accounting" vyos:"disable-accounting,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecRemoteAccessRadiusServer) GetVyosPath() []string {
	return []string{
		"vpn",
		"ipsec",
		"remote-access",
		"radius",
		"server",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessRadiusServer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `RADIUS server configuration

    |  Format  |  Description  |
    |----------|---------------|
    |  ipv4  |  RADIUS server IPv4 address  |

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"key": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Shared secret key

`,
		},

		"port": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication port

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:1-65535  |  Numeric IP port  |

`,

			// Default:          stringdefault.StaticString(`1812`),
			Computed: true,
		},

		"disable_accounting": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable accounting

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecRemoteAccessRadiusServer) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnIPsecRemoteAccessRadiusServerDisable.IsNull() && !o.LeafVpnIPsecRemoteAccessRadiusServerDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVpnIPsecRemoteAccessRadiusServerDisable.ValueString()
	}

	if !o.LeafVpnIPsecRemoteAccessRadiusServerKey.IsNull() && !o.LeafVpnIPsecRemoteAccessRadiusServerKey.IsUnknown() {
		jsonData["key"] = o.LeafVpnIPsecRemoteAccessRadiusServerKey.ValueString()
	}

	if !o.LeafVpnIPsecRemoteAccessRadiusServerPort.IsNull() && !o.LeafVpnIPsecRemoteAccessRadiusServerPort.IsUnknown() {
		jsonData["port"] = o.LeafVpnIPsecRemoteAccessRadiusServerPort.ValueString()
	}

	if !o.LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting.IsNull() && !o.LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting.IsUnknown() {
		jsonData["disable-accounting"] = o.LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting.ValueString()
	}

	// Nodes

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecRemoteAccessRadiusServer) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVpnIPsecRemoteAccessRadiusServerDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessRadiusServerDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["key"]; ok {
		o.LeafVpnIPsecRemoteAccessRadiusServerKey = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessRadiusServerKey = basetypes.NewStringNull()
	}

	if value, ok := jsonData["port"]; ok {
		o.LeafVpnIPsecRemoteAccessRadiusServerPort = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessRadiusServerPort = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-accounting"]; ok {
		o.LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecRemoteAccessRadiusServerDisableAccounting = basetypes.NewStringNull()
	}

	// Nodes

	return nil
}
