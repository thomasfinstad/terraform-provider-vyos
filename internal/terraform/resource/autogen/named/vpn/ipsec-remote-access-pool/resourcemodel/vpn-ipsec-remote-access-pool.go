// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VpnIPsecRemoteAccessPool describes the resource data model.
type VpnIPsecRemoteAccessPool struct {
	SelfIdentifier types.String `tfsdk:"pool_id" vyos:",self-id"`

	// LeafNodes
	LeafVpnIPsecRemoteAccessPoolExclude    types.List   `tfsdk:"exclude" vyos:"exclude,omitempty"`
	LeafVpnIPsecRemoteAccessPoolPrefix     types.String `tfsdk:"prefix" vyos:"prefix,omitempty"`
	LeafVpnIPsecRemoteAccessPoolNameServer types.List   `tfsdk:"name_server" vyos:"name-server,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecRemoteAccessPool) GetVyosPath() []string {
	return []string{
		"vpn",

		"ipsec",

		"remote-access",

		"pool",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessPool) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"pool_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `IP address pool for remote access users

`,
		},

		// LeafNodes

		"exclude": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Local IPv4 or IPv6 pool prefix exclusions

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  Local IPv4 pool prefix exclusion  |
    |  ipv6net  &emsp; |  Local IPv6 pool prefix exclusion  |

`,
		},

		"prefix": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local IPv4 or IPv6 pool prefix

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4net  &emsp; |  Local IPv4 pool prefix  |
    |  ipv6net  &emsp; |  Local IPv6 pool prefix  |

`,
		},

		"name_server": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Domain Name Servers (DNS) addresses

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Domain Name Server (DNS) IPv4 address  |
    |  ipv6  &emsp; |  Domain Name Server (DNS) IPv6 address  |

`,
		},

		// Nodes

	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecRemoteAccessPool) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecRemoteAccessPool) UnmarshalJSON(_ []byte) error {
	return nil
}
