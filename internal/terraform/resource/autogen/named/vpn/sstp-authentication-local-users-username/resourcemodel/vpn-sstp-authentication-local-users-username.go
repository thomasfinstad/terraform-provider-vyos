// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnSstpAuthenticationLocalUsersUsername describes the resource data model.
type VpnSstpAuthenticationLocalUsersUsername struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafVpnSstpAuthenticationLocalUsersUsernameDisable  types.String `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVpnSstpAuthenticationLocalUsersUsernamePassword types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP types.String `tfsdk:"static_ip" vyos:"static-ip,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVpnSstpAuthenticationLocalUsersUsernameRateLimit *VpnSstpAuthenticationLocalUsersUsernameRateLimit `tfsdk:"rate_limit" vyos:"rate-limit,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnSstpAuthenticationLocalUsersUsername) GetVyosPath() []string {
	return []string{
		"vpn",
		"sstp",
		"authentication",
		"local-users",
		"username",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnSstpAuthenticationLocalUsersUsername) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `User name for authentication

`,
		},

		// LeafNodes

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Password for authentication

`,
		},

		"static_ip": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Static client IP address

`,

			// Default:          stringdefault.StaticString(`&`),
			Computed: true,
		},

		// Nodes

		"rate_limit": schema.SingleNestedAttribute{
			Attributes: VpnSstpAuthenticationLocalUsersUsernameRateLimit{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Upload/Download speed limits

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnSstpAuthenticationLocalUsersUsername) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnSstpAuthenticationLocalUsersUsernameDisable.IsNull() && !o.LeafVpnSstpAuthenticationLocalUsersUsernameDisable.IsUnknown() {
		jsonData["disable"] = o.LeafVpnSstpAuthenticationLocalUsersUsernameDisable.ValueString()
	}

	if !o.LeafVpnSstpAuthenticationLocalUsersUsernamePassword.IsNull() && !o.LeafVpnSstpAuthenticationLocalUsersUsernamePassword.IsUnknown() {
		jsonData["password"] = o.LeafVpnSstpAuthenticationLocalUsersUsernamePassword.ValueString()
	}

	if !o.LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP.IsNull() && !o.LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP.IsUnknown() {
		jsonData["static-ip"] = o.LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVpnSstpAuthenticationLocalUsersUsernameRateLimit).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnSstpAuthenticationLocalUsersUsernameRateLimit)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["rate-limit"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnSstpAuthenticationLocalUsersUsername) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["disable"]; ok {
		o.LeafVpnSstpAuthenticationLocalUsersUsernameDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnSstpAuthenticationLocalUsersUsernameDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["password"]; ok {
		o.LeafVpnSstpAuthenticationLocalUsersUsernamePassword = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnSstpAuthenticationLocalUsersUsernamePassword = basetypes.NewStringNull()
	}

	if value, ok := jsonData["static-ip"]; ok {
		o.LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnSstpAuthenticationLocalUsersUsernameStaticIP = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["rate-limit"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnSstpAuthenticationLocalUsersUsernameRateLimit = &VpnSstpAuthenticationLocalUsersUsernameRateLimit{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnSstpAuthenticationLocalUsersUsernameRateLimit)
		if err != nil {
			return err
		}
	}

	return nil
}
