// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// VpnIPsecIkeGroup describes the resource data model.
type VpnIPsecIkeGroup struct {
	ID types.String `tfsdk:"identifier" vyos:",self-id"`

	// LeafNodes
	LeafVpnIPsecIkeGroupCloseAction   types.String `tfsdk:"close_action" vyos:"close-action,omitempty"`
	LeafVpnIPsecIkeGroupIkevtwoReauth types.String `tfsdk:"ikev2_reauth" vyos:"ikev2-reauth,omitempty"`
	LeafVpnIPsecIkeGroupKeyExchange   types.String `tfsdk:"key_exchange" vyos:"key-exchange,omitempty"`
	LeafVpnIPsecIkeGroupLifetime      types.String `tfsdk:"lifetime" vyos:"lifetime,omitempty"`
	LeafVpnIPsecIkeGroupDisableMobike types.String `tfsdk:"disable_mobike" vyos:"disable-mobike,omitempty"`
	LeafVpnIPsecIkeGroupMode          types.String `tfsdk:"mode" vyos:"mode,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVpnIPsecIkeGroupProposal bool `tfsdk:"proposal" vyos:"proposal,child"`

	// Nodes
	NodeVpnIPsecIkeGroupDeadPeerDetection *VpnIPsecIkeGroupDeadPeerDetection `tfsdk:"dead_peer_detection" vyos:"dead-peer-detection,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecIkeGroup) GetVyosPath() []string {
	return []string{
		"vpn",
		"ipsec",
		"ike-group",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecIkeGroup) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
		},

		// LeafNodes

		"close_action": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Action to take if a child SA is unexpectedly closed

    |  Format  |  Description  |
    |----------|---------------|
    |  none  |  Do nothing  |
    |  hold  |  Attempt to re-negotiate when matching traffic is seen  |
    |  restart  |  Attempt to re-negotiate the connection immediately  |

`,

			// Default:          stringdefault.StaticString(`none`),
			Computed: true,
		},

		"ikev2_reauth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Re-authentication of the remote peer during an IKE re-key (IKEv2 only)

`,
		},

		"key_exchange": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IKE version

    |  Format  |  Description  |
    |----------|---------------|
    |  ikev1  |  Use IKEv1 for key exchange  |
    |  ikev2  |  Use IKEv2 for key exchange  |

`,
		},

		"lifetime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IKE lifetime

    |  Format  |  Description  |
    |----------|---------------|
    |  u32:30-86400  |  IKE lifetime in seconds  |

`,

			// Default:          stringdefault.StaticString(`28800`),
			Computed: true,
		},

		"disable_mobike": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable MOBIKE Support (IKEv2 only)

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IKEv1 phase 1 mode

    |  Format  |  Description  |
    |----------|---------------|
    |  main  |  Use the main mode (recommended)  |
    |  aggressive  |  Use the aggressive mode (insecure, not recommended)  |

`,

			// Default:          stringdefault.StaticString(`main`),
			Computed: true,
		},

		// Nodes

		"dead_peer_detection": schema.SingleNestedAttribute{
			Attributes: VpnIPsecIkeGroupDeadPeerDetection{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Dead Peer Detection (DPD)

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecIkeGroup) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafVpnIPsecIkeGroupCloseAction.IsNull() && !o.LeafVpnIPsecIkeGroupCloseAction.IsUnknown() {
		jsonData["close-action"] = o.LeafVpnIPsecIkeGroupCloseAction.ValueString()
	}

	if !o.LeafVpnIPsecIkeGroupIkevtwoReauth.IsNull() && !o.LeafVpnIPsecIkeGroupIkevtwoReauth.IsUnknown() {
		jsonData["ikev2-reauth"] = o.LeafVpnIPsecIkeGroupIkevtwoReauth.ValueString()
	}

	if !o.LeafVpnIPsecIkeGroupKeyExchange.IsNull() && !o.LeafVpnIPsecIkeGroupKeyExchange.IsUnknown() {
		jsonData["key-exchange"] = o.LeafVpnIPsecIkeGroupKeyExchange.ValueString()
	}

	if !o.LeafVpnIPsecIkeGroupLifetime.IsNull() && !o.LeafVpnIPsecIkeGroupLifetime.IsUnknown() {
		jsonData["lifetime"] = o.LeafVpnIPsecIkeGroupLifetime.ValueString()
	}

	if !o.LeafVpnIPsecIkeGroupDisableMobike.IsNull() && !o.LeafVpnIPsecIkeGroupDisableMobike.IsUnknown() {
		jsonData["disable-mobike"] = o.LeafVpnIPsecIkeGroupDisableMobike.ValueString()
	}

	if !o.LeafVpnIPsecIkeGroupMode.IsNull() && !o.LeafVpnIPsecIkeGroupMode.IsUnknown() {
		jsonData["mode"] = o.LeafVpnIPsecIkeGroupMode.ValueString()
	}

	// Nodes

	if !reflect.ValueOf(o.NodeVpnIPsecIkeGroupDeadPeerDetection).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeVpnIPsecIkeGroupDeadPeerDetection)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dead-peer-detection"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecIkeGroup) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["close-action"]; ok {
		o.LeafVpnIPsecIkeGroupCloseAction = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupCloseAction = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ikev2-reauth"]; ok {
		o.LeafVpnIPsecIkeGroupIkevtwoReauth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupIkevtwoReauth = basetypes.NewStringNull()
	}

	if value, ok := jsonData["key-exchange"]; ok {
		o.LeafVpnIPsecIkeGroupKeyExchange = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupKeyExchange = basetypes.NewStringNull()
	}

	if value, ok := jsonData["lifetime"]; ok {
		o.LeafVpnIPsecIkeGroupLifetime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupLifetime = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-mobike"]; ok {
		o.LeafVpnIPsecIkeGroupDisableMobike = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupDisableMobike = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafVpnIPsecIkeGroupMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafVpnIPsecIkeGroupMode = basetypes.NewStringNull()
	}

	// Nodes
	if value, ok := jsonData["dead-peer-detection"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeVpnIPsecIkeGroupDeadPeerDetection = &VpnIPsecIkeGroupDeadPeerDetection{}

		err = json.Unmarshal(subJSONStr, o.NodeVpnIPsecIkeGroupDeadPeerDetection)
		if err != nil {
			return err
		}
	}

	return nil
}
