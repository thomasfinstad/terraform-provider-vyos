// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VpnIPsecSiteToSitePeerAuthentication describes the resource data model.
type VpnIPsecSiteToSitePeerAuthentication struct {
	// LeafNodes
	LeafVpnIPsecSiteToSitePeerAuthenticationLocalID            types.String `tfsdk:"local_id" vyos:"local-id,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationMode               types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationRemoteID           types.String `tfsdk:"remote_id" vyos:"remote-id,omitempty"`
	LeafVpnIPsecSiteToSitePeerAuthenticationUseXfivezeronineID types.Bool   `tfsdk:"use_x509_id" vyos:"use-x509-id,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes
	NodeVpnIPsecSiteToSitePeerAuthenticationRsa           *VpnIPsecSiteToSitePeerAuthenticationRsa           `tfsdk:"rsa" vyos:"rsa,omitempty"`
	NodeVpnIPsecSiteToSitePeerAuthenticationXfivezeronine *VpnIPsecSiteToSitePeerAuthenticationXfivezeronine `tfsdk:"x509" vyos:"x509,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeerAuthentication) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"local_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Local ID for peer authentication

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  Local ID used for peer authentication  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication mode

    |  Format  |  Description  |
    |----------|---------------|
    |  pre-shared-secret  |  Use pre-shared secret key  |
    |  rsa  |  Use RSA key  |
    |  x509  |  Use x.509 certificate  |

`,
		},

		"remote_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `ID for remote authentication

    |  Format  |  Description  |
    |----------|---------------|
    |  txt  |  ID used for peer authentication  |

`,

			// Default:          stringdefault.StaticString(`%any`),
			Computed: true,
		},

		"use_x509_id": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Use certificate common name as ID

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

		"rsa": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerAuthenticationRsa{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RSA keys

`,
		},

		"x509": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerAuthenticationXfivezeronine{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `X.509 certificate

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecSiteToSitePeerAuthentication) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecSiteToSitePeerAuthentication) UnmarshalJSON(_ []byte) error {
	return nil
}
