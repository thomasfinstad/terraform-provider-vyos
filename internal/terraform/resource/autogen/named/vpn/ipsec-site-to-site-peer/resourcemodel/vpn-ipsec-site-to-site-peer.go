// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// VpnIPsecSiteToSitePeer describes the resource data model.
type VpnIPsecSiteToSitePeer struct {
	SelfIdentifier types.String `tfsdk:"peer_id" vyos:",self-id"`

	// LeafNodes
	LeafVpnIPsecSiteToSitePeerDisable               types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVpnIPsecSiteToSitePeerConnectionType        types.String `tfsdk:"connection_type" vyos:"connection-type,omitempty"`
	LeafVpnIPsecSiteToSitePeerDefaultEspGroup       types.String `tfsdk:"default_esp_group" vyos:"default-esp-group,omitempty"`
	LeafVpnIPsecSiteToSitePeerDescrIPtion           types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafVpnIPsecSiteToSitePeerDhcpInterface         types.String `tfsdk:"dhcp_interface" vyos:"dhcp-interface,omitempty"`
	LeafVpnIPsecSiteToSitePeerForceUDPEncapsulation types.Bool   `tfsdk:"force_udp_encapsulation" vyos:"force-udp-encapsulation,omitempty"`
	LeafVpnIPsecSiteToSitePeerIkeGroup              types.String `tfsdk:"ike_group" vyos:"ike-group,omitempty"`
	LeafVpnIPsecSiteToSitePeerIkevtwoReauth         types.String `tfsdk:"ikev2_reauth" vyos:"ikev2-reauth,omitempty"`
	LeafVpnIPsecSiteToSitePeerLocalAddress          types.String `tfsdk:"local_address" vyos:"local-address,omitempty"`
	LeafVpnIPsecSiteToSitePeerRemoteAddress         types.List   `tfsdk:"remote_address" vyos:"remote-address,omitempty"`
	LeafVpnIPsecSiteToSitePeerVirtualAddress        types.List   `tfsdk:"virtual_address" vyos:"virtual-address,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagVpnIPsecSiteToSitePeerTunnel bool `tfsdk:"tunnel" vyos:"tunnel,child"`

	// Nodes
	NodeVpnIPsecSiteToSitePeerAuthentication *VpnIPsecSiteToSitePeerAuthentication `tfsdk:"authentication" vyos:"authentication,omitempty"`
	NodeVpnIPsecSiteToSitePeerVti            *VpnIPsecSiteToSitePeerVti            `tfsdk:"vti" vyos:"vti,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecSiteToSitePeer) GetVyosPath() []string {
	return []string{
		"vpn",

		"ipsec",

		"site-to-site",

		"peer",
		o.SelfIdentifier.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecSiteToSitePeer) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, an amalgamation of the `peer_id` and the parents `*_id` fields seperated by dunder `__` starting with top level ancestor.",
		},
		"peer_id": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Connection name of the peer

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Connection name of the peer  |

`,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},

		// LeafNodes

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"connection_type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection type

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  initiate  &emsp; |  Bring the connection up immediately  |
    |  respond  &emsp; |  Wait for the peer to initiate the connection  |
    |  none  &emsp; |  Load the connection only  |

`,
		},

		"default_esp_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Defult ESP group name

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  Description  |

`,
		},

		"dhcp_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DHCP interface supplying next-hop IP address

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  txt  &emsp; |  DHCP interface name  |

`,
		},

		"force_udp_encapsulation": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Force UDP encapsulation

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"ike_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
		},

		"ikev2_reauth": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Re-authentication of the remote peer during an IKE re-key (IKEv2 only)

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  yes  &emsp; |  Enable remote host re-autentication during an IKE re-key. Currently broken due to a strong swan bug  |
    |  no  &emsp; |  Disable remote host re-authenticaton during an IKE re-key.  |
    |  inherit  &emsp; |  Inherit the reauth configuration form your IKE-group  |

`,
		},

		"local_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 or IPv6 address of a local interface to use for VPN

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address of a local interface for VPN  |
    |  ipv6  &emsp; |  IPv6 address of a local interface for VPN  |
    |  any  &emsp; |  Allow any IPv4 address present on the system to be used for VPN  |

`,
		},

		"remote_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IPv4 or IPv6 address of the remote peer

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  IPv4 address of the remote peer  |
    |  ipv6  &emsp; |  IPv6 address of the remote peer  |
    |  hostname  &emsp; |  Fully qualified domain name of the remote peer  |
    |  any  &emsp; |  Allow any IP address of the remote peer  |

`,
		},

		"virtual_address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Initiator request virtual-address from peer

    |  Format &emsp; | Description  |
    |----------|---------------|
    |  ipv4  &emsp; |  Request IPv4 address from peer  |
    |  ipv6  &emsp; |  Request IPv6 address from peer  |

`,
		},

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Peer authentication

`,
		},

		"vti": schema.SingleNestedAttribute{
			Attributes: VpnIPsecSiteToSitePeerVti{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Virtual tunnel interface

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *VpnIPsecSiteToSitePeer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *VpnIPsecSiteToSitePeer) UnmarshalJSON(_ []byte) error {
	return nil
}
