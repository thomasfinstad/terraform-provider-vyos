// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// ContainerNameVolume describes the resource data model.
type ContainerNameVolume struct {
	// LeafNodes
	LeafContainerNameVolumeSource      types.String `tfsdk:"source"`
	LeafContainerNameVolumeDestination types.String `tfsdk:"destination"`
	LeafContainerNameVolumeMode        types.String `tfsdk:"mode"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *ContainerNameVolume) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"container", "name", "volume"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafContainerNameVolumeSource.IsNull() || o.LeafContainerNameVolumeSource.IsUnknown()) {
		vyosData["source"] = o.LeafContainerNameVolumeSource.ValueString()
	}
	if !(o.LeafContainerNameVolumeDestination.IsNull() || o.LeafContainerNameVolumeDestination.IsUnknown()) {
		vyosData["destination"] = o.LeafContainerNameVolumeDestination.ValueString()
	}
	if !(o.LeafContainerNameVolumeMode.IsNull() || o.LeafContainerNameVolumeMode.IsUnknown()) {
		vyosData["mode"] = o.LeafContainerNameVolumeMode.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *ContainerNameVolume) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"container", "name", "volume"}})

	// Leafs
	if value, ok := vyosData["source"]; ok {
		o.LeafContainerNameVolumeSource = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameVolumeSource = basetypes.NewStringNull()
	}
	if value, ok := vyosData["destination"]; ok {
		o.LeafContainerNameVolumeDestination = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameVolumeDestination = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafContainerNameVolumeMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafContainerNameVolumeMode = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"container", "name", "volume"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o ContainerNameVolume) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"source":      types.StringType,
		"destination": types.StringType,
		"mode":        types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ContainerNameVolume) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"source": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Source host directory

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Source host directory  |

`,
		},

		"destination": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Destination container directory

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination container directory  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Volume access mode ro/rw

|  Format  |  Description  |
|----------|---------------|
|  ro  |  Volume mounted into the container as read-only  |
|  rw  |  Volume mounted into the container as read-write  |

`,

			// Default:          stringdefault.StaticString(`rw`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
