// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/customtypes"
)

// ContainerName describes the resource data model.
type ContainerName struct {
	// LeafNodes
	ContainerNameAllowHostNetworks customtypes.CustomStringValue `tfsdk:"allow_host_networks" json:"allow-host-networks,omitempty"`
	ContainerNameCapAdd            customtypes.CustomStringValue `tfsdk:"cap_add" json:"cap-add,omitempty"`
	ContainerNameDescrIPtion       customtypes.CustomStringValue `tfsdk:"description" json:"description,omitempty"`
	ContainerNameDisable           customtypes.CustomStringValue `tfsdk:"disable" json:"disable,omitempty"`
	ContainerNameEntrypoint        customtypes.CustomStringValue `tfsdk:"entrypoint" json:"entrypoint,omitempty"`
	ContainerNameHostName          customtypes.CustomStringValue `tfsdk:"host_name" json:"host-name,omitempty"`
	ContainerNameImage             customtypes.CustomStringValue `tfsdk:"image" json:"image,omitempty"`
	ContainerNameCommand           customtypes.CustomStringValue `tfsdk:"command" json:"command,omitempty"`
	ContainerNameArguments         customtypes.CustomStringValue `tfsdk:"arguments" json:"arguments,omitempty"`
	ContainerNameMemory            customtypes.CustomStringValue `tfsdk:"memory" json:"memory,omitempty"`
	ContainerNameSharedMemory      customtypes.CustomStringValue `tfsdk:"shared_memory" json:"shared-memory,omitempty"`
	ContainerNameRestart           customtypes.CustomStringValue `tfsdk:"restart" json:"restart,omitempty"`

	// TagNodes
	ContainerNameDevice      types.Map `tfsdk:"device" json:"device,omitempty"`
	ContainerNameEnvironment types.Map `tfsdk:"environment" json:"environment,omitempty"`
	ContainerNameNetwork     types.Map `tfsdk:"network" json:"network,omitempty"`
	ContainerNamePort        types.Map `tfsdk:"port" json:"port,omitempty"`
	ContainerNameVolume      types.Map `tfsdk:"volume" json:"volume,omitempty"`

	// Nodes
}

// ResourceAttributes generates the attributes for the resource at this level
func (o ContainerName) ResourceAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"allow_host_networks": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Allow host networks in container

`,
		},

		"cap_add": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Container capabilities/permissions

|  Format  |  Description  |
|----------|---------------|
|  net-admin  |  Network operations (interface, firewall, routing tables)  |
|  net-bind-service  |  Bind a socket to privileged ports (port numbers less than 1024)  |
|  net-raw  |  Permission to create raw network sockets  |
|  setpcap  |  Capability sets (from bounded or inherited set)  |
|  sys-admin  |  Administation operations (quotactl, mount, sethostname, setdomainame)  |
|  sys-time  |  Permission to set system clock  |
`,
		},

		"description": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |
`,
		},

		"disable": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Disable instance

`,
		},

		"entrypoint": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Override the default ENTRYPOINT from the image

`,
		},

		"host_name": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Container host name

`,
		},

		"image": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Image name in the hub-registry

`,
		},

		"command": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Override the default CMD from the image

`,
		},

		"arguments": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `The command's arguments for this container

`,
		},

		"memory": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Memory (RAM) available to this container

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Unlimited  |
|  u32:1-16384  |  Container memory in megabytes (MB)  |
`,

			// Default:          stringdefault.StaticString(`512`),
			Computed: true,
		},

		"shared_memory": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Shared memory available to this container

|  Format  |  Description  |
|----------|---------------|
|  u32:0  |  Unlimited  |
|  u32:1-8192  |  Container memory in megabytes (MB)  |
`,

			// Default:          stringdefault.StaticString(`64`),
			Computed: true,
		},

		"restart": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Restart options for container

|  Format  |  Description  |
|----------|---------------|
|  no  |  Do not restart containers on exit  |
|  on-failure  |  Restart containers when they exit with a non-zero exit code, retrying indefinitely  |
|  always  |  Restart containers when they exit, regardless of status, retrying indefinitely  |
`,

			// Default:          stringdefault.StaticString(`on-failure`),
			Computed: true,
		},

		// TagNodes

		"device": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ContainerNameDevice{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Add a host device to the container

`,
		},

		"environment": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ContainerNameEnvironment{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Add custom environment variables

`,
		},

		"network": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ContainerNameNetwork{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Attach user defined network to container

`,
		},

		"port": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ContainerNamePort{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Publish port to the container

`,
		},

		"volume": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: ContainerNameVolume{}.ResourceAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Mount a volume into the container

`,
		},

		// Nodes

	}
}
