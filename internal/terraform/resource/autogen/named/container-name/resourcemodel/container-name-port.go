// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/terraform/customtypes"
)

// ContainerNamePort describes the resource data model.
type ContainerNamePort struct {
	// LeafNodes
	ContainerNamePortSource      customtypes.CustomStringValue `tfsdk:"source" json:"source,omitempty"`
	ContainerNamePortDestination customtypes.CustomStringValue `tfsdk:"destination" json:"destination,omitempty"`
	ContainerNamePortProtocol    customtypes.CustomStringValue `tfsdk:"protocol" json:"protocol,omitempty"`

	// TagNodes

	// Nodes
}

// ResourceAttributes generates the attributes for the resource at this level
func (o ContainerNamePort) ResourceAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"source": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Source host port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Source host port  |
|  start-end  |  Source host port range (e.g. 10025-10030)  |
`,
		},

		"destination": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Destination container port

|  Format  |  Description  |
|----------|---------------|
|  u32:1-65535  |  Destination container port  |
|  start-end  |  Destination container port range (e.g. 10025-10030)  |
`,
		},

		"protocol": schema.StringAttribute{
			CustomType: customtypes.CustomStringType{},
			Optional:   true,
			MarkdownDescription: `Transport protocol used for port mapping

|  Format  |  Description  |
|----------|---------------|
|  tcp  |  Use Transmission Control Protocol for given port  |
|  udp  |  Use User Datagram Protocol for given port  |
`,

			// Default:          stringdefault.StaticString(`tcp`),
			Computed: true,
		},

		// TagNodes

		// Nodes

	}
}
