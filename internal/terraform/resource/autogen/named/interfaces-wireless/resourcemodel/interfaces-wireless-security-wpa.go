// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWirelessSecURItyWpa describes the resource data model.
type InterfacesWirelessSecURItyWpa struct {
	// LeafNodes
	LeafInterfacesWirelessSecURItyWpaCIPher      types.String `tfsdk:"cipher" json:"cipher,omitempty"`
	LeafInterfacesWirelessSecURItyWpaGroupCIPher types.String `tfsdk:"group_cipher" json:"group-cipher,omitempty"`
	LeafInterfacesWirelessSecURItyWpaMode        types.String `tfsdk:"mode" json:"mode,omitempty"`
	LeafInterfacesWirelessSecURItyWpaPassphrase  types.String `tfsdk:"passphrase" json:"passphrase,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesWirelessSecURItyWpaRadius *InterfacesWirelessSecURItyWpaRadius `tfsdk:"radius" json:"radius,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessSecURItyWpa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher suite for WPA unicast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"group_cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher suite for WPA multicast and broadcast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA mode

|  Format  |  Description  |
|----------|---------------|
|  wpa  |  WPA (IEEE 802.11i/D3.0)  |
|  wpa2  |  WPA2 (full IEEE 802.11i/RSN)  |
|  wpa+wpa2  |  Allow both WPA and WPA2  |

`,

			// Default:          stringdefault.StaticString(`wpa+wpa2`),
			Computed: true,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA personal shared pass phrase. If you are using special characters in the WPA passphrase then single quotes are required.

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase of at least 8 but not more than 63 printable characters  |

`,
		},

		// TagNodes

		// Nodes

		"radius": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURItyWpaRadius{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RADIUS based user authentication

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessSecURItyWpa) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessSecURItyWpaCIPher.IsNull() && !o.LeafInterfacesWirelessSecURItyWpaCIPher.IsUnknown() {
		jsonData["cipher"] = o.LeafInterfacesWirelessSecURItyWpaCIPher.ValueString()
	}

	if !o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.IsNull() && !o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.IsUnknown() {
		jsonData["group-cipher"] = o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.ValueString()
	}

	if !o.LeafInterfacesWirelessSecURItyWpaMode.IsNull() && !o.LeafInterfacesWirelessSecURItyWpaMode.IsUnknown() {
		jsonData["mode"] = o.LeafInterfacesWirelessSecURItyWpaMode.ValueString()
	}

	if !o.LeafInterfacesWirelessSecURItyWpaPassphrase.IsNull() && !o.LeafInterfacesWirelessSecURItyWpaPassphrase.IsUnknown() {
		jsonData["passphrase"] = o.LeafInterfacesWirelessSecURItyWpaPassphrase.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessSecURItyWpaRadius).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessSecURItyWpaRadius)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["radius"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessSecURItyWpa) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["cipher"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaCIPher = basetypes.NewStringNull()
	}

	if value, ok := jsonData["group-cipher"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaGroupCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaGroupCIPher = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["passphrase"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaPassphrase = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaPassphrase = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["radius"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessSecURItyWpaRadius = &InterfacesWirelessSecURItyWpaRadius{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessSecURItyWpaRadius)
		if err != nil {
			return err
		}
	}

	return nil
}
