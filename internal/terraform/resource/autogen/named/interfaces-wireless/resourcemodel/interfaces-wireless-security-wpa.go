// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWirelessSecURItyWpa describes the resource data model.
type InterfacesWirelessSecURItyWpa struct {
	// LeafNodes
	LeafInterfacesWirelessSecURItyWpaCIPher      types.String `tfsdk:"cipher"`
	LeafInterfacesWirelessSecURItyWpaGroupCIPher types.String `tfsdk:"group_cipher"`
	LeafInterfacesWirelessSecURItyWpaMode        types.String `tfsdk:"mode"`
	LeafInterfacesWirelessSecURItyWpaPassphrase  types.String `tfsdk:"passphrase"`

	// TagNodes

	// Nodes
	NodeInterfacesWirelessSecURItyWpaRadius types.Object `tfsdk:"radius"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWirelessSecURItyWpa) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless", "security", "wpa"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessSecURItyWpaCIPher.IsNull() || o.LeafInterfacesWirelessSecURItyWpaCIPher.IsUnknown()) {
		vyosData["cipher"] = o.LeafInterfacesWirelessSecURItyWpaCIPher.ValueString()
	}
	if !(o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.IsNull() || o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.IsUnknown()) {
		vyosData["group-cipher"] = o.LeafInterfacesWirelessSecURItyWpaGroupCIPher.ValueString()
	}
	if !(o.LeafInterfacesWirelessSecURItyWpaMode.IsNull() || o.LeafInterfacesWirelessSecURItyWpaMode.IsUnknown()) {
		vyosData["mode"] = o.LeafInterfacesWirelessSecURItyWpaMode.ValueString()
	}
	if !(o.LeafInterfacesWirelessSecURItyWpaPassphrase.IsNull() || o.LeafInterfacesWirelessSecURItyWpaPassphrase.IsUnknown()) {
		vyosData["passphrase"] = o.LeafInterfacesWirelessSecURItyWpaPassphrase.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesWirelessSecURItyWpaRadius.IsNull() || o.NodeInterfacesWirelessSecURItyWpaRadius.IsUnknown()) {
		var subModel InterfacesWirelessSecURItyWpaRadius
		diags.Append(o.NodeInterfacesWirelessSecURItyWpaRadius.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["radius"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWirelessSecURItyWpa) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless", "security", "wpa"}})

	// Leafs
	if value, ok := vyosData["cipher"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaCIPher = basetypes.NewStringNull()
	}
	if value, ok := vyosData["group-cipher"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaGroupCIPher = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaGroupCIPher = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaMode = basetypes.NewStringNull()
	}
	if value, ok := vyosData["passphrase"]; ok {
		o.LeafInterfacesWirelessSecURItyWpaPassphrase = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSecURItyWpaPassphrase = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["radius"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessSecURItyWpaRadius{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessSecURItyWpaRadius = data

	} else {
		o.NodeInterfacesWirelessSecURItyWpaRadius = basetypes.NewObjectNull(InterfacesWirelessSecURItyWpaRadius{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless", "security", "wpa"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWirelessSecURItyWpa) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"cipher":       types.StringType,
		"group_cipher": types.StringType,
		"mode":         types.StringType,
		"passphrase":   types.StringType,

		// Tags

		// Nodes
		"radius": types.ObjectType{AttrTypes: InterfacesWirelessSecURItyWpaRadius{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessSecURItyWpa) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher suite for WPA unicast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"group_cipher": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Cipher suite for WPA multicast and broadcast packets

|  Format  |  Description  |
|----------|---------------|
|  GCMP-256  |  AES in Galois/counter mode with 256-bit key  |
|  GCMP  |  AES in Galois/counter mode with 128-bit key  |
|  CCMP-256  |  AES in Counter mode with CBC-MAC with 256-bit key  |
|  CCMP  |  AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] (supported on all WPA2 APs)  |
|  TKIP  |  Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]  |

`,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA mode

|  Format  |  Description  |
|----------|---------------|
|  wpa  |  WPA (IEEE 802.11i/D3.0)  |
|  wpa2  |  WPA2 (full IEEE 802.11i/RSN)  |
|  wpa+wpa2  |  Allow both WPA and WPA2  |

`,

			// Default:          stringdefault.StaticString(`wpa+wpa2`),
			Computed: true,
		},

		"passphrase": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `WPA personal shared pass phrase. If you are using special characters in the WPA passphrase then single quotes are required.

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Passphrase of at least 8 but not more than 63 printable characters  |

`,
		},

		// TagNodes

		// Nodes

		"radius": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURItyWpaRadius{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `RADIUS based user authentication

`,
		},
	}
}
