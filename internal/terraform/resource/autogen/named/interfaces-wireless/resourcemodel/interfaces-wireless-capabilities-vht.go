// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWirelessCapabilitiesVht describes the resource data model.
type InterfacesWirelessCapabilitiesVht struct {
	// LeafNodes
	LeafInterfacesWirelessCapabilitiesVhtAntennaCount        types.String `tfsdk:"antenna_count"`
	LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed types.String `tfsdk:"antenna_pattern_fixed"`
	LeafInterfacesWirelessCapabilitiesVhtBeamform            types.String `tfsdk:"beamform"`
	LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth     types.String `tfsdk:"channel_set_width"`
	LeafInterfacesWirelessCapabilitiesVhtLdpc                types.String `tfsdk:"ldpc"`
	LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation      types.String `tfsdk:"link_adaptation"`
	LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp          types.String `tfsdk:"max_mpdu_exp"`
	LeafInterfacesWirelessCapabilitiesVhtMaxMpdu             types.String `tfsdk:"max_mpdu"`
	LeafInterfacesWirelessCapabilitiesVhtShortGi             types.String `tfsdk:"short_gi"`
	LeafInterfacesWirelessCapabilitiesVhtTxPowersave         types.String `tfsdk:"tx_powersave"`
	LeafInterfacesWirelessCapabilitiesVhtVhtCf               types.String `tfsdk:"vht_cf"`

	// TagNodes

	// Nodes
	NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq types.Object `tfsdk:"center_channel_freq"`
	NodeInterfacesWirelessCapabilitiesVhtStbc              types.Object `tfsdk:"stbc"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWirelessCapabilitiesVht) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessCapabilitiesVhtAntennaCount.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtAntennaCount.IsUnknown()) {
		vyosData["antenna-count"] = o.LeafInterfacesWirelessCapabilitiesVhtAntennaCount.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed.IsUnknown()) {
		vyosData["antenna-pattern-fixed"] = o.LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtBeamform.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtBeamform.IsUnknown()) {
		vyosData["beamform"] = o.LeafInterfacesWirelessCapabilitiesVhtBeamform.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth.IsUnknown()) {
		vyosData["channel-set-width"] = o.LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtLdpc.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtLdpc.IsUnknown()) {
		vyosData["ldpc"] = o.LeafInterfacesWirelessCapabilitiesVhtLdpc.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation.IsUnknown()) {
		vyosData["link-adaptation"] = o.LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp.IsUnknown()) {
		vyosData["max-mpdu-exp"] = o.LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtMaxMpdu.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtMaxMpdu.IsUnknown()) {
		vyosData["max-mpdu"] = o.LeafInterfacesWirelessCapabilitiesVhtMaxMpdu.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtShortGi.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtShortGi.IsUnknown()) {
		vyosData["short-gi"] = o.LeafInterfacesWirelessCapabilitiesVhtShortGi.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtTxPowersave.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtTxPowersave.IsUnknown()) {
		vyosData["tx-powersave"] = o.LeafInterfacesWirelessCapabilitiesVhtTxPowersave.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtVhtCf.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtVhtCf.IsUnknown()) {
		vyosData["vht-cf"] = o.LeafInterfacesWirelessCapabilitiesVhtVhtCf.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq.IsNull() || o.NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq.IsUnknown()) {
		var subModel InterfacesWirelessCapabilitiesVhtCenterChannelFreq
		diags.Append(o.NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["center-channel-freq"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessCapabilitiesVhtStbc.IsNull() || o.NodeInterfacesWirelessCapabilitiesVhtStbc.IsUnknown()) {
		var subModel InterfacesWirelessCapabilitiesVhtStbc
		diags.Append(o.NodeInterfacesWirelessCapabilitiesVhtStbc.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["stbc"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWirelessCapabilitiesVht) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht"}})

	// Leafs
	if value, ok := vyosData["antenna-count"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtAntennaCount = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtAntennaCount = basetypes.NewStringNull()
	}
	if value, ok := vyosData["antenna-pattern-fixed"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtAntennaPatternFixed = basetypes.NewStringNull()
	}
	if value, ok := vyosData["beamform"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtBeamform = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtBeamform = basetypes.NewStringNull()
	}
	if value, ok := vyosData["channel-set-width"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtChannelSetWIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ldpc"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtLdpc = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtLdpc = basetypes.NewStringNull()
	}
	if value, ok := vyosData["link-adaptation"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtLinkAdaptation = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-mpdu-exp"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtMaxMpduExp = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-mpdu"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtMaxMpdu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtMaxMpdu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["short-gi"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtShortGi = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtShortGi = basetypes.NewStringNull()
	}
	if value, ok := vyosData["tx-powersave"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtTxPowersave = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtTxPowersave = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vht-cf"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtVhtCf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtVhtCf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["center-channel-freq"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessCapabilitiesVhtCenterChannelFreq{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq = data

	} else {
		o.NodeInterfacesWirelessCapabilitiesVhtCenterChannelFreq = basetypes.NewObjectNull(InterfacesWirelessCapabilitiesVhtCenterChannelFreq{}.AttributeTypes())
	}
	if value, ok := vyosData["stbc"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessCapabilitiesVhtStbc{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessCapabilitiesVhtStbc = data

	} else {
		o.NodeInterfacesWirelessCapabilitiesVhtStbc = basetypes.NewObjectNull(InterfacesWirelessCapabilitiesVhtStbc{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWirelessCapabilitiesVht) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"antenna_count":         types.StringType,
		"antenna_pattern_fixed": types.StringType,
		"beamform":              types.StringType,
		"channel_set_width":     types.StringType,
		"ldpc":                  types.StringType,
		"link_adaptation":       types.StringType,
		"max_mpdu_exp":          types.StringType,
		"max_mpdu":              types.StringType,
		"short_gi":              types.StringType,
		"tx_powersave":          types.StringType,
		"vht_cf":                types.StringType,

		// Tags

		// Nodes
		"center_channel_freq": types.ObjectType{AttrTypes: InterfacesWirelessCapabilitiesVhtCenterChannelFreq{}.AttributeTypes()},
		"stbc":                types.ObjectType{AttrTypes: InterfacesWirelessCapabilitiesVhtStbc{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessCapabilitiesVht) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"antenna_count": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Number of antennas on this card

|  Format  |  Description  |
|----------|---------------|
|  u32:1-8  |  Number of antennas for this card  |

`,
		},

		"antenna_pattern_fixed": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set if antenna pattern does not change during the lifetime of an association

`,
		},

		"beamform": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Beamforming capabilities

|  Format  |  Description  |
|----------|---------------|
|  single-user-beamformer  |  Support for operation as single user beamformer  |
|  single-user-beamformee  |  Support for operation as single user beamformee  |
|  multi-user-beamformer  |  Support for operation as multi user beamformer  |
|  multi-user-beamformee  |  Support for operation as multi user beamformee  |

`,
		},

		"channel_set_width": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VHT operating Channel width

|  Format  |  Description  |
|----------|---------------|
|  0  |  20 or 40 MHz channel width  |
|  1  |  80 MHz channel width  |
|  2  |  160 MHz channel width  |
|  3  |  80+80 MHz channel width  |

`,
		},

		"ldpc": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable LDPC (Low Density Parity Check) coding capability

`,
		},

		"link_adaptation": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VHT link adaptation capabilities

|  Format  |  Description  |
|----------|---------------|
|  unsolicited  |  Station provides only unsolicited VHT MFB  |
|  both  |  Station can provide VHT MFB in response to VHT MRQ and unsolicited VHT MFB  |

`,
		},

		"max_mpdu_exp": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set the maximum length of A-MPDU pre-EOF padding that the station can receive

|  Format  |  Description  |
|----------|---------------|
|  u32:0-7  |  Maximum length of A-MPDU pre-EOF padding = 2 pow(13 + x) -1 octets  |

`,
		},

		"max_mpdu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Increase Maximum MPDU length to 7991 or 11454 octets (otherwise: 3895 octets)

|  Format  |  Description  |
|----------|---------------|
|  7991  |  ncrease Maximum MPDU length to 7991 octets  |
|  11454  |  ncrease Maximum MPDU length to 11454 octets  |

`,
		},

		"short_gi": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Short GI capabilities

|  Format  |  Description  |
|----------|---------------|
|  80  |  Short GI for 80 MHz  |
|  160  |  Short GI for 160 MHz  |

`,
		},

		"tx_powersave": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable VHT TXOP Power Save Mode

`,
		},

		"vht_cf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Station supports receiving VHT variant HT Control field

`,
		},

		// TagNodes

		// Nodes

		"center_channel_freq": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesVhtCenterChannelFreq{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VHT operating channel center frequency

`,
		},

		"stbc": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesVhtStbc{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Support for sending and receiving PPDU using STBC (Space Time Block Coding)

`,
		},
	}
}
