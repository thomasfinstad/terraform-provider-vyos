// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWirelessCapabilitiesVhtStbc describes the resource data model.
type InterfacesWirelessCapabilitiesVhtStbc struct {
	// LeafNodes
	LeafInterfacesWirelessCapabilitiesVhtStbcRx types.String `tfsdk:"rx"`
	LeafInterfacesWirelessCapabilitiesVhtStbcTx types.String `tfsdk:"tx"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWirelessCapabilitiesVhtStbc) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht", "stbc"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessCapabilitiesVhtStbcRx.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtStbcRx.IsUnknown()) {
		vyosData["rx"] = o.LeafInterfacesWirelessCapabilitiesVhtStbcRx.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesVhtStbcTx.IsNull() || o.LeafInterfacesWirelessCapabilitiesVhtStbcTx.IsUnknown()) {
		vyosData["tx"] = o.LeafInterfacesWirelessCapabilitiesVhtStbcTx.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWirelessCapabilitiesVhtStbc) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht", "stbc"}})

	// Leafs
	if value, ok := vyosData["rx"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtStbcRx = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtStbcRx = basetypes.NewStringNull()
	}
	if value, ok := vyosData["tx"]; ok {
		o.LeafInterfacesWirelessCapabilitiesVhtStbcTx = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesVhtStbcTx = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "vht", "stbc"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWirelessCapabilitiesVhtStbc) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"rx": types.StringType,
		"tx": types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessCapabilitiesVhtStbc) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"rx": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable receiving PPDU using STBC (Space Time Block Coding)

|  Format  |  Description  |
|----------|---------------|
|  [1-4]+  |  Number of spacial streams that can use RX STBC  |

`,
		},

		"tx": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable sending PPDU using STBC (Space Time Block Coding)

`,
		},

		// TagNodes

		// Nodes

	}
}
