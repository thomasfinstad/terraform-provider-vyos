// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWirelessVifS describes the resource data model.
type InterfacesWirelessVifS struct {
	// LeafNodes
	LeafInterfacesWirelessVifSDescrIPtion       types.String `tfsdk:"description"`
	LeafInterfacesWirelessVifSAddress           types.String `tfsdk:"address"`
	LeafInterfacesWirelessVifSDisableLinkDetect types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesWirelessVifSDisable           types.String `tfsdk:"disable"`
	LeafInterfacesWirelessVifSProtocol          types.String `tfsdk:"protocol"`
	LeafInterfacesWirelessVifSMac               types.String `tfsdk:"mac"`
	LeafInterfacesWirelessVifSMtu               types.String `tfsdk:"mtu"`
	LeafInterfacesWirelessVifSRedirect          types.String `tfsdk:"redirect"`
	LeafInterfacesWirelessVifSVrf               types.String `tfsdk:"vrf"`

	// TagNodes
	TagInterfacesWirelessVifSVifC types.Map `tfsdk:"vif_c"`

	// Nodes
	NodeInterfacesWirelessVifSDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesWirelessVifSDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesWirelessVifSIP              types.Object `tfsdk:"ip"`
	NodeInterfacesWirelessVifSIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesWirelessVifSMirror          types.Object `tfsdk:"mirror"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWirelessVifS) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless", "vif-s"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessVifSDescrIPtion.IsNull() || o.LeafInterfacesWirelessVifSDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesWirelessVifSDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSAddress.IsNull() || o.LeafInterfacesWirelessVifSAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesWirelessVifSAddress.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSDisableLinkDetect.IsNull() || o.LeafInterfacesWirelessVifSDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesWirelessVifSDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSDisable.IsNull() || o.LeafInterfacesWirelessVifSDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesWirelessVifSDisable.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSProtocol.IsNull() || o.LeafInterfacesWirelessVifSProtocol.IsUnknown()) {
		vyosData["protocol"] = o.LeafInterfacesWirelessVifSProtocol.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSMac.IsNull() || o.LeafInterfacesWirelessVifSMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesWirelessVifSMac.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSMtu.IsNull() || o.LeafInterfacesWirelessVifSMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesWirelessVifSMtu.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSRedirect.IsNull() || o.LeafInterfacesWirelessVifSRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesWirelessVifSRedirect.ValueString()
	}
	if !(o.LeafInterfacesWirelessVifSVrf.IsNull() || o.LeafInterfacesWirelessVifSVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesWirelessVifSVrf.ValueString()
	}

	// Tags
	if !(o.TagInterfacesWirelessVifSVifC.IsNull() || o.TagInterfacesWirelessVifSVifC.IsUnknown()) {
		subModel := make(map[string]InterfacesWirelessVifSVifC)
		diags.Append(o.TagInterfacesWirelessVifSVifC.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif-c"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesWirelessVifSDhcpOptions.IsNull() || o.NodeInterfacesWirelessVifSDhcpOptions.IsUnknown()) {
		var subModel InterfacesWirelessVifSDhcpOptions
		diags.Append(o.NodeInterfacesWirelessVifSDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessVifSDhcpvsixOptions.IsNull() || o.NodeInterfacesWirelessVifSDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesWirelessVifSDhcpvsixOptions
		diags.Append(o.NodeInterfacesWirelessVifSDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessVifSIP.IsNull() || o.NodeInterfacesWirelessVifSIP.IsUnknown()) {
		var subModel InterfacesWirelessVifSIP
		diags.Append(o.NodeInterfacesWirelessVifSIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessVifSIPvsix.IsNull() || o.NodeInterfacesWirelessVifSIPvsix.IsUnknown()) {
		var subModel InterfacesWirelessVifSIPvsix
		diags.Append(o.NodeInterfacesWirelessVifSIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessVifSMirror.IsNull() || o.NodeInterfacesWirelessVifSMirror.IsUnknown()) {
		var subModel InterfacesWirelessVifSMirror
		diags.Append(o.NodeInterfacesWirelessVifSMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWirelessVifS) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless", "vif-s"}})

	// Leafs
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesWirelessVifSDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesWirelessVifSAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesWirelessVifSDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesWirelessVifSDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["protocol"]; ok {
		o.LeafInterfacesWirelessVifSProtocol = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSProtocol = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesWirelessVifSMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesWirelessVifSMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesWirelessVifSRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesWirelessVifSVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVifSVrf = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vif-c"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesWirelessVifSVifC{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesWirelessVifSVifC = data
	} else {
		o.TagInterfacesWirelessVifSVifC = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessVifSDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessVifSDhcpOptions = data

	} else {
		o.NodeInterfacesWirelessVifSDhcpOptions = basetypes.NewObjectNull(InterfacesWirelessVifSDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessVifSDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessVifSDhcpvsixOptions = data

	} else {
		o.NodeInterfacesWirelessVifSDhcpvsixOptions = basetypes.NewObjectNull(InterfacesWirelessVifSDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessVifSIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessVifSIP = data

	} else {
		o.NodeInterfacesWirelessVifSIP = basetypes.NewObjectNull(InterfacesWirelessVifSIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessVifSIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessVifSIPvsix = data

	} else {
		o.NodeInterfacesWirelessVifSIPvsix = basetypes.NewObjectNull(InterfacesWirelessVifSIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessVifSMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessVifSMirror = data

	} else {
		o.NodeInterfacesWirelessVifSMirror = basetypes.NewObjectNull(InterfacesWirelessVifSMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless", "vif-s"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWirelessVifS) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"description":         types.StringType,
		"address":             types.StringType,
		"disable_link_detect": types.StringType,
		"disable":             types.StringType,
		"protocol":            types.StringType,
		"mac":                 types.StringType,
		"mtu":                 types.StringType,
		"redirect":            types.StringType,
		"vrf":                 types.StringType,

		// Tags
		"vif_c": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesWirelessVifSVifC{}.AttributeTypes()}},

		// Nodes
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesWirelessVifSDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesWirelessVifSDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesWirelessVifSIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesWirelessVifSIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesWirelessVifSMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessVifS) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"protocol": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Protocol used for service VLAN (default: 802.1ad)

|  Format  |  Description  |
|----------|---------------|
|  802.1ad  |  Provider Bridging (IEEE 802.1ad, Q-inQ), ethertype 0x88a8  |
|  802.1q  |  VLAN-tagged frame (IEEE 802.1q), ethertype 0x8100  |

`,

			// Default:          stringdefault.StaticString(`802.1ad`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-16000  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		"vif_c": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWirelessVifSVifC{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-C Virtual Local Area Network (VLAN) ID

`,
		},

		// Nodes

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessVifSMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
