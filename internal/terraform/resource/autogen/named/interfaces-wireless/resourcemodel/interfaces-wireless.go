// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWireless describes the resource data model.
type InterfacesWireless struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesWirelessAddress                types.String `tfsdk:"address"`
	LeafInterfacesWirelessChannel                types.String `tfsdk:"channel"`
	LeafInterfacesWirelessCountryCode            types.String `tfsdk:"country_code"`
	LeafInterfacesWirelessDescrIPtion            types.String `tfsdk:"description"`
	LeafInterfacesWirelessDisableBroadcastSsID   types.String `tfsdk:"disable_broadcast_ssid"`
	LeafInterfacesWirelessDisableLinkDetect      types.String `tfsdk:"disable_link_detect"`
	LeafInterfacesWirelessDisable                types.String `tfsdk:"disable"`
	LeafInterfacesWirelessVrf                    types.String `tfsdk:"vrf"`
	LeafInterfacesWirelessExpungeFailingStations types.String `tfsdk:"expunge_failing_stations"`
	LeafInterfacesWirelessHwID                   types.String `tfsdk:"hw_id"`
	LeafInterfacesWirelessIsolateStations        types.String `tfsdk:"isolate_stations"`
	LeafInterfacesWirelessMac                    types.String `tfsdk:"mac"`
	LeafInterfacesWirelessMaxStations            types.String `tfsdk:"max_stations"`
	LeafInterfacesWirelessMgmtFrameProtection    types.String `tfsdk:"mgmt_frame_protection"`
	LeafInterfacesWirelessMode                   types.String `tfsdk:"mode"`
	LeafInterfacesWirelessPhysicalDevice         types.String `tfsdk:"physical_device"`
	LeafInterfacesWirelessReduceTransmitPower    types.String `tfsdk:"reduce_transmit_power"`
	LeafInterfacesWirelessSsID                   types.String `tfsdk:"ssid"`
	LeafInterfacesWirelessType                   types.String `tfsdk:"type"`
	LeafInterfacesWirelessRedirect               types.String `tfsdk:"redirect"`

	// TagNodes
	TagInterfacesWirelessVif  types.Map `tfsdk:"vif"`
	TagInterfacesWirelessVifS types.Map `tfsdk:"vif_s"`

	// Nodes
	NodeInterfacesWirelessCapabilities    types.Object `tfsdk:"capabilities"`
	NodeInterfacesWirelessDhcpOptions     types.Object `tfsdk:"dhcp_options"`
	NodeInterfacesWirelessDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesWirelessIP              types.Object `tfsdk:"ip"`
	NodeInterfacesWirelessIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesWirelessMirror          types.Object `tfsdk:"mirror"`
	NodeInterfacesWirelessSecURIty        types.Object `tfsdk:"security"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWireless) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireless",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWireless) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessAddress.IsNull() || o.LeafInterfacesWirelessAddress.IsUnknown()) {
		vyosData["address"] = o.LeafInterfacesWirelessAddress.ValueString()
	}
	if !(o.LeafInterfacesWirelessChannel.IsNull() || o.LeafInterfacesWirelessChannel.IsUnknown()) {
		vyosData["channel"] = o.LeafInterfacesWirelessChannel.ValueString()
	}
	if !(o.LeafInterfacesWirelessCountryCode.IsNull() || o.LeafInterfacesWirelessCountryCode.IsUnknown()) {
		vyosData["country-code"] = o.LeafInterfacesWirelessCountryCode.ValueString()
	}
	if !(o.LeafInterfacesWirelessDescrIPtion.IsNull() || o.LeafInterfacesWirelessDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesWirelessDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesWirelessDisableBroadcastSsID.IsNull() || o.LeafInterfacesWirelessDisableBroadcastSsID.IsUnknown()) {
		vyosData["disable-broadcast-ssid"] = o.LeafInterfacesWirelessDisableBroadcastSsID.ValueString()
	}
	if !(o.LeafInterfacesWirelessDisableLinkDetect.IsNull() || o.LeafInterfacesWirelessDisableLinkDetect.IsUnknown()) {
		vyosData["disable-link-detect"] = o.LeafInterfacesWirelessDisableLinkDetect.ValueString()
	}
	if !(o.LeafInterfacesWirelessDisable.IsNull() || o.LeafInterfacesWirelessDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesWirelessDisable.ValueString()
	}
	if !(o.LeafInterfacesWirelessVrf.IsNull() || o.LeafInterfacesWirelessVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesWirelessVrf.ValueString()
	}
	if !(o.LeafInterfacesWirelessExpungeFailingStations.IsNull() || o.LeafInterfacesWirelessExpungeFailingStations.IsUnknown()) {
		vyosData["expunge-failing-stations"] = o.LeafInterfacesWirelessExpungeFailingStations.ValueString()
	}
	if !(o.LeafInterfacesWirelessHwID.IsNull() || o.LeafInterfacesWirelessHwID.IsUnknown()) {
		vyosData["hw-id"] = o.LeafInterfacesWirelessHwID.ValueString()
	}
	if !(o.LeafInterfacesWirelessIsolateStations.IsNull() || o.LeafInterfacesWirelessIsolateStations.IsUnknown()) {
		vyosData["isolate-stations"] = o.LeafInterfacesWirelessIsolateStations.ValueString()
	}
	if !(o.LeafInterfacesWirelessMac.IsNull() || o.LeafInterfacesWirelessMac.IsUnknown()) {
		vyosData["mac"] = o.LeafInterfacesWirelessMac.ValueString()
	}
	if !(o.LeafInterfacesWirelessMaxStations.IsNull() || o.LeafInterfacesWirelessMaxStations.IsUnknown()) {
		vyosData["max-stations"] = o.LeafInterfacesWirelessMaxStations.ValueString()
	}
	if !(o.LeafInterfacesWirelessMgmtFrameProtection.IsNull() || o.LeafInterfacesWirelessMgmtFrameProtection.IsUnknown()) {
		vyosData["mgmt-frame-protection"] = o.LeafInterfacesWirelessMgmtFrameProtection.ValueString()
	}
	if !(o.LeafInterfacesWirelessMode.IsNull() || o.LeafInterfacesWirelessMode.IsUnknown()) {
		vyosData["mode"] = o.LeafInterfacesWirelessMode.ValueString()
	}
	if !(o.LeafInterfacesWirelessPhysicalDevice.IsNull() || o.LeafInterfacesWirelessPhysicalDevice.IsUnknown()) {
		vyosData["physical-device"] = o.LeafInterfacesWirelessPhysicalDevice.ValueString()
	}
	if !(o.LeafInterfacesWirelessReduceTransmitPower.IsNull() || o.LeafInterfacesWirelessReduceTransmitPower.IsUnknown()) {
		vyosData["reduce-transmit-power"] = o.LeafInterfacesWirelessReduceTransmitPower.ValueString()
	}
	if !(o.LeafInterfacesWirelessSsID.IsNull() || o.LeafInterfacesWirelessSsID.IsUnknown()) {
		vyosData["ssid"] = o.LeafInterfacesWirelessSsID.ValueString()
	}
	if !(o.LeafInterfacesWirelessType.IsNull() || o.LeafInterfacesWirelessType.IsUnknown()) {
		vyosData["type"] = o.LeafInterfacesWirelessType.ValueString()
	}
	if !(o.LeafInterfacesWirelessRedirect.IsNull() || o.LeafInterfacesWirelessRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesWirelessRedirect.ValueString()
	}

	// Tags
	if !(o.TagInterfacesWirelessVif.IsNull() || o.TagInterfacesWirelessVif.IsUnknown()) {
		subModel := make(map[string]InterfacesWirelessVif)
		diags.Append(o.TagInterfacesWirelessVif.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif"] = subData
	}
	if !(o.TagInterfacesWirelessVifS.IsNull() || o.TagInterfacesWirelessVifS.IsUnknown()) {
		subModel := make(map[string]InterfacesWirelessVifS)
		diags.Append(o.TagInterfacesWirelessVifS.ElementsAs(ctx, &subModel, false)...)

		subData := make(map[string]interface{})
		for k, v := range subModel {
			subData[k] = v.TerraformToVyos(ctx, diags)
		}
		vyosData["vif-s"] = subData
	}

	// Nodes
	if !(o.NodeInterfacesWirelessCapabilities.IsNull() || o.NodeInterfacesWirelessCapabilities.IsUnknown()) {
		var subModel InterfacesWirelessCapabilities
		diags.Append(o.NodeInterfacesWirelessCapabilities.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["capabilities"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessDhcpOptions.IsNull() || o.NodeInterfacesWirelessDhcpOptions.IsUnknown()) {
		var subModel InterfacesWirelessDhcpOptions
		diags.Append(o.NodeInterfacesWirelessDhcpOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcp-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessDhcpvsixOptions.IsNull() || o.NodeInterfacesWirelessDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesWirelessDhcpvsixOptions
		diags.Append(o.NodeInterfacesWirelessDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessIP.IsNull() || o.NodeInterfacesWirelessIP.IsUnknown()) {
		var subModel InterfacesWirelessIP
		diags.Append(o.NodeInterfacesWirelessIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessIPvsix.IsNull() || o.NodeInterfacesWirelessIPvsix.IsUnknown()) {
		var subModel InterfacesWirelessIPvsix
		diags.Append(o.NodeInterfacesWirelessIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessMirror.IsNull() || o.NodeInterfacesWirelessMirror.IsUnknown()) {
		var subModel InterfacesWirelessMirror
		diags.Append(o.NodeInterfacesWirelessMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesWirelessSecURIty.IsNull() || o.NodeInterfacesWirelessSecURIty.IsUnknown()) {
		var subModel InterfacesWirelessSecURIty
		diags.Append(o.NodeInterfacesWirelessSecURIty.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["security"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWireless) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless"}})

	// Leafs
	if value, ok := vyosData["address"]; ok {
		o.LeafInterfacesWirelessAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["channel"]; ok {
		o.LeafInterfacesWirelessChannel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessChannel = basetypes.NewStringNull()
	}
	if value, ok := vyosData["country-code"]; ok {
		o.LeafInterfacesWirelessCountryCode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCountryCode = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesWirelessDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-broadcast-ssid"]; ok {
		o.LeafInterfacesWirelessDisableBroadcastSsID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisableBroadcastSsID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable-link-detect"]; ok {
		o.LeafInterfacesWirelessDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisableLinkDetect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesWirelessDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesWirelessVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVrf = basetypes.NewStringNull()
	}
	if value, ok := vyosData["expunge-failing-stations"]; ok {
		o.LeafInterfacesWirelessExpungeFailingStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessExpungeFailingStations = basetypes.NewStringNull()
	}
	if value, ok := vyosData["hw-id"]; ok {
		o.LeafInterfacesWirelessHwID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessHwID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["isolate-stations"]; ok {
		o.LeafInterfacesWirelessIsolateStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessIsolateStations = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mac"]; ok {
		o.LeafInterfacesWirelessMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMac = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-stations"]; ok {
		o.LeafInterfacesWirelessMaxStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMaxStations = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mgmt-frame-protection"]; ok {
		o.LeafInterfacesWirelessMgmtFrameProtection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMgmtFrameProtection = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mode"]; ok {
		o.LeafInterfacesWirelessMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMode = basetypes.NewStringNull()
	}
	if value, ok := vyosData["physical-device"]; ok {
		o.LeafInterfacesWirelessPhysicalDevice = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessPhysicalDevice = basetypes.NewStringNull()
	}
	if value, ok := vyosData["reduce-transmit-power"]; ok {
		o.LeafInterfacesWirelessReduceTransmitPower = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessReduceTransmitPower = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ssid"]; ok {
		o.LeafInterfacesWirelessSsID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSsID = basetypes.NewStringNull()
	}
	if value, ok := vyosData["type"]; ok {
		o.LeafInterfacesWirelessType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessType = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesWirelessRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessRedirect = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := vyosData["vif"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesWirelessVif{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesWirelessVif = data
	} else {
		o.TagInterfacesWirelessVif = basetypes.NewMapNull(types.ObjectType{})
	}
	if value, ok := vyosData["vif-s"]; ok {
		data, d := types.MapValueFrom(ctx, types.ObjectType{AttrTypes: InterfacesWirelessVifS{}.AttributeTypes()}, value.(map[string]interface{}))
		diags.Append(d...)
		o.TagInterfacesWirelessVifS = data
	} else {
		o.TagInterfacesWirelessVifS = basetypes.NewMapNull(types.ObjectType{})
	}

	// Nodes
	if value, ok := vyosData["capabilities"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessCapabilities{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessCapabilities = data

	} else {
		o.NodeInterfacesWirelessCapabilities = basetypes.NewObjectNull(InterfacesWirelessCapabilities{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcp-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessDhcpOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessDhcpOptions = data

	} else {
		o.NodeInterfacesWirelessDhcpOptions = basetypes.NewObjectNull(InterfacesWirelessDhcpOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessDhcpvsixOptions = data

	} else {
		o.NodeInterfacesWirelessDhcpvsixOptions = basetypes.NewObjectNull(InterfacesWirelessDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessIP = data

	} else {
		o.NodeInterfacesWirelessIP = basetypes.NewObjectNull(InterfacesWirelessIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessIPvsix = data

	} else {
		o.NodeInterfacesWirelessIPvsix = basetypes.NewObjectNull(InterfacesWirelessIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessMirror = data

	} else {
		o.NodeInterfacesWirelessMirror = basetypes.NewObjectNull(InterfacesWirelessMirror{}.AttributeTypes())
	}
	if value, ok := vyosData["security"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessSecURIty{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessSecURIty = data

	} else {
		o.NodeInterfacesWirelessSecURIty = basetypes.NewObjectNull(InterfacesWirelessSecURIty{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWireless) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"address":                  types.StringType,
		"channel":                  types.StringType,
		"country_code":             types.StringType,
		"description":              types.StringType,
		"disable_broadcast_ssid":   types.StringType,
		"disable_link_detect":      types.StringType,
		"disable":                  types.StringType,
		"vrf":                      types.StringType,
		"expunge_failing_stations": types.StringType,
		"hw_id":                    types.StringType,
		"isolate_stations":         types.StringType,
		"mac":                      types.StringType,
		"max_stations":             types.StringType,
		"mgmt_frame_protection":    types.StringType,
		"mode":                     types.StringType,
		"physical_device":          types.StringType,
		"reduce_transmit_power":    types.StringType,
		"ssid":                     types.StringType,
		"type":                     types.StringType,
		"redirect":                 types.StringType,

		// Tags
		"vif":   types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesWirelessVif{}.AttributeTypes()}},
		"vif_s": types.MapType{ElemType: types.ObjectType{AttrTypes: InterfacesWirelessVifS{}.AttributeTypes()}},

		// Nodes
		"capabilities":   types.ObjectType{AttrTypes: InterfacesWirelessCapabilities{}.AttributeTypes()},
		"dhcp_options":   types.ObjectType{AttrTypes: InterfacesWirelessDhcpOptions{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesWirelessDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesWirelessIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesWirelessIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesWirelessMirror{}.AttributeTypes()},
		"security":       types.ObjectType{AttrTypes: InterfacesWirelessSecURIty{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireless) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Wireless (WiFi/WLAN) Network Interface

|  Format  |  Description  |
|----------|---------------|
|  wlanN  |  Wireless (WiFi/WLAN) interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"channel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio channel

|  Format  |  Description  |
|----------|---------------|
|  0  |  Automatic Channel Selection (ACS)  |
|  u32:1-14  |  2.4Ghz (802.11 b/g/n) Channel  |
|  u32:34-173  |  5Ghz (802.11 a/h/j/n/ac) Channel  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"country_code": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Indicate country in which device is operating

|  Format  |  Description  |
|----------|---------------|
|  txt  |  ISO/IEC 3166-1 Country Code  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_broadcast_ssid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable broadcast of SSID from access-point

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"expunge_failing_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disassociate stations based on excessive transmission failures

`,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Associate Ethernet Interface with given Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"isolate_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Isolate stations on the AP so they cannot see each other

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"max_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum number of wireless radio stations. Excess stations will be rejected upon authentication request.

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2007  |  Number of allowed stations  |

`,
		},

		"mgmt_frame_protection": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Management Frame Protection (MFP) according to IEEE 802.11w

|  Format  |  Description  |
|----------|---------------|
|  disabled  |  no MFP  |
|  optional  |  MFP optional  |
|  required  |  MFP enforced  |

`,

			// Default:          stringdefault.StaticString(`disabled`),
			Computed: true,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio mode

|  Format  |  Description  |
|----------|---------------|
|  a  |  802.11a - 54 Mbits/sec  |
|  b  |  802.11b - 11 Mbits/sec  |
|  g  |  802.11g - 54 Mbits/sec  |
|  n  |  802.11n - 600 Mbits/sec  |
|  ac  |  802.11ac - 1300 Mbits/sec  |

`,

			// Default:          stringdefault.StaticString(`g`),
			Computed: true,
		},

		"physical_device": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless physical device

`,

			// Default:          stringdefault.StaticString(`phy0`),
			Computed: true,
		},

		"reduce_transmit_power": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Transmission power reduction in dBm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  TX power reduction in dBm  |

`,
		},

		"ssid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless access-point service set identifier (SSID)

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless device type for this interface

|  Format  |  Description  |
|----------|---------------|
|  access-point  |  Access-point forwards packets between other nodes  |
|  station  |  Connects to another access point  |
|  monitor  |  Passively monitor all packets on the frequency/channel  |

`,

			// Default:          stringdefault.StaticString(`monitor`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		"vif": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWirelessVif{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		"vif_s": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWirelessVifS{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |

`,
		},

		// Nodes

		"capabilities": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilities{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `HT and VHT capabilities for your card

`,
		},

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"security": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Wireless security settings

`,
		},
	}
}
