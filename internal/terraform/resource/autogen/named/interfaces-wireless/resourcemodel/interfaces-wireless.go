// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWireless describes the resource data model.
type InterfacesWireless struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesWirelessAddress                types.String `tfsdk:"address" json:"address,omitempty"`
	LeafInterfacesWirelessChannel                types.String `tfsdk:"channel" json:"channel,omitempty"`
	LeafInterfacesWirelessCountryCode            types.String `tfsdk:"country_code" json:"country-code,omitempty"`
	LeafInterfacesWirelessDescrIPtion            types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesWirelessDisableBroadcastSsID   types.String `tfsdk:"disable_broadcast_ssid" json:"disable-broadcast-ssid,omitempty"`
	LeafInterfacesWirelessDisableLinkDetect      types.String `tfsdk:"disable_link_detect" json:"disable-link-detect,omitempty"`
	LeafInterfacesWirelessDisable                types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesWirelessVrf                    types.String `tfsdk:"vrf" json:"vrf,omitempty"`
	LeafInterfacesWirelessExpungeFailingStations types.String `tfsdk:"expunge_failing_stations" json:"expunge-failing-stations,omitempty"`
	LeafInterfacesWirelessHwID                   types.String `tfsdk:"hw_id" json:"hw-id,omitempty"`
	LeafInterfacesWirelessIsolateStations        types.String `tfsdk:"isolate_stations" json:"isolate-stations,omitempty"`
	LeafInterfacesWirelessMac                    types.String `tfsdk:"mac" json:"mac,omitempty"`
	LeafInterfacesWirelessMaxStations            types.String `tfsdk:"max_stations" json:"max-stations,omitempty"`
	LeafInterfacesWirelessMgmtFrameProtection    types.String `tfsdk:"mgmt_frame_protection" json:"mgmt-frame-protection,omitempty"`
	LeafInterfacesWirelessMode                   types.String `tfsdk:"mode" json:"mode,omitempty"`
	LeafInterfacesWirelessPhysicalDevice         types.String `tfsdk:"physical_device" json:"physical-device,omitempty"`
	LeafInterfacesWirelessReduceTransmitPower    types.String `tfsdk:"reduce_transmit_power" json:"reduce-transmit-power,omitempty"`
	LeafInterfacesWirelessSsID                   types.String `tfsdk:"ssid" json:"ssid,omitempty"`
	LeafInterfacesWirelessType                   types.String `tfsdk:"type" json:"type,omitempty"`
	LeafInterfacesWirelessRedirect               types.String `tfsdk:"redirect" json:"redirect,omitempty"`

	// TagNodes
	TagInterfacesWirelessVif  *map[string]InterfacesWirelessVif  `tfsdk:"vif" json:"vif,omitempty"`
	TagInterfacesWirelessVifS *map[string]InterfacesWirelessVifS `tfsdk:"vif_s" json:"vif-s,omitempty"`

	// Nodes
	NodeInterfacesWirelessCapabilities    *InterfacesWirelessCapabilities    `tfsdk:"capabilities" json:"capabilities,omitempty"`
	NodeInterfacesWirelessDhcpOptions     *InterfacesWirelessDhcpOptions     `tfsdk:"dhcp_options" json:"dhcp-options,omitempty"`
	NodeInterfacesWirelessDhcpvsixOptions *InterfacesWirelessDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesWirelessIP              *InterfacesWirelessIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesWirelessIPvsix          *InterfacesWirelessIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesWirelessMirror          *InterfacesWirelessMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
	NodeInterfacesWirelessSecURIty        *InterfacesWirelessSecURIty        `tfsdk:"security" json:"security,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesWireless) GetVyosPath() []string {
	return []string{
		"interfaces",
		"wireless",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWireless) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Wireless (WiFi/WLAN) Network Interface

|  Format  |  Description  |
|----------|---------------|
|  wlanN  |  Wireless (WiFi/WLAN) interface name  |

`,
		},

		// LeafNodes

		"address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IP address

|  Format  |  Description  |
|----------|---------------|
|  ipv4net  |  IPv4 address and prefix length  |
|  ipv6net  |  IPv6 address and prefix length  |
|  dhcp  |  Dynamic Host Configuration Protocol  |
|  dhcpv6  |  Dynamic Host Configuration Protocol for IPv6  |

`,
		},

		"channel": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio channel

|  Format  |  Description  |
|----------|---------------|
|  0  |  Automatic Channel Selection (ACS)  |
|  u32:1-14  |  2.4Ghz (802.11 b/g/n) Channel  |
|  u32:34-173  |  5Ghz (802.11 a/h/j/n/ac) Channel  |

`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"country_code": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Indicate country in which device is operating

|  Format  |  Description  |
|----------|---------------|
|  txt  |  ISO/IEC 3166-1 Country Code  |

`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable_broadcast_ssid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disable broadcast of SSID from access-point

`,
		},

		"disable_link_detect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		"expunge_failing_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Disassociate stations based on excessive transmission failures

`,
		},

		"hw_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Associate Ethernet Interface with given Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"isolate_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Isolate stations on the AP so they cannot see each other

`,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

|  Format  |  Description  |
|----------|---------------|
|  macaddr  |  Hardware (MAC) address  |

`,
		},

		"max_stations": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum number of wireless radio stations. Excess stations will be rejected upon authentication request.

|  Format  |  Description  |
|----------|---------------|
|  u32:1-2007  |  Number of allowed stations  |

`,
		},

		"mgmt_frame_protection": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Management Frame Protection (MFP) according to IEEE 802.11w

|  Format  |  Description  |
|----------|---------------|
|  disabled  |  no MFP  |
|  optional  |  MFP optional  |
|  required  |  MFP enforced  |

`,

			// Default:          stringdefault.StaticString(`disabled`),
			Computed: true,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless radio mode

|  Format  |  Description  |
|----------|---------------|
|  a  |  802.11a - 54 Mbits/sec  |
|  b  |  802.11b - 11 Mbits/sec  |
|  g  |  802.11g - 54 Mbits/sec  |
|  n  |  802.11n - 600 Mbits/sec  |
|  ac  |  802.11ac - 1300 Mbits/sec  |

`,

			// Default:          stringdefault.StaticString(`g`),
			Computed: true,
		},

		"physical_device": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless physical device

`,

			// Default:          stringdefault.StaticString(`phy0`),
			Computed: true,
		},

		"reduce_transmit_power": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Transmission power reduction in dBm

|  Format  |  Description  |
|----------|---------------|
|  u32:0-255  |  TX power reduction in dBm  |

`,
		},

		"ssid": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless access-point service set identifier (SSID)

`,
		},

		"type": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Wireless device type for this interface

|  Format  |  Description  |
|----------|---------------|
|  access-point  |  Access-point forwards packets between other nodes  |
|  station  |  Connects to another access point  |
|  monitor  |  Passively monitor all packets on the frequency/channel  |

`,

			// Default:          stringdefault.StaticString(`monitor`),
			Computed: true,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		// TagNodes

		"vif": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWirelessVif{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  Virtual Local Area Network (VLAN) ID  |

`,
		},

		"vif_s": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: InterfacesWirelessVifS{}.ResourceSchemaAttributes(),
			},
			Optional: true,
			MarkdownDescription: `QinQ TAG-S Virtual Local Area Network (VLAN) ID

|  Format  |  Description  |
|----------|---------------|
|  u32:0-4094  |  QinQ Virtual Local Area Network (VLAN) ID  |

`,
		},

		// Nodes

		"capabilities": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilities{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `HT and VHT capabilities for your card

`,
		},

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},

		"security": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessSecURIty{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Wireless security settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWireless) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessAddress.IsNull() && !o.LeafInterfacesWirelessAddress.IsUnknown() {
		jsonData["address"] = o.LeafInterfacesWirelessAddress.ValueString()
	}

	if !o.LeafInterfacesWirelessChannel.IsNull() && !o.LeafInterfacesWirelessChannel.IsUnknown() {
		jsonData["channel"] = o.LeafInterfacesWirelessChannel.ValueString()
	}

	if !o.LeafInterfacesWirelessCountryCode.IsNull() && !o.LeafInterfacesWirelessCountryCode.IsUnknown() {
		jsonData["country-code"] = o.LeafInterfacesWirelessCountryCode.ValueString()
	}

	if !o.LeafInterfacesWirelessDescrIPtion.IsNull() && !o.LeafInterfacesWirelessDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesWirelessDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesWirelessDisableBroadcastSsID.IsNull() && !o.LeafInterfacesWirelessDisableBroadcastSsID.IsUnknown() {
		jsonData["disable-broadcast-ssid"] = o.LeafInterfacesWirelessDisableBroadcastSsID.ValueString()
	}

	if !o.LeafInterfacesWirelessDisableLinkDetect.IsNull() && !o.LeafInterfacesWirelessDisableLinkDetect.IsUnknown() {
		jsonData["disable-link-detect"] = o.LeafInterfacesWirelessDisableLinkDetect.ValueString()
	}

	if !o.LeafInterfacesWirelessDisable.IsNull() && !o.LeafInterfacesWirelessDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesWirelessDisable.ValueString()
	}

	if !o.LeafInterfacesWirelessVrf.IsNull() && !o.LeafInterfacesWirelessVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesWirelessVrf.ValueString()
	}

	if !o.LeafInterfacesWirelessExpungeFailingStations.IsNull() && !o.LeafInterfacesWirelessExpungeFailingStations.IsUnknown() {
		jsonData["expunge-failing-stations"] = o.LeafInterfacesWirelessExpungeFailingStations.ValueString()
	}

	if !o.LeafInterfacesWirelessHwID.IsNull() && !o.LeafInterfacesWirelessHwID.IsUnknown() {
		jsonData["hw-id"] = o.LeafInterfacesWirelessHwID.ValueString()
	}

	if !o.LeafInterfacesWirelessIsolateStations.IsNull() && !o.LeafInterfacesWirelessIsolateStations.IsUnknown() {
		jsonData["isolate-stations"] = o.LeafInterfacesWirelessIsolateStations.ValueString()
	}

	if !o.LeafInterfacesWirelessMac.IsNull() && !o.LeafInterfacesWirelessMac.IsUnknown() {
		jsonData["mac"] = o.LeafInterfacesWirelessMac.ValueString()
	}

	if !o.LeafInterfacesWirelessMaxStations.IsNull() && !o.LeafInterfacesWirelessMaxStations.IsUnknown() {
		jsonData["max-stations"] = o.LeafInterfacesWirelessMaxStations.ValueString()
	}

	if !o.LeafInterfacesWirelessMgmtFrameProtection.IsNull() && !o.LeafInterfacesWirelessMgmtFrameProtection.IsUnknown() {
		jsonData["mgmt-frame-protection"] = o.LeafInterfacesWirelessMgmtFrameProtection.ValueString()
	}

	if !o.LeafInterfacesWirelessMode.IsNull() && !o.LeafInterfacesWirelessMode.IsUnknown() {
		jsonData["mode"] = o.LeafInterfacesWirelessMode.ValueString()
	}

	if !o.LeafInterfacesWirelessPhysicalDevice.IsNull() && !o.LeafInterfacesWirelessPhysicalDevice.IsUnknown() {
		jsonData["physical-device"] = o.LeafInterfacesWirelessPhysicalDevice.ValueString()
	}

	if !o.LeafInterfacesWirelessReduceTransmitPower.IsNull() && !o.LeafInterfacesWirelessReduceTransmitPower.IsUnknown() {
		jsonData["reduce-transmit-power"] = o.LeafInterfacesWirelessReduceTransmitPower.ValueString()
	}

	if !o.LeafInterfacesWirelessSsID.IsNull() && !o.LeafInterfacesWirelessSsID.IsUnknown() {
		jsonData["ssid"] = o.LeafInterfacesWirelessSsID.ValueString()
	}

	if !o.LeafInterfacesWirelessType.IsNull() && !o.LeafInterfacesWirelessType.IsUnknown() {
		jsonData["type"] = o.LeafInterfacesWirelessType.ValueString()
	}

	if !o.LeafInterfacesWirelessRedirect.IsNull() && !o.LeafInterfacesWirelessRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesWirelessRedirect.ValueString()
	}

	// Tags

	if !reflect.ValueOf(o.TagInterfacesWirelessVif).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesWirelessVif)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["vif"] = subData
	}

	if !reflect.ValueOf(o.TagInterfacesWirelessVifS).IsZero() {
		subJSONStr, err := json.Marshal(o.TagInterfacesWirelessVifS)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["vif-s"] = subData
	}

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessCapabilities).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessCapabilities)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["capabilities"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessDhcpOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessDhcpOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcp-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessSecURIty).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessSecURIty)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["security"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWireless) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["address"]; ok {
		o.LeafInterfacesWirelessAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["channel"]; ok {
		o.LeafInterfacesWirelessChannel = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessChannel = basetypes.NewStringNull()
	}

	if value, ok := jsonData["country-code"]; ok {
		o.LeafInterfacesWirelessCountryCode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCountryCode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesWirelessDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-broadcast-ssid"]; ok {
		o.LeafInterfacesWirelessDisableBroadcastSsID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisableBroadcastSsID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable-link-detect"]; ok {
		o.LeafInterfacesWirelessDisableLinkDetect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisableLinkDetect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesWirelessDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesWirelessVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessVrf = basetypes.NewStringNull()
	}

	if value, ok := jsonData["expunge-failing-stations"]; ok {
		o.LeafInterfacesWirelessExpungeFailingStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessExpungeFailingStations = basetypes.NewStringNull()
	}

	if value, ok := jsonData["hw-id"]; ok {
		o.LeafInterfacesWirelessHwID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessHwID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["isolate-stations"]; ok {
		o.LeafInterfacesWirelessIsolateStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessIsolateStations = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mac"]; ok {
		o.LeafInterfacesWirelessMac = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMac = basetypes.NewStringNull()
	}

	if value, ok := jsonData["max-stations"]; ok {
		o.LeafInterfacesWirelessMaxStations = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMaxStations = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mgmt-frame-protection"]; ok {
		o.LeafInterfacesWirelessMgmtFrameProtection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMgmtFrameProtection = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mode"]; ok {
		o.LeafInterfacesWirelessMode = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessMode = basetypes.NewStringNull()
	}

	if value, ok := jsonData["physical-device"]; ok {
		o.LeafInterfacesWirelessPhysicalDevice = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessPhysicalDevice = basetypes.NewStringNull()
	}

	if value, ok := jsonData["reduce-transmit-power"]; ok {
		o.LeafInterfacesWirelessReduceTransmitPower = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessReduceTransmitPower = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ssid"]; ok {
		o.LeafInterfacesWirelessSsID = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessSsID = basetypes.NewStringNull()
	}

	if value, ok := jsonData["type"]; ok {
		o.LeafInterfacesWirelessType = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessType = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesWirelessRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessRedirect = basetypes.NewStringNull()
	}

	// Tags
	if value, ok := jsonData["vif"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesWirelessVif = &map[string]InterfacesWirelessVif{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesWirelessVif)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["vif-s"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.TagInterfacesWirelessVifS = &map[string]InterfacesWirelessVifS{}

		err = json.Unmarshal(subJSONStr, o.TagInterfacesWirelessVifS)
		if err != nil {
			return err
		}
	}

	// Nodes
	if value, ok := jsonData["capabilities"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessCapabilities = &InterfacesWirelessCapabilities{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessCapabilities)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcp-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessDhcpOptions = &InterfacesWirelessDhcpOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessDhcpOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessDhcpvsixOptions = &InterfacesWirelessDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessIP = &InterfacesWirelessIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessIPvsix = &InterfacesWirelessIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessMirror = &InterfacesWirelessMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessMirror)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["security"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessSecURIty = &InterfacesWirelessSecURIty{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessSecURIty)
		if err != nil {
			return err
		}
	}

	return nil
}
