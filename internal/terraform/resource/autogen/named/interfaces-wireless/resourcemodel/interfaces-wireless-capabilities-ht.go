// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesWirelessCapabilitiesHt describes the resource data model.
type InterfacesWirelessCapabilitiesHt struct {
	// LeafNodes
	LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable types.String `tfsdk:"40mhz_incapable"`
	LeafInterfacesWirelessCapabilitiesHtAutoPowersave        types.String `tfsdk:"auto_powersave"`
	LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth      types.String `tfsdk:"channel_set_width"`
	LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck      types.String `tfsdk:"delayed_block_ack"`
	LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero      types.String `tfsdk:"dsss_cck_40"`
	LeafInterfacesWirelessCapabilitiesHtGreenfield           types.String `tfsdk:"greenfield"`
	LeafInterfacesWirelessCapabilitiesHtLdpc                 types.String `tfsdk:"ldpc"`
	LeafInterfacesWirelessCapabilitiesHtLsigProtection       types.String `tfsdk:"lsig_protection"`
	LeafInterfacesWirelessCapabilitiesHtMaxAmsdu             types.String `tfsdk:"max_amsdu"`
	LeafInterfacesWirelessCapabilitiesHtShortGi              types.String `tfsdk:"short_gi"`
	LeafInterfacesWirelessCapabilitiesHtSmps                 types.String `tfsdk:"smps"`

	// TagNodes

	// Nodes
	NodeInterfacesWirelessCapabilitiesHtStbc types.Object `tfsdk:"stbc"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesWirelessCapabilitiesHt) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "ht"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.IsUnknown()) {
		vyosData["40mhz-incapable"] = o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.IsUnknown()) {
		vyosData["auto-powersave"] = o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.IsUnknown()) {
		vyosData["channel-set-width"] = o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.IsUnknown()) {
		vyosData["delayed-block-ack"] = o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.IsUnknown()) {
		vyosData["dsss-cck-40"] = o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtGreenfield.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtGreenfield.IsUnknown()) {
		vyosData["greenfield"] = o.LeafInterfacesWirelessCapabilitiesHtGreenfield.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtLdpc.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtLdpc.IsUnknown()) {
		vyosData["ldpc"] = o.LeafInterfacesWirelessCapabilitiesHtLdpc.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.IsUnknown()) {
		vyosData["lsig-protection"] = o.LeafInterfacesWirelessCapabilitiesHtLsigProtection.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.IsUnknown()) {
		vyosData["max-amsdu"] = o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtShortGi.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtShortGi.IsUnknown()) {
		vyosData["short-gi"] = o.LeafInterfacesWirelessCapabilitiesHtShortGi.ValueString()
	}
	if !(o.LeafInterfacesWirelessCapabilitiesHtSmps.IsNull() || o.LeafInterfacesWirelessCapabilitiesHtSmps.IsUnknown()) {
		vyosData["smps"] = o.LeafInterfacesWirelessCapabilitiesHtSmps.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesWirelessCapabilitiesHtStbc.IsNull() || o.NodeInterfacesWirelessCapabilitiesHtStbc.IsUnknown()) {
		var subModel InterfacesWirelessCapabilitiesHtStbc
		diags.Append(o.NodeInterfacesWirelessCapabilitiesHtStbc.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["stbc"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesWirelessCapabilitiesHt) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "ht"}})

	// Leafs
	if value, ok := vyosData["40mhz-incapable"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtFourzeromhzIncapable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["auto-powersave"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtAutoPowersave = basetypes.NewStringNull()
	}
	if value, ok := vyosData["channel-set-width"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtChannelSetWIDth = basetypes.NewStringNull()
	}
	if value, ok := vyosData["delayed-block-ack"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtDelayedBlockAck = basetypes.NewStringNull()
	}
	if value, ok := vyosData["dsss-cck-40"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtDsssCckFourzero = basetypes.NewStringNull()
	}
	if value, ok := vyosData["greenfield"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtGreenfield = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtGreenfield = basetypes.NewStringNull()
	}
	if value, ok := vyosData["ldpc"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtLdpc = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtLdpc = basetypes.NewStringNull()
	}
	if value, ok := vyosData["lsig-protection"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtLsigProtection = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtLsigProtection = basetypes.NewStringNull()
	}
	if value, ok := vyosData["max-amsdu"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtMaxAmsdu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["short-gi"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtShortGi = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtShortGi = basetypes.NewStringNull()
	}
	if value, ok := vyosData["smps"]; ok {
		o.LeafInterfacesWirelessCapabilitiesHtSmps = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesHtSmps = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["stbc"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesWirelessCapabilitiesHtStbc{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesWirelessCapabilitiesHtStbc = data

	} else {
		o.NodeInterfacesWirelessCapabilitiesHtStbc = basetypes.NewObjectNull(InterfacesWirelessCapabilitiesHtStbc{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "wireless", "capabilities", "ht"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesWirelessCapabilitiesHt) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"40mhz_incapable":   types.StringType,
		"auto_powersave":    types.StringType,
		"channel_set_width": types.StringType,
		"delayed_block_ack": types.StringType,
		"dsss_cck_40":       types.StringType,
		"greenfield":        types.StringType,
		"ldpc":              types.StringType,
		"lsig_protection":   types.StringType,
		"max_amsdu":         types.StringType,
		"short_gi":          types.StringType,
		"smps":              types.StringType,

		// Tags

		// Nodes
		"stbc": types.ObjectType{AttrTypes: InterfacesWirelessCapabilitiesHtStbc{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessCapabilitiesHt) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"40mhz_incapable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `40MHz intolerance, use 20MHz only!

`,
		},

		"auto_powersave": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable WMM-PS unscheduled automatic power aave delivery [U-APSD]

`,
		},

		"channel_set_width": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Supported channel set width

|  Format  |  Description  |
|----------|---------------|
|  ht20  |  Supported channel set width both 20 MHz only  |
|  ht40+  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel above primary channel  |
|  ht40-  |  Supported channel set width both 20 MHz and 40 MHz with secondary channel below primary channel  |

`,
		},

		"delayed_block_ack": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable HT-delayed block ack

`,
		},

		"dsss_cck_40": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable DSSS_CCK-40

`,
		},

		"greenfield": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable HT-greenfield

`,
		},

		"ldpc": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable LDPC coding capability

`,
		},

		"lsig_protection": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Enable L-SIG TXOP protection capability

`,
		},

		"max_amsdu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Set maximum A-MSDU length

|  Format  |  Description  |
|----------|---------------|
|  3839  |  Set maximum A-MSDU length to 3839 octets  |
|  7935  |  Set maximum A-MSDU length to 7935 octets  |

`,
		},

		"short_gi": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Short GI capabilities

|  Format  |  Description  |
|----------|---------------|
|  20  |  Short GI for 20 MHz  |
|  40  |  Short GI for 40 MHz  |

`,
		},

		"smps": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Spatial Multiplexing Power Save (SMPS) settings

|  Format  |  Description  |
|----------|---------------|
|  static  |  STATIC Spatial Multiplexing (SM) Power Save  |
|  dynamic  |  DYNAMIC Spatial Multiplexing (SM) Power Save  |

`,
		},

		// TagNodes

		// Nodes

		"stbc": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesHtStbc{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Support for sending and receiving PPDU using STBC (Space Time Block Coding)

`,
		},
	}
}
