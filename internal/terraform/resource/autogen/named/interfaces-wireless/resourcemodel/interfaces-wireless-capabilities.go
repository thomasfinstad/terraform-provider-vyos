// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesWirelessCapabilities describes the resource data model.
type InterfacesWirelessCapabilities struct {
	// LeafNodes
	LeafInterfacesWirelessCapabilitiesRequireHt  types.String `tfsdk:"require_ht" json:"require-ht,omitempty"`
	LeafInterfacesWirelessCapabilitiesRequireVht types.String `tfsdk:"require_vht" json:"require-vht,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesWirelessCapabilitiesHt  *InterfacesWirelessCapabilitiesHt  `tfsdk:"ht" json:"ht,omitempty"`
	NodeInterfacesWirelessCapabilitiesVht *InterfacesWirelessCapabilitiesVht `tfsdk:"vht" json:"vht,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesWirelessCapabilities) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"require_ht": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Require stations to support HT PHY (reject association if they do not)

`,
		},

		"require_vht": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Require stations to support VHT PHY (reject association if they do not)

`,
		},

		// TagNodes

		// Nodes

		"ht": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesHt{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `HT (High Throughput) settings

`,
		},

		"vht": schema.SingleNestedAttribute{
			Attributes: InterfacesWirelessCapabilitiesVht{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `VHT (Very High Throughput) settings

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesWirelessCapabilities) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesWirelessCapabilitiesRequireHt.IsNull() && !o.LeafInterfacesWirelessCapabilitiesRequireHt.IsUnknown() {
		jsonData["require-ht"] = o.LeafInterfacesWirelessCapabilitiesRequireHt.ValueString()
	}

	if !o.LeafInterfacesWirelessCapabilitiesRequireVht.IsNull() && !o.LeafInterfacesWirelessCapabilitiesRequireVht.IsUnknown() {
		jsonData["require-vht"] = o.LeafInterfacesWirelessCapabilitiesRequireVht.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesWirelessCapabilitiesHt).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessCapabilitiesHt)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ht"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesWirelessCapabilitiesVht).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesWirelessCapabilitiesVht)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["vht"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesWirelessCapabilities) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["require-ht"]; ok {
		o.LeafInterfacesWirelessCapabilitiesRequireHt = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesRequireHt = basetypes.NewStringNull()
	}

	if value, ok := jsonData["require-vht"]; ok {
		o.LeafInterfacesWirelessCapabilitiesRequireVht = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesWirelessCapabilitiesRequireVht = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["ht"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessCapabilitiesHt = &InterfacesWirelessCapabilitiesHt{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessCapabilitiesHt)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["vht"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesWirelessCapabilitiesVht = &InterfacesWirelessCapabilitiesVht{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesWirelessCapabilitiesVht)
		if err != nil {
			return err
		}
	}

	return nil
}
