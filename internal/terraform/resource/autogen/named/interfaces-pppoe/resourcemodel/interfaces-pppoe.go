// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// InterfacesPppoe describes the resource data model.
type InterfacesPppoe struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesPppoeAccessConcentrator   types.String `tfsdk:"access_concentrator"`
	LeafInterfacesPppoeConnectOnDemand      types.String `tfsdk:"connect_on_demand"`
	LeafInterfacesPppoeNoDefaultRoute       types.String `tfsdk:"no_default_route"`
	LeafInterfacesPppoeDefaultRouteDistance types.String `tfsdk:"default_route_distance"`
	LeafInterfacesPppoeDescrIPtion          types.String `tfsdk:"description"`
	LeafInterfacesPppoeDisable              types.String `tfsdk:"disable"`
	LeafInterfacesPppoeIDleTimeout          types.String `tfsdk:"idle_timeout"`
	LeafInterfacesPppoeHostUniq             types.String `tfsdk:"host_uniq"`
	LeafInterfacesPppoeSourceInterface      types.String `tfsdk:"source_interface"`
	LeafInterfacesPppoeLocalAddress         types.String `tfsdk:"local_address"`
	LeafInterfacesPppoeMtu                  types.String `tfsdk:"mtu"`
	LeafInterfacesPppoeNoPeerDNS            types.String `tfsdk:"no_peer_dns"`
	LeafInterfacesPppoeRemoteAddress        types.String `tfsdk:"remote_address"`
	LeafInterfacesPppoeServiceName          types.String `tfsdk:"service_name"`
	LeafInterfacesPppoeRedirect             types.String `tfsdk:"redirect"`
	LeafInterfacesPppoeVrf                  types.String `tfsdk:"vrf"`

	// TagNodes

	// Nodes
	NodeInterfacesPppoeAuthentication  types.Object `tfsdk:"authentication"`
	NodeInterfacesPppoeDhcpvsixOptions types.Object `tfsdk:"dhcpv6_options"`
	NodeInterfacesPppoeIP              types.Object `tfsdk:"ip"`
	NodeInterfacesPppoeIPvsix          types.Object `tfsdk:"ipv6"`
	NodeInterfacesPppoeMirror          types.Object `tfsdk:"mirror"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesPppoe) GetVyosPath() []string {
	return []string{
		"interfaces",
		"pppoe",
		o.ID.ValueString(),
	}
}

// TerraformToVyos converts terraform data to vyos data
func (o *InterfacesPppoe) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"interfaces", "pppoe"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafInterfacesPppoeAccessConcentrator.IsNull() || o.LeafInterfacesPppoeAccessConcentrator.IsUnknown()) {
		vyosData["access-concentrator"] = o.LeafInterfacesPppoeAccessConcentrator.ValueString()
	}
	if !(o.LeafInterfacesPppoeConnectOnDemand.IsNull() || o.LeafInterfacesPppoeConnectOnDemand.IsUnknown()) {
		vyosData["connect-on-demand"] = o.LeafInterfacesPppoeConnectOnDemand.ValueString()
	}
	if !(o.LeafInterfacesPppoeNoDefaultRoute.IsNull() || o.LeafInterfacesPppoeNoDefaultRoute.IsUnknown()) {
		vyosData["no-default-route"] = o.LeafInterfacesPppoeNoDefaultRoute.ValueString()
	}
	if !(o.LeafInterfacesPppoeDefaultRouteDistance.IsNull() || o.LeafInterfacesPppoeDefaultRouteDistance.IsUnknown()) {
		vyosData["default-route-distance"] = o.LeafInterfacesPppoeDefaultRouteDistance.ValueString()
	}
	if !(o.LeafInterfacesPppoeDescrIPtion.IsNull() || o.LeafInterfacesPppoeDescrIPtion.IsUnknown()) {
		vyosData["description"] = o.LeafInterfacesPppoeDescrIPtion.ValueString()
	}
	if !(o.LeafInterfacesPppoeDisable.IsNull() || o.LeafInterfacesPppoeDisable.IsUnknown()) {
		vyosData["disable"] = o.LeafInterfacesPppoeDisable.ValueString()
	}
	if !(o.LeafInterfacesPppoeIDleTimeout.IsNull() || o.LeafInterfacesPppoeIDleTimeout.IsUnknown()) {
		vyosData["idle-timeout"] = o.LeafInterfacesPppoeIDleTimeout.ValueString()
	}
	if !(o.LeafInterfacesPppoeHostUniq.IsNull() || o.LeafInterfacesPppoeHostUniq.IsUnknown()) {
		vyosData["host-uniq"] = o.LeafInterfacesPppoeHostUniq.ValueString()
	}
	if !(o.LeafInterfacesPppoeSourceInterface.IsNull() || o.LeafInterfacesPppoeSourceInterface.IsUnknown()) {
		vyosData["source-interface"] = o.LeafInterfacesPppoeSourceInterface.ValueString()
	}
	if !(o.LeafInterfacesPppoeLocalAddress.IsNull() || o.LeafInterfacesPppoeLocalAddress.IsUnknown()) {
		vyosData["local-address"] = o.LeafInterfacesPppoeLocalAddress.ValueString()
	}
	if !(o.LeafInterfacesPppoeMtu.IsNull() || o.LeafInterfacesPppoeMtu.IsUnknown()) {
		vyosData["mtu"] = o.LeafInterfacesPppoeMtu.ValueString()
	}
	if !(o.LeafInterfacesPppoeNoPeerDNS.IsNull() || o.LeafInterfacesPppoeNoPeerDNS.IsUnknown()) {
		vyosData["no-peer-dns"] = o.LeafInterfacesPppoeNoPeerDNS.ValueString()
	}
	if !(o.LeafInterfacesPppoeRemoteAddress.IsNull() || o.LeafInterfacesPppoeRemoteAddress.IsUnknown()) {
		vyosData["remote-address"] = o.LeafInterfacesPppoeRemoteAddress.ValueString()
	}
	if !(o.LeafInterfacesPppoeServiceName.IsNull() || o.LeafInterfacesPppoeServiceName.IsUnknown()) {
		vyosData["service-name"] = o.LeafInterfacesPppoeServiceName.ValueString()
	}
	if !(o.LeafInterfacesPppoeRedirect.IsNull() || o.LeafInterfacesPppoeRedirect.IsUnknown()) {
		vyosData["redirect"] = o.LeafInterfacesPppoeRedirect.ValueString()
	}
	if !(o.LeafInterfacesPppoeVrf.IsNull() || o.LeafInterfacesPppoeVrf.IsUnknown()) {
		vyosData["vrf"] = o.LeafInterfacesPppoeVrf.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeInterfacesPppoeAuthentication.IsNull() || o.NodeInterfacesPppoeAuthentication.IsUnknown()) {
		var subModel InterfacesPppoeAuthentication
		diags.Append(o.NodeInterfacesPppoeAuthentication.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["authentication"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPppoeDhcpvsixOptions.IsNull() || o.NodeInterfacesPppoeDhcpvsixOptions.IsUnknown()) {
		var subModel InterfacesPppoeDhcpvsixOptions
		diags.Append(o.NodeInterfacesPppoeDhcpvsixOptions.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["dhcpv6-options"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPppoeIP.IsNull() || o.NodeInterfacesPppoeIP.IsUnknown()) {
		var subModel InterfacesPppoeIP
		diags.Append(o.NodeInterfacesPppoeIP.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ip"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPppoeIPvsix.IsNull() || o.NodeInterfacesPppoeIPvsix.IsUnknown()) {
		var subModel InterfacesPppoeIPvsix
		diags.Append(o.NodeInterfacesPppoeIPvsix.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["ipv6"] = subModel.TerraformToVyos(ctx, diags)
	}
	if !(o.NodeInterfacesPppoeMirror.IsNull() || o.NodeInterfacesPppoeMirror.IsUnknown()) {
		var subModel InterfacesPppoeMirror
		diags.Append(o.NodeInterfacesPppoeMirror.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["mirror"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *InterfacesPppoe) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"interfaces", "pppoe"}})

	// Leafs
	if value, ok := vyosData["access-concentrator"]; ok {
		o.LeafInterfacesPppoeAccessConcentrator = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeAccessConcentrator = basetypes.NewStringNull()
	}
	if value, ok := vyosData["connect-on-demand"]; ok {
		o.LeafInterfacesPppoeConnectOnDemand = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeConnectOnDemand = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-default-route"]; ok {
		o.LeafInterfacesPppoeNoDefaultRoute = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeNoDefaultRoute = basetypes.NewStringNull()
	}
	if value, ok := vyosData["default-route-distance"]; ok {
		o.LeafInterfacesPppoeDefaultRouteDistance = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDefaultRouteDistance = basetypes.NewStringNull()
	}
	if value, ok := vyosData["description"]; ok {
		o.LeafInterfacesPppoeDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDescrIPtion = basetypes.NewStringNull()
	}
	if value, ok := vyosData["disable"]; ok {
		o.LeafInterfacesPppoeDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDisable = basetypes.NewStringNull()
	}
	if value, ok := vyosData["idle-timeout"]; ok {
		o.LeafInterfacesPppoeIDleTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeIDleTimeout = basetypes.NewStringNull()
	}
	if value, ok := vyosData["host-uniq"]; ok {
		o.LeafInterfacesPppoeHostUniq = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeHostUniq = basetypes.NewStringNull()
	}
	if value, ok := vyosData["source-interface"]; ok {
		o.LeafInterfacesPppoeSourceInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeSourceInterface = basetypes.NewStringNull()
	}
	if value, ok := vyosData["local-address"]; ok {
		o.LeafInterfacesPppoeLocalAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeLocalAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["mtu"]; ok {
		o.LeafInterfacesPppoeMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeMtu = basetypes.NewStringNull()
	}
	if value, ok := vyosData["no-peer-dns"]; ok {
		o.LeafInterfacesPppoeNoPeerDNS = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeNoPeerDNS = basetypes.NewStringNull()
	}
	if value, ok := vyosData["remote-address"]; ok {
		o.LeafInterfacesPppoeRemoteAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeRemoteAddress = basetypes.NewStringNull()
	}
	if value, ok := vyosData["service-name"]; ok {
		o.LeafInterfacesPppoeServiceName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeServiceName = basetypes.NewStringNull()
	}
	if value, ok := vyosData["redirect"]; ok {
		o.LeafInterfacesPppoeRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeRedirect = basetypes.NewStringNull()
	}
	if value, ok := vyosData["vrf"]; ok {
		o.LeafInterfacesPppoeVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["authentication"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPppoeAuthentication{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPppoeAuthentication = data

	} else {
		o.NodeInterfacesPppoeAuthentication = basetypes.NewObjectNull(InterfacesPppoeAuthentication{}.AttributeTypes())
	}
	if value, ok := vyosData["dhcpv6-options"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPppoeDhcpvsixOptions{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPppoeDhcpvsixOptions = data

	} else {
		o.NodeInterfacesPppoeDhcpvsixOptions = basetypes.NewObjectNull(InterfacesPppoeDhcpvsixOptions{}.AttributeTypes())
	}
	if value, ok := vyosData["ip"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPppoeIP{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPppoeIP = data

	} else {
		o.NodeInterfacesPppoeIP = basetypes.NewObjectNull(InterfacesPppoeIP{}.AttributeTypes())
	}
	if value, ok := vyosData["ipv6"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPppoeIPvsix{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPppoeIPvsix = data

	} else {
		o.NodeInterfacesPppoeIPvsix = basetypes.NewObjectNull(InterfacesPppoeIPvsix{}.AttributeTypes())
	}
	if value, ok := vyosData["mirror"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, InterfacesPppoeMirror{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeInterfacesPppoeMirror = data

	} else {
		o.NodeInterfacesPppoeMirror = basetypes.NewObjectNull(InterfacesPppoeMirror{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"interfaces", "pppoe"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o InterfacesPppoe) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"access_concentrator":    types.StringType,
		"connect_on_demand":      types.StringType,
		"no_default_route":       types.StringType,
		"default_route_distance": types.StringType,
		"description":            types.StringType,
		"disable":                types.StringType,
		"idle_timeout":           types.StringType,
		"host_uniq":              types.StringType,
		"source_interface":       types.StringType,
		"local_address":          types.StringType,
		"mtu":                    types.StringType,
		"no_peer_dns":            types.StringType,
		"remote_address":         types.StringType,
		"service_name":           types.StringType,
		"redirect":               types.StringType,
		"vrf":                    types.StringType,

		// Tags

		// Nodes
		"authentication": types.ObjectType{AttrTypes: InterfacesPppoeAuthentication{}.AttributeTypes()},
		"dhcpv6_options": types.ObjectType{AttrTypes: InterfacesPppoeDhcpvsixOptions{}.AttributeTypes()},
		"ip":             types.ObjectType{AttrTypes: InterfacesPppoeIP{}.AttributeTypes()},
		"ipv6":           types.ObjectType{AttrTypes: InterfacesPppoeIPvsix{}.AttributeTypes()},
		"mirror":         types.ObjectType{AttrTypes: InterfacesPppoeMirror{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPppoe) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Point-to-Point Protocol over Ethernet (PPPoE) Interface

|  Format  |  Description  |
|----------|---------------|
|  pppoeN  |  PPPoE dialer interface name  |

`,
		},

		// LeafNodes

		"access_concentrator": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Access concentrator name

`,
		},

		"connect_on_demand": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Establishment connection automatically when traffic is sent

`,
		},

		"no_default_route": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not install default route to system

`,
		},

		"default_route_distance": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |

`,

			// Default:          stringdefault.StaticString(`210`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"idle_timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay before disconnecting idle session (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-86400  |  Idle timeout in seconds  |

`,
		},

		"host_uniq": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `PPPoE RFC2516 host-uniq tag

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Host-uniq tag as byte string in HEX  |

`,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |

`,
		},

		"local_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 address of local end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of local end of the PPPoE link  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-1500  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1492`),
			Computed: true,
		},

		"no_peer_dns": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not use DNS servers provided by the peer

`,
		},

		"remote_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 address of remote end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of remote end of the PPPoE link  |

`,
		},

		"service_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Service name, only connect to access concentrators advertising this

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication settings

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}
