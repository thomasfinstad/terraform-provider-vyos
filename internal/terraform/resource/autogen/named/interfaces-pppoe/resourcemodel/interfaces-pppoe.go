// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// InterfacesPppoe describes the resource data model.
type InterfacesPppoe struct {
	ID types.String `tfsdk:"identifier"`

	// LeafNodes
	LeafInterfacesPppoeAccessConcentrator   types.String `tfsdk:"access_concentrator" json:"access-concentrator,omitempty"`
	LeafInterfacesPppoeConnectOnDemand      types.String `tfsdk:"connect_on_demand" json:"connect-on-demand,omitempty"`
	LeafInterfacesPppoeNoDefaultRoute       types.String `tfsdk:"no_default_route" json:"no-default-route,omitempty"`
	LeafInterfacesPppoeDefaultRouteDistance types.String `tfsdk:"default_route_distance" json:"default-route-distance,omitempty"`
	LeafInterfacesPppoeDescrIPtion          types.String `tfsdk:"description" json:"description,omitempty"`
	LeafInterfacesPppoeDisable              types.String `tfsdk:"disable" json:"disable,omitempty"`
	LeafInterfacesPppoeIDleTimeout          types.String `tfsdk:"idle_timeout" json:"idle-timeout,omitempty"`
	LeafInterfacesPppoeHostUniq             types.String `tfsdk:"host_uniq" json:"host-uniq,omitempty"`
	LeafInterfacesPppoeSourceInterface      types.String `tfsdk:"source_interface" json:"source-interface,omitempty"`
	LeafInterfacesPppoeLocalAddress         types.String `tfsdk:"local_address" json:"local-address,omitempty"`
	LeafInterfacesPppoeMtu                  types.String `tfsdk:"mtu" json:"mtu,omitempty"`
	LeafInterfacesPppoeNoPeerDNS            types.String `tfsdk:"no_peer_dns" json:"no-peer-dns,omitempty"`
	LeafInterfacesPppoeRemoteAddress        types.String `tfsdk:"remote_address" json:"remote-address,omitempty"`
	LeafInterfacesPppoeServiceName          types.String `tfsdk:"service_name" json:"service-name,omitempty"`
	LeafInterfacesPppoeRedirect             types.String `tfsdk:"redirect" json:"redirect,omitempty"`
	LeafInterfacesPppoeVrf                  types.String `tfsdk:"vrf" json:"vrf,omitempty"`

	// TagNodes

	// Nodes
	NodeInterfacesPppoeAuthentication  *InterfacesPppoeAuthentication  `tfsdk:"authentication" json:"authentication,omitempty"`
	NodeInterfacesPppoeDhcpvsixOptions *InterfacesPppoeDhcpvsixOptions `tfsdk:"dhcpv6_options" json:"dhcpv6-options,omitempty"`
	NodeInterfacesPppoeIP              *InterfacesPppoeIP              `tfsdk:"ip" json:"ip,omitempty"`
	NodeInterfacesPppoeIPvsix          *InterfacesPppoeIPvsix          `tfsdk:"ipv6" json:"ipv6,omitempty"`
	NodeInterfacesPppoeMirror          *InterfacesPppoeMirror          `tfsdk:"mirror" json:"mirror,omitempty"`
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesPppoe) GetVyosPath() []string {
	return []string{
		"interfaces",
		"pppoe",
		o.ID.ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesPppoe) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"identifier": schema.StringAttribute{
			Required: true,
			MarkdownDescription: `Point-to-Point Protocol over Ethernet (PPPoE) Interface

|  Format  |  Description  |
|----------|---------------|
|  pppoeN  |  PPPoE dialer interface name  |

`,
		},

		// LeafNodes

		"access_concentrator": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Access concentrator name

`,
		},

		"connect_on_demand": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Establishment connection automatically when traffic is sent

`,
		},

		"no_default_route": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not install default route to system

`,
		},

		"default_route_distance": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Distance for installed default route

|  Format  |  Description  |
|----------|---------------|
|  u32:1-255  |  Distance for the default route from DHCP server  |

`,

			// Default:          stringdefault.StaticString(`210`),
			Computed: true,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Description  |

`,
		},

		"disable": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
		},

		"idle_timeout": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Delay before disconnecting idle session (in seconds)

|  Format  |  Description  |
|----------|---------------|
|  u32:0-86400  |  Idle timeout in seconds  |

`,
		},

		"host_uniq": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `PPPoE RFC2516 host-uniq tag

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Host-uniq tag as byte string in HEX  |

`,
		},

		"source_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interface used to establish connection

|  Format  |  Description  |
|----------|---------------|
|  interface  |  Interface name  |

`,
		},

		"local_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 address of local end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of local end of the PPPoE link  |

`,
		},

		"mtu": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

|  Format  |  Description  |
|----------|---------------|
|  u32:68-1500  |  Maximum Transmission Unit in byte  |

`,

			// Default:          stringdefault.StaticString(`1492`),
			Computed: true,
		},

		"no_peer_dns": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Do not use DNS servers provided by the peer

`,
		},

		"remote_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 address of remote end of the PPPoE link

|  Format  |  Description  |
|----------|---------------|
|  ipv4  |  Address of remote end of the PPPoE link  |

`,
		},

		"service_name": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Service name, only connect to access concentrators advertising this

`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Destination interface name  |

`,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

|  Format  |  Description  |
|----------|---------------|
|  txt  |  VRF instance name  |

`,
		},

		// TagNodes

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeAuthentication{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Authentication settings

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeDhcpvsixOptions{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeIP{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeIPvsix{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesPppoeMirror{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *InterfacesPppoe) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafInterfacesPppoeAccessConcentrator.IsNull() && !o.LeafInterfacesPppoeAccessConcentrator.IsUnknown() {
		jsonData["access-concentrator"] = o.LeafInterfacesPppoeAccessConcentrator.ValueString()
	}

	if !o.LeafInterfacesPppoeConnectOnDemand.IsNull() && !o.LeafInterfacesPppoeConnectOnDemand.IsUnknown() {
		jsonData["connect-on-demand"] = o.LeafInterfacesPppoeConnectOnDemand.ValueString()
	}

	if !o.LeafInterfacesPppoeNoDefaultRoute.IsNull() && !o.LeafInterfacesPppoeNoDefaultRoute.IsUnknown() {
		jsonData["no-default-route"] = o.LeafInterfacesPppoeNoDefaultRoute.ValueString()
	}

	if !o.LeafInterfacesPppoeDefaultRouteDistance.IsNull() && !o.LeafInterfacesPppoeDefaultRouteDistance.IsUnknown() {
		jsonData["default-route-distance"] = o.LeafInterfacesPppoeDefaultRouteDistance.ValueString()
	}

	if !o.LeafInterfacesPppoeDescrIPtion.IsNull() && !o.LeafInterfacesPppoeDescrIPtion.IsUnknown() {
		jsonData["description"] = o.LeafInterfacesPppoeDescrIPtion.ValueString()
	}

	if !o.LeafInterfacesPppoeDisable.IsNull() && !o.LeafInterfacesPppoeDisable.IsUnknown() {
		jsonData["disable"] = o.LeafInterfacesPppoeDisable.ValueString()
	}

	if !o.LeafInterfacesPppoeIDleTimeout.IsNull() && !o.LeafInterfacesPppoeIDleTimeout.IsUnknown() {
		jsonData["idle-timeout"] = o.LeafInterfacesPppoeIDleTimeout.ValueString()
	}

	if !o.LeafInterfacesPppoeHostUniq.IsNull() && !o.LeafInterfacesPppoeHostUniq.IsUnknown() {
		jsonData["host-uniq"] = o.LeafInterfacesPppoeHostUniq.ValueString()
	}

	if !o.LeafInterfacesPppoeSourceInterface.IsNull() && !o.LeafInterfacesPppoeSourceInterface.IsUnknown() {
		jsonData["source-interface"] = o.LeafInterfacesPppoeSourceInterface.ValueString()
	}

	if !o.LeafInterfacesPppoeLocalAddress.IsNull() && !o.LeafInterfacesPppoeLocalAddress.IsUnknown() {
		jsonData["local-address"] = o.LeafInterfacesPppoeLocalAddress.ValueString()
	}

	if !o.LeafInterfacesPppoeMtu.IsNull() && !o.LeafInterfacesPppoeMtu.IsUnknown() {
		jsonData["mtu"] = o.LeafInterfacesPppoeMtu.ValueString()
	}

	if !o.LeafInterfacesPppoeNoPeerDNS.IsNull() && !o.LeafInterfacesPppoeNoPeerDNS.IsUnknown() {
		jsonData["no-peer-dns"] = o.LeafInterfacesPppoeNoPeerDNS.ValueString()
	}

	if !o.LeafInterfacesPppoeRemoteAddress.IsNull() && !o.LeafInterfacesPppoeRemoteAddress.IsUnknown() {
		jsonData["remote-address"] = o.LeafInterfacesPppoeRemoteAddress.ValueString()
	}

	if !o.LeafInterfacesPppoeServiceName.IsNull() && !o.LeafInterfacesPppoeServiceName.IsUnknown() {
		jsonData["service-name"] = o.LeafInterfacesPppoeServiceName.ValueString()
	}

	if !o.LeafInterfacesPppoeRedirect.IsNull() && !o.LeafInterfacesPppoeRedirect.IsUnknown() {
		jsonData["redirect"] = o.LeafInterfacesPppoeRedirect.ValueString()
	}

	if !o.LeafInterfacesPppoeVrf.IsNull() && !o.LeafInterfacesPppoeVrf.IsUnknown() {
		jsonData["vrf"] = o.LeafInterfacesPppoeVrf.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeInterfacesPppoeAuthentication).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPppoeAuthentication)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["authentication"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPppoeDhcpvsixOptions).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPppoeDhcpvsixOptions)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["dhcpv6-options"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPppoeIP).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPppoeIP)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ip"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPppoeIPvsix).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPppoeIPvsix)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["ipv6"] = subData
	}

	if !reflect.ValueOf(o.NodeInterfacesPppoeMirror).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeInterfacesPppoeMirror)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["mirror"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *InterfacesPppoe) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["access-concentrator"]; ok {
		o.LeafInterfacesPppoeAccessConcentrator = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeAccessConcentrator = basetypes.NewStringNull()
	}

	if value, ok := jsonData["connect-on-demand"]; ok {
		o.LeafInterfacesPppoeConnectOnDemand = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeConnectOnDemand = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-default-route"]; ok {
		o.LeafInterfacesPppoeNoDefaultRoute = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeNoDefaultRoute = basetypes.NewStringNull()
	}

	if value, ok := jsonData["default-route-distance"]; ok {
		o.LeafInterfacesPppoeDefaultRouteDistance = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDefaultRouteDistance = basetypes.NewStringNull()
	}

	if value, ok := jsonData["description"]; ok {
		o.LeafInterfacesPppoeDescrIPtion = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDescrIPtion = basetypes.NewStringNull()
	}

	if value, ok := jsonData["disable"]; ok {
		o.LeafInterfacesPppoeDisable = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeDisable = basetypes.NewStringNull()
	}

	if value, ok := jsonData["idle-timeout"]; ok {
		o.LeafInterfacesPppoeIDleTimeout = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeIDleTimeout = basetypes.NewStringNull()
	}

	if value, ok := jsonData["host-uniq"]; ok {
		o.LeafInterfacesPppoeHostUniq = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeHostUniq = basetypes.NewStringNull()
	}

	if value, ok := jsonData["source-interface"]; ok {
		o.LeafInterfacesPppoeSourceInterface = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeSourceInterface = basetypes.NewStringNull()
	}

	if value, ok := jsonData["local-address"]; ok {
		o.LeafInterfacesPppoeLocalAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeLocalAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["mtu"]; ok {
		o.LeafInterfacesPppoeMtu = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeMtu = basetypes.NewStringNull()
	}

	if value, ok := jsonData["no-peer-dns"]; ok {
		o.LeafInterfacesPppoeNoPeerDNS = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeNoPeerDNS = basetypes.NewStringNull()
	}

	if value, ok := jsonData["remote-address"]; ok {
		o.LeafInterfacesPppoeRemoteAddress = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeRemoteAddress = basetypes.NewStringNull()
	}

	if value, ok := jsonData["service-name"]; ok {
		o.LeafInterfacesPppoeServiceName = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeServiceName = basetypes.NewStringNull()
	}

	if value, ok := jsonData["redirect"]; ok {
		o.LeafInterfacesPppoeRedirect = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeRedirect = basetypes.NewStringNull()
	}

	if value, ok := jsonData["vrf"]; ok {
		o.LeafInterfacesPppoeVrf = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafInterfacesPppoeVrf = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["authentication"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPppoeAuthentication = &InterfacesPppoeAuthentication{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPppoeAuthentication)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["dhcpv6-options"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPppoeDhcpvsixOptions = &InterfacesPppoeDhcpvsixOptions{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPppoeDhcpvsixOptions)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ip"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPppoeIP = &InterfacesPppoeIP{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPppoeIP)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["ipv6"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPppoeIPvsix = &InterfacesPppoeIPvsix{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPppoeIPvsix)
		if err != nil {
			return err
		}
	}
	if value, ok := jsonData["mirror"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeInterfacesPppoeMirror = &InterfacesPppoeMirror{}

		err = json.Unmarshal(subJSONStr, o.NodeInterfacesPppoeMirror)
		if err != nil {
			return err
		}
	}

	return nil
}
