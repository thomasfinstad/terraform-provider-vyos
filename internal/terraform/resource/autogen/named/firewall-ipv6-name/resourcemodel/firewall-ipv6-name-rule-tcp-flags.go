// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// FirewallIPvsixNameRuleTCPFlags describes the resource data model.
type FirewallIPvsixNameRuleTCPFlags struct {
	// LeafNodes
	LeafFirewallIPvsixNameRuleTCPFlagsSyn types.String `tfsdk:"syn" json:"syn,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsAck types.String `tfsdk:"ack" json:"ack,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsFin types.String `tfsdk:"fin" json:"fin,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsRst types.String `tfsdk:"rst" json:"rst,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsUrg types.String `tfsdk:"urg" json:"urg,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsPsh types.String `tfsdk:"psh" json:"psh,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsEcn types.String `tfsdk:"ecn" json:"ecn,omitempty"`
	LeafFirewallIPvsixNameRuleTCPFlagsCwr types.String `tfsdk:"cwr" json:"cwr,omitempty"`

	// TagNodes

	// Nodes
	NodeFirewallIPvsixNameRuleTCPFlagsNot *FirewallIPvsixNameRuleTCPFlagsNot `tfsdk:"not" json:"not,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallIPvsixNameRuleTCPFlags) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"syn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Synchronise flag

`,
		},

		"ack": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Acknowledge flag

`,
		},

		"fin": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Finish flag

`,
		},

		"rst": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Reset flag

`,
		},

		"urg": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Urgent flag

`,
		},

		"psh": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Push flag

`,
		},

		"ecn": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Explicit Congestion Notification flag

`,
		},

		"cwr": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Congestion Window Reduced flag

`,
		},

		// TagNodes

		// Nodes

		"not": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleTCPFlagsNot{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `Match flags not set

`,
		},
	}
}

// MarshalJSON returns json encoded string as bytes or error if marshalling did not go well
func (o *FirewallIPvsixNameRuleTCPFlags) MarshalJSON() ([]byte, error) {
	jsonData := make(map[string]interface{})

	// Leafs

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsSyn.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsSyn.IsUnknown() {
		jsonData["syn"] = o.LeafFirewallIPvsixNameRuleTCPFlagsSyn.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsAck.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsAck.IsUnknown() {
		jsonData["ack"] = o.LeafFirewallIPvsixNameRuleTCPFlagsAck.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsFin.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsFin.IsUnknown() {
		jsonData["fin"] = o.LeafFirewallIPvsixNameRuleTCPFlagsFin.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsRst.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsRst.IsUnknown() {
		jsonData["rst"] = o.LeafFirewallIPvsixNameRuleTCPFlagsRst.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsUrg.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsUrg.IsUnknown() {
		jsonData["urg"] = o.LeafFirewallIPvsixNameRuleTCPFlagsUrg.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsPsh.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsPsh.IsUnknown() {
		jsonData["psh"] = o.LeafFirewallIPvsixNameRuleTCPFlagsPsh.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsEcn.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsEcn.IsUnknown() {
		jsonData["ecn"] = o.LeafFirewallIPvsixNameRuleTCPFlagsEcn.ValueString()
	}

	if !o.LeafFirewallIPvsixNameRuleTCPFlagsCwr.IsNull() && !o.LeafFirewallIPvsixNameRuleTCPFlagsCwr.IsUnknown() {
		jsonData["cwr"] = o.LeafFirewallIPvsixNameRuleTCPFlagsCwr.ValueString()
	}

	// Tags

	// Nodes

	if !reflect.ValueOf(o.NodeFirewallIPvsixNameRuleTCPFlagsNot).IsZero() {
		subJSONStr, err := json.Marshal(o.NodeFirewallIPvsixNameRuleTCPFlagsNot)
		if err != nil {
			return nil, err
		}

		subData := make(map[string]interface{})
		err = json.Unmarshal(subJSONStr, &subData)
		if err != nil {
			return nil, err
		}
		jsonData["not"] = subData
	}

	// Return compiled data
	ret, err := json.Marshal(jsonData)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// UnmarshalJSON unmarshals json byte array into this object
func (o *FirewallIPvsixNameRuleTCPFlags) UnmarshalJSON(jsonStr []byte) error {
	jsonData := make(map[string]interface{})
	err := json.Unmarshal(jsonStr, &jsonData)
	if err != nil {
		return err
	}

	// Leafs

	if value, ok := jsonData["syn"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsSyn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsSyn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ack"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsAck = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsAck = basetypes.NewStringNull()
	}

	if value, ok := jsonData["fin"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsFin = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsFin = basetypes.NewStringNull()
	}

	if value, ok := jsonData["rst"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsRst = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsRst = basetypes.NewStringNull()
	}

	if value, ok := jsonData["urg"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsUrg = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsUrg = basetypes.NewStringNull()
	}

	if value, ok := jsonData["psh"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsPsh = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsPsh = basetypes.NewStringNull()
	}

	if value, ok := jsonData["ecn"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsEcn = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsEcn = basetypes.NewStringNull()
	}

	if value, ok := jsonData["cwr"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPFlagsCwr = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPFlagsCwr = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := jsonData["not"]; ok {
		subJSONStr, err := json.Marshal(value)
		if err != nil {
			return err
		}

		o.NodeFirewallIPvsixNameRuleTCPFlagsNot = &FirewallIPvsixNameRuleTCPFlagsNot{}

		err = json.Unmarshal(subJSONStr, o.NodeFirewallIPvsixNameRuleTCPFlagsNot)
		if err != nil {
			return err
		}
	}

	return nil
}
