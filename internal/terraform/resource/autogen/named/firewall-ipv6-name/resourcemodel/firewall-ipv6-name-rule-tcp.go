// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// FirewallIPvsixNameRuleTCP describes the resource data model.
type FirewallIPvsixNameRuleTCP struct {
	// LeafNodes
	LeafFirewallIPvsixNameRuleTCPMss types.String `tfsdk:"mss"`

	// TagNodes

	// Nodes
	NodeFirewallIPvsixNameRuleTCPFlags types.Object `tfsdk:"flags"`
}

// TerraformToVyos converts terraform data to vyos data
func (o *FirewallIPvsixNameRuleTCP) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "tcp"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafFirewallIPvsixNameRuleTCPMss.IsNull() || o.LeafFirewallIPvsixNameRuleTCPMss.IsUnknown()) {
		vyosData["mss"] = o.LeafFirewallIPvsixNameRuleTCPMss.ValueString()
	}

	// Tags

	// Nodes
	if !(o.NodeFirewallIPvsixNameRuleTCPFlags.IsNull() || o.NodeFirewallIPvsixNameRuleTCPFlags.IsUnknown()) {
		var subModel FirewallIPvsixNameRuleTCPFlags
		diags.Append(o.NodeFirewallIPvsixNameRuleTCPFlags.As(ctx, &subModel, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
		vyosData["flags"] = subModel.TerraformToVyos(ctx, diags)
	}

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *FirewallIPvsixNameRuleTCP) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "tcp"}})

	// Leafs
	if value, ok := vyosData["mss"]; ok {
		o.LeafFirewallIPvsixNameRuleTCPMss = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTCPMss = basetypes.NewStringNull()
	}

	// Tags

	// Nodes
	if value, ok := vyosData["flags"]; ok {
		data, d := basetypes.NewObjectValueFrom(ctx, FirewallIPvsixNameRuleTCPFlags{}.AttributeTypes(), value.(map[string]interface{}))
		diags.Append(d...)
		o.NodeFirewallIPvsixNameRuleTCPFlags = data

	} else {
		o.NodeFirewallIPvsixNameRuleTCPFlags = basetypes.NewObjectNull(FirewallIPvsixNameRuleTCPFlags{}.AttributeTypes())
	}

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "tcp"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o FirewallIPvsixNameRuleTCP) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"mss": types.StringType,

		// Tags

		// Nodes
		"flags": types.ObjectType{AttrTypes: FirewallIPvsixNameRuleTCPFlags{}.AttributeTypes()},
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallIPvsixNameRuleTCP) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"mss": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Maximum segment size (MSS)

|  Format  |  Description  |
|----------|---------------|
|  u32:1-16384  |  Maximum segment size  |
|  <min>-<max>  |  TCP MSS range (use '-' as delimiter)  |

`,
		},

		// TagNodes

		// Nodes

		"flags": schema.SingleNestedAttribute{
			Attributes: FirewallIPvsixNameRuleTCPFlags{}.ResourceSchemaAttributes(),
			Optional:   true,
			MarkdownDescription: `TCP flags to match

`,
		},
	}
}
