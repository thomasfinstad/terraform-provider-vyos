// Package resourcemodel code generated by /workspaces/terraform-provider-vyos/tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// FirewallIPvsixNameRuleTime describes the resource data model.
type FirewallIPvsixNameRuleTime struct {
	// LeafNodes
	LeafFirewallIPvsixNameRuleTimeStartdate types.String `tfsdk:"startdate"`
	LeafFirewallIPvsixNameRuleTimeStarttime types.String `tfsdk:"starttime"`
	LeafFirewallIPvsixNameRuleTimeStopdate  types.String `tfsdk:"stopdate"`
	LeafFirewallIPvsixNameRuleTimeStoptime  types.String `tfsdk:"stoptime"`
	LeafFirewallIPvsixNameRuleTimeWeekdays  types.String `tfsdk:"weekdays"`

	// TagNodes

	// Nodes
}

// TerraformToVyos converts terraform data to vyos data
func (o *FirewallIPvsixNameRuleTime) TerraformToVyos(ctx context.Context, diags *diag.Diagnostics) map[string]interface{} {
	tflog.Error(ctx, "TerraformToVyos", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "time"}})

	vyosData := make(map[string]interface{})

	// Leafs
	if !(o.LeafFirewallIPvsixNameRuleTimeStartdate.IsNull() || o.LeafFirewallIPvsixNameRuleTimeStartdate.IsUnknown()) {
		vyosData["startdate"] = o.LeafFirewallIPvsixNameRuleTimeStartdate.ValueString()
	}
	if !(o.LeafFirewallIPvsixNameRuleTimeStarttime.IsNull() || o.LeafFirewallIPvsixNameRuleTimeStarttime.IsUnknown()) {
		vyosData["starttime"] = o.LeafFirewallIPvsixNameRuleTimeStarttime.ValueString()
	}
	if !(o.LeafFirewallIPvsixNameRuleTimeStopdate.IsNull() || o.LeafFirewallIPvsixNameRuleTimeStopdate.IsUnknown()) {
		vyosData["stopdate"] = o.LeafFirewallIPvsixNameRuleTimeStopdate.ValueString()
	}
	if !(o.LeafFirewallIPvsixNameRuleTimeStoptime.IsNull() || o.LeafFirewallIPvsixNameRuleTimeStoptime.IsUnknown()) {
		vyosData["stoptime"] = o.LeafFirewallIPvsixNameRuleTimeStoptime.ValueString()
	}
	if !(o.LeafFirewallIPvsixNameRuleTimeWeekdays.IsNull() || o.LeafFirewallIPvsixNameRuleTimeWeekdays.IsUnknown()) {
		vyosData["weekdays"] = o.LeafFirewallIPvsixNameRuleTimeWeekdays.ValueString()
	}

	// Tags

	// Nodes

	// Return compiled data
	return vyosData
}

// VyosToTerraform converts vyos data to terraform data
func (o *FirewallIPvsixNameRuleTime) VyosToTerraform(ctx context.Context, diags *diag.Diagnostics, vyosData map[string]interface{}) {
	tflog.Error(ctx, "VyosToTerraform begin", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "time"}})

	// Leafs
	if value, ok := vyosData["startdate"]; ok {
		o.LeafFirewallIPvsixNameRuleTimeStartdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTimeStartdate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["starttime"]; ok {
		o.LeafFirewallIPvsixNameRuleTimeStarttime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTimeStarttime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["stopdate"]; ok {
		o.LeafFirewallIPvsixNameRuleTimeStopdate = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTimeStopdate = basetypes.NewStringNull()
	}
	if value, ok := vyosData["stoptime"]; ok {
		o.LeafFirewallIPvsixNameRuleTimeStoptime = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTimeStoptime = basetypes.NewStringNull()
	}
	if value, ok := vyosData["weekdays"]; ok {
		o.LeafFirewallIPvsixNameRuleTimeWeekdays = basetypes.NewStringValue(value.(string))
	} else {
		o.LeafFirewallIPvsixNameRuleTimeWeekdays = basetypes.NewStringNull()
	}

	// Tags

	// Nodes

	tflog.Error(ctx, "VyosToTerraform end", map[string]interface{}{"Path": []string{"firewall", "ipv6-name", "rule", "time"}})
}

// AttributeTypes generates the attribute types for the resource at this level
func (o FirewallIPvsixNameRuleTime) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		// Leafs
		"startdate": types.StringType,
		"starttime": types.StringType,
		"stopdate":  types.StringType,
		"stoptime":  types.StringType,
		"weekdays":  types.StringType,

		// Tags

		// Nodes

	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o FirewallIPvsixNameRuleTime) ResourceSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"startdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to start matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter date using following notation - YYYY-MM-DD  |

`,
		},

		"starttime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to start matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter time using using 24 hour notation - hh:mm:ss  |

`,
		},

		"stopdate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Date to stop matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter date using following notation - YYYY-MM-DD  |

`,
		},

		"stoptime": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Time of day to stop matching rule

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Enter time using using 24 hour notation - hh:mm:ss  |

`,
		},

		"weekdays": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Comma separated weekdays to match rule on

|  Format  |  Description  |
|----------|---------------|
|  txt  |  Name of day (Monday, Tuesday, Wednesday, Thursdays, Friday,                           Saturday, Sunday)  |
|  u32:0-6  |  Day number (0 = Sunday ... 6 = Saturday)  |

`,
		},

		// TagNodes

		// Nodes

	}
}
