// Code generated by /workspaces/terraform-provider-vyos/tools/build-resource-terraform-schemas/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/provider/vyos/schema/interfacedefinition"
)

func SystemSyslog() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: `interfaceDefinition`},
		Node: []*interfacedefinition.Node{
			{
				XMLName: xml.Name{
					Local: `node`},
				Children: []*interfacedefinition.Children{
					{
						XMLName: xml.Name{
							Local: `children`},
						Node: []*interfacedefinition.Node{
							{
								XMLName: xml.Name{
									Local: `node`},
								OwnerAttr: `${vyos_conf_scripts_dir}/system-syslog.py`,
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`System logging`},
										Priority: []string{
											`400`},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
								Children: []*interfacedefinition.Children{
									{
										XMLName: xml.Name{
											Local: `children`},
										Node: []*interfacedefinition.Node{
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Logging to system standard location`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`mark messages sent to syslog`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`time interval how often a mark message is being sent in seconds (default: 1200)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--positive`}}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Facility for logging`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(auth|authpriv|cron|daemon|kern|lpr|mail|mark|news|protocols|security|syslog|user|uucp|local0|local1|local2|local3|local4|local5|local6|local7|all)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `all`,
																				Description: `All facilities excluding \'mark\'`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `auth`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `authpriv`,
																				Description: `Non-system authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cron`,
																				Description: `Cron daemon`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `daemon`,
																				Description: `System daemons`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `kern`,
																				Description: `Kernel`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lpr`,
																				Description: `Line printer spooler`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mail`,
																				Description: `Mail subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mark`,
																				Description: `Timestamp`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `news`,
																				Description: `USENET subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `protocols`,
																				Description: `depricated will be set to local7`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `security`,
																				Description: `depricated will be set to auth`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `syslog`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `user`,
																				Description: `Application processes`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `uucp`,
																				Description: `UUCP subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local0`,
																				Description: `Local facility 0`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local1`,
																				Description: `Local facility 1`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local2`,
																				Description: `Local facility 2`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local3`,
																				Description: `Local facility 3`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local4`,
																				Description: `Local facility 4`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local5`,
																				Description: `Local facility 5`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local6`,
																				Description: `Local facility 6`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local7`,
																				Description: `Local facility 7`}},
																		ConstraintErrorMessage: []string{
																			`Invalid facility type`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`auth authpriv cron daemon kern lpr mail mark news protocols security syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 all`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Logging level`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(emerg|alert|crit|err|warning|notice|info|debug|all)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `emerg`,
																								Description: `Emergency messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `alert`,
																								Description: `Urgent messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `crit`,
																								Description: `Critical messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `err`,
																								Description: `Error messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `warning`,
																								Description: `Warning messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `notice`,
																								Description: `Messages for further investigation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `info`,
																								Description: `Informational messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `debug`,
																								Description: `Debug messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `all`,
																								Description: `Log everything`}},
																						ConstraintErrorMessage: []string{
																							`Invalid loglevel`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`emerg alert crit err warning notice info debug all`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`uses FQDN for logging`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`logging to serial console`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Facility for logging`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(auth|authpriv|cron|daemon|kern|lpr|mail|mark|news|protocols|security|syslog|user|uucp|local0|local1|local2|local3|local4|local5|local6|local7|all)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `all`,
																				Description: `All facilities excluding \'mark\'`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `auth`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `authpriv`,
																				Description: `Non-system authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cron`,
																				Description: `Cron daemon`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `daemon`,
																				Description: `System daemons`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `kern`,
																				Description: `Kernel`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lpr`,
																				Description: `Line printer spooler`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mail`,
																				Description: `Mail subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mark`,
																				Description: `Timestamp`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `news`,
																				Description: `USENET subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `protocols`,
																				Description: `depricated will be set to local7`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `security`,
																				Description: `depricated will be set to auth`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `syslog`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `user`,
																				Description: `Application processes`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `uucp`,
																				Description: `UUCP subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local0`,
																				Description: `Local facility 0`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local1`,
																				Description: `Local facility 1`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local2`,
																				Description: `Local facility 2`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local3`,
																				Description: `Local facility 3`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local4`,
																				Description: `Local facility 4`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local5`,
																				Description: `Local facility 5`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local6`,
																				Description: `Local facility 6`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local7`,
																				Description: `Local facility 7`}},
																		ConstraintErrorMessage: []string{
																			`Invalid facility type`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`auth authpriv cron daemon kern lpr mail mark news protocols security syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 all`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Logging level`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(emerg|alert|crit|err|warning|notice|info|debug|all)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `emerg`,
																								Description: `Emergency messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `alert`,
																								Description: `Urgent messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `crit`,
																								Description: `Critical messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `err`,
																								Description: `Error messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `warning`,
																								Description: `Warning messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `notice`,
																								Description: `Messages for further investigation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `info`,
																								Description: `Informational messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `debug`,
																								Description: `Debug messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `all`,
																								Description: `Log everything`}},
																						ConstraintErrorMessage: []string{
																							`Invalid loglevel`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`emerg alert crit err warning notice info debug all`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
										TagNode: []*interfacedefinition.TagNode{
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Logging to specific terminal of given user`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`[a-z_][a-z0-9_-]{1,
31}[$]?`},
																Validator: []*interfacedefinition.Validator(nil)}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `username`,
																Description: `user login name`}},
														ConstraintErrorMessage: []string{
															`illegal characters in user`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Facility for logging`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(auth|authpriv|cron|daemon|kern|lpr|mail|mark|news|protocols|security|syslog|user|uucp|local0|local1|local2|local3|local4|local5|local6|local7|all)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `all`,
																				Description: `All facilities excluding \'mark\'`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `auth`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `authpriv`,
																				Description: `Non-system authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cron`,
																				Description: `Cron daemon`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `daemon`,
																				Description: `System daemons`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `kern`,
																				Description: `Kernel`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lpr`,
																				Description: `Line printer spooler`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mail`,
																				Description: `Mail subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mark`,
																				Description: `Timestamp`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `news`,
																				Description: `USENET subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `protocols`,
																				Description: `depricated will be set to local7`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `security`,
																				Description: `depricated will be set to auth`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `syslog`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `user`,
																				Description: `Application processes`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `uucp`,
																				Description: `UUCP subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local0`,
																				Description: `Local facility 0`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local1`,
																				Description: `Local facility 1`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local2`,
																				Description: `Local facility 2`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local3`,
																				Description: `Local facility 3`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local4`,
																				Description: `Local facility 4`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local5`,
																				Description: `Local facility 5`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local6`,
																				Description: `Local facility 6`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local7`,
																				Description: `Local facility 7`}},
																		ConstraintErrorMessage: []string{
																			`Invalid facility type`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`auth authpriv cron daemon kern lpr mail mark news protocols security syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 all`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Logging level`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(emerg|alert|crit|err|warning|notice|info|debug|all)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `emerg`,
																								Description: `Emergency messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `alert`,
																								Description: `Urgent messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `crit`,
																								Description: `Critical messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `err`,
																								Description: `Error messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `warning`,
																								Description: `Warning messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `notice`,
																								Description: `Messages for further investigation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `info`,
																								Description: `Informational messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `debug`,
																								Description: `Debug messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `all`,
																								Description: `Log everything`}},
																						ConstraintErrorMessage: []string{
																							`Invalid loglevel`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`emerg alert crit err warning notice info debug all`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Logging to a remote host`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Validator: []*interfacedefinition.Validator{
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `ip-address`,
																		ArgumentAttr: ``},
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `fqdn`,
																		ArgumentAttr: ``}}}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `ipv4`,
																Description: `Remote syslog server IPv4 address`},
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `hostname`,
																Description: `Remote syslog server FQDN`}},
														ConstraintErrorMessage: []string{
															`Invalid host (FQDN or IP address)`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Logging format`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Allows for the transmission of all characters inside a syslog message`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Facility for logging`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(auth|authpriv|cron|daemon|kern|lpr|mail|mark|news|protocols|security|syslog|user|uucp|local0|local1|local2|local3|local4|local5|local6|local7|all)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `all`,
																				Description: `All facilities excluding \'mark\'`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `auth`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `authpriv`,
																				Description: `Non-system authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cron`,
																				Description: `Cron daemon`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `daemon`,
																				Description: `System daemons`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `kern`,
																				Description: `Kernel`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lpr`,
																				Description: `Line printer spooler`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mail`,
																				Description: `Mail subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mark`,
																				Description: `Timestamp`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `news`,
																				Description: `USENET subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `protocols`,
																				Description: `depricated will be set to local7`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `security`,
																				Description: `depricated will be set to auth`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `syslog`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `user`,
																				Description: `Application processes`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `uucp`,
																				Description: `UUCP subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local0`,
																				Description: `Local facility 0`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local1`,
																				Description: `Local facility 1`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local2`,
																				Description: `Local facility 2`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local3`,
																				Description: `Local facility 3`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local4`,
																				Description: `Local facility 4`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local5`,
																				Description: `Local facility 5`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local6`,
																				Description: `Local facility 6`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local7`,
																				Description: `Local facility 7`}},
																		ConstraintErrorMessage: []string{
																			`Invalid facility type`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`auth authpriv cron daemon kern lpr mail mark news protocols security syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 all`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`syslog communication protocol`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(udp|tcp)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `udp`,
																								Description: `send log messages to remote syslog server over udp`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `tcp`,
																								Description: `send log messages to remote syslog server over tcp`}},
																						ConstraintErrorMessage: []string{
																							`invalid protocol name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`udp tcp`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Logging level`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(emerg|alert|crit|err|warning|notice|info|debug|all)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `emerg`,
																								Description: `Emergency messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `alert`,
																								Description: `Urgent messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `crit`,
																								Description: `Critical messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `err`,
																								Description: `Error messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `warning`,
																								Description: `Warning messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `notice`,
																								Description: `Messages for further investigation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `info`,
																								Description: `Informational messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `debug`,
																								Description: `Debug messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `all`,
																								Description: `Log everything`}},
																						ConstraintErrorMessage: []string{
																							`Invalid loglevel`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`emerg alert crit err warning notice info debug all`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Port number used by connection`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 1-65535`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:1-65535`,
																				Description: `Numeric IP port`}},
																		ConstraintErrorMessage: []string{
																			`Port number must be in range 1 to 65535`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Logging to a file`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`[a-zA-Z0-9\\-_.]{1,
255}`},
																Validator: []*interfacedefinition.Validator(nil)}},
														ConstraintErrorMessage: []string{
															`illegal characters in filename or filename longer than 255 characters`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Log file size and rotation characteristics`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Number of saved files (default is 5)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[0-9]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ConstraintErrorMessage: []string{
																							`illegal characters in number of files`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Size of log files (in kbytes,
 default is 256)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[0-9]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ConstraintErrorMessage: []string{
																							`illegal characters in size`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Facility for logging`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(auth|authpriv|cron|daemon|kern|lpr|mail|mark|news|protocols|security|syslog|user|uucp|local0|local1|local2|local3|local4|local5|local6|local7|all)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `all`,
																				Description: `All facilities excluding \'mark\'`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `auth`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `authpriv`,
																				Description: `Non-system authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cron`,
																				Description: `Cron daemon`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `daemon`,
																				Description: `System daemons`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `kern`,
																				Description: `Kernel`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lpr`,
																				Description: `Line printer spooler`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mail`,
																				Description: `Mail subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `mark`,
																				Description: `Timestamp`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `news`,
																				Description: `USENET subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `protocols`,
																				Description: `depricated will be set to local7`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `security`,
																				Description: `depricated will be set to auth`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `syslog`,
																				Description: `Authentication and authorization`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `user`,
																				Description: `Application processes`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `uucp`,
																				Description: `UUCP subsystem`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local0`,
																				Description: `Local facility 0`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local1`,
																				Description: `Local facility 1`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local2`,
																				Description: `Local facility 2`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local3`,
																				Description: `Local facility 3`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local4`,
																				Description: `Local facility 4`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local5`,
																				Description: `Local facility 5`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local6`,
																				Description: `Local facility 6`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `local7`,
																				Description: `Local facility 7`}},
																		ConstraintErrorMessage: []string{
																			`Invalid facility type`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`auth authpriv cron daemon kern lpr mail mark news protocols security syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 all`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Logging level`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(emerg|alert|crit|err|warning|notice|info|debug|all)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `emerg`,
																								Description: `Emergency messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `alert`,
																								Description: `Urgent messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `crit`,
																								Description: `Critical messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `err`,
																								Description: `Error messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `warning`,
																								Description: `Warning messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `notice`,
																								Description: `Messages for further investigation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `info`,
																								Description: `Informational messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `debug`,
																								Description: `Debug messages`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `all`,
																								Description: `Log everything`}},
																						ConstraintErrorMessage: []string{
																							`Invalid loglevel`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`emerg alert crit err warning notice info debug all`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
						LeafNode: []*interfacedefinition.LeafNode(nil)}}}}}
}
