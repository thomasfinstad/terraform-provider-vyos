// Code generated by /workspaces/terraform-provider-vyos/tools/build-resource-terraform-schemas/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/provider/vyos/schema/interfacedefinition"
)

func DnsDynamic() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: `interfaceDefinition`},
		Node: []*interfacedefinition.Node{
			{
				XMLName: xml.Name{
					Local: `node`},
				Children: []*interfacedefinition.Children{
					{
						XMLName: xml.Name{
							Local: `children`},
						Node: []*interfacedefinition.Node{
							{
								XMLName: xml.Name{
									Local: `node`},
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`Domain Name System related services`},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
								Children: []*interfacedefinition.Children{
									{
										XMLName: xml.Name{
											Local: `children`},
										Node: []*interfacedefinition.Node{
											{
												XMLName: xml.Name{
													Local: `node`},
												OwnerAttr: `${vyos_conf_scripts_dir}/dynamic_dns.py`,
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Dynamic DNS`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Interface to send DDNS updates for`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				Script: []string{
																					`${vyos_completion_dir}/list_interfaces`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Web check used for obtaining the external IP address`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Skip everything before this on the given URL`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`URL to obtain the current external IP address`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`RFC2136 Update name`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`File containing the secret key shared with remote DNS server`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `filename`,
																												Description: `File in /config/auth directory`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Record to be updated`},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Server to be updated`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`600`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Time To Live (default: 600)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-86400`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-86400`,
																												Description: `DNS forwarding cache size`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Zone to be updated`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Service being used for Dynamic DNS`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(custom|afraid|changeip|cloudflare|dnspark|dslreports|dyndns|easydns|namecheap|noip|sitelutions|zoneedit|\\w+)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Dynanmic DNS service with a custom name`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `afraid`,
																								Description: `afraid.org Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `changeip`,
																								Description: `changeip.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `cloudflare`,
																								Description: `cloudflare.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `dnspark`,
																								Description: `dnspark.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `dslreports`,
																								Description: `dslreports.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `dyndns`,
																								Description: `dyndns.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `easydns`,
																								Description: `easydns.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `namecheap`,
																								Description: `namecheap.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `noip`,
																								Description: `noip.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sitelutions`,
																								Description: `sitelutions.com Services`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `zoneedit`,
																								Description: `zoneedit.com Services`}},
																						ConstraintErrorMessage: []string{
																							`You can use only predefined list of services or word characters (_,
 a-z,
 A-Z,
 0-9) as service name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`afraid changeip cloudflare dnspark dslreports dyndns easydns namecheap noip sitelutions zoneedit`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Hostname registered with DDNS service`},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Login for DDNS service`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Password for DDNS service`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`ddclient protocol used for DDNS service`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(changeip|cloudflare|dnsmadeeasy|dnspark|dondominio|dslreports1|dtdns|duckdns|dyndns2|easydns|freedns|freemyip|googledomains|hammernode1|namecheap|nfsn|noip|sitelutions|woima|yandex|zoneedit1)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `changeip`,
																												Description: `ChangeIP protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `cloudflare`,
																												Description: `Cloudflare protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dnsmadeeasy`,
																												Description: `DNS Made Easy protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dnspark`,
																												Description: `DNS Park protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dondominio`,
																												Description: `DonDominio protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dslreports1`,
																												Description: `DslReports protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dtdns`,
																												Description: `DtDNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `duckdns`,
																												Description: `DuckDNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `dyndns2`,
																												Description: `DynDNS protocol v2`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `easydns`,
																												Description: `easyDNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `freedns`,
																												Description: `FreeDNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `freemyip`,
																												Description: `freemyip protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `googledomains`,
																												Description: `Google domains protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `hammernode1`,
																												Description: `Hammernode protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `namecheap`,
																												Description: `Namecheap protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `nfsn`,
																												Description: `NearlyFreeSpeech DNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `noip`,
																												Description: `No-IP protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `sitelutions`,
																												Description: `Sitelutions protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `woima`,
																												Description: `WOIMA protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `yandex`,
																												Description: `Yandex.DNS protocol`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `zoneedit1`,
																												Description: `Zoneedit protocol`}},
																										ConstraintErrorMessage: []string{
																											`Please choose from the list of allowed protocols`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`changeip cloudflare dnsmadeeasy dnspark dondominio dslreports1 dtdns duckdns dyndns2 easydns freedns freemyip googledomains hammernode1 namecheap nfsn noip sitelutions woima yandex zoneedit1`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Remote server to connect to`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Server IPv4 address`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `hostname`,
																												Description: `Server hostname/FQDN`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`DNS zone to update (only available with CloudFlare)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Allow explicit IPv6 addresses for Dynamic DNS for this interface`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
						LeafNode: []*interfacedefinition.LeafNode(nil)}}}}}
}
