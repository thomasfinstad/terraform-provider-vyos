// Code generated by /workspaces/terraform-provider-vyos/tools/build-resource-terraform-schemas/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/provider/vyos/schema/interfacedefinition"
)

func Vrf() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: `interfaceDefinition`},
		Node: []*interfacedefinition.Node{
			{
				XMLName: xml.Name{
					Local: `node`},
				OwnerAttr: `${vyos_conf_scripts_dir}/vrf.py`,
				Properties: []*interfacedefinition.Properties{
					{
						XMLName: xml.Name{
							Local: `properties`},
						Help: []string{
							`Virtual Routing and Forwarding`},
						Priority: []string{
							`299`},
						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
				Children: []*interfacedefinition.Children{
					{
						XMLName: xml.Name{
							Local: `children`},
						TagNode: []*interfacedefinition.TagNode{
							{
								XMLName: xml.Name{
									Local: `tagNode`},
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`Virtual Routing and Forwarding instance`},
										Constraint: []*interfacedefinition.Constraint{
											{
												XMLName: xml.Name{
													Local: `constraint`},
												Validator: []*interfacedefinition.Validator{
													{
														XMLName: xml.Name{
															Local: `validator`},
														NameAttr:     `vrf-name`,
														ArgumentAttr: ``}}}},
										ValueHelp: []*interfacedefinition.ValueHelp{
											{
												XMLName: xml.Name{
													Local: `valueHelp`},
												Format:      `txt`,
												Description: `VRF instance name`}},
										ConstraintErrorMessage: []string{
											`VRF instance name must be 15 characters or less and can not\\nbe named as regular network interfaces.\\nA name must starts from a letter.\\n`},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
								Children: []*interfacedefinition.Children{
									{
										XMLName: xml.Name{
											Local: `children`},
										Node: []*interfacedefinition.Node{
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`IPv4 routing parameters`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Disable IP forwarding on this interface`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`IPv6 routing parameters`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Disable IP forwarding on this interface`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Routing protocol parameters`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_bgp.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Border Gateway Protocol (BGP)`},
																		Priority: []string{
																			`821`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`BGP address-family parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`IPv4 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administrative distances for BGP routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														TagNode: []*interfacedefinition.TagNode{
																															{
																																XMLName: xml.Name{
																																	Local: `tagNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for a specific BGP prefix`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `ipv4-prefix`,
																																						ArgumentAttr: ``}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `ipv4net`,
																																				Description: `Administrative distance for a specific BGP prefix`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Administrative distance for prefix`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-255`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-255`,
																																								Description: `Administrative distance for external BGP routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `eBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `iBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Locally originated BGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Locally originated BGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Export routes from this address-family`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`to/from default instance VPN RIB`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import routes to this address-family`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`to/from default instance VPN RIB`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`VRF to import from`},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `VRF instance name`}},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`vrf name`},
																																				Script: []string(nil)}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Label value for VRF`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`For routes leaked from current address-family to VPN`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`(auto)`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-1048575`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `auto`,
																																								Description: `Automatically assign a label`},
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-1048575`,
																																								Description: `Label Value`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								List: []string{
																																									`auto`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Forward packets over multiple paths`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP maximum paths`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-256`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-256`,
																																				Description: `Number of paths to consider`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP maximum paths`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-256`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-256`,
																																				Description: `Number of paths to consider`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route distinguisher`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`For routes leaked from current address-family to VPN`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-distinguisher`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																								Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Route-map to filter route updates to/from this peer`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route target list`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target both import and export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target import`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute routes from other protocols into BGP`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute connected routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute IS-IS routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute kernel routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute OSPF routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute RIP routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute Babel routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute static routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute non-main Kernel Routing Table`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `BGP aggregate network`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP network`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `BGP network`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Network as a backdoor route`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Multicast IPv4 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administrative distances for BGP routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														TagNode: []*interfacedefinition.TagNode{
																															{
																																XMLName: xml.Name{
																																	Local: `tagNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for a specific BGP prefix`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `ipv4-prefix`,
																																						ArgumentAttr: ``}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `ipv4net`,
																																				Description: `Administrative distance for a specific BGP prefix`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Administrative distance for prefix`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-255`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-255`,
																																								Description: `Administrative distance for external BGP routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `eBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `iBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Locally originated BGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Locally originated BGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network/prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `BGP aggregate network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into multicast IPv4 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Multicast IPv4 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use BGP network/prefix as a backdoor route`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Labeled Unicast IPv4 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network/prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `BGP aggregate network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into labeled unicast IPv4 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Labeled Unicast IPv4 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use BGP network/prefix as a backdoor route`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Flowspec IPv4 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Apply local policy routing to interface`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Interface`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Script: []string{
																																					`${vyos_completion_dir}/list_interfaces`}}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Unicast VPN IPv4 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into unicast VPN IPv4 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Unicast VPN IPv4 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Distinguisher`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-distinguisher`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																				Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`MPLS label value assigned to route`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-1048575`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-1048575`,
																																				Description: `MPLS label value`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`IPv6 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administrative distances for BGP routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														TagNode: []*interfacedefinition.TagNode{
																															{
																																XMLName: xml.Name{
																																	Local: `tagNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for a specific BGP prefix`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `ipv6-prefix`,
																																						ArgumentAttr: ``}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `ipv6net`,
																																				Description: `Administrative distance for a specific BGP prefix`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Administrative distance for prefix`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-255`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-255`,
																																								Description: `Administrative distance for external BGP routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `eBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `iBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Locally originated BGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Locally originated BGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Export routes from this address-family`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`to/from default instance VPN RIB`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import routes to this address-family`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`to/from default instance VPN RIB`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`VRF to import from`},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `VRF instance name`}},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`vrf name`},
																																				Script: []string(nil)}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Label value for VRF`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`For routes leaked from current address-family to VPN`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`(auto)`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-1048575`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `auto`,
																																								Description: `Automatically assign a label`},
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-1048575`,
																																								Description: `Label Value`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								List: []string{
																																									`auto`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Forward packets over multiple paths`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP maximum paths`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-256`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-256`,
																																				Description: `Number of paths to consider`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP maximum paths`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-256`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-256`,
																																				Description: `Number of paths to consider`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route distinguisher`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`For routes leaked from current address-family to VPN`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-distinguisher`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																								Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Route-map to filter route updates to/from this peer`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route target list`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Between current address-family and VPN`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target both import and export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target import`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target-multi`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute routes from other protocols into BGP`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute connected routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute kernel routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute OSPFv3 routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute RIPng routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute Babel routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute static routes into BGP`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Metric for redistributed routes`},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-4294967295`,
																																								Description: `Metric for redistributed routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute non-main Kernel Routing Table`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Aggregate network`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP network`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Aggregate network`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`AS-path hopcount limit`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-255`,
																																				Description: `AS path hop count limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Multicast IPv6 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administrative distances for BGP routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														TagNode: []*interfacedefinition.TagNode{
																															{
																																XMLName: xml.Name{
																																	Local: `tagNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for a specific BGP prefix`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `ipv6-prefix`,
																																						ArgumentAttr: ``}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `ipv6net`,
																																				Description: `Administrative distance for a specific BGP prefix`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Administrative distance for prefix`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-255`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-255`,
																																								Description: `Administrative distance for external BGP routes`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`eBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `eBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`iBGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `iBGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Locally originated BGP routes administrative distance`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Locally originated BGP routes administrative distance`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network/prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `BGP aggregate network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into multicast IPv6 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Multicast IPv6 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`AS-path hopcount limit`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-255`,
																																				Description: `AS path hop count limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Labeled Unicast IPv6 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP aggregate network/prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `BGP aggregate network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Generate AS-set path information for this aggregate address`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Announce the aggregate summary network only`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into labeled unicast IPv6 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Labeled Unicast IPv6 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use BGP network/prefix as a backdoor route`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify route-map name to use`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Flowspec IPv6 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Apply local policy routing to interface`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Interface`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Script: []string{
																																					`${vyos_completion_dir}/list_interfaces`}}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Unicast VPN IPv6 BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Import BGP network/prefix into unicast VPN IPv6 RIB`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Unicast VPN IPv6 BGP network/prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Distinguisher`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-distinguisher`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																				Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`MPLS label value assigned to route`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-1048575`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-1048575`,
																																				Description: `MPLS label value`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`L2VPN EVPN BGP settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise prefix routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4 address family`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4 address family`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						LeafNode: []*interfacedefinition.LeafNode{
																																							{
																																								XMLName: xml.Name{
																																									Local: `leafNode`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Specify route-map name to use`},
																																										Constraint: []*interfacedefinition.Constraint{
																																											{
																																												XMLName: xml.Name{
																																													Local: `constraint`},
																																												Regex: []string{
																																													`[-_a-zA-Z0-9.]+`},
																																												Validator: []*interfacedefinition.Validator(nil)}},
																																										ValueHelp: []*interfacedefinition.ValueHelp{
																																											{
																																												XMLName: xml.Name{
																																													Local: `valueHelp`},
																																												Format:      `txt`,
																																												Description: `Route map name`}},
																																										ConstraintErrorMessage: []string{
																																											`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																																											{
																																												XMLName: xml.Name{
																																													Local: `completionHelp`},
																																												Path: []string{
																																													`policy route-map`},
																																												Script: []string(nil)}},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv6 address family`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4 address family`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						LeafNode: []*interfacedefinition.LeafNode{
																																							{
																																								XMLName: xml.Name{
																																									Local: `leafNode`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Specify route-map name to use`},
																																										Constraint: []*interfacedefinition.Constraint{
																																											{
																																												XMLName: xml.Name{
																																													Local: `constraint`},
																																												Regex: []string{
																																													`[-_a-zA-Z0-9.]+`},
																																												Validator: []*interfacedefinition.Validator(nil)}},
																																										ValueHelp: []*interfacedefinition.ValueHelp{
																																											{
																																												XMLName: xml.Name{
																																													Local: `valueHelp`},
																																												Format:      `txt`,
																																												Description: `Route map name`}},
																																										ConstraintErrorMessage: []string{
																																											`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																																											{
																																												XMLName: xml.Name{
																																													Local: `completionHelp`},
																																												Path: []string{
																																													`policy route-map`},
																																												Script: []string(nil)}},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Route Target`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Target both import and export`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-target`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Target import`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-target`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Target export`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-target`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																		Multi: []*interfacedefinition.Multi{
																																			{
																																				XMLName: xml.Name{
																																					Local: `multi`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify handling for BUM packets`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not flood any BUM packets`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Flood BUM packets using head-end replication`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`VXLAN Network Identifier`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-16777215`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-16777215`,
																																Description: `VNI number`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Target`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target both import and export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						Multi: []*interfacedefinition.Multi{
																																							{
																																								XMLName: xml.Name{
																																									Local: `multi`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target import`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						Multi: []*interfacedefinition.Multi{
																																							{
																																								XMLName: xml.Name{
																																									Local: `multi`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route Target export`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `bgp-rd-rt`,
																																										ArgumentAttr: `--route-target`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)`}},
																																						Multi: []*interfacedefinition.Multi{
																																							{
																																								XMLName: xml.Name{
																																									Local: `multi`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise All default g/w mac-ip routes in EVPN`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise svi mac-ip routes in EVPN`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route Distinguisher`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `bgp-rd-rt`,
																																						ArgumentAttr: `--route-distinguisher`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																				Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise All local VNIs`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise All default g/w mac-ip routes in EVPN`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise svi mac-ip routes in EVPN`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Route Distinguisher`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `bgp-rd-rt`,
																																		ArgumentAttr: `--route-distinguisher`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format: `ASN:NN_OR_IP-ADDRESS:NN`,
																																Description: `Route Distinguisher,
 (x.x.x.x:yyy|xxxx:yyyy)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`EVPN system primary IP`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-address`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4`,
																																Description: `IP address`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Auto derivation of Route Target (RFC8365)`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Listen for and accept BGP dynamic neighbors from range`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP dynamic neighbors listen range`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `IPv4 dynamic neighbors listen range`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6net`,
																												Description: `IPv6 dynamic neighbors listen range`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Peer group for this peer`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Peer-group name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bgp peer-group`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Maximum number of dynamic neighbors that can be created`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-5000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-5000`,
																												Description: `BGP neighbor limit`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`BGP parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Default bestpath selection mechanism`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`AS-path attribute comparison parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Compare AS-path lengths including confederation sets and sequences`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Ignore AS-path length in selecting a route`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Allow load sharing across routes that have different AS paths (but same length)`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MED attribute comparison parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Compare MEDs among confederation paths`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Treat missing route as a MED as the least preferred one`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Peer type`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Allow load sharing across routes learned from different peer types`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Link Bandwidth attribute`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(default-weight-for-missing|ignore|skip-missing)`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `default-weight-for-missing`,
																																Description: `Assign low default weight (1) to paths not having link bandwidth`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format: `ignore`,
																																Description: `Ignore link bandwidth (do regular ECMP,
 not weighted)`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `skip-missing`,
																																Description: `Ignore paths without link bandwidth for ECMP (if other paths have it)`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`default-weight-for-missing ignore skip-missing`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Compare the router-id for identical EBGP paths`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`AS confederation parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Confederation AS identifier`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967294`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967294`,
																																Description: `Confederation AS id`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Peer ASs in the BGP confederation`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967294`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967294`,
																																Description: `Peer AS number`}},
																														Multi: []*interfacedefinition.Multi{
																															{
																																XMLName: xml.Name{
																																	Local: `multi`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Conditional advertisement settings`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`60`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Set period to rescan BGP table to check if condition is met`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 5-240`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:5-240`,
																																Description: `Period to rerun the conditional advertisement scanner process`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable route-flap dampening`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Half-life time for dampening`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-45`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-45`,
																																Description: `Half-life penalty in minutes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Maximum duration to suppress a stable route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Maximum suppress duration in minutes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Threshold to start reusing a route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-20000`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-20000`,
																																Description: `Re-use penalty points`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`When to start suppressing a route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-20000`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-20000`,
																																Description: `Start-suppress penalty points`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP defaults`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Default local preference`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-4294967295`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32`,
																																Description: `Local preference`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administratives distances for BGP routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Global administratives distances for BGP routes`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for external BGP routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Administrative distance for external BGP routes`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for internal BGP routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Administrative distance for internal BGP routes`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for local BGP routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Administrative distance for internal BGP routes`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administrative distance for a specific BGP prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Administrative distance for a specific BGP prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Administrative distance for prefix`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `Administrative distance for external BGP routes`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Graceful restart capability parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Maximum time to hold onto restarting neighbors stale paths`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-3600`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-3600`,
																																Description: `Hold time in seconds`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Always compare MEDs from different neighbors`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Route-reflector cluster-id`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Route-reflector cluster-id`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Compare MEDs between different peers in the same AS`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Require in and out policy for eBGP peers (RFC8212)`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Teardown sessions immediately whenever peer becomes unreachable`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Graceful shutdown`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Log neighbor up/down changes and reset reason`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP minimum holdtime`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Minimum holdtime in seconds`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable IGP route check for network statements`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Route reflector client allow policy outbound`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable client to client route reflection`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable immediate session reset on peer link down event`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable suppress duplicate updates if the route actually not changed`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Reject routes with AS_SET or AS_CONFED_SET flag`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administrative shutdown of the BGP instance`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Advertise only routes that are programmed in kernel to peers`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Override default router identifier`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Router-ID in IP address format`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`BGP protocol timers`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP hold timer for this neighbor`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Hold timer in seconds`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `0`,
																												Description: `Hold timer disabled`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP keepalive interval for this neighbor`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Keepalive interval in seconds`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`BGP neighbor`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `BGP neighbor IP address`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `BGP neighbor IPv6 address`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Interface name`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Address-family parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv4)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv6)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Nexthop attributes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Leave link-local nexthop unchanged for this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 Labeled Unicast BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv4)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 Labeled Unicast BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv6)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Nexthop attributes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Leave link-local nexthop unchanged for this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 VPN BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 VPN BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Nexthop attributes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Leave link-local nexthop unchanged for this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 Flow Specification BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 Flow Specification BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 Multicast BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv4)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 Multicast BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Nexthop attributes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Leave link-local nexthop unchanged for this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`L2VPN EVPN BGP settings`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable Bidirectional Forwarding Detection (BFD) support`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Use settings from BFD profile`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `BFD profile name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bfd profile`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Advertise capabilities to this peer-group`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise dynamic capability to this neighbor`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise extended-nexthop capability to this neighbor`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interface parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Enable BGP with v6 link-local only`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer group for this peer`},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Peer-group name`}},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`protocols bgp peer-group`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Neighbor BGP AS number`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`(external|internal)`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967294`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967294`,
																																				Description: `Neighbor AS number`},
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `external`,
																																				Description: `Any AS different from the local AS`},
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `internal`,
																																				Description: `Neighbor AS number`}},
																																		ConstraintErrorMessage: []string{
																																			`Invalid AS number`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				List: []string{
																																					`external internal`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Peer group for this peer`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Peer-group name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bgp peer-group`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Neighbor BGP AS number`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(external|internal)`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967294`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967294`,
																																Description: `Neighbor AS number`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `external`,
																																Description: `Any AS different from the local AS`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `internal`,
																																Description: `Neighbor AS number`}},
																														ConstraintErrorMessage: []string{
																															`Invalid AS number`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`external internal`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Interface used to establish connection`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `interface`,
																																Description: `Interface name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Script: []string{
																																	`${vyos_completion_dir}/list_interfaces`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Neighbor timers`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP connect timer for this neighbor`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Connect timer in seconds`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `0`,
																																Description: `Disable connect timer`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP hold timer for this neighbor`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Hold timer in seconds`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `0`,
																																Description: `Hold timer disabled`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`BGP keepalive interval for this neighbor`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Keepalive interval in seconds`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Ttl security mechanism`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Number of the maximum number of hops to the BGP peer`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-254`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-254`,
																																Description: `Number of hops`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Specify alternate ASN for this BGP process`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967294`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967294`,
																												Description: `Autonomous System Number (ASN)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable prepending local-as from/to updates for eBGP peers`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prepend only local-as from/to updates for eBGP peers`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local role for BGP neighbor (RFC9234)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(provider|rs-server|rs-client|customer|peer)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `customer`,
																												Description: `Using Transit`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `peer`,
																												Description: `Public/Private Peering`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `provider`,
																												Description: `Providing Transit`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rs-client`,
																												Description: `RS Client`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rs-server`,
																												Description: `Route Server`}},
																										ConstraintErrorMessage: []string{
																											`BGP local-role must be one of the following: customer,
 peer,
 provider,
 rs-client or rs-server`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`customer peer provider rs-client rs-server`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Neighbor must send this exact capability,
 otherwise a role missmatch notification will be sent`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Minimum interval for sending routing updates`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-600`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-600`,
																												Description: `Advertisement interval in seconds`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Description`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`[[:ascii:]]{0,
256}`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Description`}},
																										ConstraintErrorMessage: []string{
																											`Description too long (limit 256 characters)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable capability negotiation with this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable check to see if eBGP peer address is a connected route`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Allow this EBGP neighbor to not be on a directly connected network`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-255`,
																												Description: `Number of hops`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP graceful restart functionality`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(enable|disable|restart-helper)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `enable`,
																												Description: `Enable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `disable`,
																												Description: `Disable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `restart-helper`,
																												Description: `Enable BGP graceful restart helper only functionality`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`enable disable restart-helper`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Ignore capability negotiation with specified neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Do not initiate a session with this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP MD5 password`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Peer group for this peer`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Peer-group name`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`protocols bgp peer-group`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Neighbor BGP port`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Neighbor BGP port number`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Neighbor BGP AS number`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(external|internal)`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967294`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967294`,
																												Description: `Neighbor AS number`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `external`,
																												Description: `Any AS different from the local AS`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `internal`,
																												Description: `Neighbor AS number`}},
																										ConstraintErrorMessage: []string{
																											`Invalid AS number`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`external internal`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administratively shutdown this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Do not send back prefixes learned from the neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable strict capability negotiation`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Source IP of routing updates`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-address`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 address of route source`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6`,
																												Description: `IPv6 address of route source`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Interface as route source`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_local_ips.sh --both`,
																													`${vyos_completion_dir}/list_interfaces`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Name of peer-group`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Address-family parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv4 BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv4)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`IPv4-Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`IPv4-Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv4 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`IPv6 BGP neighbor parameters`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Advertise capabilities to this neighbor (IPv6)`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		Node: []*interfacedefinition.Node{
																																			{
																																				XMLName: xml.Name{
																																					Local: `node`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise ORF capability to this peer`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						Node: []*interfacedefinition.Node{
																																							{
																																								XMLName: xml.Name{
																																									Local: `node`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`Advertise prefix-list ORF capability to this peer`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																								Children: []*interfacedefinition.Children{
																																									{
																																										XMLName: xml.Name{
																																											Local: `children`},
																																										LeafNode: []*interfacedefinition.LeafNode{
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to receive the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																											{
																																												XMLName: xml.Name{
																																													Local: `leafNode`},
																																												Properties: []*interfacedefinition.Properties{
																																													{
																																														XMLName: xml.Name{
																																															Local: `properties`},
																																														Help: []string{
																																															`Capability to send the ORF`},
																																														Valueless: []*interfacedefinition.Valueless{
																																															{
																																																XMLName: xml.Name{
																																																	Local: `valueless`}}},
																																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Nexthop attributes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Leave link-local nexthop unchanged for this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prefix-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter outgoing route updates to this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Prefix-list to filter incoming route updates from this peer`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Name of IPv6 prefix-list`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of prefix-list6 can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy prefix-list6`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use route-map to conditionally advertise routes`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to conditionally advertise routes`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in exist-map are installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Advertise routes only if prefixes in non-exist-map are not installed in BGP table`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable sending community attributes to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending extended community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Disable sending standard community attributes to this peer`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Access-list to filter route updates to/from this peer-group`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter outgoing route updates to this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter outgoing route updates to this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Access-list to filter incoming route updates from this peer-group`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-65535`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-65535`,
																																								Description: `Access-list to filter incoming route updates from this peer-group`}},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy access-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`as-path-list to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter outgoing route updates to this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`As-path-list to filter incoming route updates from this peer`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy as-path-list`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate default route to this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise all paths to a neighbor`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Use addpath to advertise the bestpath per each neighboring AS`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Override ASN in outbound updates to configured neighbor local-as`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to accept from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum number of prefixes to be sent to this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-4294967295`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-4294967295`,
																																				Description: `Prefix limit`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Remove private AS numbers from AS path in outbound route updates`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to selectively unsuppress suppressed routes`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[-_a-zA-Z0-9.]+`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Route map name`}},
																																		ConstraintErrorMessage: []string{
																																			`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				Path: []string{
																																					`policy route-map`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Default weight for routes from this peer`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-65535`,
																																				Description: `Default weight`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`L2VPN EVPN BGP settings`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Accept route that contains the local-as in the as-path`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Number of occurrences of AS number`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-10`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-10`,
																																								Description: `Number of times AS is allowed in path`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`BGP attributes are sent unchanged`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send AS path unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send multi-exit discriminator unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Send nexthop unchanged`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable the next hop calculation for this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set the next hop to self for reflected routes`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Route-map to filter route updates to/from this peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter outgoing route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Route-map to filter incoming route updates`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Soft reconfiguration for peer`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Enable inbound soft reconfiguration`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route reflector client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Peer is a route server client`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable Bidirectional Forwarding Detection (BFD) support`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Use settings from BFD profile`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `BFD profile name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bfd profile`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Advertise capabilities to this peer-group`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise dynamic capability to this neighbor`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise extended-nexthop capability to this neighbor`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Ttl security mechanism`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Number of the maximum number of hops to the BGP peer`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-254`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-254`,
																																Description: `Number of hops`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Specify alternate ASN for this BGP process`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967294`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967294`,
																												Description: `Autonomous System Number (ASN)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable prepending local-as from/to updates for eBGP peers`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Prepend only local-as from/to updates for eBGP peers`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local role for BGP neighbor (RFC9234)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(provider|rs-server|rs-client|customer|peer)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `customer`,
																												Description: `Using Transit`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `peer`,
																												Description: `Public/Private Peering`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `provider`,
																												Description: `Providing Transit`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rs-client`,
																												Description: `RS Client`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rs-server`,
																												Description: `Route Server`}},
																										ConstraintErrorMessage: []string{
																											`BGP local-role must be one of the following: customer,
 peer,
 provider,
 rs-client or rs-server`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`customer peer provider rs-client rs-server`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Neighbor must send this exact capability,
 otherwise a role missmatch notification will be sent`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Description`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`[[:ascii:]]{0,
256}`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Description`}},
																										ConstraintErrorMessage: []string{
																											`Description too long (limit 256 characters)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable capability negotiation with this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable check to see if eBGP peer address is a connected route`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Allow this EBGP neighbor to not be on a directly connected network`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-255`,
																												Description: `Number of hops`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP graceful restart functionality`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(enable|disable|restart-helper)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `enable`,
																												Description: `Enable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `disable`,
																												Description: `Disable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `restart-helper`,
																												Description: `Enable BGP graceful restart helper only functionality`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`enable disable restart-helper`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP graceful restart functionality`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(enable|disable|restart-helper)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `enable`,
																												Description: `Enable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `disable`,
																												Description: `Disable BGP graceful restart at peer level`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `restart-helper`,
																												Description: `Enable BGP graceful restart helper only functionality`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`enable disable restart-helper`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Ignore capability negotiation with specified neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Do not initiate a session with this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`BGP MD5 password`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Neighbor BGP AS number`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(external|internal)`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967294`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967294`,
																												Description: `Neighbor AS number`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `external`,
																												Description: `Any AS different from the local AS`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `internal`,
																												Description: `Neighbor AS number`}},
																										ConstraintErrorMessage: []string{
																											`Invalid AS number`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`external internal`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administratively shutdown this neighbor`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Source IP of routing updates`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-address`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 address of route source`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6`,
																												Description: `IPv6 address of route source`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Interface as route source`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_local_ips.sh --both`,
																													`${vyos_completion_dir}/list_interfaces`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Autonomous System Number (ASN)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-4294967294`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-4294967294`,
																								Description: `Autonomous System Number`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify route-map name to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Route map name`}},
																						ConstraintErrorMessage: []string{
																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy route-map`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_eigrp.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Enhanced Interior Gateway Routing Protocol (EIGRP)`},
																		Priority: []string{
																			`821`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Modify metrics and parameters for advertisement`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Modify metric coefficients`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-255`,
																												Description: `K1`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Autonomous System Number (ASN)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-65535`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-65535`,
																								Description: `Autonomous System Number`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Forward packets over multiple paths`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-32`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-32`,
																								Description: `Number of paths`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Enable routing on an IP network`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ip-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4net`,
																								Description: `EIGRP network prefix`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Suppress routing updates on an interface`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Redistribute information from another routing protocol`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bgp|connected|nhrp|ospf|rip|babel|static|vnc)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `bgp`,
																								Description: `Border Gateway Protocol (BGP)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `connected`,
																								Description: `Connected routes`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `nhrp`,
																								Description: `Next Hop Resolution Protocol (NHRP)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ospf`,
																								Description: `Open Shortest Path First (OSPFv2)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `rip`,
																								Description: `Routing Information Protocol (RIP)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `babel`,
																								Description: `Babel routing protocol (Babel)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `static`,
																								Description: `Statically configured routes`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `vnc`,
																								Description: `Virtual Network Control (VNC)`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`bgp connected nhrp ospf rip static vnc`},
																								Script: []string(nil)}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify route-map name to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Route map name`}},
																						ConstraintErrorMessage: []string{
																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy route-map`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Override default router identifier`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Router-ID in IP address format`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Control load balancing variance`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-128`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-128`,
																								Description: `Metric variance multiplier`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_isis.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Intermediate System to Intermediate System (IS-IS)`},
																		Priority: []string{
																			`611`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Configure the authentication password for an area`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Plain-text authentication type`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Circuit password`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`MD5 authentication type`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Level-wide password`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Control distribution of default information`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Distribute a default route`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distribute default route for IPv4`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Distribute default route into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Always advertise default route`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Distribute default route into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Always advertise default route`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distribute default route for IPv6`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Distribute default route into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Always advertise default route`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Distribute default route into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Always advertise default route`},
																																						Valueless: []*interfacedefinition.Valueless{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueless`}}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Set the authentication password for a routing domain`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Plain-text authentication type`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Circuit password`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`MD5 authentication type`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Level-wide password`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Show IS-IS neighbor adjacencies`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable MPLS traffic engineering extensions`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`MPLS traffic engineering router ID`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 address`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Segment-Routing (SPRING) settings`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Segment Routing Global Block label range`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label lower bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value (recommended minimum value: 300)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label upper bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Segment Routing Local Block label range`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label lower bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value (recommended minimum value: 300)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label upper bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Static IPv4/IPv6 prefix segment/label mapping`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `IPv4 prefix segment`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6net`,
																												Description: `IPv6 prefix segment`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify the absolute value of prefix segment/label ID`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify the absolute value of prefix segment/label ID`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 16-1048575`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:16-1048575`,
																																				Description: `The absolute segment/label ID value`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Request upstream neighbor to replace segment/label with explicit null label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not request penultimate hop popping for segment/label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify the index value of prefix segment/label ID`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify the index value of prefix segment/label ID`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-65535`,
																																				Description: `The index segment/label ID value`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Request upstream neighbor to replace segment/label with explicit null label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not request penultimate hop popping for segment/label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Maximum MPLS labels allowed for this router`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-16`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-16`,
																												Description: `MPLS label depth`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Redistribute information from another routing protocol`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute IPv4 routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Border Gateway Protocol (BGP)`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute connected routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute kernel routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute OSPF routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute RIP routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute Babel routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute static routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute IPv6 routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute BGP routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute connected routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute kernel routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute OSPFv3 routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute RIPng routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute Babel routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Redistribute static routes into IS-IS`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-1`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Redistribute into level-2`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Set default metric for circuit`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 0-16777215`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:0-16777215`,
																																								Description: `Default metric value`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`Specify route-map name to use`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[-_a-zA-Z0-9.]+`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `Route map name`}},
																																						ConstraintErrorMessage: []string{
																																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `completionHelp`},
																																								Path: []string{
																																									`policy route-map`},
																																								Script: []string(nil)}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IETF SPF delay algorithm`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Delay used while in QUIET state`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-60000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-60000`,
																												Description: `Delay used while in QUIET state (in ms)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Delay used while in SHORT_WAIT state`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-60000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-60000`,
																												Description: `Delay used while in SHORT_WAIT state (in ms)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Delay used while in LONG_WAIT`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-60000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-60000`,
																												Description: `Delay used while in LONG_WAIT state in ms`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Time with no received IGP events before considering IGP stable`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-60000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-60000`,
																												Description: `Time with no received IGP events before considering IGP stable in ms`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Maximum duration needed to learn all the events related to a single failure`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-60000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-60000`,
																												Description: `Maximum duration needed to learn all the events related to a single failure in ms`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Interface params`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable Bidirectional Forwarding Detection (BFD)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Use settings from BFD profile`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `BFD profile name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bfd profile`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set network type`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`point-to-point network type`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Configure the authentication password for a circuit`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Plain-text authentication type`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Circuit password`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MD5 authentication type`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Level-wide password`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Configure circuit type for interface`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(level-1|level-1-2|level-2-only)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `level-1`,
																												Description: `Level-1 only adjacencies are formed`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `level-1-2`,
																												Description: `Level-1-2 adjacencies are formed`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `level-2-only`,
																												Description: `Level-2 only adjacencies are formed`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`level-1 level-1-2 level-2-only`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Add padding to IS-IS hello packets`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set Hello interval`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-600`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-600`,
																												Description: `Set Hello interval`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set Hello interval`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 2-100`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:2-100`,
																												Description: `Set multiplier for Hello holding time`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set default metric for circuit`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-16777215`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-16777215`,
																												Description: `Default metric value`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Configure passive mode for interface`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set priority for Designated Router election`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-127`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-127`,
																												Description: `Priority value`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set PSNP interval`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-127`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-127`,
																												Description: `PSNP interval in seconds`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable three-way handshake`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Dynamic hostname for IS-IS`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IS-IS level number`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(level-1|level-1-2|level-2)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `level-1`,
																								Description: `Act as a station router`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `level-1-2`,
																								Description: `Act as both a station and an area router`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `level-2`,
																								Description: `Act as an area router`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`level-1 level-1-2 level-2`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Log adjacency state changes`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Minimum interval between regenerating same LSP`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-120`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-120`,
																								Description: `Minimum interval in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`1497`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Configure the maximum size of generated LSPs`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 128-4352`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:128-4352`,
																								Description: `Maximum size of generated LSPs`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`LSP refresh interval`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-65235`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-65235`,
																								Description: `LSP refresh interval in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Maximum LSP lifetime`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-65535`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:350-65535`,
																								Description: `LSP lifetime in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Use old-style (ISO 10589) or new-style packet formats`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(narrow|transition|wide)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `narrow`,
																								Description: `Use old style of TLVs with narrow metric`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `transition`,
																								Description: `Send and accept both styles of TLVs during transition`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `wide`,
																								Description: `Use new style of TLVs to carry wider metric`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`narrow transition wide`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`A Network Entity Title for this process (ISO only)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,
9}\\.[a-fA-F0-9]{2}`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `XX.XXXX. ... .XXX.XX`,
																								Description: `Network entity title (NET)`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Use the RFC 6232 purge-originator`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Set attached bit to identify as L1/L2 router for inter-area traffic`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Set overload bit to avoid any transit traffic`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Minimum interval between SPF calculations`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-120`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-120`,
																								Description: `Interval in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify route-map name to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Route map name`}},
																						ConstraintErrorMessage: []string{
																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy route-map`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_ospf.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Open Shortest Path First (OSPF)`},
																		Priority: []string{
																			`621`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Calculate interface cost according to bandwidth`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`100`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Reference bandwidth method to assign cost`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967`,
																												Description: `Reference bandwidth cost in Mbits/sec`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Default route advertisment settings`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Distribute a default route`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Always advertise a default route`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Administrative distance`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPF administrative distance`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for external routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for external routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for inter-area routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for inter-area routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for intra-area routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for intra-area routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administrative distance`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-255`,
																												Description: `Administrative distance`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Log adjacency state changes`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Log all state changes`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`OSPF maximum and infinite-distance metric`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Advertise own Router-LSA with infinite distance (stub router)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Administratively apply,
 for an indefinite period`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise stub-router prior to full shutdown of OSPF`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 5-100`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:5-100`,
																																Description: `Time (seconds) to advertise self as stub-router`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Automatically advertise stub Router-LSA on startup of OSPF`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 5-86400`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:5-86400`,
																																Description: `Time (seconds) to advertise self as stub-router`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`MultiProtocol Label Switching-Traffic Engineering (MPLS-TE) parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable MPLS-TE functionality`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`0.0.0.0`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Stable IP address of the advertising router`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Stable IP address of the advertising router`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`OSPF specific parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`cisco`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPF ABR type`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(cisco|ibm|shortcut|standard)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `cisco`,
																												Description: `Cisco ABR type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ibm`,
																												Description: `IBM ABR type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `shortcut`,
																												Description: `Shortcut ABR type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `standard`,
																												Description: `Standard ABR type`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`cisco ibm shortcut standard`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable the Opaque-LSA capability (rfc2370)`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable RFC1583 criteria for handling AS external routes`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Override default router identifier`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Router-ID in IP address format`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Segment-Routing (SPRING) settings`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Segment Routing Global Block label range`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label lower bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value (recommended minimum value: 300)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label upper bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Segment Routing Local Block label range`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label lower bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value (recommended minimum value: 300)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MPLS label upper bound`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 16-1048575`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:16-1048575`,
																																Description: `Label value`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Static IPv4 prefix segment/label mapping`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `IPv4 prefix segment`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify the index value of prefix segment/label ID`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Specify the index value of prefix segment/label ID`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-65535`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-65535`,
																																				Description: `The index segment/label ID value`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Request upstream neighbor to replace segment/label with explicit null label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not request penultimate hop popping for segment/label`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Maximum MPLS labels allowed for this router`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-16`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-16`,
																												Description: `MPLS label depth`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Redistribute information from another routing protocol`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute BGP routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute connected routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute IS-IS routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute Kernel routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute RIP routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute Babel routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute statically configured routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute non-main Kernel Routing Table`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-200`,
																												Description: `Policy route table number`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`protocols static table`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Adjust refresh parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Refresh timer`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 10-1800`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:10-1800`,
																												Description: `Timer value in seconds`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Adjust routing timers`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Throttling adaptive timers`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF SPF timers`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																DefaultValue: []string{
																																	`200`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Delay from the first change received to SPF calculation`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-600000`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-600000`,
																																				Description: `Delay in milliseconds`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																DefaultValue: []string{
																																	`1000`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Initial hold time between consecutive SPF calculations`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-600000`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-600000`,
																																				Description: `Initial hold time in milliseconds`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																DefaultValue: []string{
																																	`10000`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Maximum hold time`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-600000`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-600000`,
																																				Description: `Max hold time in milliseconds`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Access list to filter networks in routing updates`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-4294967295`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `Access-list number`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy access-list`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Filter for outgoing routing update`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bgp|connected|isis|kernel|rip|static)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `bgp`,
																												Description: `Filter BGP routes`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `connected`,
																												Description: `Filter connected routes`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `isis`,
																												Description: `Filter IS-IS routes`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `kernel`,
																												Description: `Filter Kernel routes`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rip`,
																												Description: `Filter RIP routes`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `static`,
																												Description: `Filter static routes`}},
																										ConstraintErrorMessage: []string{
																											`Must be bgp,
 connected,
 kernel,
 rip,
 or static`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`bgp connected kernel rip static`},
																												Script: []string(nil)}},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`OSPF area settings`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-4294967295`},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ip-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `OSPF area number in decimal notation`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `OSPF area number in dotted decimal notation`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Area type`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Not-So-Stubby OSPF area`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Summary-default cost of an NSSA area`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-16777215`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-16777215`,
																																				Description: `Summary default cost`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not inject inter-area routes into stub`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																DefaultValue: []string{
																																	`candidate`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Configure NSSA-ABR`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`(always|candidate|never)`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `always`,
																																				Description: `Always translate LSA types`},
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `candidate`,
																																				Description: `Translate for election`},
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `never`,
																																				Description: `Never translate LSA types`}},
																																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `completionHelp`},
																																				List: []string{
																																					`always candidate never`},
																																				Script: []string(nil)}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Stub OSPF area`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Summary-default cost`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 0-16777215`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:0-16777215`,
																																				Description: `Summary default cost`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not inject inter-area routes into the stub`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Normal OSPF area`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Summarize routes matching a prefix (border routers only)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `Area range prefix`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Metric for this range`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777215`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777215`,
																																Description: `Metric for this range`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Do not advertise this range`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise area range as another prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Advertise area range as another prefix`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Virtual link`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-4294967295`},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ip-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `OSPF area in dotted decimal notation`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Authentication`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														Node: []*interfacedefinition.Node{
																															{
																																XMLName: xml.Name{
																																	Local: `node`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`MD5 key id`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		TagNode: []*interfacedefinition.TagNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `tagNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`MD5 key id`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Validator: []*interfacedefinition.Validator{
																																									{
																																										XMLName: xml.Name{
																																											Local: `validator`},
																																										NameAttr:     `numeric`,
																																										ArgumentAttr: `--range 1-255`}}}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `u32:1-255`,
																																								Description: `MD5 key id`}},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																				Children: []*interfacedefinition.Children{
																																					{
																																						XMLName: xml.Name{
																																							Local: `children`},
																																						LeafNode: []*interfacedefinition.LeafNode{
																																							{
																																								XMLName: xml.Name{
																																									Local: `leafNode`},
																																								Properties: []*interfacedefinition.Properties{
																																									{
																																										XMLName: xml.Name{
																																											Local: `properties`},
																																										Help: []string{
																																											`MD5 authentication type`},
																																										Constraint: []*interfacedefinition.Constraint{
																																											{
																																												XMLName: xml.Name{
																																													Local: `constraint`},
																																												Regex: []string{
																																													`[^[:space:]]{1,
16}`},
																																												Validator: []*interfacedefinition.Validator(nil)}},
																																										ValueHelp: []*interfacedefinition.ValueHelp{
																																											{
																																												XMLName: xml.Name{
																																													Local: `valueHelp`},
																																												Format:      `txt`,
																																												Description: `MD5 Key (16 characters or less)`}},
																																										ConstraintErrorMessage: []string{
																																											`Password must be 16 characters or less`},
																																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																																		LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Plain text password`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Regex: []string{
																																					`[^[:space:]]{1,
8}`},
																																				Validator: []*interfacedefinition.Validator(nil)}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `txt`,
																																				Description: `Plain text password (8 characters or less)`}},
																																		ConstraintErrorMessage: []string{
																																			`Password must be 8 characters or less`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`40`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Interval after which a neighbor is declared dead`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Neighbor dead interval (seconds)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`10`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Interval between hello packets`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Hello interval (seconds)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`5`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Interval between retransmitting lost link state advertisements`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Retransmit interval (seconds)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`1`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Link state transmit delay`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Link state transmit delay (seconds)`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPF area authentication type`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(plaintext-password|md5)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `plaintext-password`,
																												Description: `Use plain-text authentication`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `md5`,
																												Description: `Use MD5 authentication`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`plaintext-password md5`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPF network`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `OSPF network`}},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Area shortcut mode`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(default|disable|enable)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `default`,
																												Description: `Set default`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `disable`,
																												Description: `Disable shortcutting mode`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `enable`,
																												Description: `Enable shortcutting mode`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`default disable enable`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set the filter for networks announced to other areas`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-4294967295`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32`,
																												Description: `Access-list number`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`policy access-list`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Set the filter for networks from other areas announced`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-4294967295`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32`,
																												Description: `Access-list number`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`policy access-list`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Interface configuration`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Interface name`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Authentication`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`MD5 key id`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														TagNode: []*interfacedefinition.TagNode{
																															{
																																XMLName: xml.Name{
																																	Local: `tagNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`MD5 key id`},
																																		Constraint: []*interfacedefinition.Constraint{
																																			{
																																				XMLName: xml.Name{
																																					Local: `constraint`},
																																				Validator: []*interfacedefinition.Validator{
																																					{
																																						XMLName: xml.Name{
																																							Local: `validator`},
																																						NameAttr:     `numeric`,
																																						ArgumentAttr: `--range 1-255`}}}},
																																		ValueHelp: []*interfacedefinition.ValueHelp{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueHelp`},
																																				Format:      `u32:1-255`,
																																				Description: `MD5 key id`}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																																Children: []*interfacedefinition.Children{
																																	{
																																		XMLName: xml.Name{
																																			Local: `children`},
																																		LeafNode: []*interfacedefinition.LeafNode{
																																			{
																																				XMLName: xml.Name{
																																					Local: `leafNode`},
																																				Properties: []*interfacedefinition.Properties{
																																					{
																																						XMLName: xml.Name{
																																							Local: `properties`},
																																						Help: []string{
																																							`MD5 authentication type`},
																																						Constraint: []*interfacedefinition.Constraint{
																																							{
																																								XMLName: xml.Name{
																																									Local: `constraint`},
																																								Regex: []string{
																																									`[^[:space:]]{1,
16}`},
																																								Validator: []*interfacedefinition.Validator(nil)}},
																																						ValueHelp: []*interfacedefinition.ValueHelp{
																																							{
																																								XMLName: xml.Name{
																																									Local: `valueHelp`},
																																								Format:      `txt`,
																																								Description: `MD5 Key (16 characters or less)`}},
																																						ConstraintErrorMessage: []string{
																																							`Password must be 16 characters or less`},
																																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Plain text password`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[^[:space:]]{1,
8}`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Plain text password (8 characters or less)`}},
																														ConstraintErrorMessage: []string{
																															`Password must be 8 characters or less`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable Bidirectional Forwarding Detection (BFD)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Use settings from BFD profile`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `BFD profile name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bfd profile`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Suppress routing updates on an interface`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable instance`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable OSPF on this interface`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-4294967295`},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ip-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32`,
																												Description: `OSPF area ID as decimal notation`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `OSPF area ID in IP address notation`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`protocols ospf area`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`40`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval after which a neighbor is declared dead`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Neighbor dead interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`10`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval between hello packets`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Hello interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`5`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval between retransmitting lost link state advertisements`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Retransmit interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`1`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Link state transmit delay`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Link state transmit delay (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interface cost`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `OSPF interface cost`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable Maximum Transmission Unit (MTU) mismatch detection`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`1`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Router priority`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-255`,
																												Description: `OSPF router priority cost`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interface bandwidth (Mbit/s)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-100000`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-100000`,
																												Description: `Bandwidth in Megabit/sec (for calculating OSPF cost)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Hello multiplier factor`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-10`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-10`,
																												Description: `Number of Hellos to send each second`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Network type`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(broadcast|non-broadcast|point-to-multipoint|point-to-point)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `broadcast`,
																												Description: `Broadcast network type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `non-broadcast`,
																												Description: `Non-broadcast network type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `point-to-multipoint`,
																												Description: `Point-to-multipoint network type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `point-to-point`,
																												Description: `Point-to-point network type`}},
																										ConstraintErrorMessage: []string{
																											`Must be broadcast,
 non-broadcast,
 point-to-multipoint or point-to-point`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`broadcast non-broadcast point-to-multipoint point-to-point`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify neighbor router`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Neighbor IP address`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`60`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Dead neighbor polling interval`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Seconds between dead neighbor polling interval`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`0`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Neighbor priority in seconds`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-255`,
																												Description: `Neighbor priority`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Metric of redistributed routes`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-16777214`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:0-16777214`,
																								Description: `Metric of redistributed routes`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Maximum multiple paths (ECMP)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-64`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-64`,
																								Description: `Maximum multiple paths (ECMP)`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Suppress routing updates on an interface`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(default)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `default`,
																								Description: `Default to suppress routing updates on all interfaces`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`default`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify route-map name to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Route map name`}},
																						ConstraintErrorMessage: []string{
																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy route-map`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_ospfv3.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Open Shortest Path First (OSPF) for IPv6`},
																		Priority: []string{
																			`621`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Calculate interface cost according to bandwidth`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`100`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Reference bandwidth method to assign cost`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-4294967`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-4294967`,
																												Description: `Reference bandwidth cost in Mbits/sec`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Default route advertisment settings`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Distribute a default route`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Always advertise a default route`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF default metric`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 0-16777214`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:0-16777214`,
																																Description: `Default metric`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												DefaultValue: []string{
																													`2`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`OSPF metric type for default routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-2`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-2`,
																																Description: `Set OSPF External Type 1/2 metrics`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Administrative distance`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPFv3 administrative distance`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for external routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for external routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for inter-area routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for inter-area routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for intra-area routes`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for intra-area routes`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Administrative distance`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-255`,
																												Description: `Administrative distance`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Log adjacency state changes`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Log all state changes`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`OSPFv3 specific parameters`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Override default router identifier`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Router-ID in IP address format`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Redistribute information from another routing protocol`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute BGP routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute connected routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute kernel routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute RIPNG routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute Babel routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Redistribute static routes`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Specify route-map name to use`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`[-_a-zA-Z0-9.]+`},
																																Validator: []*interfacedefinition.Validator(nil)}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Route map name`}},
																														ConstraintErrorMessage: []string{
																															`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`policy route-map`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`OSPFv3 Area`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-4294967295`},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ip-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `Area ID as a decimal value`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Area ID in IP address forma`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`OSPFv3 Area type`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										Node: []*interfacedefinition.Node{
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`NSSA OSPFv3 area`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Originate Type 7 default into NSSA area`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not inject inter-area routes into the stub`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																											{
																												XMLName: xml.Name{
																													Local: `node`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Stub OSPFv3 area`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Do not inject inter-area routes into the stub`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Specify IPv6 prefix (border routers only)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6net`,
																												Description: `Specify IPv6 prefix (border routers only)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Advertise this range`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Do not advertise this range`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Name of export-list`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`policy access-list6`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Name of import-list`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`policy access-list6`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Enable routing on an IPv6 interface`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Interface used for routing information exchange`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable Bidirectional Forwarding Detection (BFD)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Use settings from BFD profile`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `BFD profile name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`protocols bfd profile`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Enable OSPF on this interface`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-4294967295`},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ip-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32`,
																												Description: `OSPF area ID as decimal notation`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `OSPF area ID in IP address notation`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`protocols ospfv3 area`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`40`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval after which a neighbor is declared dead`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Neighbor dead interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`10`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval between hello packets`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Hello interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`5`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interval between retransmitting lost link state advertisements`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Retransmit interval (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`1`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Link state transmit delay`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Link state transmit delay (seconds)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interface cost`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `OSPF interface cost`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable Maximum Transmission Unit (MTU) mismatch detection`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`1`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Router priority`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-255`,
																												Description: `OSPF router priority cost`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Interface MTU`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Interface MTU`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`0`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Instance ID`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 0-255`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:0-255`,
																												Description: `Instance Id`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Network type`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(broadcast|point-to-point)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `broadcast`,
																												Description: `Broadcast network type`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `point-to-point`,
																												Description: `Point-to-point network type`}},
																										ConstraintErrorMessage: []string{
																											`Must be broadcast or point-to-point`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`broadcast point-to-point`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Configure passive mode for interface`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specify route-map name to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Route map name`}},
																						ConstraintErrorMessage: []string{
																							`Name of route-map can only contain alpha-numeric letters,
 hyphen and underscores`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`policy route-map`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																OwnerAttr: `${vyos_conf_scripts_dir}/protocols_static.py $VAR(../../@)`,
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Static Routing`},
																		Priority: []string{
																			`481`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Static IPv4 route`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4net`,
																								Description: `IPv4 static route`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Silently discard pkts when matched`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Tag value for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967295`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967295`,
																																Description: `Tag value for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Emit an ICMP unreachable when matched`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Tag value for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967295`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967295`,
																																Description: `Tag value for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Next-hop IPv4 router interface`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Gateway interface name`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_interfaces`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable instance`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`VRF to leak route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(default)`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `vrf-name`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of VRF to leak to`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`default`},
																																Path: []string{
																																	`vrf name`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Next-hop IPv4 router address`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `Next-hop router address`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable instance`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Gateway interface name`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Gateway interface name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Script: []string{
																																	`${vyos_completion_dir}/list_interfaces`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`VRF to leak route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(default)`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `vrf-name`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of VRF to leak to`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`default`},
																																Path: []string{
																																	`vrf name`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`DHCP interface supplying next-hop IP address`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `DHCP interface name`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_interfaces`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Description`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`[[:ascii:]]{0,
256}`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Description`}},
																										ConstraintErrorMessage: []string{
																											`Description too long (limit 256 characters)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Static IPv6 route`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6net`,
																								Description: `IPv6 static route`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Silently discard pkts when matched`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Tag value for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967295`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967295`,
																																Description: `Tag value for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Emit an ICMP unreachable when matched`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Tag value for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-4294967295`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-4294967295`,
																																Description: `Tag value for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						TagNode: []*interfacedefinition.TagNode{
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`IPv6 gateway interface name`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Gateway interface name`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_interfaces`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable instance`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`VRF to leak route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(default)`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `vrf-name`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of VRF to leak to`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`default`},
																																Path: []string{
																																	`vrf name`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `tagNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`IPv6 gateway address`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6`,
																												Description: `Next-hop IPv6 router`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Disable instance`},
																														Valueless: []*interfacedefinition.Valueless{
																															{
																																XMLName: xml.Name{
																																	Local: `valueless`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Distance for this route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-255`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-255`,
																																Description: `Distance for this route`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Gateway interface name`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Gateway interface name`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Script: []string{
																																	`${vyos_completion_dir}/list_interfaces`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`VRF to leak route`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Regex: []string{
																																	`(default)`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `vrf-name`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of VRF to leak to`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																List: []string{
																																	`default`},
																																Path: []string{
																																	`vrf name`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Description`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`[[:ascii:]]{0,
256}`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Description`}},
																										ConstraintErrorMessage: []string{
																											`Description too long (limit 256 characters)`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
										LeafNode: []*interfacedefinition.LeafNode{
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Description`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`[[:ascii:]]{0,
256}`},
																Validator: []*interfacedefinition.Validator(nil)}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `txt`,
																Description: `Description`}},
														ConstraintErrorMessage: []string{
															`Description too long (limit 256 characters)`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Administratively disable interface`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Routing table associated with this instance`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Validator: []*interfacedefinition.Validator{
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `numeric`,
																		ArgumentAttr: `--range 100-65535`}}}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `u32:100-65535`,
																Description: `Routing table ID`}},
														ConstraintErrorMessage: []string{
															`VRF routing table must be in range from 100 to 65535`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												OwnerAttr: `${vyos_conf_scripts_dir}/vrf_vni.py`,
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Virtual Network Identifier`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Validator: []*interfacedefinition.Validator{
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `numeric`,
																		ArgumentAttr: `--range 0-16777214`}}}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `u32:0-16777214`,
																Description: `VXLAN virtual network identifier`}},
														Priority: []string{
															`822`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
						LeafNode: []*interfacedefinition.LeafNode{
							{
								XMLName: xml.Name{
									Local: `leafNode`},
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`Enable binding services to all VRFs`},
										Valueless: []*interfacedefinition.Valueless{
											{
												XMLName: xml.Name{
													Local: `valueless`}}},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}}}
}
