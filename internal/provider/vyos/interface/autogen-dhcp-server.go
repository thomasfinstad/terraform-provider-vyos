// Code generated by /workspaces/terraform-provider-vyos/tools/build-resource-terraform-schemas/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/provider/vyos/schema/interfacedefinition"
)

func DhcpServer() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: `interfaceDefinition`},
		Node: []*interfacedefinition.Node{
			{
				XMLName: xml.Name{
					Local: `node`},
				Children: []*interfacedefinition.Children{
					{
						XMLName: xml.Name{
							Local: `children`},
						Node: []*interfacedefinition.Node{
							{
								XMLName: xml.Name{
									Local: `node`},
								OwnerAttr: `${vyos_conf_scripts_dir}/dhcp_server.py`,
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`Dynamic Host Configuration Protocol (DHCP) for DHCP server`},
										Priority: []string{
											`911`},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
								Children: []*interfacedefinition.Children{
									{
										XMLName: xml.Name{
											Local: `children`},
										Node: []*interfacedefinition.Node{
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`DHCP failover configuration`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IPv4 source address used to initiate connection`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `ipv4-address`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ipv4`,
																				Description: `IPv4 source address`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				Script: []string{
																					`${vyos_completion_dir}/list_local_ips.sh --ipv4`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IPv4 remote address used for connectio`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `ipv4-address`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ipv4`,
																				Description: `IPv4 address of failover peer`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Peer name used to identify connection`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`[-_a-zA-Z0-9.]+`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ConstraintErrorMessage: []string{
																			`Invalid failover peer name. May only contain letters,
 numbers and .-_`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Failover hierarchy`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(primary|secondary)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `primary`,
																				Description: `Configure this server to be the primary node`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `secondary`,
																				Description: `Configure this server to be the secondary node`}},
																		ConstraintErrorMessage: []string{
																			`Invalid DHCP failover peer status`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`primary secondary`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
										TagNode: []*interfacedefinition.TagNode{
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Name of DHCP shared network`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`[-_a-zA-Z0-9.]+`},
																Validator: []*interfacedefinition.Validator(nil)}},
														ConstraintErrorMessage: []string{
															`Invalid shared network name. May only contain letters,
 numbers and .-_`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`DHCP subnet for shared network`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `ipv4-prefix`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ipv4net`,
																				Description: `IPv4 address and prefix length`}},
																		ConstraintErrorMessage: []string{
																			`Invalid IPv4 subnet definition`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Vendor Specific Options`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Ubiquiti specific parameters`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Address of UniFi controller`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-address`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4`,
																																Description: `IP address of UniFi controller`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`DHCP lease range`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ConstraintErrorMessage: []string{
																							`Invalid range name,
 may only be alphanumeric,
 dot and hyphen`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`First IP address for DHCP lease range`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 start address of pool`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Last IP address for DHCP lease range`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 end address of pool`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Name of static mapping`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9.]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ConstraintErrorMessage: []string{
																							`Invalid static mapping name,
 may only be alphanumeric,
 dot and hyphen`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable instance`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Fixed IP address of static mapping`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 address used in static mapping`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Media Access Control (MAC) address`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `mac-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `macaddr`,
																												Description: `Hardware (MAC) address`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Additional static-mapping parameters for DHCP server. Will be placed inside the \'host\' block of the mapping. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.`},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Classless static route destination subnet`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4net`,
																								Description: `IPv4 address and prefix length`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`IP address of router to be used to reach the destination subnet`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ip-address`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4`,
																												Description: `IPv4 address of router`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Bootstrap file name`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[-_a-zA-Z0-9./]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Server from which the initial boot file is to be loaded`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `fqdn`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Bootfile server IPv4 address`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `hostname`,
																								Description: `Bootfile server FQDN`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Bootstrap file size`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-16`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-16`,
																								Description: `Bootstrap file size in 512 byte blocks`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Specifies the clients subnet mask as per RFC 950. If unset,
 subnet declaration is used.`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-32`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:0-32`,
																								Description: `DHCP client prefix length must be 0 to 32`}},
																						ConstraintErrorMessage: []string{
																							`DHCP client prefix length must be 0 to 32`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address of default router`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Default router IPv4 address`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Client Domain Name`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `fqdn`,
																										ArgumentAttr: ``}}}},
																						ConstraintErrorMessage: []string{
																							`Invalid domain name (RFC 1123 section 2).\\nMay only contain letters,
 numbers and .-_`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Client Domain Name search list`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `fqdn`,
																										ArgumentAttr: ``}}}},
																						ConstraintErrorMessage: []string{
																							`Invalid domain name (RFC 1123 section 2).\\nMay only contain letters,
 numbers,
 period,
 and underscore.`},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Description`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[[:ascii:]]{0,
256}`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Description`}},
																						ConstraintErrorMessage: []string{
																							`Description too long (limit 256 characters)`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Domain Name Servers (DNS) addresses`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Domain Name Server (DNS) IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Enable DHCP failover support for this subnet`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address to exclude from DHCP lease range`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `IPv4 address to exclude from lease range`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Enable IP forwarding on client`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`86400`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Lease timeout in seconds`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-4294967295`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `DHCP lease time in seconds`}},
																						ConstraintErrorMessage: []string{
																							`DHCP lease time must be between 0 and 4294967295 (49 days)`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address of NTP server`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `NTP server IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Sends ICMP Echo request to the address being assigned`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address of POP3 server`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `POP3 server IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Address for DHCP server identifier`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `DHCP server identifier IPv4 address`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address of SMTP server`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `SMTP server IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Disable IPv4 on IPv6 only hosts (RFC 8925)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-4294967295`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `Seconds`}},
																						ConstraintErrorMessage: []string{
																							`Seconds must be between 0 and 4294967295 (49 days)`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Additional subnet parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.`},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`TFTP server name`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `fqdn`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `TFTP server IPv4 address`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `hostname`,
																								Description: `TFTP server FQDN`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Client subnet offset in seconds from Coordinated Universal Time (UTC)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`-?[0-9]+`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format: `[-]N`,
																								Description: `Time offset (number,
 may be negative)`}},
																						ConstraintErrorMessage: []string{
																							`Invalid time offset value`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address of time server`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Time server IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address for Windows Internet Name Service (WINS) server`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `WINS server IPv4 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Web Proxy Autodiscovery (WPAD) URL`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Option to make DHCP server authoritative for this physical network`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Client Domain Name`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `fqdn`,
																						ArgumentAttr: ``}}}},
																		ConstraintErrorMessage: []string{
																			`Invalid domain name (RFC 1123 section 2).\\nMay only contain letters,
 numbers and .-_`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Client Domain Name search list`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `fqdn`,
																						ArgumentAttr: ``}}}},
																		ConstraintErrorMessage: []string{
																			`Invalid domain name (RFC 1123 section 2).\\nMay only contain letters,
 numbers,
 period,
 and underscore.`},
																		Multi: []*interfacedefinition.Multi{
																			{
																				XMLName: xml.Name{
																					Local: `multi`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IP address of NTP server`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `ipv4-address`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ipv4`,
																				Description: `NTP server IPv4 address`}},
																		Multi: []*interfacedefinition.Multi{
																			{
																				XMLName: xml.Name{
																					Local: `multi`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Sends ICMP Echo request to the address being assigned`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Description`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`[[:ascii:]]{0,
256}`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `txt`,
																				Description: `Description`}},
																		ConstraintErrorMessage: []string{
																			`Description too long (limit 256 characters)`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Disable instance`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Domain Name Servers (DNS) addresses`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `ipv4-address`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ipv4`,
																				Description: `Domain Name Server (DNS) IPv4 address`}},
																		Multi: []*interfacedefinition.Multi{
																			{
																				XMLName: xml.Name{
																					Local: `multi`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Additional shared-network parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.`},
																		Multi: []*interfacedefinition.Multi{
																			{
																				XMLName: xml.Name{
																					Local: `multi`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
										LeafNode: []*interfacedefinition.LeafNode{
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Disable instance`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Dynamically update Domain Name System (RFC4702)`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Additional global parameters for DHCP server. You must use the syntax of dhcpd.conf in this text-field. Using this without proper knowledge may result in a crashed DHCP server. Check system log to look for errors.`},
														Multi: []*interfacedefinition.Multi{
															{
																XMLName: xml.Name{
																	Local: `multi`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Updating /etc/hosts file (per client lease)`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Use host declaration name for forward DNS name`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Local IPv4 addresses to listen on`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Validator: []*interfacedefinition.Validator{
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `ipv4-address`,
																		ArgumentAttr: ``}}}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `ipv4`,
																Description: `IPv4 address to listen for incoming connections`}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{
															{
																XMLName: xml.Name{
																	Local: `completionHelp`},
																Script: []string{
																	`${vyos_completion_dir}/list_local_ips.sh --ipv4`}}},
														Multi: []*interfacedefinition.Multi{
															{
																XMLName: xml.Name{
																	Local: `multi`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
						LeafNode: []*interfacedefinition.LeafNode(nil)}}}}}
}
