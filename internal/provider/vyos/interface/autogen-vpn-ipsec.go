// Code generated by /workspaces/terraform-provider-vyos/tools/build-resource-terraform-schemas/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos/internal/provider/vyos/schema/interfacedefinition"
)

func VpnIpsec() interfacedefinition.InterfaceDefinition {
	return interfacedefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: `interfaceDefinition`},
		Node: []*interfacedefinition.Node{
			{
				XMLName: xml.Name{
					Local: `node`},
				Properties: []*interfacedefinition.Properties{
					{
						XMLName: xml.Name{
							Local: `properties`},
						Help: []string{
							`Virtual Private Network (VPN)`},
						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
				Children: []*interfacedefinition.Children{
					{
						XMLName: xml.Name{
							Local: `children`},
						Node: []*interfacedefinition.Node{
							{
								XMLName: xml.Name{
									Local: `node`},
								OwnerAttr: `${vyos_conf_scripts_dir}/vpn_ipsec.py`,
								Properties: []*interfacedefinition.Properties{
									{
										XMLName: xml.Name{
											Local: `properties`},
										Help: []string{
											`VPN IP security (IPsec) parameters`},
										Priority: []string{
											`901`},
										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
								Children: []*interfacedefinition.Children{
									{
										XMLName: xml.Name{
											Local: `children`},
										Node: []*interfacedefinition.Node{
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Authentication`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Pre-shared key name`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`DHCP interface supplying next-hop IP address`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `DHCP interface name`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`ID for authentication`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `ID used for authentication`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IKE pre-shared secret key`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `IKE pre-shared secret key`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`IPsec logging`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`0`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Global IPsec logging Level`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 0-2`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format: `0`,
																				Description: `Very basic auditing logs (e.g.,
 SA up/SA down)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format: `1`,
																				Description: `Generic control flow with errors,
 a good default to see whats going on`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `2`,
																				Description: `More detailed debugging control flow`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Subsystem logging levels`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(dmn|mgr|ike|chd|job|cfg|knl|net|asn|enc|lib|esp|tls|tnc|imc|imv|pts|any)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dmn`,
																				Description: `Main daemon setup/cleanup/signal handling`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format: `mgr`,
																				Description: `IKE_SA manager,
 handling synchronization for IKE_SA access`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ike`,
																				Description: `IKE_SA/ISAKMP SA`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `chd`,
																				Description: `CHILD_SA/IPsec SA`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `job`,
																				Description: `Jobs queuing/processing and thread pool management`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `cfg`,
																				Description: `Configuration management and plugins`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `knl`,
																				Description: `IPsec/Networking kernel interface`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `net`,
																				Description: `IKE network communication`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format: `asn`,
																				Description: `Low-level encoding/decoding (ASN.1,
 X.509 etc.)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `enc`,
																				Description: `Packet encoding/decoding encryption/decryption operations`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `lib`,
																				Description: `libstrongswan library messages`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `esp`,
																				Description: `libipsec library messages`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `tls`,
																				Description: ` libtls library messages`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `tnc`,
																				Description: `Trusted Network Connect`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `imc`,
																				Description: `Integrity Measurement Collector`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `imv`,
																				Description: `Integrity Measurement Verifier`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `pts`,
																				Description: ` Platform Trust Service`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `any`,
																				Description: `Any subsystem`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`dmn mgr ike chd job cfg knl net asn enc lib esp tls tnc imc imv pts any`},
																				Script: []string(nil)}},
																		Multi: []*interfacedefinition.Multi{
																			{
																				XMLName: xml.Name{
																					Local: `multi`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Global IPsec settings`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Do not automatically install routes to remote networks`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Allow FlexVPN vendor ID payload (IKEv2 only)`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Interface to use`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																						ArgumentAttr: ``}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `txt`,
																				Description: `Interface name`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				Script: []string{
																					`${vyos_completion_dir}/list_interfaces`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Allow install virtual-ip addresses`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`IKEv2 remote access VPN`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`DHCP pool options for remote access`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Interface to use`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Interface name`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`DHCP server address`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `DHCP server IPv4 address`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`RADIUS based user authentication`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`RADIUS server configuration`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `RADIUS server IPv4 address`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable instance`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Shared secret key`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`1812`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Authentication port`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Numeric IP port`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IPv4 source address used to initiate connection`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `IPv4 source address`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_local_ips.sh --ipv4`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable accounting`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`NAS-Identifier attribute sent to RADIUS`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`2`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Session timeout`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 1-240`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-240`,
																								Description: `Session timeout in seconds (default: 2)`}},
																						ConstraintErrorMessage: []string{
																							`Timeout must be between 1 and 240 seconds`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IKEv2 VPN connection name`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`[a-zA-Z][0-9a-zA-Z_-]+`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `txt`,
																				Description: `Connection name`}},
																		ConstraintErrorMessage: []string{
																			`Profile name must be alphanumeric and can contain hyphen(s) and underscore(s)`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Authentication for remote access`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`X.509 certificate`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Certificate in PKI configuration`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of certificate in PKI configuration`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki certificate`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Private key passphrase`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Passphrase to decrypt the private key`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Certificate Authority in PKI configuration`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of CA in PKI configuration`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki ca`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local user authentication`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										TagNode: []*interfacedefinition.TagNode{
																											{
																												XMLName: xml.Name{
																													Local: `tagNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Username used for authentication`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Username used for authentication`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																												Children: []*interfacedefinition.Children{
																													{
																														XMLName: xml.Name{
																															Local: `children`},
																														LeafNode: []*interfacedefinition.LeafNode{
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Disable instance`},
																																		Valueless: []*interfacedefinition.Valueless{
																																			{
																																				XMLName: xml.Name{
																																					Local: `valueless`}}},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																															{
																																XMLName: xml.Name{
																																	Local: `leafNode`},
																																Properties: []*interfacedefinition.Properties{
																																	{
																																		XMLName: xml.Name{
																																			Local: `properties`},
																																		Help: []string{
																																			`Password used for authentication`},
																																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																										LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local ID for peer authentication`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Local ID used for peer authentication`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`eap-mschapv2`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Client authentication mode`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(eap-tls|eap-mschapv2|eap-radius)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `eap-tls`,
																												Description: `Use EAP-TLS authentication`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `eap-mschapv2`,
																												Description: `Use EAP-MSCHAPv2 authentication`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `eap-radius`,
																												Description: `Use EAP-RADIUS authentication`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`eap-tls eap-mschapv2 eap-radius`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`x509`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Server authentication mode`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(pre-shared-secret|x509)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `pre-shared-secret`,
																												Description: `Use a pre-shared secret key`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `x509`,
																												Description: `Use x.509 certificate`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`pre-shared-secret x509`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Pre-shared secret key`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Pre-shared secret key`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Local parameters for interesting traffic`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Port number used by connection`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-65535`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-65535`,
																												Description: `Numeric IP port`}},
																										ConstraintErrorMessage: []string{
																											`Port number must be in range 1 to 65535`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local IPv4 or IPv6 prefix`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv4-prefix`,
																														ArgumentAttr: ``},
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ipv6-prefix`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv4net`,
																												Description: `Local IPv4 prefix`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `ipv6net`,
																												Description: `Local IPv6 prefix`}},
																										Multi: []*interfacedefinition.Multi{
																											{
																												XMLName: xml.Name{
																													Local: `multi`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Description`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[[:ascii:]]{0,
256}`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Description`}},
																						ConstraintErrorMessage: []string{
																							`Description too long (limit 256 characters)`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Disable instance`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Encapsulating Security Payloads (ESP) group name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`vpn ipsec esp-group`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Internet Key Exchange (IKE) group name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`vpn ipsec ike-group`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IPv4 or IPv6 address of a local interface to use for VPN`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(any)`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `IPv4 address of a local interface for VPN`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `IPv6 address of a local interface for VPN`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `any`,
																								Description: `Allow any IPv4 address present on the system to be used for VPN`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`any`},
																								Script: []string{
																									`${vyos_completion_dir}/list_local_ips.sh --both`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`28800`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Timeout to close connection if no data is transmitted`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 0-86400`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:0`,
																								Description: `Disable inactivity checks`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:1-86400`,
																								Description: `Timeout in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IP address pool`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Predefined IP pool name`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `dhcp`,
																								Description: `Forward requests for virtual IP addresses to a DHCP server`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `radius`,
																								Description: `Forward requests for virtual IP addresses to a RADIUS server`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`dhcp radius`},
																								Path: []string{
																									`vpn ipsec remote-access pool`},
																								Script: []string(nil)}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Connection uniqueness enforcement policy`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(never|keep|replace)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `never`,
																								Description: `Never enforce connection uniqueness`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `keep`,
																								Description: `Reject new connection attempts if the same user already has an active connection`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `replace`,
																								Description: `Delete any existing connection if a new one for the same user gets established`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`never keep replace`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IP address pool for remote access users`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Local IPv4 or IPv6 pool prefix exclusions`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-prefix`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4net`,
																								Description: `Local IPv4 pool prefix exclusion`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6net`,
																								Description: `Local IPv6 pool prefix exclusion`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Local IPv4 or IPv6 pool prefix`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-prefix`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-prefix`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4net`,
																								Description: `Local IPv4 pool prefix`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6net`,
																								Description: `Local IPv6 pool prefix`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Domain Name Servers (DNS) addresses`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Domain Name Server (DNS) IPv4 address`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `Domain Name Server (DNS) IPv6 address`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}},
											{
												XMLName: xml.Name{
													Local: `node`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Site-to-site VPN`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Connection name of the peer`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`[-_a-zA-Z0-9|@]+`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `txt`,
																				Description: `Connection name of the peer`}},
																		ConstraintErrorMessage: []string{
																			`Peer connection name must be alphanumeric and can contain hyphen and underscores`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		Node: []*interfacedefinition.Node{
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Peer authentication`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`RSA keys`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Name of PKI key-pair with local private key`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki key-pair`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Local private key passphrase`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Name of PKI key-pair with remote public key`},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki key-pair`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`X.509 certificate`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Certificate in PKI configuration`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of certificate in PKI configuration`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki certificate`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Private key passphrase`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Passphrase to decrypt the private key`}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Certificate Authority in PKI configuration`},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `txt`,
																																Description: `Name of CA in PKI configuration`}},
																														CompletionHelp: []*interfacedefinition.CompletionHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `completionHelp`},
																																Path: []string{
																																	`pki ca`},
																																Script: []string(nil)}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local ID for peer authentication`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Local ID used for peer authentication`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Authentication mode`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Regex: []string{
																													`(pre-shared-secret|rsa|x509)`},
																												Validator: []*interfacedefinition.Validator(nil)}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `pre-shared-secret`,
																												Description: `Use pre-shared secret key`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `rsa`,
																												Description: `Use RSA key`},
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `x509`,
																												Description: `Use x.509 certificate`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												List: []string{
																													`pre-shared-secret rsa x509`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								DefaultValue: []string{
																									`%any`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`ID for remote authentication`},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `ID used for peer authentication`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Use certificate common name as ID`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																			{
																				XMLName: xml.Name{
																					Local: `node`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Virtual tunnel interface`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`VTI tunnel interface associated with this configuration`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`interfaces vti`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Encapsulating Security Payloads (ESP) group name`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`vpn ipsec esp-group`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		TagNode: []*interfacedefinition.TagNode{
																			{
																				XMLName: xml.Name{
																					Local: `tagNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Peer tunnel`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32`,
																								Description: `Peer tunnel`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																				Children: []*interfacedefinition.Children{
																					{
																						XMLName: xml.Name{
																							Local: `children`},
																						Node: []*interfacedefinition.Node{
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Local parameters for interesting traffic`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Port number used by connection`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Numeric IP port`}},
																														ConstraintErrorMessage: []string{
																															`Port number must be in range 1 to 65535`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Local IPv4 or IPv6 prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``},
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Local IPv4 prefix`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Local IPv6 prefix`}},
																														Multi: []*interfacedefinition.Multi{
																															{
																																XMLName: xml.Name{
																																	Local: `multi`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
																							{
																								XMLName: xml.Name{
																									Local: `node`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Match remote addresses`},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																								Children: []*interfacedefinition.Children{
																									{
																										XMLName: xml.Name{
																											Local: `children`},
																										LeafNode: []*interfacedefinition.LeafNode{
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Port number used by connection`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `numeric`,
																																		ArgumentAttr: `--range 1-65535`}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `u32:1-65535`,
																																Description: `Numeric IP port`}},
																														ConstraintErrorMessage: []string{
																															`Port number must be in range 1 to 65535`},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																											{
																												XMLName: xml.Name{
																													Local: `leafNode`},
																												Properties: []*interfacedefinition.Properties{
																													{
																														XMLName: xml.Name{
																															Local: `properties`},
																														Help: []string{
																															`Remote IPv4 or IPv6 prefix`},
																														Constraint: []*interfacedefinition.Constraint{
																															{
																																XMLName: xml.Name{
																																	Local: `constraint`},
																																Validator: []*interfacedefinition.Validator{
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv4-prefix`,
																																		ArgumentAttr: ``},
																																	{
																																		XMLName: xml.Name{
																																			Local: `validator`},
																																		NameAttr:     `ipv6-prefix`,
																																		ArgumentAttr: ``}}}},
																														ValueHelp: []*interfacedefinition.ValueHelp{
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv4net`,
																																Description: `Remote IPv4 prefix`},
																															{
																																XMLName: xml.Name{
																																	Local: `valueHelp`},
																																Format:      `ipv6net`,
																																Description: `Remote IPv6 prefix`}},
																														Multi: []*interfacedefinition.Multi{
																															{
																																XMLName: xml.Name{
																																	Local: `multi`}}},
																														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																						LeafNode: []*interfacedefinition.LeafNode{
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Disable instance`},
																										Valueless: []*interfacedefinition.Valueless{
																											{
																												XMLName: xml.Name{
																													Local: `valueless`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Encapsulating Security Payloads (ESP) group name`},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Path: []string{
																													`vpn ipsec esp-group`},
																												Script: []string(nil)}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Protocol`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `ip-protocol`,
																														ArgumentAttr: ``}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `txt`,
																												Description: `Protocol name`}},
																										CompletionHelp: []*interfacedefinition.CompletionHelp{
																											{
																												XMLName: xml.Name{
																													Local: `completionHelp`},
																												Script: []string{
																													`${vyos_completion_dir}/list_protocols.sh`}}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																							{
																								XMLName: xml.Name{
																									Local: `leafNode`},
																								Properties: []*interfacedefinition.Properties{
																									{
																										XMLName: xml.Name{
																											Local: `properties`},
																										Help: []string{
																											`Priority for IPsec policy (lowest value more preferable)`},
																										Constraint: []*interfacedefinition.Constraint{
																											{
																												XMLName: xml.Name{
																													Local: `constraint`},
																												Validator: []*interfacedefinition.Validator{
																													{
																														XMLName: xml.Name{
																															Local: `validator`},
																														NameAttr:     `numeric`,
																														ArgumentAttr: `--range 1-100`}}}},
																										ValueHelp: []*interfacedefinition.ValueHelp{
																											{
																												XMLName: xml.Name{
																													Local: `valueHelp`},
																												Format:      `u32:1-100`,
																												Description: `Priority for IPsec policy (lowest value more preferable)`}},
																										KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Disable instance`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Connection type`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(initiate|respond|none)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `initiate`,
																								Description: `Bring the connection up immediately`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `respond`,
																								Description: `Wait for the peer to initiate the connection`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `none`,
																								Description: `Load the connection only`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`initiate respond none`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Defult ESP group name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`vpn ipsec esp-group`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Description`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`[[:ascii:]]{0,
256}`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Description`}},
																						ConstraintErrorMessage: []string{
																							`Description too long (limit 256 characters)`},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`DHCP interface supplying next-hop IP address`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `DHCP interface name`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Script: []string{
																									`${vyos_completion_dir}/list_interfaces`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Force UDP encapsulation`},
																						Valueless: []*interfacedefinition.Valueless{
																							{
																								XMLName: xml.Name{
																									Local: `valueless`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Internet Key Exchange (IKE) group name`},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`vpn ipsec ike-group`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Re-authentication of the remote peer during an IKE re-key (IKEv2 only)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(yes|no|inherit)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `yes`,
																								Description: `Enable remote host re-autentication during an IKE re-key. Currently broken due to a strong swan bug`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `no`,
																								Description: `Disable remote host re-authenticaton during an IKE re-key.`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `inherit`,
																								Description: `Inherit the reauth configuration form your IKE-group`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`yes no inherit`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IPv4 or IPv6 address of a local interface to use for VPN`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(any)`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-address`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `IPv4 address of a local interface for VPN`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `IPv6 address of a local interface for VPN`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `any`,
																								Description: `Allow any IPv4 address present on the system to be used for VPN`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`any`},
																								Script: []string{
																									`${vyos_completion_dir}/list_local_ips.sh --both`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`IPv4 or IPv6 address of the remote peer`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(any)`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv4-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `ipv6-address`,
																										ArgumentAttr: ``},
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `fqdn`,
																										ArgumentAttr: ``}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `IPv4 address of the remote peer`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `IPv6 address of the remote peer`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `hostname`,
																								Description: `Fully qualified domain name of the remote peer`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `any`,
																								Description: `Allow any IP address of the remote peer`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Initiator request virtual-address from peer`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv4`,
																								Description: `Request IPv4 address from peer`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `ipv6`,
																								Description: `Request IPv6 address from peer`}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode(nil)}}}},
										TagNode: []*interfacedefinition.TagNode{
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Encapsulating Security Payload (ESP) group name`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`ESP group proposal`},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:1-65535`,
																				Description: `ESP group proposal number`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`aes128`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Encryption algorithm`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(null|aes128|aes192|aes256|aes128ctr|aes192ctr|aes256ctr|aes128ccm64|aes192ccm64|aes256ccm64|aes128ccm96|aes192ccm96|aes256ccm96|aes128ccm128|aes192ccm128|aes256ccm128|aes128gcm64|aes192gcm64|aes256gcm64|aes128gcm96|aes192gcm96|aes256gcm96|aes128gcm128|aes192gcm128|aes256gcm128|aes128gmac|aes192gmac|aes256gmac|3des|blowfish128|blowfish192|blowfish256|camellia128|camellia192|camellia256|camellia128ctr|camellia192ctr|camellia256ctr|camellia128ccm64|camellia192ccm64|camellia256ccm64|camellia128ccm96|camellia192ccm96|camellia256ccm96|camellia128ccm128|camellia192ccm128|camellia256ccm128|serpent128|serpent192|serpent256|twofish128|twofish192|twofish256|cast128|chacha20poly1305)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `null`,
																								Description: `Null encryption`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128`,
																								Description: `128 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192`,
																								Description: `192 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256`,
																								Description: `256 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ctr`,
																								Description: `128 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ctr`,
																								Description: `192 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ctr`,
																								Description: `256 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm64`,
																								Description: `128 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm64`,
																								Description: `192 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm64`,
																								Description: `256 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm96`,
																								Description: `128 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm96`,
																								Description: `192 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm96`,
																								Description: `256 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm128`,
																								Description: `128 bit AES-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm128`,
																								Description: `192 bit AES-CCM with 128 bit IC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm128`,
																								Description: `256 bit AES-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm64`,
																								Description: `128 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm64`,
																								Description: `192 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm64`,
																								Description: `256 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm96`,
																								Description: `128 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm96`,
																								Description: `192 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm96`,
																								Description: `256 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm128`,
																								Description: `128 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm128`,
																								Description: `192 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm128`,
																								Description: `256 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gmac`,
																								Description: `Null encryption with 128 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gmac`,
																								Description: `Null encryption with 192 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gmac`,
																								Description: `Null encryption with 256 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `3des`,
																								Description: `168 bit 3DES-EDE-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish128`,
																								Description: `128 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish192`,
																								Description: `192 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish256`,
																								Description: `256 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128`,
																								Description: `128 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192`,
																								Description: `192 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256`,
																								Description: `256 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ctr`,
																								Description: `128 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ctr`,
																								Description: `192 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ctr`,
																								Description: `256 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm64`,
																								Description: `128 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm64`,
																								Description: `192 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm64`,
																								Description: `256 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm96`,
																								Description: `128 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm96`,
																								Description: `192 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm96`,
																								Description: `256 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm128`,
																								Description: `128 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm128`,
																								Description: `192 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm128`,
																								Description: `256 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent128`,
																								Description: `128 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent192`,
																								Description: `192 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent256`,
																								Description: `256 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish128`,
																								Description: `128 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish192`,
																								Description: `192 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish256`,
																								Description: `256 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `cast128`,
																								Description: `128 bit CAST-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `chacha20poly1305`,
																								Description: `256 bit ChaCha20/Poly1305 with 128 bit ICV`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`null aes128 aes192 aes256 aes128ctr aes192ctr aes256ctr aes128ccm64 aes192ccm64 aes256ccm64 aes128ccm96 aes192ccm96 aes256ccm96 aes128ccm128 aes192ccm128 aes256ccm128 aes128gcm64 aes192gcm64 aes256gcm64 aes128gcm96 aes192gcm96 aes256gcm96 aes128gcm128 aes192gcm128 aes256gcm128 aes128gmac aes192gmac aes256gmac 3des blowfish128 blowfish192 blowfish256 camellia128 camellia192 camellia256 camellia128ctr camellia192ctr camellia256ctr camellia128ccm64 camellia192ccm64 camellia256ccm64 camellia128ccm96 camellia192ccm96 camellia256ccm96 camellia128ccm128 camellia192ccm128 camellia256ccm128 serpent128 serpent192 serpent256 twofish128 twofish192 twofish256 cast128 chacha20poly1305`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`sha1`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Hash algorithm`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(md5|md5_128|sha1|sha1_160|sha256|sha256_96|sha384|sha512|aesxcbc|aescmac|aes128gmac|aes192gmac|aes256gmac)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `md5`,
																								Description: `MD5 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `md5_128`,
																								Description: `MD5_128 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha1`,
																								Description: `SHA1 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha1_160`,
																								Description: `SHA1_160 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha256`,
																								Description: `SHA2_256_128 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha256_96`,
																								Description: `SHA2_256_96 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha384`,
																								Description: `SHA2_384_192 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha512`,
																								Description: `SHA2_512_256 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aesxcbc`,
																								Description: `AES XCBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aescmac`,
																								Description: `AES CMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gmac`,
																								Description: `128-bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gmac`,
																								Description: `192-bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gmac`,
																								Description: `256-bit AES-GMAC`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`md5 md5_128 sha1 sha1_160 sha256 sha256_96 sha384 sha512 aesxcbc aescmac aes128gmac aes192gmac aes256gmac`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Enable ESP compression`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`3600`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Security Association time to expire`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 30-86400`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:30-86400`,
																				Description: `SA lifetime in seconds`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Security Association byte count to expire`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 1024-26843545600000`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:1024-26843545600000`,
																				Description: `SA life in bytes`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Security Association packet count to expire`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 1000-26843545600000`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:1000-26843545600000`,
																				Description: `SA life in packets`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`tunnel`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`ESP mode`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(tunnel|transport)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `tunnel`,
																				Description: `Tunnel mode`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `transport`,
																				Description: `Transport mode`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`tunnel transport`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`enable`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`ESP Perfect Forward Secrecy`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(enable|dh-group1|dh-group2|dh-group5|dh-group14|dh-group15|dh-group16|dh-group17|dh-group18|dh-group19|dh-group20|dh-group21|dh-group22|dh-group23|dh-group24|dh-group25|dh-group26|dh-group27|dh-group28|dh-group29|dh-group30|dh-group31|dh-group32|disable)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `enable`,
																				Description: `Inherit Diffie-Hellman group from the IKE group`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group1`,
																				Description: `Use Diffie-Hellman group 1 (modp768)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group2`,
																				Description: `Use Diffie-Hellman group 2 (modp1024)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group5`,
																				Description: `Use Diffie-Hellman group 5 (modp1536)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group14`,
																				Description: `Use Diffie-Hellman group 14 (modp2048)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group15`,
																				Description: `Use Diffie-Hellman group 15 (modp3072)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group16`,
																				Description: `Use Diffie-Hellman group 16 (modp4096)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group17`,
																				Description: `Use Diffie-Hellman group 17 (modp6144)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group18`,
																				Description: `Use Diffie-Hellman group 18 (modp8192)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group19`,
																				Description: `Use Diffie-Hellman group 19 (ecp256)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group20`,
																				Description: `Use Diffie-Hellman group 20 (ecp384)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group21`,
																				Description: `Use Diffie-Hellman group 21 (ecp521)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group22`,
																				Description: `Use Diffie-Hellman group 22 (modp1024s160)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group23`,
																				Description: `Use Diffie-Hellman group 23 (modp2048s224)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group24`,
																				Description: `Use Diffie-Hellman group 24 (modp2048s256)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group25`,
																				Description: `Use Diffie-Hellman group 25 (ecp192)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group26`,
																				Description: `Use Diffie-Hellman group 26 (ecp224)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group27`,
																				Description: `Use Diffie-Hellman group 27 (ecp224bp)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group28`,
																				Description: `Use Diffie-Hellman group 28 (ecp256bp)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group29`,
																				Description: `Use Diffie-Hellman group 29 (ecp384bp)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group30`,
																				Description: `Use Diffie-Hellman group 30 (ecp512bp)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group31`,
																				Description: `Use Diffie-Hellman group 31 (curve25519)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `dh-group32`,
																				Description: `Use Diffie-Hellman group 32 (curve448)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `disable`,
																				Description: `Disable PFS`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`enable dh-group1 dh-group2 dh-group5 dh-group14 dh-group15 dh-group16 dh-group17 dh-group18 dh-group19 dh-group20 dh-group21 dh-group22 dh-group23 dh-group24 dh-group25 dh-group26 dh-group27 dh-group28 dh-group29 dh-group30 dh-group31 dh-group32 disable`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Internet Key Exchange (IKE) group name`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Dead Peer Detection (DPD)`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`clear`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Keep-alive failure action`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(hold|clear|restart)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `hold`,
																								Description: `Attempt to re-negotiate the connection when matching traffic is seen`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `clear`,
																								Description: `Remove the connection immediately`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `restart`,
																								Description: `Attempt to re-negotiate the connection immediately`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`hold clear restart`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`30`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Keep-alive interval`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 2-86400`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:2-86400`,
																								Description: `Keep-alive interval in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`120`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Dead Peer Detection keep-alive timeout (IKEv1 only)`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Validator: []*interfacedefinition.Validator{
																									{
																										XMLName: xml.Name{
																											Local: `validator`},
																										NameAttr:     `numeric`,
																										ArgumentAttr: `--range 2-86400`}}}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `u32:2-86400`,
																								Description: `Keep-alive timeout in seconds`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														TagNode: []*interfacedefinition.TagNode{
															{
																XMLName: xml.Name{
																	Local: `tagNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IKE proposal`},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:1-65535`,
																				Description: `IKE group proposal`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`2`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`dh-grouphelp`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(1|2|5|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `1`,
																								Description: `Diffie-Hellman group 1 (modp768)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `2`,
																								Description: `Diffie-Hellman group 2 (modp1024)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `5`,
																								Description: `Diffie-Hellman group 5 (modp1536)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `14`,
																								Description: `Diffie-Hellman group 14 (modp2048)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `15`,
																								Description: `Diffie-Hellman group 15 (modp3072)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `16`,
																								Description: `Diffie-Hellman group 16 (modp4096)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `17`,
																								Description: `Diffie-Hellman group 17 (modp6144)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `18`,
																								Description: `Diffie-Hellman group 18 (modp8192)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `19`,
																								Description: `Diffie-Hellman group 19 (ecp256)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `20`,
																								Description: `Diffie-Hellman group 20 (ecp384)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `21`,
																								Description: `Diffie-Hellman group 21 (ecp521)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `22`,
																								Description: `Diffie-Hellman group 22 (modp1024s160)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `23`,
																								Description: `Diffie-Hellman group 23 (modp2048s224)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `24`,
																								Description: `Diffie-Hellman group 24 (modp2048s256)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `25`,
																								Description: `Diffie-Hellman group 25 (ecp192)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `26`,
																								Description: `Diffie-Hellman group 26 (ecp224)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `27`,
																								Description: `Diffie-Hellman group 27 (ecp224bp)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `28`,
																								Description: `Diffie-Hellman group 28 (ecp256bp)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `29`,
																								Description: `Diffie-Hellman group 29 (ecp384bp)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `30`,
																								Description: `Diffie-Hellman group 30 (ecp512bp)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `31`,
																								Description: `Diffie-Hellman group 31 (curve25519)`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `32`,
																								Description: `Diffie-Hellman group 32 (curve448)`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`1 2 5 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Pseudo-Random Functions`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(prfmd5|prfsha1|prfaesxcbc|prfaescmac|prfsha256|prfsha384|prfsha512)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfmd5`,
																								Description: `MD5 PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfsha1`,
																								Description: `SHA1 PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfaesxcbc`,
																								Description: `AES XCBC PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfaescmac`,
																								Description: `AES CMAC PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfsha256`,
																								Description: `SHA2_256 PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfsha384`,
																								Description: `SHA2_384 PRF`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `prfsha512`,
																								Description: `SHA2_512 PRF`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`prfmd5 prfsha1 prfaesxcbc prfaescmac prfsha256 prfsha384 prfsha512`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`aes128`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Encryption algorithm`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(null|aes128|aes192|aes256|aes128ctr|aes192ctr|aes256ctr|aes128ccm64|aes192ccm64|aes256ccm64|aes128ccm96|aes192ccm96|aes256ccm96|aes128ccm128|aes192ccm128|aes256ccm128|aes128gcm64|aes192gcm64|aes256gcm64|aes128gcm96|aes192gcm96|aes256gcm96|aes128gcm128|aes192gcm128|aes256gcm128|aes128gmac|aes192gmac|aes256gmac|3des|blowfish128|blowfish192|blowfish256|camellia128|camellia192|camellia256|camellia128ctr|camellia192ctr|camellia256ctr|camellia128ccm64|camellia192ccm64|camellia256ccm64|camellia128ccm96|camellia192ccm96|camellia256ccm96|camellia128ccm128|camellia192ccm128|camellia256ccm128|serpent128|serpent192|serpent256|twofish128|twofish192|twofish256|cast128|chacha20poly1305)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `null`,
																								Description: `Null encryption`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128`,
																								Description: `128 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192`,
																								Description: `192 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256`,
																								Description: `256 bit AES-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ctr`,
																								Description: `128 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ctr`,
																								Description: `192 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ctr`,
																								Description: `256 bit AES-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm64`,
																								Description: `128 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm64`,
																								Description: `192 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm64`,
																								Description: `256 bit AES-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm96`,
																								Description: `128 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm96`,
																								Description: `192 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm96`,
																								Description: `256 bit AES-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128ccm128`,
																								Description: `128 bit AES-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192ccm128`,
																								Description: `192 bit AES-CCM with 128 bit IC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256ccm128`,
																								Description: `256 bit AES-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm64`,
																								Description: `128 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm64`,
																								Description: `192 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm64`,
																								Description: `256 bit AES-GCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm96`,
																								Description: `128 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm96`,
																								Description: `192 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm96`,
																								Description: `256 bit AES-GCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gcm128`,
																								Description: `128 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gcm128`,
																								Description: `192 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gcm128`,
																								Description: `256 bit AES-GCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gmac`,
																								Description: `Null encryption with 128 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gmac`,
																								Description: `Null encryption with 192 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gmac`,
																								Description: `Null encryption with 256 bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `3des`,
																								Description: `168 bit 3DES-EDE-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish128`,
																								Description: `128 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish192`,
																								Description: `192 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `blowfish256`,
																								Description: `256 bit Blowfish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128`,
																								Description: `128 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192`,
																								Description: `192 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256`,
																								Description: `256 bit Camellia-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ctr`,
																								Description: `128 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ctr`,
																								Description: `192 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ctr`,
																								Description: `256 bit Camellia-COUNTER`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm64`,
																								Description: `128 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm64`,
																								Description: `192 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm64`,
																								Description: `256 bit Camellia-CCM with 64 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm96`,
																								Description: `128 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm96`,
																								Description: `192 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm96`,
																								Description: `256 bit Camellia-CCM with 96 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia128ccm128`,
																								Description: `128 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia192ccm128`,
																								Description: `192 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `camellia256ccm128`,
																								Description: `256 bit Camellia-CCM with 128 bit ICV`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent128`,
																								Description: `128 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent192`,
																								Description: `192 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `serpent256`,
																								Description: `256 bit Serpent-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish128`,
																								Description: `128 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish192`,
																								Description: `192 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `twofish256`,
																								Description: `256 bit Twofish-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `cast128`,
																								Description: `128 bit CAST-CBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `chacha20poly1305`,
																								Description: `256 bit ChaCha20/Poly1305 with 128 bit ICV`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`null aes128 aes192 aes256 aes128ctr aes192ctr aes256ctr aes128ccm64 aes192ccm64 aes256ccm64 aes128ccm96 aes192ccm96 aes256ccm96 aes128ccm128 aes192ccm128 aes256ccm128 aes128gcm64 aes192gcm64 aes256gcm64 aes128gcm96 aes192gcm96 aes256gcm96 aes128gcm128 aes192gcm128 aes256gcm128 aes128gmac aes192gmac aes256gmac 3des blowfish128 blowfish192 blowfish256 camellia128 camellia192 camellia256 camellia128ctr camellia192ctr camellia256ctr camellia128ccm64 camellia192ccm64 camellia256ccm64 camellia128ccm96 camellia192ccm96 camellia256ccm96 camellia128ccm128 camellia192ccm128 camellia256ccm128 serpent128 serpent192 serpent256 twofish128 twofish192 twofish256 cast128 chacha20poly1305`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				DefaultValue: []string{
																					`sha1`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Hash algorithm`},
																						Constraint: []*interfacedefinition.Constraint{
																							{
																								XMLName: xml.Name{
																									Local: `constraint`},
																								Regex: []string{
																									`(md5|md5_128|sha1|sha1_160|sha256|sha256_96|sha384|sha512|aesxcbc|aescmac|aes128gmac|aes192gmac|aes256gmac)`},
																								Validator: []*interfacedefinition.Validator(nil)}},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `md5`,
																								Description: `MD5 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `md5_128`,
																								Description: `MD5_128 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha1`,
																								Description: `SHA1 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha1_160`,
																								Description: `SHA1_160 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha256`,
																								Description: `SHA2_256_128 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha256_96`,
																								Description: `SHA2_256_96 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha384`,
																								Description: `SHA2_384_192 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `sha512`,
																								Description: `SHA2_512_256 HMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aesxcbc`,
																								Description: `AES XCBC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aescmac`,
																								Description: `AES CMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes128gmac`,
																								Description: `128-bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes192gmac`,
																								Description: `192-bit AES-GMAC`},
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `aes256gmac`,
																								Description: `256-bit AES-GMAC`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`md5 md5_128 sha1 sha1_160 sha256 sha256_96 sha384 sha512 aesxcbc aescmac aes128gmac aes192gmac aes256gmac`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`none`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Action to take if a child SA is unexpectedly closed`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(none|hold|restart)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `none`,
																				Description: `Do nothing`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `hold`,
																				Description: `Attempt to re-negotiate when matching traffic is seen`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `restart`,
																				Description: `Attempt to re-negotiate the connection immediately`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`none hold restart`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Re-authentication of the remote peer during an IKE re-key (IKEv2 only)`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IKE version`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(ikev1|ikev2)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ikev1`,
																				Description: `Use IKEv1 for key exchange`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `ikev2`,
																				Description: `Use IKEv2 for key exchange`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`ikev1 ikev2`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`28800`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IKE lifetime`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Validator: []*interfacedefinition.Validator{
																					{
																						XMLName: xml.Name{
																							Local: `validator`},
																						NameAttr:     `numeric`,
																						ArgumentAttr: `--range 30-86400`}}}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `u32:30-86400`,
																				Description: `IKE lifetime in seconds`}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Disable MOBIKE Support (IKEv2 only)`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																DefaultValue: []string{
																	`main`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`IKEv1 phase 1 mode`},
																		Constraint: []*interfacedefinition.Constraint{
																			{
																				XMLName: xml.Name{
																					Local: `constraint`},
																				Regex: []string{
																					`(main|aggressive)`},
																				Validator: []*interfacedefinition.Validator(nil)}},
																		ValueHelp: []*interfacedefinition.ValueHelp{
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format:      `main`,
																				Description: `Use the main mode (recommended)`},
																			{
																				XMLName: xml.Name{
																					Local: `valueHelp`},
																				Format: `aggressive`,
																				Description: `Use the aggressive mode (insecure,
 not recommended)`}},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				List: []string{
																					`main aggressive`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
											{
												XMLName: xml.Name{
													Local: `tagNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`VPN IPsec profile`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`[a-zA-Z][0-9a-zA-Z_-]+`},
																Validator: []*interfacedefinition.Validator(nil)}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `txt`,
																Description: `Profile name`}},
														ConstraintErrorMessage: []string{
															`Profile name must be alphanumeric and can contain hyphen(s) and underscore(s)`},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
												Children: []*interfacedefinition.Children{
													{
														XMLName: xml.Name{
															Local: `children`},
														Node: []*interfacedefinition.Node{
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Authentication`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Authentication mode`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `pre-shared-secret`,
																								Description: `Use a pre-shared secret key`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								List: []string{
																									`pre-shared-secret`},
																								Script: []string(nil)}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Pre-shared secret key`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Pre-shared secret key`}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}},
															{
																XMLName: xml.Name{
																	Local: `node`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`DMVPN tunnel configuration`},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}},
																Children: []*interfacedefinition.Children{
																	{
																		XMLName: xml.Name{
																			Local: `children`},
																		LeafNode: []*interfacedefinition.LeafNode{
																			{
																				XMLName: xml.Name{
																					Local: `leafNode`},
																				Properties: []*interfacedefinition.Properties{
																					{
																						XMLName: xml.Name{
																							Local: `properties`},
																						Help: []string{
																							`Tunnel interface associated with this profile`},
																						ValueHelp: []*interfacedefinition.ValueHelp{
																							{
																								XMLName: xml.Name{
																									Local: `valueHelp`},
																								Format:      `txt`,
																								Description: `Associated interface to this profile`}},
																						CompletionHelp: []*interfacedefinition.CompletionHelp{
																							{
																								XMLName: xml.Name{
																									Local: `completionHelp`},
																								Path: []string{
																									`interfaces tunnel`},
																								Script: []string(nil)}},
																						Multi: []*interfacedefinition.Multi{
																							{
																								XMLName: xml.Name{
																									Local: `multi`}}},
																						KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
														LeafNode: []*interfacedefinition.LeafNode{
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Disable instance`},
																		Valueless: []*interfacedefinition.Valueless{
																			{
																				XMLName: xml.Name{
																					Local: `valueless`}}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Encapsulating Security Payloads (ESP) group name`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				Path: []string{
																					`vpn ipsec esp-group`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
															{
																XMLName: xml.Name{
																	Local: `leafNode`},
																Properties: []*interfacedefinition.Properties{
																	{
																		XMLName: xml.Name{
																			Local: `properties`},
																		Help: []string{
																			`Internet Key Exchange (IKE) group name`},
																		CompletionHelp: []*interfacedefinition.CompletionHelp{
																			{
																				XMLName: xml.Name{
																					Local: `completionHelp`},
																				Path: []string{
																					`vpn ipsec ike-group`},
																				Script: []string(nil)}},
																		KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
										LeafNode: []*interfacedefinition.LeafNode{
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Disable requirement for unique IDs in the Security Database`},
														Valueless: []*interfacedefinition.Valueless{
															{
																XMLName: xml.Name{
																	Local: `valueless`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}},
											{
												XMLName: xml.Name{
													Local: `leafNode`},
												Properties: []*interfacedefinition.Properties{
													{
														XMLName: xml.Name{
															Local: `properties`},
														Help: []string{
															`Interface to use`},
														Constraint: []*interfacedefinition.Constraint{
															{
																XMLName: xml.Name{
																	Local: `constraint`},
																Regex: []string{
																	`(bond|br|dum|en|ersp|eth|gnv|ifb|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo`},
																Validator: []*interfacedefinition.Validator{
																	{
																		XMLName: xml.Name{
																			Local: `validator`},
																		NameAttr:     `file-path --lookup-path /sys/class/net --directory`,
																		ArgumentAttr: ``}}}},
														ValueHelp: []*interfacedefinition.ValueHelp{
															{
																XMLName: xml.Name{
																	Local: `valueHelp`},
																Format:      `txt`,
																Description: `Interface name`}},
														CompletionHelp: []*interfacedefinition.CompletionHelp{
															{
																XMLName: xml.Name{
																	Local: `completionHelp`},
																Script: []string{
																	`${vyos_completion_dir}/list_interfaces`}}},
														Multi: []*interfacedefinition.Multi{
															{
																XMLName: xml.Name{
																	Local: `multi`}}},
														KeepChildOrder: []*interfacedefinition.KeepChildOrder(nil)}}}}}}}},
						LeafNode: []*interfacedefinition.LeafNode(nil)}}}}}
}
