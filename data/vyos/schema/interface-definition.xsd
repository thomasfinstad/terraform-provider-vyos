<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <!--
       interface_definition.rnc: VyConf reference tree XML grammar

       Copyright (C) 2014. 2017 VyOS maintainers and contributors <maintainers@vyos.net>

       This library is free software; you can redistribute it and/or
       modify it under the terms of the GNU Lesser General Public
       License as published by the Free Software Foundation; either
       version 2.1 of the License, or (at your option) any later version.

       This library is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
       Lesser General Public License for more details.

       You should have received a copy of the GNU Lesser General Public
       License along with this library; if not, write to the Free Software
       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
       USA
  -->
  <!--
    The language of this file is compact form RELAX-NG
    http://relaxng.org/compact-tutorial-20030326.htm
    (unless converted to XML, then just RELAX-NG :)
  -->
  <!-- Interface definition starts with interfaceDefinition tag that may contain node tags -->
  <xs:element name="interfaceDefinition">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="syntaxVersion"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="node"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- interfaceDefinition may contain syntax version attribute lists. -->
  <xs:element name="syntaxVersion">
    <xs:complexType>
      <xs:attributeGroup ref="componentAttr"/>
      <xs:attributeGroup ref="versionAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    node tag may contain node, leafNode, or tagNode tags
    Those are intermediate configuration nodes that may only contain
    other nodes and must not have values
  -->
  <xs:element name="node">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="properties"/>
        <xs:element ref="children"/>
      </xs:choice>
      <xs:attribute name="owner"/>
      <xs:attributeGroup ref="nodeNameAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    Tag nodes are containers for nodes without predefined names, like network interfaces
    or user names (e.g. "interfaces ethernet eth0" or "user jrandomhacker")
    Tag nodes may contain node and leafNode elements, and also nameConstraint tags
    They must not contain other tag nodes
  -->
  <xs:element name="tagNode">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="defaultValue"/>
        <xs:element ref="properties"/>
        <xs:element ref="children"/>
      </xs:choice>
      <xs:attribute name="owner"/>
      <xs:attributeGroup ref="nodeNameAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    Leaf nodes are terminal configuration nodes that can't have children,
    but can have values.
    Leaf node may contain one or more valueConstraint tags
    If multiple valueConstraint tags are used, they work a logical OR
    Leaf nodes can have "multi" attribute that indicated that it can have more than one value
    It can also have a default value
  -->
  <xs:element name="leafNode">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="defaultValue"/>
        <xs:element ref="properties"/>
      </xs:choice>
      <xs:attribute name="owner"/>
      <xs:attributeGroup ref="nodeNameAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    Default value for leaf node, if applicable
    It is used to generate default node state representation
  -->
  <xs:element name="defaultValue" type="xs:string"/>
  <!-- Normal and tag nodes may have children -->
  <xs:element name="children">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="node"/>
        <xs:element ref="tagNode"/>
        <xs:element ref="leafNode"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    Nodes may have properties
    For simplicity, any property is allowed in any node,
    but whether they are used or not is implementation-defined

    Leaf nodes may differ in number of values that can be
    associated with them.
    By default, a leaf node can have only one value.
    "multi" tag means a node can have one or more values,
    "valueless" means it can have no values at all.
    "hidden" means node visibility can be toggled, eg 'dangerous' commands,
    "secret" allows a node to hide its value from unprivileged users.

    "priority" is used to influence node processing order for nodes
    with exact same dependencies and in compatibility modes.
  -->
  <xs:element name="properties">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="help"/>
        <xs:element ref="constraint"/>
        <xs:element ref="constraintGroup"/>
        <xs:element ref="valueHelp"/>
        <xs:element ref="constraintErrorMessage"/>
        <xs:element ref="completionHelp"/>
        <xs:element ref="valueless"/>
        <xs:element ref="multi"/>
        <xs:element ref="hidden"/>
        <xs:element ref="secret"/>
        <xs:element ref="priority"/>
        <xs:element ref="keepChildOrder"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="constraintErrorMessage" type="xs:string"/>
  <xs:element name="valueless">
    <xs:complexType/>
  </xs:element>
  <xs:element name="multi">
    <xs:complexType/>
  </xs:element>
  <xs:element name="hidden">
    <xs:complexType/>
  </xs:element>
  <xs:element name="secret">
    <xs:complexType/>
  </xs:element>
  <xs:element name="priority" type="xs:string"/>
  <xs:element name="keepChildOrder">
    <xs:complexType/>
  </xs:element>
  <xs:attributeGroup name="componentAttr">
    <xs:attribute name="component" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="versionAttr">
    <xs:attribute name="version" use="required"/>
  </xs:attributeGroup>
  <!-- All nodes must have "name" attribute -->
  <xs:attributeGroup name="nodeNameAttr">
    <xs:attribute name="name" use="required"/>
  </xs:attributeGroup>
  <!--
    Ordinary nodes and tag nodes can have "owner" attribute.
    Owner is the component that is notified when node changes.
  -->
  <xs:attributeGroup name="ownerAttr">
    <xs:attribute name="owner" use="required"/>
  </xs:attributeGroup>
  <!--
    Tag and leaf nodes may have constraints on their names and values
    (respectively).
    When multiple constraints are listed, they work as logical OR
  -->
  <xs:element name="constraint">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="regex"/>
        <xs:element ref="validator"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="regex" type="xs:string"/>
  <!--
    Tag and leaf nodes may have constraintGroups on their names and
    values (respectively).
    When multiple constraints are listed within a group, they work as
    logical AND
  -->
  <xs:element name="constraintGroup">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="regex"/>
        <xs:element ref="validator"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- A constraint may also use an external validator rather than regex -->
  <xs:element name="validator">
    <xs:complexType>
      <xs:attribute name="name" use="required"/>
      <xs:attribute name="argument"/>
    </xs:complexType>
  </xs:element>
  <!-- help tags contains brief description of the purpose of the node -->
  <xs:element name="help" type="xs:string"/>
  <!-- valueHelp tags contain information about acceptable value format -->
  <xs:element name="valueHelp">
    <xs:complexType>
      <xs:all>
        <xs:element ref="format"/>
        <xs:element ref="description"/>
      </xs:all>
    </xs:complexType>
  </xs:element>
  <xs:element name="format" type="xs:string"/>
  <xs:element name="description" type="xs:string"/>
  <!--
    completionHelp tags contain information about allowed values of a node that is used for generating
    tab completion in the CLI frontend and drop-down lists in GUI frontends
    It is only meaninful for leaf nodes
    Allowed values can be given as a fixed list of values (e.g. <list>foo bar baz</list>),
    as a configuration path (e.g. <path>interfaces ethernet</path>),
    or as a path to a script file that generates the list (e.g. <script>/usr/lib/foo/list-things</script>
  -->
  <xs:element name="completionHelp">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="list"/>
        <xs:element ref="path"/>
        <xs:element ref="script"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="list" type="xs:string"/>
  <xs:element name="path" type="xs:string"/>
  <xs:element name="script" type="xs:string"/>
</xs:schema>
