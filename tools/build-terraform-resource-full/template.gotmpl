{{define "package"}}
// Code generated by {{.caller}}. DO NOT EDIT.

package {{.pkg}}
{{end}}

{{define "imports"}}
import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)
{{end}}

{{define "validate"}}
// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &{{.BaseNameG}}{}
// var _ resource.ResourceWithImportState = &{{.BaseNameG}}{}
{{end}}

{{define "resource"}}
// {{.BaseNameG}} defines the resource implementation.
type {{.BaseNameG}} struct {
	client   *http.Client
	vyosPath []string
}
{{end}}

{{define "tagNodeResourcemodel"}}
// {{.BaseNameG}}Model describes the resource data model.
type {{.BaseNameG}}Model struct {
	ID         types.String `tfsdk:"id"`

	Identifier types.String `tfsdk:"identifier"`

	{{with .GetChildren }}
		{{range .TagNodes -}}
			{{.BaseNameCG}} types.Map `tfsdk:"{{.BaseNameS}}"`
		{{end}}
		{{range .Nodes -}}
			{{.BaseNameCG}} types.String `tfsdk:"{{.BaseNameS}}"`
		{{end}}
		{{range .LeafNodes -}}
			{{.BaseNameCG}} types.String `tfsdk:"{{.BaseNameS}}"`
		{{end}}
	{{end}}
}
{{end}}

{{define "metadata"}}
// Metadata method to define the resource type name.
func (r *{{.BaseNameG}}) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{.BaseNameS}}"
}
{{end}}

{{define "instantiation"}}
// {{.BaseNameG}}Resource method to return the example resource reference
func {{.BaseNameG}}Resource() resource.Resource {
	return &{{.BaseNameG}}{
		vyosPath: []string{
			{{range .VyosPath -}}
				"{{.}}",
			{{end}}
		},
	}
}
{{end}}

{{define "tagNodeSchema"}}
// Schema method to define the schema for any resource configuration, plan, and state data.
func (r *{{.BaseNameG}}) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `{{.AncestorDescription}}`,

		Attributes: map[string]schema.Attribute{
			"identifier": schema.StringAttribute{
			Required:            true,
			MarkdownDescription: `{{.Description}}`,
			// Validators:          []validator.String(nil),
		},

			{{with .GetChildren }}
				{{range .TagNodes }} {{template "tagnode" . }} {{end}}
				{{range .LeafNodes }} {{template "leafnode" . }} {{end}}
				{{range .Nodes }} {{template "node" . }} {{end}}
			{{end}}
		},
	}
}
{{end}}

{{define "leafnode"}}
// TODO handle non-string types
"{{.BaseNameS}}": schema.StringAttribute{
	// CustomType:          basetypes.StringTypable(nil),
	// Required:            false,
	Optional:            true,
	// Sensitive:           false,
	// Description:         "",
	MarkdownDescription: `{{.Description}}`,
	// DeprecationMessage:  "",
	// TODO Recreate some of vyos validators for use in leafnodes
	// Validators:          []validator.String(nil),
	// PlanModifiers:       []planmodifier.String(nil),
	{{if .Default }}
	Default:             stringdefault.StaticString({{.Default}}),
	Computed:            true,
	{{end}}
},
{{end}}

{{define "tagnode"}}
"{{.BaseNameS}}": schema.MapNestedAttribute{
	NestedObject: schema.NestedAttributeObject{
		Attributes: map[string]schema.Attribute{
			{{with .GetChildren }}
				{{range .TagNodes }} {{template "tagnode" . }} {{end}}
				{{range .LeafNodes }} {{template "leafnode" . }} {{end}}
				{{range .Nodes }} {{template "node" . }} {{end}}
			{{end}}
			// CustomType:    basetypes.ObjectTypable(nil),
			// Validators:    []validator.Object(nil),
			// PlanModifiers: []planmodifier.Object(nil),
		},
	},
	// CustomType:          basetypes.MapTypable(nil),
	// Required:            false,
	Optional:            true,
	// Computed:            false,
	// Sensitive:           false,
	// Description:         "",
	MarkdownDescription: `{{.Description}}`,
	// DeprecationMessage:  "",
	// Validators:          []validator.Map(nil),
	// PlanModifiers:       []planmodifier.Map(nil),
	// TODO investigate if tagnode defaults can be handled
	//Default:             defaults.Map(nil),
},
{{end}}

{{define "node"}}
"{{.BaseNameS}}": schema.SingleNestedAttribute{
	Attributes: map[string]schema.Attribute{
		{{with .GetChildren }}
			{{range .TagNodes }} {{template "tagnode" . }} {{end}}
			{{range .LeafNodes }} {{template "leafnode" . }} {{end}}
			{{range .Nodes }} {{template "node" . }} {{end}}
		{{end}}
	},
	// CustomType:          basetypes.MapTypable(nil),
	// Required:            false,
	Optional:            true,
	// Computed:            false,
	// Sensitive:           false,
	// Description:         "",
	MarkdownDescription: `{{.Description}}`,
	// DeprecationMessage:  "",
	// Validators:          []validator.Map(nil),
	// PlanModifiers:       []planmodifier.Map(nil),
	// TODO investigate if node defaults can be handled
	// Default:             defaults.Map(nil),
},
{{end}}

{{define "crud"}}
// Create method to define the logic which creates the resource and sets its initial Terraform state.
func (r *{{.BaseNameG}}) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *{{.BaseNameG}}Model

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
	//     return
	// }

	// For the purposes of this example code, hardcoding a response value to
	// save into the Terraform state.
	data.ID = types.StringValue("example-id")

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Read method to define the logic which refreshes the Terraform state for the resource.
func (r *{{.BaseNameG}}) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *{{.BaseNameG}}Model

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
func (r *{{.BaseNameG}}) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *{{.BaseNameG}}Model

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update example, got error: %s", err))
	//     return
	// }

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
func (r *{{.BaseNameG}}) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *{{.BaseNameG}}Model

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If applicable, this is a great opportunity to initialize any necessary
	// provider client data and make a call using it.
	// httpResp, err := r.client.Do(httpReq)
	// if err != nil {
	//     resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete example, got error: %s", err))
	//     return
	// }
}
{{end}}

{{define "unused"}}

// Configure method which the framework will automatically call so provider developers have the opportunity to setup any necessary provider-level data or clients in the Resource type.
func (r *ExampleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*http.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}







// ImportState enables provider control over the ImportResourceState RPC.
func (r *ExampleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
{{end}}
